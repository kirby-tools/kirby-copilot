var Dd = Object.defineProperty;
var S1 = (t) => {
  throw TypeError(t);
};
var Pd = (t, e, n) => e in t ? Dd(t, e, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[e] = n;
var Ye = (t, e, n) => Pd(t, typeof e != "symbol" ? e + "" : e, n), ic = (t, e, n) => e.has(t) || S1("Cannot " + n);
var ce = (t, e, n) => (ic(t, e, "read from private field"), n ? n.call(t) : e.get(t)), Ee = (t, e, n) => e.has(t) ? S1("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(t) : e.set(t, n), ct = (t, e, n, i) => (ic(t, e, "write to private field"), i ? i.call(t, n) : e.set(t, n), n), J = (t, e, n) => (ic(t, e, "access private method"), n);
const Nd = typeof process == "object" && process + "" == "[object process]" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== "browser"), Bs = [1e-3, 0, 0, 1e-3, 0, 0], Ni = 1.35, to = 0.35, C1 = to / Ni, un = {
  ANY: 1,
  DISPLAY: 2,
  PRINT: 4,
  SAVE: 8,
  ANNOTATIONS_FORMS: 16,
  ANNOTATIONS_DISABLE: 64,
  IS_EDITING: 128,
  OPLIST: 256
}, of = "pdfjs_internal_editor_", fi = {
  FREETEXT: 3,
  HIGHLIGHT: 9,
  STAMP: 13,
  INK: 15,
  SIGNATURE: 101
}, A1 = {
  PRINT: 4,
  MODIFY_CONTENTS: 8,
  COPY: 16,
  MODIFY_ANNOTATIONS: 32,
  FILL_INTERACTIVE_FORMS: 256,
  COPY_FOR_ACCESSIBILITY: 512,
  ASSEMBLE: 1024,
  PRINT_HIGH_QUALITY: 2048
}, cf = {
  FILL: 0,
  ADD_TO_PATH_FLAG: 4
}, Gt = {
  GRAYSCALE_1BPP: 1,
  RGB_24BPP: 2,
  RGBA_32BPP: 3
}, Xt = {
  TEXT: 1,
  LINK: 2,
  FREETEXT: 3,
  LINE: 4,
  SQUARE: 5,
  CIRCLE: 6,
  POLYGON: 7,
  POLYLINE: 8,
  HIGHLIGHT: 9,
  UNDERLINE: 10,
  SQUIGGLY: 11,
  STRIKEOUT: 12,
  STAMP: 13,
  CARET: 14,
  INK: 15,
  POPUP: 16,
  FILEATTACHMENT: 17,
  WIDGET: 20
}, Mc = {
  GROUP: "Group",
  REPLY: "R"
}, _t = {
  INVISIBLE: 1,
  HIDDEN: 2,
  PRINT: 4,
  NOROTATE: 16,
  NOVIEW: 32,
  LOCKED: 128,
  LOCKEDCONTENTS: 512
}, ii = {
  READONLY: 1,
  REQUIRED: 2,
  MULTILINE: 4096,
  PASSWORD: 8192,
  RADIO: 32768,
  PUSHBUTTON: 65536,
  COMBO: 131072,
  FILESELECT: 1048576,
  MULTISELECT: 2097152,
  DONOTSCROLL: 8388608,
  COMB: 16777216
}, Gs = {
  SOLID: 1,
  DASHED: 2,
  BEVELED: 3,
  INSET: 4,
  UNDERLINE: 5
}, lf = {
  E: "Mouse Enter",
  X: "Mouse Exit",
  D: "Mouse Down",
  U: "Mouse Up",
  Fo: "Focus",
  Bl: "Blur",
  PO: "PageOpen",
  PC: "PageClose",
  PV: "PageVisible",
  PI: "PageInvisible",
  K: "Keystroke",
  F: "Format",
  V: "Validate",
  C: "Calculate"
}, Od = {
  WC: "WillClose",
  WS: "WillSave",
  DS: "DidSave",
  WP: "WillPrint",
  DP: "DidPrint"
}, Ld = {
  O: "PageOpen",
  C: "PageClose"
}, b0 = {
  WARNINGS: 1,
  INFOS: 5
}, A = {
  dependency: 1,
  setLineWidth: 2,
  setLineCap: 3,
  setLineJoin: 4,
  setMiterLimit: 5,
  setDash: 6,
  setRenderingIntent: 7,
  setFlatness: 8,
  setGState: 9,
  save: 10,
  restore: 11,
  transform: 12,
  moveTo: 13,
  lineTo: 14,
  curveTo: 15,
  curveTo2: 16,
  curveTo3: 17,
  closePath: 18,
  rectangle: 19,
  stroke: 20,
  closeStroke: 21,
  fill: 22,
  eoFill: 23,
  fillStroke: 24,
  eoFillStroke: 25,
  closeFillStroke: 26,
  closeEOFillStroke: 27,
  endPath: 28,
  clip: 29,
  eoClip: 30,
  beginText: 31,
  endText: 32,
  setCharSpacing: 33,
  setWordSpacing: 34,
  setHScale: 35,
  setLeading: 36,
  setFont: 37,
  setTextRenderingMode: 38,
  setTextRise: 39,
  moveText: 40,
  setLeadingMoveText: 41,
  setTextMatrix: 42,
  nextLine: 43,
  showText: 44,
  showSpacedText: 45,
  nextLineShowText: 46,
  nextLineSetSpacingShowText: 47,
  setCharWidth: 48,
  setCharWidthAndBounds: 49,
  setStrokeColorSpace: 50,
  setFillColorSpace: 51,
  setStrokeColor: 52,
  setStrokeColorN: 53,
  setFillColor: 54,
  setFillColorN: 55,
  setStrokeGray: 56,
  setFillGray: 57,
  setStrokeRGBColor: 58,
  setFillRGBColor: 59,
  setStrokeCMYKColor: 60,
  setFillCMYKColor: 61,
  shadingFill: 62,
  beginInlineImage: 63,
  beginImageData: 64,
  endInlineImage: 65,
  paintXObject: 66,
  markPoint: 67,
  markPointProps: 68,
  beginMarkedContent: 69,
  beginMarkedContentProps: 70,
  endMarkedContent: 71,
  beginCompat: 72,
  endCompat: 73,
  paintFormXObjectBegin: 74,
  paintFormXObjectEnd: 75,
  beginGroup: 76,
  endGroup: 77,
  beginAnnotation: 80,
  endAnnotation: 81,
  paintImageMaskXObject: 83,
  paintImageMaskXObjectGroup: 84,
  paintImageXObject: 85,
  paintInlineImageXObject: 86,
  paintInlineImageXObjectGroup: 87,
  paintImageXObjectRepeat: 88,
  paintImageMaskXObjectRepeat: 89,
  paintSolidColorImageMask: 90,
  constructPath: 91,
  setStrokeTransparent: 92,
  setFillTransparent: 93,
  rawFillPath: 94
}, Ut = {
  moveTo: 0,
  lineTo: 1,
  curveTo: 2,
  closePath: 3
}, v1 = {
  NEED_PASSWORD: 1,
  INCORRECT_PASSWORD: 2
};
let Lo = b0.WARNINGS;
function _d(t) {
  Number.isInteger(t) && (Lo = t);
}
function Ud() {
  return Lo;
}
function Ge(t) {
  Lo >= b0.INFOS && console.log(`Info: ${t}`);
}
function I(t) {
  Lo >= b0.WARNINGS && console.log(`Warning: ${t}`);
}
function Ke(t) {
  throw new Error(t);
}
function zt(t, e) {
  t || Ke(e);
}
function jd(t) {
  switch (t == null ? void 0 : t.protocol) {
    case "http:":
    case "https:":
    case "ftp:":
    case "mailto:":
    case "tel:":
      return !0;
    default:
      return !1;
  }
}
function no(t, e = null, n = null) {
  if (!t)
    return null;
  if (n && typeof t == "string") {
    if (n.addDefaultProtocol && t.startsWith("www.")) {
      const s = t.match(/\./g);
      (s == null ? void 0 : s.length) >= 2 && (t = `http://${t}`);
    }
    if (n.tryConvertEncoding)
      try {
        t = k0(t);
      } catch {
      }
  }
  const i = e ? URL.parse(t, e) : URL.parse(t);
  return jd(i) ? i : null;
}
function Q(t, e, n, i = !1) {
  return Object.defineProperty(t, e, {
    value: n,
    enumerable: !i,
    configurable: !0,
    writable: !1
  }), n;
}
const bn = function() {
  function e(n, i) {
    this.message = n, this.name = i;
  }
  return e.prototype = new Error(), e.constructor = e, e;
}();
class w0 extends bn {
  constructor(e, n) {
    super(e, "PasswordException"), this.code = n;
  }
}
class sc extends bn {
  constructor(e, n) {
    super(e, "UnknownErrorException"), this.details = n;
  }
}
class y0 extends bn {
  constructor(e) {
    super(e, "InvalidPDFException");
  }
}
class I1 extends bn {
  constructor(e, n, i) {
    super(e, "ResponseException"), this.status = n, this.missing = i;
  }
}
class j extends bn {
  constructor(e) {
    super(e, "FormatError");
  }
}
class Jt extends bn {
  constructor(e) {
    super(e, "AbortException");
  }
}
function Cn(t) {
  (typeof t != "object" || (t == null ? void 0 : t.length) === void 0) && Ke("Invalid argument for bytesToString");
  const e = t.length, n = 8192;
  if (e < n)
    return String.fromCharCode.apply(null, t);
  const i = [];
  for (let s = 0; s < e; s += n) {
    const a = Math.min(s + n, e), r = t.subarray(s, a);
    i.push(String.fromCharCode.apply(null, r));
  }
  return i.join("");
}
function en(t) {
  typeof t != "string" && Ke("Invalid argument for stringToBytes");
  const e = t.length, n = new Uint8Array(e);
  for (let i = 0; i < e; ++i)
    n[i] = t.charCodeAt(i) & 255;
  return n;
}
function Qt(t) {
  return String.fromCharCode(t >> 24 & 255, t >> 16 & 255, t >> 8 & 255, t & 255);
}
function Ul(t) {
  return Object.keys(t).length;
}
function qd() {
  const t = new Uint8Array(4);
  return t[0] = 1, new Uint32Array(t.buffer, 0, 1)[0] === 1;
}
function Hd() {
  try {
    return new Function(""), !0;
  } catch {
    return !1;
  }
}
class An {
  static get isLittleEndian() {
    return Q(this, "isLittleEndian", qd());
  }
  static get isEvalSupported() {
    return Q(this, "isEvalSupported", Hd());
  }
  static get isOffscreenCanvasSupported() {
    return Q(this, "isOffscreenCanvasSupported", typeof OffscreenCanvas < "u");
  }
  static get isImageDecoderSupported() {
    return Q(this, "isImageDecoderSupported", typeof ImageDecoder < "u");
  }
  static get platform() {
    const {
      platform: e,
      userAgent: n
    } = navigator;
    return Q(this, "platform", {
      isAndroid: n.includes("Android"),
      isLinux: e.includes("Linux"),
      isMac: e.includes("Mac"),
      isWindows: e.includes("Win"),
      isFirefox: n.includes("Firefox")
    });
  }
  static get isCSSRoundSupported() {
    var e, n;
    return Q(this, "isCSSRoundSupported", (n = (e = globalThis.CSS) == null ? void 0 : e.supports) == null ? void 0 : n.call(e, "width: round(1.5px, 1px)"));
  }
}
const la = Array.from(Array(256).keys(), (t) => t.toString(16).padStart(2, "0"));
var Ui, Ur, Dc;
class tt {
  static makeHexColor(e, n, i) {
    return `#${la[e]}${la[n]}${la[i]}`;
  }
  static scaleMinMax(e, n) {
    let i;
    e[0] ? (e[0] < 0 && (i = n[0], n[0] = n[2], n[2] = i), n[0] *= e[0], n[2] *= e[0], e[3] < 0 && (i = n[1], n[1] = n[3], n[3] = i), n[1] *= e[3], n[3] *= e[3]) : (i = n[0], n[0] = n[1], n[1] = i, i = n[2], n[2] = n[3], n[3] = i, e[1] < 0 && (i = n[1], n[1] = n[3], n[3] = i), n[1] *= e[1], n[3] *= e[1], e[2] < 0 && (i = n[0], n[0] = n[2], n[2] = i), n[0] *= e[2], n[2] *= e[2]), n[0] += e[4], n[1] += e[5], n[2] += e[4], n[3] += e[5];
  }
  static transform(e, n) {
    return [e[0] * n[0] + e[2] * n[1], e[1] * n[0] + e[3] * n[1], e[0] * n[2] + e[2] * n[3], e[1] * n[2] + e[3] * n[3], e[0] * n[4] + e[2] * n[5] + e[4], e[1] * n[4] + e[3] * n[5] + e[5]];
  }
  static applyTransform(e, n, i = 0) {
    const s = e[i], a = e[i + 1];
    e[i] = s * n[0] + a * n[2] + n[4], e[i + 1] = s * n[1] + a * n[3] + n[5];
  }
  static applyTransformToBezier(e, n, i = 0) {
    const s = n[0], a = n[1], r = n[2], o = n[3], c = n[4], l = n[5];
    for (let h = 0; h < 6; h += 2) {
      const f = e[i + h], u = e[i + h + 1];
      e[i + h] = f * s + u * r + c, e[i + h + 1] = f * a + u * o + l;
    }
  }
  static applyInverseTransform(e, n) {
    const i = e[0], s = e[1], a = n[0] * n[3] - n[1] * n[2];
    e[0] = (i * n[3] - s * n[2] + n[2] * n[5] - n[4] * n[3]) / a, e[1] = (-i * n[1] + s * n[0] + n[4] * n[1] - n[5] * n[0]) / a;
  }
  static axialAlignedBoundingBox(e, n, i) {
    const s = n[0], a = n[1], r = n[2], o = n[3], c = n[4], l = n[5], h = e[0], f = e[1], u = e[2], d = e[3];
    let x = s * h + c, g = x, m = s * u + c, p = m, b = o * f + l, w = b, y = o * d + l, k = y;
    if (a !== 0 || r !== 0) {
      const S = a * h, C = a * u, T = r * f, F = r * d;
      x += T, p += T, m += F, g += F, b += S, k += S, y += C, w += C;
    }
    i[0] = Math.min(i[0], x, m, g, p), i[1] = Math.min(i[1], b, y, w, k), i[2] = Math.max(i[2], x, m, g, p), i[3] = Math.max(i[3], b, y, w, k);
  }
  static inverseTransform(e) {
    const n = e[0] * e[3] - e[1] * e[2];
    return [e[3] / n, -e[1] / n, -e[2] / n, e[0] / n, (e[2] * e[5] - e[4] * e[3]) / n, (e[4] * e[1] - e[5] * e[0]) / n];
  }
  static singularValueDecompose2dScale(e, n) {
    const i = e[0], s = e[1], a = e[2], r = e[3], o = i ** 2 + s ** 2, c = i * a + s * r, l = a ** 2 + r ** 2, h = (o + l) / 2, f = Math.sqrt(h ** 2 - (o * l - c ** 2));
    n[0] = Math.sqrt(h + f || 1), n[1] = Math.sqrt(h - f || 1);
  }
  static normalizeRect(e) {
    const n = e.slice(0);
    return e[0] > e[2] && (n[0] = e[2], n[2] = e[0]), e[1] > e[3] && (n[1] = e[3], n[3] = e[1]), n;
  }
  static intersect(e, n) {
    const i = Math.max(Math.min(e[0], e[2]), Math.min(n[0], n[2])), s = Math.min(Math.max(e[0], e[2]), Math.max(n[0], n[2]));
    if (i > s)
      return null;
    const a = Math.max(Math.min(e[1], e[3]), Math.min(n[1], n[3])), r = Math.min(Math.max(e[1], e[3]), Math.max(n[1], n[3]));
    return a > r ? null : [i, a, s, r];
  }
  static pointBoundingBox(e, n, i) {
    i[0] = Math.min(i[0], e), i[1] = Math.min(i[1], n), i[2] = Math.max(i[2], e), i[3] = Math.max(i[3], n);
  }
  static rectBoundingBox(e, n, i, s, a) {
    a[0] = Math.min(a[0], e, i), a[1] = Math.min(a[1], n, s), a[2] = Math.max(a[2], e, i), a[3] = Math.max(a[3], n, s);
  }
  static bezierBoundingBox(e, n, i, s, a, r, o, c, l) {
    l[0] = Math.min(l[0], e, o), l[1] = Math.min(l[1], n, c), l[2] = Math.max(l[2], e, o), l[3] = Math.max(l[3], n, c), J(this, Ui, Dc).call(this, e, i, a, o, n, s, r, c, 3 * (-e + 3 * (i - a) + o), 6 * (e - 2 * i + a), 3 * (i - e), l), J(this, Ui, Dc).call(this, e, i, a, o, n, s, r, c, 3 * (-n + 3 * (s - r) + c), 6 * (n - 2 * s + r), 3 * (s - n), l);
  }
}
Ui = new WeakSet(), Ur = function(e, n, i, s, a, r, o, c, l, h) {
  if (l <= 0 || l >= 1)
    return;
  const f = 1 - l, u = l * l, d = u * l, x = f * (f * (f * e + 3 * l * n) + 3 * u * i) + d * s, g = f * (f * (f * a + 3 * l * r) + 3 * u * o) + d * c;
  h[0] = Math.min(h[0], x), h[1] = Math.min(h[1], g), h[2] = Math.max(h[2], x), h[3] = Math.max(h[3], g);
}, Dc = function(e, n, i, s, a, r, o, c, l, h, f, u) {
  if (Math.abs(l) < 1e-12) {
    Math.abs(h) >= 1e-12 && J(this, Ui, Ur).call(this, e, n, i, s, a, r, o, c, -f / h, u);
    return;
  }
  const d = h ** 2 - 4 * f * l;
  if (d < 0)
    return;
  const x = Math.sqrt(d), g = 2 * l;
  J(this, Ui, Ur).call(this, e, n, i, s, a, r, o, c, (-h + x) / g, u), J(this, Ui, Ur).call(this, e, n, i, s, a, r, o, c, (-h - x) / g, u);
}, Ee(tt, Ui);
const Gd = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 728, 711, 710, 729, 733, 731, 730, 732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8226, 8224, 8225, 8230, 8212, 8211, 402, 8260, 8249, 8250, 8722, 8240, 8222, 8220, 8221, 8216, 8217, 8218, 8482, 64257, 64258, 321, 338, 352, 376, 381, 305, 322, 339, 353, 382, 0, 8364];
function Ze(t, e = !1) {
  if (t[0] >= "ï") {
    let i;
    if (t[0] === "þ" && t[1] === "ÿ" ? (i = "utf-16be", t.length % 2 === 1 && (t = t.slice(0, -1))) : t[0] === "ÿ" && t[1] === "þ" ? (i = "utf-16le", t.length % 2 === 1 && (t = t.slice(0, -1))) : t[0] === "ï" && t[1] === "»" && t[2] === "¿" && (i = "utf-8"), i)
      try {
        const s = new TextDecoder(i, {
          fatal: !0
        }), a = en(t), r = s.decode(a);
        return e || !r.includes("\x1B") ? r : r.replaceAll(/\x1b[^\x1b]*(?:\x1b|$)/g, "");
      } catch (s) {
        I(`stringToPDFString: "${s}".`);
      }
  }
  const n = [];
  for (let i = 0, s = t.length; i < s; i++) {
    const a = t.charCodeAt(i);
    if (!e && a === 27) {
      for (; ++i < s && t.charCodeAt(i) !== 27; )
        ;
      continue;
    }
    const r = Gd[a];
    n.push(r ? String.fromCharCode(r) : t.charAt(i));
  }
  return n.join("");
}
function k0(t) {
  return decodeURIComponent(escape(t));
}
function Pc(t) {
  return unescape(encodeURIComponent(t));
}
function S0(t, e) {
  if (t.length !== e.length)
    return !1;
  for (let n = 0, i = t.length; n < i; n++)
    if (t[n] !== e[n])
      return !1;
  return !0;
}
function ji(t = /* @__PURE__ */ new Date()) {
  return [t.getUTCFullYear().toString(), (t.getUTCMonth() + 1).toString().padStart(2, "0"), t.getUTCDate().toString().padStart(2, "0"), t.getUTCHours().toString().padStart(2, "0"), t.getUTCMinutes().toString().padStart(2, "0"), t.getUTCSeconds().toString().padStart(2, "0")].join("");
}
let ac = null, T1 = null;
function $d(t) {
  return ac || (ac = /([\u00a0\u00b5\u037e\u0eb3\u2000-\u200a\u202f\u2126\ufb00-\ufb04\ufb06\ufb20-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufba1\ufba4-\ufba9\ufbae-\ufbb1\ufbd3-\ufbdc\ufbde-\ufbe7\ufbea-\ufbf8\ufbfc-\ufbfd\ufc00-\ufc5d\ufc64-\ufcf1\ufcf5-\ufd3d\ufd88\ufdf4\ufdfa-\ufdfb\ufe71\ufe77\ufe79\ufe7b\ufe7d]+)|(\ufb05+)/gu, T1 = /* @__PURE__ */ new Map([["ﬅ", "ſt"]])), t.replaceAll(ac, (e, n, i) => n ? n.normalize("NFKC") : T1.get(i));
}
const zd = "pdfjs_internal_id_";
function Wd(t, e, n) {
  if (!Array.isArray(n) || n.length < 2)
    return !1;
  const [i, s, ...a] = n;
  if (!t(i) && !Number.isInteger(i) || !e(s))
    return !1;
  const r = a.length;
  let o = !0;
  switch (s.name) {
    case "XYZ":
      if (r < 2 || r > 3)
        return !1;
      break;
    case "Fit":
    case "FitB":
      return r === 0;
    case "FitH":
    case "FitBH":
    case "FitV":
    case "FitBV":
      if (r > 1)
        return !1;
      break;
    case "FitR":
      if (r !== 4)
        return !1;
      o = !1;
      break;
    default:
      return !1;
  }
  for (const c of a)
    if (!(typeof c == "number" || o && c === null))
      return !1;
  return !0;
}
function Wt(t, e, n) {
  return Math.min(Math.max(t, e), n);
}
function F1(t) {
  return Uint8Array.prototype.toHex ? t.toHex() : Array.from(t, (e) => la[e]).join("");
}
function Vd(t) {
  return Uint8Array.fromBase64 ? Uint8Array.fromBase64(t) : en(atob(t));
}
typeof Promise.try != "function" && (Promise.try = function(t, ...e) {
  return new Promise((n) => {
    n(t(...e));
  });
});
typeof Math.sumPrecise != "function" && (Math.sumPrecise = function(t) {
  return t.reduce((e, n) => e + n, 0);
});
const Xd = Symbol("CIRCULAR_REF"), $t = Symbol("EOF");
let jr = /* @__PURE__ */ Object.create(null), qr = /* @__PURE__ */ Object.create(null), Ys = /* @__PURE__ */ Object.create(null);
function Kd() {
  jr = /* @__PURE__ */ Object.create(null), qr = /* @__PURE__ */ Object.create(null), Ys = /* @__PURE__ */ Object.create(null);
}
class O {
  constructor(e) {
    this.name = e;
  }
  static get(e) {
    return qr[e] || (qr[e] = new O(e));
  }
}
class Mt {
  constructor(e) {
    this.cmd = e;
  }
  static get(e) {
    return jr[e] || (jr[e] = new Mt(e));
  }
}
const hf = function() {
  return hf;
};
class E {
  constructor(e = null) {
    this._map = /* @__PURE__ */ new Map(), this.xref = e, this.objId = null, this.suppressEncryption = !1, this.__nonSerializable__ = hf;
  }
  assignXref(e) {
    this.xref = e;
  }
  get size() {
    return this._map.size;
  }
  get(e, n, i) {
    let s = this._map.get(e);
    return s === void 0 && n !== void 0 && (s = this._map.get(n), s === void 0 && i !== void 0 && (s = this._map.get(i))), s instanceof he && this.xref ? this.xref.fetch(s, this.suppressEncryption) : s;
  }
  async getAsync(e, n, i) {
    let s = this._map.get(e);
    return s === void 0 && n !== void 0 && (s = this._map.get(n), s === void 0 && i !== void 0 && (s = this._map.get(i))), s instanceof he && this.xref ? this.xref.fetchAsync(s, this.suppressEncryption) : s;
  }
  getArray(e, n, i) {
    let s = this._map.get(e);
    if (s === void 0 && n !== void 0 && (s = this._map.get(n), s === void 0 && i !== void 0 && (s = this._map.get(i))), s instanceof he && this.xref && (s = this.xref.fetch(s, this.suppressEncryption)), Array.isArray(s)) {
      s = s.slice();
      for (let a = 0, r = s.length; a < r; a++)
        s[a] instanceof he && this.xref && (s[a] = this.xref.fetch(s[a], this.suppressEncryption));
    }
    return s;
  }
  getRaw(e) {
    return this._map.get(e);
  }
  getKeys() {
    return [...this._map.keys()];
  }
  getRawValues() {
    return [...this._map.values()];
  }
  set(e, n) {
    this._map.set(e, n);
  }
  has(e) {
    return this._map.has(e);
  }
  *[Symbol.iterator]() {
    for (const [e, n] of this._map)
      yield [e, n instanceof he && this.xref ? this.xref.fetch(n, this.suppressEncryption) : n];
  }
  static get empty() {
    const e = new E(null);
    return e.set = (n, i) => {
      Ke("Should not call `set` on the empty dictionary.");
    }, Q(this, "empty", e);
  }
  static merge({
    xref: e,
    dictArray: n,
    mergeSubDicts: i = !1
  }) {
    const s = new E(e), a = /* @__PURE__ */ new Map();
    for (const r of n)
      if (r instanceof E)
        for (const [o, c] of r._map) {
          let l = a.get(o);
          if (l === void 0)
            l = [], a.set(o, l);
          else if (!i || !(c instanceof E))
            continue;
          l.push(c);
        }
    for (const [r, o] of a) {
      if (o.length === 1 || !(o[0] instanceof E)) {
        s._map.set(r, o[0]);
        continue;
      }
      const c = new E(e);
      for (const l of o)
        for (const [h, f] of l._map)
          c._map.has(h) || c._map.set(h, f);
      c.size > 0 && s._map.set(r, c);
    }
    return a.clear(), s.size > 0 ? s : E.empty;
  }
  clone() {
    const e = new E(this.xref);
    for (const n of this.getKeys())
      e.set(n, this.getRaw(n));
    return e;
  }
  delete(e) {
    delete this._map[e];
  }
}
class he {
  constructor(e, n) {
    this.num = e, this.gen = n;
  }
  toString() {
    return this.gen === 0 ? `${this.num}R` : `${this.num}R${this.gen}`;
  }
  static fromString(e) {
    const n = Ys[e];
    if (n)
      return n;
    const i = /^(\d+)R(\d*)$/.exec(e);
    return !i || i[1] === "0" ? null : Ys[e] = new he(parseInt(i[1]), i[2] ? parseInt(i[2]) : 0);
  }
  static get(e, n) {
    const i = n === 0 ? `${e}R` : `${e}R${n}`;
    return Ys[i] || (Ys[i] = new he(e, n));
  }
}
class Dt {
  constructor(e = null) {
    this._set = new Set(e == null ? void 0 : e._set);
  }
  has(e) {
    return this._set.has(e.toString());
  }
  put(e) {
    this._set.add(e.toString());
  }
  remove(e) {
    this._set.delete(e.toString());
  }
  [Symbol.iterator]() {
    return this._set.values();
  }
  clear() {
    this._set.clear();
  }
}
class kn {
  constructor() {
    this._map = /* @__PURE__ */ new Map();
  }
  get size() {
    return this._map.size;
  }
  get(e) {
    return this._map.get(e.toString());
  }
  has(e) {
    return this._map.has(e.toString());
  }
  put(e, n) {
    this._map.set(e.toString(), n);
  }
  putAlias(e, n) {
    this._map.set(e.toString(), this.get(n));
  }
  [Symbol.iterator]() {
    return this._map.values();
  }
  clear() {
    this._map.clear();
  }
  *values() {
    yield* this._map.values();
  }
  *items() {
    for (const [e, n] of this._map)
      yield [he.fromString(e), n];
  }
}
function Tt(t, e) {
  return t instanceof O && (e === void 0 || t.name === e);
}
function Ht(t, e) {
  return t instanceof Mt && (e === void 0 || t.cmd === e);
}
function ff(t, e) {
  return t instanceof E && (e === void 0 || Tt(t.get("Type"), e));
}
function io(t, e) {
  return t.num === e.num && t.gen === e.gen;
}
class je {
  get length() {
    Ke("Abstract getter `length` accessed");
  }
  get isEmpty() {
    Ke("Abstract getter `isEmpty` accessed");
  }
  get isDataLoaded() {
    return Q(this, "isDataLoaded", !0);
  }
  getByte() {
    Ke("Abstract method `getByte` called");
  }
  getBytes(e) {
    Ke("Abstract method `getBytes` called");
  }
  async getImageData(e, n) {
    return this.getBytes(e, n);
  }
  async asyncGetBytes() {
    Ke("Abstract method `asyncGetBytes` called");
  }
  get isAsync() {
    return !1;
  }
  get isAsyncDecoder() {
    return !1;
  }
  get canAsyncDecodeImageFromBuffer() {
    return !1;
  }
  async getTransferableImage() {
    return null;
  }
  peekByte() {
    const e = this.getByte();
    return e !== -1 && this.pos--, e;
  }
  peekBytes(e) {
    const n = this.getBytes(e);
    return this.pos -= n.length, n;
  }
  getUint16() {
    const e = this.getByte(), n = this.getByte();
    return e === -1 || n === -1 ? -1 : (e << 8) + n;
  }
  getInt32() {
    const e = this.getByte(), n = this.getByte(), i = this.getByte(), s = this.getByte();
    return (e << 24) + (n << 16) + (i << 8) + s;
  }
  getByteRange(e, n) {
    Ke("Abstract method `getByteRange` called");
  }
  getString(e) {
    return Cn(this.getBytes(e));
  }
  skip(e) {
    this.pos += e || 1;
  }
  reset() {
    Ke("Abstract method `reset` called");
  }
  moveStart() {
    Ke("Abstract method `moveStart` called");
  }
  makeSubStream(e, n, i = null) {
    Ke("Abstract method `makeSubStream` called");
  }
  getBaseStreams() {
    return null;
  }
}
const uf = /^[1-9]\.\d$/, Nc = 2 ** 31 - 1, Yd = -2147483648, ai = [1, 0, 0, 1, 0, 0], Oc = ["ColorSpace", "ExtGState", "Font", "Pattern", "Properties", "Shading", "XObject"], Lc = ["ExtGState", "Font", "Properties", "XObject"];
function wt(t) {
  let e;
  return function() {
    return t && (e = /* @__PURE__ */ Object.create(null), t(e), t = null), e;
  };
}
class mt extends bn {
  constructor(e, n) {
    super(`Missing data [${e}, ${n})`, "MissingDataException"), this.begin = e, this.end = n;
  }
}
class _c extends bn {
  constructor(e) {
    super(e, "ParserEOFException");
  }
}
class es extends bn {
  constructor(e) {
    super(e, "XRefEntryException");
  }
}
class ha extends bn {
  constructor(e) {
    super(e, "XRefParseException");
  }
}
function df(t) {
  const e = t.length;
  if (e === 0)
    return new Uint8Array(0);
  if (e === 1)
    return new Uint8Array(t[0]);
  let n = 0;
  for (let a = 0; a < e; a++)
    n += t[a].byteLength;
  const i = new Uint8Array(n);
  let s = 0;
  for (let a = 0; a < e; a++) {
    const r = new Uint8Array(t[a]);
    i.set(r, s), s += r.byteLength;
  }
  return i;
}
async function Uc(t) {
  const e = await fetch(t);
  if (!e.ok)
    throw new Error(`Failed to fetch file "${t}" with "${e.statusText}".`);
  return new Uint8Array(await e.arrayBuffer());
}
function Gn({
  dict: t,
  key: e,
  getArray: n = !1,
  stopWhenFound: i = !0
}) {
  let s;
  const a = new Dt();
  for (; t instanceof E && !(t.objId && a.has(t.objId)); ) {
    t.objId && a.put(t.objId);
    const r = n ? t.getArray(e) : t.get(e);
    if (r !== void 0) {
      if (i)
        return r;
      (s || (s = [])).push(r);
    }
    t = t.get("Parent");
  }
  return s;
}
function Zd(t, e, n) {
  const i = new Dt(), s = t, a = {
    dict: null,
    ref: null
  };
  for (; t instanceof E && !i.has(e) && (i.put(e), !t.has("T")); ) {
    if (e = t.getRaw("Parent"), !(e instanceof he))
      return a;
    t = n.fetch(e);
  }
  return t instanceof E && t !== s && (a.dict = t, a.ref = e), a;
}
const rc = ["", "C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM", "", "X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC", "", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"];
function Jd(t, e = !1) {
  zt(Number.isInteger(t) && t > 0, "The number should be a positive integer.");
  const n = "M".repeat(t / 1e3 | 0) + rc[t % 1e3 / 100 | 0] + rc[10 + (t % 100 / 10 | 0)] + rc[20 + t % 10];
  return e ? n.toLowerCase() : n;
}
function jl(t) {
  return t > 0 ? Math.ceil(Math.log2(t)) : 0;
}
function di(t, e) {
  return t[e] << 24 >> 24;
}
function Mi(t, e) {
  return (t[e] << 24 | t[e + 1] << 16) >> 16;
}
function We(t, e) {
  return t[e] << 8 | t[e + 1];
}
function ht(t, e) {
  return (t[e] << 24 | t[e + 1] << 16 | t[e + 2] << 8 | t[e + 3]) >>> 0;
}
function Dn(t) {
  return t === 32 || t === 9 || t === 13 || t === 10;
}
function Qd(t, e) {
  return Array.isArray(t) && t.length === e && t.every((n) => typeof n == "boolean");
}
function xn(t, e) {
  return Array.isArray(t) ? (e === null || t.length === e) && t.every((n) => typeof n == "number") : ArrayBuffer.isView(t) && !(t instanceof BigInt64Array || t instanceof BigUint64Array) && (e === null || t.length === e);
}
function ts(t, e) {
  return xn(t, 6) ? t : e;
}
function jc(t, e) {
  return xn(t, 4) ? t : e;
}
function qi(t, e) {
  return xn(t, 4) ? tt.normalizeRect(t) : e;
}
function xf(t) {
  const e = /(.+)\[(\d+)\]$/;
  return t.split(".").map((n) => {
    const i = n.match(e);
    return i ? {
      name: i[1],
      pos: parseInt(i[2], 10)
    } : {
      name: n,
      pos: 0
    };
  });
}
function ql(t) {
  const e = [];
  let n = 0;
  for (let i = 0, s = t.length; i < s; i++) {
    const a = t.charCodeAt(i);
    (a < 33 || a > 126 || a === 35 || a === 40 || a === 41 || a === 60 || a === 62 || a === 91 || a === 93 || a === 123 || a === 125 || a === 47 || a === 37) && (n < i && e.push(t.substring(n, i)), e.push(`#${a.toString(16)}`), n = i + 1);
  }
  return e.length === 0 ? t : (n < t.length && e.push(t.substring(n, t.length)), e.join(""));
}
function va(t) {
  return t.replaceAll(/([()\\\n\r])/g, (e) => e === `
` ? "\\n" : e === "\r" ? "\\r" : `\\${e}`);
}
function so(t, e, n, i) {
  if (!t)
    return;
  let s = null;
  if (t instanceof he) {
    if (i.has(t))
      return;
    s = t, i.put(s), t = e.fetch(t);
  }
  if (Array.isArray(t))
    for (const a of t)
      so(a, e, n, i);
  else if (t instanceof E) {
    if (Tt(t.get("S"), "JavaScript")) {
      const a = t.get("JS");
      let r;
      a instanceof je ? r = a.getString() : typeof a == "string" && (r = a), r && (r = Ze(r, !0).replaceAll("\0", "")), r && n.push(r);
    }
    so(t.getRaw("Next"), e, n, i);
  }
  s && i.remove(s);
}
function _o(t, e, n) {
  const i = /* @__PURE__ */ Object.create(null), s = Gn({
    dict: e,
    key: "AA",
    stopWhenFound: !1
  });
  if (s)
    for (let a = s.length - 1; a >= 0; a--) {
      const r = s[a];
      if (r instanceof E)
        for (const o of r.getKeys()) {
          const c = n[o];
          if (!c)
            continue;
          const l = r.getRaw(o), h = new Dt(), f = [];
          so(l, t, f, h), f.length > 0 && (i[c] = f);
        }
    }
  if (e.has("A")) {
    const a = e.get("A"), r = new Dt(), o = [];
    so(a, t, o, r), o.length > 0 && (i.Action = o);
  }
  return Ul(i) > 0 ? i : null;
}
const e2 = {
  60: "&lt;",
  62: "&gt;",
  38: "&amp;",
  34: "&quot;",
  39: "&apos;"
};
function* t2(t) {
  for (let e = 0, n = t.length; e < n; e++) {
    const i = t.codePointAt(e);
    i > 55295 && (i < 57344 || i > 65533) && e++, yield i;
  }
}
function fa(t) {
  const e = [];
  let n = 0;
  for (let i = 0, s = t.length; i < s; i++) {
    const a = t.codePointAt(i);
    if (32 <= a && a <= 126) {
      const r = e2[a];
      r && (n < i && e.push(t.substring(n, i)), e.push(r), n = i + 1);
    } else
      n < i && e.push(t.substring(n, i)), e.push(`&#x${a.toString(16).toUpperCase()};`), a > 55295 && (a < 57344 || a > 65533) && i++, n = i + 1;
  }
  return e.length === 0 ? t : (n < t.length && e.push(t.substring(n, t.length)), e.join(""));
}
function qc(t, e = !1) {
  const n = /^("|').*("|')$/.exec(t);
  if (n && n[1] === n[2]) {
    if (new RegExp(`[^\\\\]${n[1]}`).test(t.slice(1, -1)))
      return e && I(`FontFamily contains unescaped ${n[1]}: ${t}.`), !1;
  } else
    for (const i of t.split(/[ \t]+/))
      if (/^(\d|(-(\d|-)))/.test(i) || !/^[\w-\\]+$/.test(i))
        return e && I(`FontFamily contains invalid <custom-ident>: ${t}.`), !1;
  return !0;
}
function n2(t) {
  const e = "14", n = "400", i = /* @__PURE__ */ new Set(["100", "200", "300", "400", "500", "600", "700", "800", "900", "1000", "normal", "bold", "bolder", "lighter"]), {
    fontFamily: s,
    fontWeight: a,
    italicAngle: r
  } = t;
  if (!qc(s, !0))
    return !1;
  const o = a ? a.toString() : "";
  t.fontWeight = i.has(o) ? o : n;
  const c = parseFloat(r);
  return t.italicAngle = isNaN(c) || c < -90 || c > 90 ? e : r.toString(), !0;
}
function gf(t) {
  const e = ["app.launchURL", "window.open", "xfa.host.gotoURL"], i = new RegExp("^\\s*(" + e.join("|").replaceAll(".", "\\.") + `)\\((?:'|")([^'"]*)(?:'|")(?:,\\s*(\\w+)\\)|\\))`, "i").exec(t);
  return i != null && i[2] ? {
    url: i[2],
    newWindow: i[1] === "app.launchURL" && i[3] === "true"
  } : null;
}
function Xe(t) {
  if (Number.isInteger(t))
    return t.toString();
  const e = Math.round(t * 100);
  return e % 100 === 0 ? (e / 100).toString() : e % 10 === 0 ? t.toFixed(1) : t.toFixed(2);
}
function pf(t) {
  if (!t)
    return null;
  const e = /* @__PURE__ */ new Map();
  for (const [n, i] of t) {
    if (!n.startsWith(of))
      continue;
    let s = e.get(i.pageIndex);
    s || (s = [], e.set(i.pageIndex, s)), s.push(i);
  }
  return e.size > 0 ? e : null;
}
function $n(t) {
  return i2(t) ? t : mf(t, !0);
}
function i2(t) {
  return /^[\x00-\x7F]*$/.test(t);
}
function s2(t) {
  const e = [];
  for (let n = 0, i = t.length; n < i; n++) {
    const s = t.charCodeAt(n);
    e.push(la[s >> 8 & 255], la[s & 255]);
  }
  return e.join("");
}
function mf(t, e = !1) {
  const n = [];
  e && n.push("þÿ");
  for (let i = 0, s = t.length; i < s; i++) {
    const a = t.charCodeAt(i);
    n.push(String.fromCharCode(a >> 8 & 255), String.fromCharCode(a & 255));
  }
  return n.join("");
}
function ao(t, e, n) {
  switch (t) {
    case 90:
      return [0, 1, -1, 0, e, 0];
    case 180:
      return [-1, 0, 0, -1, e, n];
    case 270:
      return [0, -1, 1, 0, 0, n];
    default:
      throw new Error("Invalid rotation");
  }
}
function B1(t) {
  return Math.ceil(Math.ceil(Math.log2(1 + t)) / 8);
}
var _0;
class bt {
  static get _memoryArray() {
    const e = ce(this, _0);
    return e != null && e.byteLength ? e : ct(this, _0, new Uint8Array(this._memory.buffer));
  }
}
_0 = new WeakMap(), Ee(bt, _0, null), Ye(bt, "_memory", null), Ye(bt, "_mustAddAlpha", !1), Ye(bt, "_destBuffer", null), Ye(bt, "_destOffset", 0), Ye(bt, "_destLength", 0), Ye(bt, "_cssColor", ""), Ye(bt, "_makeHexColor", null);
function a2(t, e) {
  const {
    _mustAddAlpha: n,
    _destBuffer: i,
    _destOffset: s,
    _destLength: a,
    _memoryArray: r
  } = bt;
  if (e === a) {
    i.set(r.subarray(t, t + e), s);
    return;
  }
  if (n)
    for (let o = t, c = t + e, l = s; o < c; o += 3, l += 4)
      i[l] = r[o], i[l + 1] = r[o + 1], i[l + 2] = r[o + 2], i[l + 3] = 255;
  else
    for (let o = t, c = t + e, l = s; o < c; o += 3, l += 4)
      i[l] = r[o], i[l + 1] = r[o + 1], i[l + 2] = r[o + 2];
}
function r2(t) {
  const {
    _destBuffer: e,
    _destOffset: n,
    _memoryArray: i
  } = bt;
  e[n] = i[t], e[n + 1] = i[t + 1], e[n + 2] = i[t + 2];
}
function o2(t) {
  const {
    _memoryArray: e
  } = bt;
  bt._cssColor = bt._makeHexColor(e[t], e[t + 1], e[t + 2]);
}
let gn;
const bf = typeof TextDecoder < "u" ? new TextDecoder("utf-8", {
  ignoreBOM: !0,
  fatal: !0
}) : {
  decode: () => {
    throw Error("TextDecoder not available");
  }
};
typeof TextDecoder < "u" && bf.decode();
let t0 = null;
function wf() {
  return (t0 === null || t0.byteLength === 0) && (t0 = new Uint8Array(gn.memory.buffer)), t0;
}
function c2(t, e) {
  return t = t >>> 0, bf.decode(wf().subarray(t, t + e));
}
let Hl = 0;
function yf(t, e) {
  const n = e(t.length * 1, 1) >>> 0;
  return wf().set(t, n / 1), Hl = t.length, n;
}
function l2(t, e) {
  const n = yf(e, gn.__wbindgen_malloc), i = Hl;
  gn.qcms_convert_array(t, n, i);
}
function h2(t, e, n) {
  gn.qcms_convert_one(t, e, n);
}
function f2(t, e, n, i, s) {
  gn.qcms_convert_three(t, e, n, i, s);
}
function u2(t, e, n, i, s, a) {
  gn.qcms_convert_four(t, e, n, i, s, a);
}
function d2(t, e, n) {
  const i = yf(t, gn.__wbindgen_malloc), s = Hl;
  return gn.qcms_transformer_from_memory(i, s, e, n) >>> 0;
}
function x2(t) {
  gn.qcms_drop_transformer(t);
}
const oc = Object.freeze({
  RGB8: 0,
  0: "RGB8",
  RGBA8: 1,
  1: "RGBA8",
  BGRA8: 2,
  2: "BGRA8",
  Gray8: 3,
  3: "Gray8",
  GrayA8: 4,
  4: "GrayA8",
  CMYK: 5,
  5: "CMYK"
}), g2 = Object.freeze({
  Perceptual: 0,
  0: "Perceptual",
  RelativeColorimetric: 1,
  1: "RelativeColorimetric",
  Saturation: 2,
  2: "Saturation",
  AbsoluteColorimetric: 3,
  3: "AbsoluteColorimetric"
});
function p2() {
  const t = {};
  return t.wbg = {}, t.wbg.__wbg_copyresult_b08ee7d273f295dd = function(e, n) {
    a2(e >>> 0, n >>> 0);
  }, t.wbg.__wbg_copyrgb_d60ce17bb05d9b67 = function(e) {
    r2(e >>> 0);
  }, t.wbg.__wbg_makecssRGB_893bf0cd9fdb302d = function(e) {
    o2(e >>> 0);
  }, t.wbg.__wbindgen_init_externref_table = function() {
    const e = gn.__wbindgen_export_0, n = e.grow(4);
    e.set(0, void 0), e.set(n + 0, void 0), e.set(n + 1, null), e.set(n + 2, !0), e.set(n + 3, !1);
  }, t.wbg.__wbindgen_throw = function(e, n) {
    throw new Error(c2(e, n));
  }, t;
}
function m2(t, e) {
  return gn = t.exports, t0 = null, gn.__wbindgen_start(), gn;
}
function b2(t) {
  if (gn !== void 0) return gn;
  typeof t < "u" && (Object.getPrototypeOf(t) === Object.prototype ? {
    module: t
  } = t : console.warn("using deprecated parameters for `initSync()`; pass a single object instead"));
  const e = p2();
  t instanceof WebAssembly.Module || (t = new WebAssembly.Module(t));
  const n = new WebAssembly.Instance(t, e);
  return m2(n);
}
function w2(t, e, n, i, s, a, r) {
  r = r !== 1 ? 0 : r;
  const c = n / s, l = i / a;
  let h = 0, f;
  const u = new Uint16Array(s), d = n * 3;
  for (let x = 0; x < s; x++)
    u[x] = Math.floor(x * c) * 3;
  for (let x = 0; x < a; x++) {
    const g = Math.floor(x * l) * d;
    for (let m = 0; m < s; m++)
      f = g + u[m], e[h++] = t[f++], e[h++] = t[f++], e[h++] = t[f++], h += r;
  }
}
function y2(t, e, n, i, s, a, r) {
  const o = n / s, c = i / a;
  let l = 0;
  const h = new Uint16Array(s);
  if (r === 1) {
    for (let x = 0; x < s; x++)
      h[x] = Math.floor(x * o);
    const f = new Uint32Array(t.buffer), u = new Uint32Array(e.buffer), d = An.isLittleEndian ? 16777215 : 4294967040;
    for (let x = 0; x < a; x++) {
      const g = f.subarray(Math.floor(x * c) * n);
      for (let m = 0; m < s; m++)
        u[l++] |= g[h[m]] & d;
    }
  } else {
    const u = n * 4;
    for (let d = 0; d < s; d++)
      h[d] = Math.floor(d * o) * 4;
    for (let d = 0; d < a; d++) {
      const x = t.subarray(Math.floor(d * c) * u);
      for (let g = 0; g < s; g++) {
        const m = h[g];
        e[l++] = x[m], e[l++] = x[m + 1], e[l++] = x[m + 2];
      }
    }
  }
}
function k2(t, e, n) {
  if (n === 1) {
    const i = new Uint32Array(t.buffer), s = new Uint32Array(e.buffer), a = An.isLittleEndian ? 16777215 : 4294967040;
    for (let r = 0, o = i.length; r < o; r++)
      s[r] |= i[r] & a;
  } else {
    let i = 0;
    for (let s = 0, a = t.length; s < a; s += 4)
      e[i++] = t[s], e[i++] = t[s + 1], e[i++] = t[s + 2];
  }
}
var Ao;
const p0 = class p0 {
  constructor(e, n) {
    this.name = e, this.numComps = n;
  }
  getRgb(e, n, i = new Uint8ClampedArray(3)) {
    return this.getRgbItem(e, n, i, 0), i;
  }
  getRgbHex(e, n) {
    const i = this.getRgb(e, n, ce(p0, Ao));
    return tt.makeHexColor(i[0], i[1], i[2]);
  }
  getRgbItem(e, n, i, s) {
    Ke("Should not call ColorSpace.getRgbItem");
  }
  getRgbBuffer(e, n, i, s, a, r, o) {
    Ke("Should not call ColorSpace.getRgbBuffer");
  }
  getOutputLength(e, n) {
    Ke("Should not call ColorSpace.getOutputLength");
  }
  isPassthrough(e) {
    return !1;
  }
  isDefaultDecode(e, n) {
    return p0.isDefaultDecode(e, this.numComps);
  }
  fillRgb(e, n, i, s, a, r, o, c, l) {
    const h = n * i;
    let f = null;
    const u = 1 << o, d = i !== a || n !== s;
    if (this.isPassthrough(o))
      f = c;
    else if (this.numComps === 1 && h > u && this.name !== "DeviceGray" && this.name !== "DeviceRGB") {
      const x = o <= 8 ? new Uint8Array(u) : new Uint16Array(u);
      for (let m = 0; m < u; m++)
        x[m] = m;
      const g = new Uint8ClampedArray(u * 3);
      if (this.getRgbBuffer(x, 0, u, g, 0, o, 0), d) {
        f = new Uint8Array(h * 3);
        let m = 0;
        for (let p = 0; p < h; ++p) {
          const b = c[p] * 3;
          f[m++] = g[b], f[m++] = g[b + 1], f[m++] = g[b + 2];
        }
      } else {
        let m = 0;
        for (let p = 0; p < h; ++p) {
          const b = c[p] * 3;
          e[m++] = g[b], e[m++] = g[b + 1], e[m++] = g[b + 2], m += l;
        }
      }
    } else d ? (f = new Uint8ClampedArray(h * 3), this.getRgbBuffer(c, 0, h, f, 0, o, 0)) : this.getRgbBuffer(c, 0, s * r, e, 0, o, l);
    if (f)
      if (d)
        w2(f, e, n, i, s, a, l);
      else {
        let x = 0, g = 0;
        for (let m = 0, p = s * r; m < p; m++)
          e[x++] = f[g++], e[x++] = f[g++], e[x++] = f[g++], x += l;
      }
  }
  get usesZeroToOneRange() {
    return Q(this, "usesZeroToOneRange", !0);
  }
  static isDefaultDecode(e, n) {
    if (!Array.isArray(e))
      return !0;
    if (n * 2 !== e.length)
      return I("The decode map is not the correct length"), !0;
    for (let i = 0, s = e.length; i < s; i += 2)
      if (e[i] !== 0 || e[i + 1] !== 1)
        return !1;
    return !0;
  }
};
Ao = new WeakMap(), Ee(p0, Ao, new Uint8ClampedArray(3));
let nn = p0;
class S2 extends nn {
  constructor(e, n, i) {
    super("Alternate", e), this.base = n, this.tintFn = i, this.tmpBuf = new Float32Array(n.numComps);
  }
  getRgbItem(e, n, i, s) {
    const a = this.tmpBuf;
    this.tintFn(e, n, a, 0), this.base.getRgbItem(a, 0, i, s);
  }
  getRgbBuffer(e, n, i, s, a, r, o) {
    const c = this.tintFn, l = this.base, h = 1 / ((1 << r) - 1), f = l.numComps, u = l.usesZeroToOneRange, d = (l.isPassthrough(8) || !u) && o === 0;
    let x = d ? a : 0;
    const g = d ? s : new Uint8ClampedArray(f * i), m = this.numComps, p = new Float32Array(m), b = new Float32Array(f);
    let w, y;
    for (w = 0; w < i; w++) {
      for (y = 0; y < m; y++)
        p[y] = e[n++] * h;
      if (c(p, 0, b, 0), u)
        for (y = 0; y < f; y++)
          g[x++] = b[y] * 255;
      else
        l.getRgbItem(b, 0, g, x), x += f;
    }
    d || l.getRgbBuffer(g, 0, i, s, a, 8, o);
  }
  getOutputLength(e, n) {
    return this.base.getOutputLength(e * this.base.numComps / this.numComps, n);
  }
}
class E1 extends nn {
  constructor(e) {
    super("Pattern", null), this.base = e;
  }
  isDefaultDecode(e, n) {
    Ke("Should not call PatternCS.isDefaultDecode");
  }
}
class C2 extends nn {
  constructor(e, n, i) {
    super("Indexed", 1), this.base = e, this.highVal = n;
    const s = e.numComps * (n + 1);
    if (this.lookup = new Uint8Array(s), i instanceof je) {
      const a = i.getBytes(s);
      this.lookup.set(a);
    } else if (typeof i == "string")
      for (let a = 0; a < s; ++a)
        this.lookup[a] = i.charCodeAt(a) & 255;
    else
      throw new j(`IndexedCS - unrecognized lookup table: ${i}`);
  }
  getRgbItem(e, n, i, s) {
    const {
      base: a,
      highVal: r,
      lookup: o
    } = this, c = Wt(Math.round(e[n]), 0, r) * a.numComps;
    a.getRgbBuffer(o, c, 1, i, s, 8, 0);
  }
  getRgbBuffer(e, n, i, s, a, r, o) {
    const {
      base: c,
      highVal: l,
      lookup: h
    } = this, {
      numComps: f
    } = c, u = c.getOutputLength(f, o);
    for (let d = 0; d < i; ++d) {
      const x = Wt(Math.round(e[n++]), 0, l) * f;
      c.getRgbBuffer(h, x, 1, s, a, 8, o), a += u;
    }
  }
  getOutputLength(e, n) {
    return this.base.getOutputLength(e * this.base.numComps, n);
  }
  isDefaultDecode(e, n) {
    return Array.isArray(e) ? e.length !== 2 ? (I("Decode map length is not correct"), !0) : !Number.isInteger(n) || n < 1 ? (I("Bits per component is not correct"), !0) : e[0] === 0 && e[1] === (1 << n) - 1 : !0;
  }
}
class A2 extends nn {
  constructor() {
    super("DeviceGray", 1);
  }
  getRgbItem(e, n, i, s) {
    const a = e[n] * 255;
    i[s] = i[s + 1] = i[s + 2] = a;
  }
  getRgbBuffer(e, n, i, s, a, r, o) {
    const c = 255 / ((1 << r) - 1);
    let l = n, h = a;
    for (let f = 0; f < i; ++f) {
      const u = c * e[l++];
      s[h++] = u, s[h++] = u, s[h++] = u, h += o;
    }
  }
  getOutputLength(e, n) {
    return e * (3 + n);
  }
}
class v2 extends nn {
  constructor() {
    super("DeviceRGB", 3);
  }
  getRgbItem(e, n, i, s) {
    i[s] = e[n] * 255, i[s + 1] = e[n + 1] * 255, i[s + 2] = e[n + 2] * 255;
  }
  getRgbBuffer(e, n, i, s, a, r, o) {
    if (r === 8 && o === 0) {
      s.set(e.subarray(n, n + i * 3), a);
      return;
    }
    const c = 255 / ((1 << r) - 1);
    let l = n, h = a;
    for (let f = 0; f < i; ++f)
      s[h++] = c * e[l++], s[h++] = c * e[l++], s[h++] = c * e[l++], h += o;
  }
  getOutputLength(e, n) {
    return e * (3 + n) / 3 | 0;
  }
  isPassthrough(e) {
    return e === 8;
  }
}
class I2 extends nn {
  constructor() {
    super("DeviceRGBA", 4);
  }
  getOutputLength(e, n) {
    return e * 4;
  }
  isPassthrough(e) {
    return e === 8;
  }
  fillRgb(e, n, i, s, a, r, o, c, l) {
    i !== a || n !== s ? y2(c, e, n, i, s, a, l) : k2(c, e, l);
  }
}
var U0, Hc;
class kf extends nn {
  constructor() {
    super("DeviceCMYK", 4);
    Ee(this, U0);
  }
  getRgbItem(n, i, s, a) {
    J(this, U0, Hc).call(this, n, i, 1, s, a);
  }
  getRgbBuffer(n, i, s, a, r, o, c) {
    const l = 1 / ((1 << o) - 1);
    for (let h = 0; h < s; h++)
      J(this, U0, Hc).call(this, n, i, l, a, r), i += 4, r += 3 + c;
  }
  getOutputLength(n, i) {
    return n / 4 * (3 + i) | 0;
  }
}
U0 = new WeakSet(), Hc = function(n, i, s, a, r) {
  const o = n[i] * s, c = n[i + 1] * s, l = n[i + 2] * s, h = n[i + 3] * s;
  a[r] = 255 + o * (-4.387332384609988 * o + 54.48615194189176 * c + 18.82290502165302 * l + 212.25662451639585 * h + -285.2331026137004) + c * (1.7149763477362134 * c - 5.6096736904047315 * l + -17.873870861415444 * h - 5.497006427196366) + l * (-2.5217340131683033 * l - 21.248923337353073 * h + 17.5119270841813) + h * (-21.86122147463605 * h - 189.48180835922747), a[r + 1] = 255 + o * (8.841041422036149 * o + 60.118027045597366 * c + 6.871425592049007 * l + 31.159100130055922 * h + -79.2970844816548) + c * (-15.310361306967817 * c + 17.575251261109482 * l + 131.35250912493976 * h - 190.9453302588951) + l * (4.444339102852739 * l + 9.8632861493405 * h - 24.86741582555878) + h * (-20.737325471181034 * h - 187.80453709719578), a[r + 2] = 255 + o * (0.8842522430003296 * o + 8.078677503112928 * c + 30.89978309703729 * l - 0.23883238689178934 * h + -14.183576799673286) + c * (10.49593273432072 * c + 63.02378494754052 * l + 50.606957656360734 * h - 112.23884253719248) + l * (0.03296041114873217 * l + 115.60384449646641 * h + -193.58209356861505) + h * (-22.33816807309886 * h - 180.12613974708367);
};
var j0, Gc;
class T2 extends nn {
  constructor(n, i, s) {
    super("CalGray", 1);
    Ee(this, j0);
    if (!n)
      throw new j("WhitePoint missing - required for color space CalGray");
    if ([this.XW, this.YW, this.ZW] = n, [this.XB, this.YB, this.ZB] = i || [0, 0, 0], this.G = s || 1, this.XW < 0 || this.ZW < 0 || this.YW !== 1)
      throw new j(`Invalid WhitePoint components for ${this.name}, no fallback available`);
    (this.XB < 0 || this.YB < 0 || this.ZB < 0) && (Ge(`Invalid BlackPoint for ${this.name}, falling back to default.`), this.XB = this.YB = this.ZB = 0), (this.XB !== 0 || this.YB !== 0 || this.ZB !== 0) && I(`${this.name}, BlackPoint: XB: ${this.XB}, YB: ${this.YB}, ZB: ${this.ZB}, only default values are supported.`), this.G < 1 && (Ge(`Invalid Gamma: ${this.G} for ${this.name}, falling back to default.`), this.G = 1);
  }
  getRgbItem(n, i, s, a) {
    J(this, j0, Gc).call(this, n, i, s, a, 1);
  }
  getRgbBuffer(n, i, s, a, r, o, c) {
    const l = 1 / ((1 << o) - 1);
    for (let h = 0; h < s; ++h)
      J(this, j0, Gc).call(this, n, i, a, r, l), i += 1, r += 3 + c;
  }
  getOutputLength(n, i) {
    return n * (3 + i);
  }
}
j0 = new WeakSet(), Gc = function(n, i, s, a, r) {
  const c = (n[i] * r) ** this.G, l = this.YW * c, h = Math.max(295.8 * l ** 0.3333333333333333 - 40.8, 0);
  s[a] = h, s[a + 1] = h, s[a + 2] = h;
};
var q0, H0, vo, Io, G0, pa, $0, To, dt, Zs, Sf, Cf, Hr, Js, Af, vf, If, zc;
const yt = class yt extends nn {
  constructor(n, i, s, a) {
    super("CalRGB", 3);
    Ee(this, dt);
    if (!n)
      throw new j("WhitePoint missing - required for color space CalRGB");
    const [r, o, c] = this.whitePoint = n, [l, h, f] = this.blackPoint = i || new Float32Array(3);
    if ([this.GR, this.GG, this.GB] = s || new Float32Array([1, 1, 1]), [this.MXA, this.MYA, this.MZA, this.MXB, this.MYB, this.MZB, this.MXC, this.MYC, this.MZC] = a || new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]), r < 0 || c < 0 || o !== 1)
      throw new j(`Invalid WhitePoint components for ${this.name}, no fallback available`);
    (l < 0 || h < 0 || f < 0) && (Ge(`Invalid BlackPoint for ${this.name} [${l}, ${h}, ${f}], falling back to default.`), this.blackPoint = new Float32Array(3)), (this.GR < 0 || this.GG < 0 || this.GB < 0) && (Ge(`Invalid Gamma [${this.GR}, ${this.GG}, ${this.GB}] for ${this.name}, falling back to default.`), this.GR = this.GG = this.GB = 1);
  }
  getRgbItem(n, i, s, a) {
    J(this, dt, zc).call(this, n, i, s, a, 1);
  }
  getRgbBuffer(n, i, s, a, r, o, c) {
    const l = 1 / ((1 << o) - 1);
    for (let h = 0; h < s; ++h)
      J(this, dt, zc).call(this, n, i, a, r, l), i += 3, r += 3 + c;
  }
  getOutputLength(n, i) {
    return n * (3 + i) / 3 | 0;
  }
};
q0 = new WeakMap(), H0 = new WeakMap(), vo = new WeakMap(), Io = new WeakMap(), G0 = new WeakMap(), pa = new WeakMap(), $0 = new WeakMap(), To = new WeakMap(), dt = new WeakSet(), Zs = function(n, i, s) {
  s[0] = n[0] * i[0] + n[1] * i[1] + n[2] * i[2], s[1] = n[3] * i[0] + n[4] * i[1] + n[5] * i[2], s[2] = n[6] * i[0] + n[7] * i[1] + n[8] * i[2];
}, Sf = function(n, i, s) {
  s[0] = i[0] * 1 / n[0], s[1] = i[1] * 1 / n[1], s[2] = i[2] * 1 / n[2];
}, Cf = function(n, i, s) {
  s[0] = i[0] * 0.95047 / n[0], s[1] = i[1] * 1 / n[1], s[2] = i[2] * 1.08883 / n[2];
}, Hr = function(n) {
  return n <= 31308e-7 ? Wt(12.92 * n, 0, 1) : n >= 0.99554525 ? 1 : Wt((1 + 0.055) * n ** (1 / 2.4) - 0.055, 0, 1);
}, Js = function(n) {
  return n < 0 ? -J(this, dt, Js).call(this, -n) : n > 8 ? ((n + 16) / 116) ** 3 : n * ce(yt, To);
}, Af = function(n, i, s) {
  if (n[0] === 0 && n[1] === 0 && n[2] === 0) {
    s[0] = i[0], s[1] = i[1], s[2] = i[2];
    return;
  }
  const a = J(this, dt, Js).call(this, 0), r = a, o = J(this, dt, Js).call(this, n[0]), c = a, l = J(this, dt, Js).call(this, n[1]), h = a, f = J(this, dt, Js).call(this, n[2]), u = (1 - r) / (1 - o), d = 1 - u, x = (1 - c) / (1 - l), g = 1 - x, m = (1 - h) / (1 - f), p = 1 - m;
  s[0] = i[0] * u + d, s[1] = i[1] * x + g, s[2] = i[2] * m + p;
}, vf = function(n, i, s) {
  if (n[0] === 1 && n[2] === 1) {
    s[0] = i[0], s[1] = i[1], s[2] = i[2];
    return;
  }
  const a = s;
  J(this, dt, Zs).call(this, ce(yt, q0), i, a);
  const r = ce(yt, G0);
  J(this, dt, Sf).call(this, n, a, r), J(this, dt, Zs).call(this, ce(yt, H0), r, s);
}, If = function(n, i, s) {
  const a = s;
  J(this, dt, Zs).call(this, ce(yt, q0), i, a);
  const r = ce(yt, G0);
  J(this, dt, Cf).call(this, n, a, r), J(this, dt, Zs).call(this, ce(yt, H0), r, s);
}, zc = function(n, i, s, a, r) {
  const o = Wt(n[i] * r, 0, 1), c = Wt(n[i + 1] * r, 0, 1), l = Wt(n[i + 2] * r, 0, 1), h = o === 1 ? 1 : o ** this.GR, f = c === 1 ? 1 : c ** this.GG, u = l === 1 ? 1 : l ** this.GB, d = this.MXA * h + this.MXB * f + this.MXC * u, x = this.MYA * h + this.MYB * f + this.MYC * u, g = this.MZA * h + this.MZB * f + this.MZC * u, m = ce(yt, pa);
  m[0] = d, m[1] = x, m[2] = g;
  const p = ce(yt, $0);
  J(this, dt, vf).call(this, this.whitePoint, m, p);
  const b = ce(yt, pa);
  J(this, dt, Af).call(this, this.blackPoint, p, b);
  const w = ce(yt, $0);
  J(this, dt, If).call(this, ce(yt, Io), b, w);
  const y = ce(yt, pa);
  J(this, dt, Zs).call(this, ce(yt, vo), w, y), s[a] = J(this, dt, Hr).call(this, y[0]) * 255, s[a + 1] = J(this, dt, Hr).call(this, y[1]) * 255, s[a + 2] = J(this, dt, Hr).call(this, y[2]) * 255;
}, Ee(yt, q0, new Float32Array([0.8951, 0.2664, -0.1614, -0.7502, 1.7135, 0.0367, 0.0389, -0.0685, 1.0296])), Ee(yt, H0, new Float32Array([0.9869929, -0.1470543, 0.1599627, 0.4323053, 0.5183603, 0.0492912, -85287e-7, 0.0400428, 0.9684867])), Ee(yt, vo, new Float32Array([3.2404542, -1.5371385, -0.4985314, -0.969266, 1.8760108, 0.041556, 0.0556434, -0.2040259, 1.0572252])), Ee(yt, Io, new Float32Array([1, 1, 1])), Ee(yt, G0, new Float32Array(3)), Ee(yt, pa, new Float32Array(3)), Ee(yt, $0, new Float32Array(3)), Ee(yt, To, (24 / 116) ** 3 / 8);
let $c = yt;
var Pn, Gr, $r, Wc;
class F2 extends nn {
  constructor(n, i, s) {
    super("Lab", 3);
    Ee(this, Pn);
    if (!n)
      throw new j("WhitePoint missing - required for color space Lab");
    if ([this.XW, this.YW, this.ZW] = n, [this.amin, this.amax, this.bmin, this.bmax] = s || [-100, 100, -100, 100], [this.XB, this.YB, this.ZB] = i || [0, 0, 0], this.XW < 0 || this.ZW < 0 || this.YW !== 1)
      throw new j("Invalid WhitePoint components, no fallback available");
    (this.XB < 0 || this.YB < 0 || this.ZB < 0) && (Ge("Invalid BlackPoint, falling back to default"), this.XB = this.YB = this.ZB = 0), (this.amin > this.amax || this.bmin > this.bmax) && (Ge("Invalid Range, falling back to defaults"), this.amin = -100, this.amax = 100, this.bmin = -100, this.bmax = 100);
  }
  getRgbItem(n, i, s, a) {
    J(this, Pn, Wc).call(this, n, i, !1, s, a);
  }
  getRgbBuffer(n, i, s, a, r, o, c) {
    const l = (1 << o) - 1;
    for (let h = 0; h < s; h++)
      J(this, Pn, Wc).call(this, n, i, l, a, r), i += 3, r += 3 + c;
  }
  getOutputLength(n, i) {
    return n * (3 + i) / 3 | 0;
  }
  isDefaultDecode(n, i) {
    return !0;
  }
  get usesZeroToOneRange() {
    return Q(this, "usesZeroToOneRange", !1);
  }
}
Pn = new WeakSet(), Gr = function(n) {
  return n >= 6 / 29 ? n ** 3 : 108 / 841 * (n - 4 / 29);
}, $r = function(n, i, s, a) {
  return s + n * (a - s) / i;
}, Wc = function(n, i, s, a, r) {
  let o = n[i], c = n[i + 1], l = n[i + 2];
  s !== !1 && (o = J(this, Pn, $r).call(this, o, s, 0, 100), c = J(this, Pn, $r).call(this, c, s, this.amin, this.amax), l = J(this, Pn, $r).call(this, l, s, this.bmin, this.bmax)), c > this.amax ? c = this.amax : c < this.amin && (c = this.amin), l > this.bmax ? l = this.bmax : l < this.bmin && (l = this.bmin);
  const h = (o + 16) / 116, f = h + c / 500, u = h - l / 200, d = this.XW * J(this, Pn, Gr).call(this, f), x = this.YW * J(this, Pn, Gr).call(this, h), g = this.ZW * J(this, Pn, Gr).call(this, u);
  let m, p, b;
  this.ZW < 1 ? (m = d * 3.1339 + x * -1.617 + g * -0.4906, p = d * -0.9785 + x * 1.916 + g * 0.0333, b = d * 0.072 + x * -0.229 + g * 1.4057) : (m = d * 3.2406 + x * -1.5372 + g * -0.4986, p = d * -0.9689 + x * 1.8758 + g * 0.0415, b = d * 0.0557 + x * -0.204 + g * 1.057), a[r] = Math.sqrt(m) * 255, a[r + 1] = Math.sqrt(p) * 255, a[r + 2] = Math.sqrt(b) * 255;
};
function Tf(t) {
  const e = new XMLHttpRequest();
  return e.open("GET", t, !1), e.responseType = "arraybuffer", e.send(null), e.response;
}
var gi, Zi, ma, ba, Fo;
const Ss = class Ss extends nn {
  constructor(n, i, s) {
    if (!Ss.isUsable)
      throw new Error("No ICC color space support");
    super(i, s);
    Ee(this, gi);
    Ee(this, Zi);
    let a;
    switch (s) {
      case 1:
        a = oc.Gray8, ct(this, Zi, (r, o, c) => h2(ce(this, gi), r[o] * 255, c));
        break;
      case 3:
        a = oc.RGB8, ct(this, Zi, (r, o, c) => f2(ce(this, gi), r[o] * 255, r[o + 1] * 255, r[o + 2] * 255, c));
        break;
      case 4:
        a = oc.CMYK, ct(this, Zi, (r, o, c) => u2(ce(this, gi), r[o] * 255, r[o + 1] * 255, r[o + 2] * 255, r[o + 3] * 255, c));
        break;
      default:
        throw new Error(`Unsupported number of components: ${s}`);
    }
    if (ct(this, gi, d2(n, a, g2.Perceptual)), !ce(this, gi))
      throw new Error("Failed to create ICC color space");
    ce(Ss, Fo).register(this, ce(this, gi));
  }
  getRgbHex(n, i) {
    return ce(this, Zi).call(this, n, i, !0), bt._cssColor;
  }
  getRgbItem(n, i, s, a) {
    bt._destBuffer = s, bt._destOffset = a, bt._destLength = 3, ce(this, Zi).call(this, n, i, !1), bt._destBuffer = null;
  }
  getRgbBuffer(n, i, s, a, r, o, c) {
    if (n = n.subarray(i, i + s * this.numComps), o !== 8) {
      const l = 255 / ((1 << o) - 1);
      for (let h = 0, f = n.length; h < f; h++)
        n[h] *= l;
    }
    bt._mustAddAlpha = c && a.buffer === n.buffer, bt._destBuffer = a, bt._destOffset = r, bt._destLength = s * (3 + c), l2(ce(this, gi), n), bt._mustAddAlpha = !1, bt._destBuffer = null;
  }
  getOutputLength(n, i) {
    return n / this.numComps * (3 + i) | 0;
  }
  static setOptions({
    useWasm: n,
    useWorkerFetch: i,
    wasmUrl: s
  }) {
    if (!i) {
      ct(this, ma, !1);
      return;
    }
    ct(this, ma, n), ct(this, ba, s);
  }
  static get isUsable() {
    let n = !1;
    if (ce(this, ma))
      if (ce(this, ba))
        try {
          this._module = b2({
            module: Tf(`${ce(this, ba)}qcms_bg.wasm`)
          }), n = !!this._module, bt._memory = this._module.memory, bt._makeHexColor = tt.makeHexColor;
        } catch (i) {
          I(`ICCBased color space: "${i}".`);
        }
      else
        I("No ICC color space support due to missing `wasmUrl` API option");
    return Q(this, "isUsable", n);
  }
};
gi = new WeakMap(), Zi = new WeakMap(), ma = new WeakMap(), ba = new WeakMap(), Fo = new WeakMap(), Ee(Ss, ma, !0), Ee(Ss, ba, null), Ee(Ss, Fo, new FinalizationRegistry((n) => {
  x2(n);
}));
let Ns = Ss;
var wa;
const Bo = class Bo extends Ns {
  constructor() {
    const e = new Uint8Array(Tf(`${ce(Bo, wa)}CGATS001Compat-v2-micro.icc`));
    super(e, "DeviceCMYK", 4);
  }
  static setOptions({
    iccUrl: e
  }) {
    ct(this, wa, e);
  }
  static get isUsable() {
    let e = !1;
    return Ns.isUsable && (ce(this, wa) ? e = !0 : I("No CMYK ICC profile support due to missing `iccUrl` API option")), Q(this, "isUsable", e);
  }
};
wa = new WeakMap(), Ee(Bo, wa);
let C0 = Bo;
class At extends je {
  constructor(e, n, i, s) {
    super(), this.bytes = e instanceof Uint8Array ? e : new Uint8Array(e), this.start = n || 0, this.pos = this.start, this.end = n + i || this.bytes.length, this.dict = s;
  }
  get length() {
    return this.end - this.start;
  }
  get isEmpty() {
    return this.length === 0;
  }
  getByte() {
    return this.pos >= this.end ? -1 : this.bytes[this.pos++];
  }
  getBytes(e) {
    const n = this.bytes, i = this.pos, s = this.end;
    if (!e)
      return n.subarray(i, s);
    let a = i + e;
    return a > s && (a = s), this.pos = a, n.subarray(i, a);
  }
  getByteRange(e, n) {
    return e < 0 && (e = 0), n > this.end && (n = this.end), this.bytes.subarray(e, n);
  }
  reset() {
    this.pos = this.start;
  }
  moveStart() {
    this.start = this.pos;
  }
  makeSubStream(e, n, i = null) {
    return new At(this.bytes.buffer, e, n, i);
  }
}
class pn extends At {
  constructor(e) {
    super(en(e));
  }
}
class Vc extends At {
  constructor() {
    super(new Uint8Array(0));
  }
}
class B2 extends At {
  constructor(e, n, i) {
    super(new Uint8Array(e), 0, e, null), this.chunkSize = n, this._loadedChunks = /* @__PURE__ */ new Set(), this.numChunks = Math.ceil(e / n), this.manager = i, this.progressiveDataLength = 0, this.lastSuccessfulEnsureByteChunk = -1;
  }
  getMissingChunks() {
    const e = [];
    for (let n = 0, i = this.numChunks; n < i; ++n)
      this._loadedChunks.has(n) || e.push(n);
    return e;
  }
  get numChunksLoaded() {
    return this._loadedChunks.size;
  }
  get isDataLoaded() {
    return this.numChunksLoaded === this.numChunks;
  }
  onReceiveData(e, n) {
    const i = this.chunkSize;
    if (e % i !== 0)
      throw new Error(`Bad begin offset: ${e}`);
    const s = e + n.byteLength;
    if (s % i !== 0 && s !== this.bytes.length)
      throw new Error(`Bad end offset: ${s}`);
    this.bytes.set(new Uint8Array(n), e);
    const a = Math.floor(e / i), r = Math.floor((s - 1) / i) + 1;
    for (let o = a; o < r; ++o)
      this._loadedChunks.add(o);
  }
  onReceiveProgressiveData(e) {
    let n = this.progressiveDataLength;
    const i = Math.floor(n / this.chunkSize);
    this.bytes.set(new Uint8Array(e), n), n += e.byteLength, this.progressiveDataLength = n;
    const s = n >= this.end ? this.numChunks : Math.floor(n / this.chunkSize);
    for (let a = i; a < s; ++a)
      this._loadedChunks.add(a);
  }
  ensureByte(e) {
    if (e < this.progressiveDataLength)
      return;
    const n = Math.floor(e / this.chunkSize);
    if (!(n > this.numChunks) && n !== this.lastSuccessfulEnsureByteChunk) {
      if (!this._loadedChunks.has(n))
        throw new mt(e, e + 1);
      this.lastSuccessfulEnsureByteChunk = n;
    }
  }
  ensureRange(e, n) {
    if (e >= n || n <= this.progressiveDataLength)
      return;
    const i = Math.floor(e / this.chunkSize);
    if (i > this.numChunks)
      return;
    const s = Math.min(Math.floor((n - 1) / this.chunkSize) + 1, this.numChunks);
    for (let a = i; a < s; ++a)
      if (!this._loadedChunks.has(a))
        throw new mt(e, n);
  }
  nextEmptyChunk(e) {
    const n = this.numChunks;
    for (let i = 0; i < n; ++i) {
      const s = (e + i) % n;
      if (!this._loadedChunks.has(s))
        return s;
    }
    return null;
  }
  hasChunk(e) {
    return this._loadedChunks.has(e);
  }
  getByte() {
    const e = this.pos;
    return e >= this.end ? -1 : (e >= this.progressiveDataLength && this.ensureByte(e), this.bytes[this.pos++]);
  }
  getBytes(e) {
    const n = this.bytes, i = this.pos, s = this.end;
    if (!e)
      return s > this.progressiveDataLength && this.ensureRange(i, s), n.subarray(i, s);
    let a = i + e;
    return a > s && (a = s), a > this.progressiveDataLength && this.ensureRange(i, a), this.pos = a, n.subarray(i, a);
  }
  getByteRange(e, n) {
    return e < 0 && (e = 0), n > this.end && (n = this.end), n > this.progressiveDataLength && this.ensureRange(e, n), this.bytes.subarray(e, n);
  }
  makeSubStream(e, n, i = null) {
    n ? e + n > this.progressiveDataLength && this.ensureRange(e, e + n) : e >= this.progressiveDataLength && this.ensureByte(e);
    function s() {
    }
    s.prototype = Object.create(this), s.prototype.getMissingChunks = function() {
      const r = this.chunkSize, o = Math.floor(this.start / r), c = Math.floor((this.end - 1) / r) + 1, l = [];
      for (let h = o; h < c; ++h)
        this._loadedChunks.has(h) || l.push(h);
      return l;
    }, Object.defineProperty(s.prototype, "isDataLoaded", {
      get() {
        return this.numChunksLoaded === this.numChunks ? !0 : this.getMissingChunks().length === 0;
      },
      configurable: !0
    });
    const a = new s();
    return a.pos = a.start = e, a.end = e + n || this.end, a.dict = i, a;
  }
  getBaseStreams() {
    return [this];
  }
}
class E2 {
  constructor(e, n) {
    this.length = n.length, this.chunkSize = n.rangeChunkSize, this.stream = new B2(this.length, this.chunkSize, this), this.pdfNetworkStream = e, this.disableAutoFetch = n.disableAutoFetch, this.msgHandler = n.msgHandler, this.currRequestId = 0, this._chunksNeededByRequest = /* @__PURE__ */ new Map(), this._requestsByChunk = /* @__PURE__ */ new Map(), this._promisesByRequest = /* @__PURE__ */ new Map(), this.progressiveDataLength = 0, this.aborted = !1, this._loadedStreamCapability = Promise.withResolvers();
  }
  sendRequest(e, n) {
    const i = this.pdfNetworkStream.getRangeReader(e, n);
    i.isStreamingSupported || (i.onProgress = this.onProgress.bind(this));
    let s = [], a = 0;
    return new Promise((r, o) => {
      const c = ({
        value: l,
        done: h
      }) => {
        try {
          if (h) {
            const f = df(s);
            s = null, r(f);
            return;
          }
          a += l.byteLength, i.isStreamingSupported && this.onProgress({
            loaded: a
          }), s.push(l), i.read().then(c, o);
        } catch (f) {
          o(f);
        }
      };
      i.read().then(c, o);
    }).then((r) => {
      this.aborted || this.onReceiveData({
        chunk: r,
        begin: e
      });
    });
  }
  requestAllChunks(e = !1) {
    if (!e) {
      const n = this.stream.getMissingChunks();
      this._requestChunks(n);
    }
    return this._loadedStreamCapability.promise;
  }
  _requestChunks(e) {
    const n = this.currRequestId++, i = /* @__PURE__ */ new Set();
    this._chunksNeededByRequest.set(n, i);
    for (const r of e)
      this.stream.hasChunk(r) || i.add(r);
    if (i.size === 0)
      return Promise.resolve();
    const s = Promise.withResolvers();
    this._promisesByRequest.set(n, s);
    const a = [];
    for (const r of i) {
      let o = this._requestsByChunk.get(r);
      o || (o = [], this._requestsByChunk.set(r, o), a.push(r)), o.push(n);
    }
    if (a.length > 0) {
      const r = this.groupChunks(a);
      for (const o of r) {
        const c = o.beginChunk * this.chunkSize, l = Math.min(o.endChunk * this.chunkSize, this.length);
        this.sendRequest(c, l).catch(s.reject);
      }
    }
    return s.promise.catch((r) => {
      if (!this.aborted)
        throw r;
    });
  }
  getStream() {
    return this.stream;
  }
  requestRange(e, n) {
    n = Math.min(n, this.length);
    const i = this.getBeginChunk(e), s = this.getEndChunk(n), a = [];
    for (let r = i; r < s; ++r)
      a.push(r);
    return this._requestChunks(a);
  }
  requestRanges(e = []) {
    const n = [];
    for (const i of e) {
      const s = this.getBeginChunk(i.begin), a = this.getEndChunk(i.end);
      for (let r = s; r < a; ++r)
        n.includes(r) || n.push(r);
    }
    return n.sort((i, s) => i - s), this._requestChunks(n);
  }
  groupChunks(e) {
    const n = [];
    let i = -1, s = -1;
    for (let a = 0, r = e.length; a < r; ++a) {
      const o = e[a];
      i < 0 && (i = o), s >= 0 && s + 1 !== o && (n.push({
        beginChunk: i,
        endChunk: s + 1
      }), i = o), a + 1 === e.length && n.push({
        beginChunk: i,
        endChunk: o + 1
      }), s = o;
    }
    return n;
  }
  onProgress(e) {
    this.msgHandler.send("DocProgress", {
      loaded: this.stream.numChunksLoaded * this.chunkSize + e.loaded,
      total: this.length
    });
  }
  onReceiveData(e) {
    const n = e.chunk, i = e.begin === void 0, s = i ? this.progressiveDataLength : e.begin, a = s + n.byteLength, r = Math.floor(s / this.chunkSize), o = a < this.length ? Math.floor(a / this.chunkSize) : Math.ceil(a / this.chunkSize);
    i ? (this.stream.onReceiveProgressiveData(n), this.progressiveDataLength = a) : this.stream.onReceiveData(s, n), this.stream.isDataLoaded && this._loadedStreamCapability.resolve(this.stream);
    const c = [];
    for (let l = r; l < o; ++l) {
      const h = this._requestsByChunk.get(l);
      if (h) {
        this._requestsByChunk.delete(l);
        for (const f of h) {
          const u = this._chunksNeededByRequest.get(f);
          u.has(l) && u.delete(l), !(u.size > 0) && c.push(f);
        }
      }
    }
    if (!this.disableAutoFetch && this._requestsByChunk.size === 0) {
      let l;
      if (this.stream.numChunksLoaded === 1) {
        const h = this.stream.numChunks - 1;
        this.stream.hasChunk(h) || (l = h);
      } else
        l = this.stream.nextEmptyChunk(o);
      Number.isInteger(l) && this._requestChunks([l]);
    }
    for (const l of c) {
      const h = this._promisesByRequest.get(l);
      this._promisesByRequest.delete(l), h.resolve();
    }
    this.msgHandler.send("DocProgress", {
      loaded: this.stream.numChunksLoaded * this.chunkSize,
      total: this.length
    });
  }
  onError(e) {
    this._loadedStreamCapability.reject(e);
  }
  getBeginChunk(e) {
    return Math.floor(e / this.chunkSize);
  }
  getEndChunk(e) {
    return Math.floor((e - 1) / this.chunkSize) + 1;
  }
  abort(e) {
    var n;
    this.aborted = !0, (n = this.pdfNetworkStream) == null || n.cancelAllRequests(e);
    for (const i of this._promisesByRequest.values())
      i.reject(e);
  }
}
function Ff(t) {
  switch (t.kind) {
    case Gt.GRAYSCALE_1BPP:
      return Xc(t);
    case Gt.RGB_24BPP:
      return R2(t);
  }
  return null;
}
function Xc({
  src: t,
  srcPos: e = 0,
  dest: n,
  width: i,
  height: s,
  nonBlackColor: a = 4294967295,
  inverseDecode: r = !1
}) {
  const o = An.isLittleEndian ? 4278190080 : 255, [c, l] = r ? [a, o] : [o, a], h = i >> 3, f = i & 7, u = t.length;
  n = new Uint32Array(n.buffer);
  let d = 0;
  for (let x = 0; x < s; x++) {
    for (const m = e + h; e < m; e++) {
      const p = e < u ? t[e] : 255;
      n[d++] = p & 128 ? l : c, n[d++] = p & 64 ? l : c, n[d++] = p & 32 ? l : c, n[d++] = p & 16 ? l : c, n[d++] = p & 8 ? l : c, n[d++] = p & 4 ? l : c, n[d++] = p & 2 ? l : c, n[d++] = p & 1 ? l : c;
    }
    if (f === 0)
      continue;
    const g = e < u ? t[e++] : 255;
    for (let m = 0; m < f; m++)
      n[d++] = g & 1 << 7 - m ? l : c;
  }
  return {
    srcPos: e,
    destPos: d
  };
}
function R2({
  src: t,
  srcPos: e = 0,
  dest: n,
  destPos: i = 0,
  width: s,
  height: a
}) {
  let r = 0;
  const o = s * a * 3, c = o >> 2, l = new Uint32Array(t.buffer, e, c);
  if (An.isLittleEndian) {
    for (; r < c - 2; r += 3, i += 4) {
      const h = l[r], f = l[r + 1], u = l[r + 2];
      n[i] = h | 4278190080, n[i + 1] = h >>> 24 | f << 8 | 4278190080, n[i + 2] = f >>> 16 | u << 16 | 4278190080, n[i + 3] = u >>> 8 | 4278190080;
    }
    for (let h = r * 4, f = e + o; h < f; h += 3)
      n[i++] = t[h] | t[h + 1] << 8 | t[h + 2] << 16 | 4278190080;
  } else {
    for (; r < c - 2; r += 3, i += 4) {
      const h = l[r], f = l[r + 1], u = l[r + 2];
      n[i] = h | 255, n[i + 1] = h << 24 | f >>> 8 | 255, n[i + 2] = f << 16 | u >>> 16 | 255, n[i + 3] = u << 8 | 255;
    }
    for (let h = r * 4, f = e + o; h < f; h += 3)
      n[i++] = t[h] << 24 | t[h + 1] << 16 | t[h + 2] << 8 | 255;
  }
  return {
    srcPos: e + o,
    destPos: i
  };
}
function M2(t, e) {
  if (An.isLittleEndian)
    for (let n = 0, i = t.length; n < i; n++)
      e[n] = t[n] * 65793 | 4278190080;
  else
    for (let n = 0, i = t.length; n < i; n++)
      e[n] = t[n] * 16843008 | 255;
}
const R1 = 2048, D2 = 65537, M1 = 128;
var _n, z0, Eo, Bf;
const Xi = class Xi {
  constructor(e, n) {
    Ee(this, Eo);
    this._imgData = e, this._isMask = n;
  }
  static get canUseImageDecoder() {
    return Q(this, "canUseImageDecoder", ce(this, z0) ? ImageDecoder.isTypeSupported("image/bmp") : Promise.resolve(!1));
  }
  static needsToBeResized(e, n) {
    if (e <= ce(this, _n) && n <= ce(this, _n))
      return !1;
    const {
      MAX_DIM: i
    } = this;
    if (e > i || n > i)
      return !0;
    const s = e * n;
    if (this._hasMaxArea)
      return s > this.MAX_AREA;
    if (s < ce(this, _n) ** 2)
      return !1;
    if (this._areGoodDims(e, n))
      return ct(this, _n, Math.max(ce(this, _n), Math.floor(Math.sqrt(e * n)))), !1;
    ct(this, _n, this._guessMax(ce(this, _n), i, M1, 0));
    const a = this.MAX_AREA = ce(this, _n) ** 2;
    return s > a;
  }
  static getReducePowerForJPX(e, n, i) {
    const s = e * n, a = 2 ** 30 / (i * 4);
    if (!this.needsToBeResized(e, n))
      return s > a ? Math.ceil(Math.log2(s / a)) : 0;
    const {
      MAX_DIM: r,
      MAX_AREA: o
    } = this, c = Math.max(e / r, n / r, Math.sqrt(s / Math.min(a, o)));
    return Math.ceil(Math.log2(c));
  }
  static get MAX_DIM() {
    return Q(this, "MAX_DIM", this._guessMax(R1, D2, 0, 1));
  }
  static get MAX_AREA() {
    return this._hasMaxArea = !0, Q(this, "MAX_AREA", this._guessMax(ce(this, _n), this.MAX_DIM, M1, 0) ** 2);
  }
  static set MAX_AREA(e) {
    e >= 0 && (this._hasMaxArea = !0, Q(this, "MAX_AREA", e));
  }
  static setOptions({
    canvasMaxAreaInBytes: e = -1,
    isImageDecoderSupported: n = !1
  }) {
    this._hasMaxArea || (this.MAX_AREA = e >> 2), ct(this, z0, n);
  }
  static _areGoodDims(e, n) {
    try {
      const i = new OffscreenCanvas(e, n), s = i.getContext("2d");
      s.fillRect(0, 0, 1, 1);
      const a = s.getImageData(0, 0, 1, 1).data[3];
      return i.width = i.height = 1, a !== 0;
    } catch {
      return !1;
    }
  }
  static _guessMax(e, n, i, s) {
    for (; e + i + 1 < n; ) {
      const a = Math.floor((e + n) / 2), r = s || a;
      this._areGoodDims(a, r) ? e = a : n = a;
    }
    return e;
  }
  static async createImage(e, n = !1) {
    return new Xi(e, n)._createImage();
  }
  async _createImage() {
    const {
      _imgData: e
    } = this, {
      width: n,
      height: i
    } = e;
    if (n * i * 4 > Nc) {
      const b = J(this, Eo, Bf).call(this);
      if (b)
        return b;
    }
    const s = this._encodeBMP();
    let a, r;
    await Xi.canUseImageDecoder ? (a = new ImageDecoder({
      data: s,
      type: "image/bmp",
      preferAnimation: !1,
      transfer: [s.buffer]
    }), r = a.decode().catch((b) => (I(`BMP image decoding failed: ${b}`), createImageBitmap(new Blob([this._encodeBMP().buffer], {
      type: "image/bmp"
    })))).finally(() => {
      a.close();
    })) : r = createImageBitmap(new Blob([s.buffer], {
      type: "image/bmp"
    }));
    const {
      MAX_AREA: o,
      MAX_DIM: c
    } = Xi, l = Math.max(n / c, i / c, Math.sqrt(n * i / o)), h = Math.max(l, 2), f = Math.round(10 * (l + 1.25)) / 10 / h, u = Math.floor(Math.log2(f)), d = new Array(u + 2).fill(2);
    d[0] = h, d.splice(-1, 1, f / (1 << u));
    let x = n, g = i;
    const m = await r;
    let p = m.image || m;
    for (const b of d) {
      const w = x, y = g;
      x = Math.floor(x / b) - 1, g = Math.floor(g / b) - 1;
      const k = new OffscreenCanvas(x, g);
      k.getContext("2d").drawImage(p, 0, 0, w, y, 0, 0, x, g), p.close(), p = k.transferToImageBitmap();
    }
    return e.data = null, e.bitmap = p, e.width = x, e.height = g, e;
  }
  _encodeBMP() {
    const {
      width: e,
      height: n,
      kind: i
    } = this._imgData;
    let s = this._imgData.data, a, r = new Uint8Array(0), o = r, c = 0;
    switch (i) {
      case Gt.GRAYSCALE_1BPP: {
        a = 1, r = new Uint8Array(this._isMask ? [255, 255, 255, 255, 0, 0, 0, 0] : [0, 0, 0, 0, 255, 255, 255, 255]);
        const g = e + 7 >> 3, m = g + 3 & -4;
        if (g !== m) {
          const p = new Uint8Array(m * n);
          let b = 0;
          for (let w = 0, y = n * g; w < y; w += g, b += m)
            p.set(s.subarray(w, w + g), b);
          s = p;
        }
        break;
      }
      case Gt.RGB_24BPP: {
        if (a = 24, e & 3) {
          const g = 3 * e, m = g + 3 & -4, p = m - g, b = new Uint8Array(m * n);
          let w = 0;
          for (let y = 0, k = n * g; y < k; y += g) {
            const S = s.subarray(y, y + g);
            for (let C = 0; C < g; C += 3)
              b[w++] = S[C + 2], b[w++] = S[C + 1], b[w++] = S[C];
            w += p;
          }
          s = b;
        } else
          for (let g = 0, m = s.length; g < m; g += 3) {
            const p = s[g];
            s[g] = s[g + 2], s[g + 2] = p;
          }
        break;
      }
      case Gt.RGBA_32BPP:
        a = 32, c = 3, o = new Uint8Array(68);
        const x = new DataView(o.buffer);
        An.isLittleEndian ? (x.setUint32(0, 255, !0), x.setUint32(4, 65280, !0), x.setUint32(8, 16711680, !0), x.setUint32(12, 4278190080, !0)) : (x.setUint32(0, 4278190080, !0), x.setUint32(4, 16711680, !0), x.setUint32(8, 65280, !0), x.setUint32(12, 255, !0));
        break;
      default:
        throw new Error("invalid format");
    }
    let l = 0;
    const h = 40 + o.length, f = 14 + h + r.length + s.length, u = new Uint8Array(f), d = new DataView(u.buffer);
    return d.setUint16(l, 19778, !0), l += 2, d.setUint32(l, f, !0), l += 4, d.setUint32(l, 0, !0), l += 4, d.setUint32(l, 14 + h + r.length, !0), l += 4, d.setUint32(l, h, !0), l += 4, d.setInt32(l, e, !0), l += 4, d.setInt32(l, -n, !0), l += 4, d.setUint16(l, 1, !0), l += 2, d.setUint16(l, a, !0), l += 2, d.setUint32(l, c, !0), l += 4, d.setUint32(l, 0, !0), l += 4, d.setInt32(l, 0, !0), l += 4, d.setInt32(l, 0, !0), l += 4, d.setUint32(l, r.length / 4, !0), l += 4, d.setUint32(l, 0, !0), l += 4, u.set(o, l), l += o.length, u.set(r, l), l += r.length, u.set(s, l), u;
  }
};
_n = new WeakMap(), z0 = new WeakMap(), Eo = new WeakSet(), Bf = function() {
  const {
    _imgData: e
  } = this, {
    data: n,
    width: i,
    height: s,
    kind: a
  } = e, r = i * s * 4, o = Math.ceil(Math.log2(r / Nc)), c = i >> o, l = s >> o;
  let h, f = s;
  try {
    h = new Uint8Array(r);
  } catch {
    let y = Math.floor(Math.log2(r + 1));
    for (; ; )
      try {
        h = new Uint8Array(2 ** y - 1);
        break;
      } catch {
        y -= 1;
      }
    f = Math.floor((2 ** y - 1) / (i * 4));
    const k = i * f * 4;
    k < h.length && (h = new Uint8Array(k));
  }
  const u = new Uint32Array(h.buffer), d = new Uint32Array(c * l);
  let x = 0, g = 0;
  const m = Math.ceil(s / f), p = s % f === 0 ? s : s % f;
  for (let y = 0; y < m; y++) {
    const k = y < m - 1 ? f : p;
    ({
      srcPos: x
    } = Ff({
      kind: a,
      src: n,
      dest: u,
      width: i,
      height: k,
      inverseDecode: this._isMask,
      srcPos: x
    }));
    for (let S = 0, C = k >> o; S < C; S++) {
      const T = u.subarray((S << o) * i);
      for (let F = 0; F < c; F++)
        d[g++] = T[F << o];
    }
  }
  if (Xi.needsToBeResized(c, l))
    return e.data = d, e.width = c, e.height = l, e.kind = Gt.RGBA_32BPP, null;
  const b = new OffscreenCanvas(c, l);
  return b.getContext("2d", {
    willReadFrequently: !0
  }).putImageData(new ImageData(new Uint8ClampedArray(d.buffer), c, l), 0, 0), e.data = null, e.bitmap = b.transferToImageBitmap(), e.width = c, e.height = l, e;
}, Ee(Xi, _n, R1), Ee(Xi, z0, An.isImageDecoderSupported);
let Zn = Xi;
const P2 = new Uint8Array(0);
class mn extends je {
  constructor(e) {
    if (super(), this._rawMinBufferLength = e || 0, this.pos = 0, this.bufferLength = 0, this.eof = !1, this.buffer = P2, this.minBufferLength = 512, e)
      for (; this.minBufferLength < e; )
        this.minBufferLength *= 2;
  }
  get isEmpty() {
    for (; !this.eof && this.bufferLength === 0; )
      this.readBlock();
    return this.bufferLength === 0;
  }
  ensureBuffer(e) {
    const n = this.buffer;
    if (e <= n.byteLength)
      return n;
    let i = this.minBufferLength;
    for (; i < e; )
      i *= 2;
    const s = new Uint8Array(i);
    return s.set(n), this.buffer = s;
  }
  getByte() {
    const e = this.pos;
    for (; this.bufferLength <= e; ) {
      if (this.eof)
        return -1;
      this.readBlock();
    }
    return this.buffer[this.pos++];
  }
  getBytes(e, n = null) {
    const i = this.pos;
    let s;
    if (e) {
      for (this.ensureBuffer(i + e), s = i + e; !this.eof && this.bufferLength < s; )
        this.readBlock(n);
      const a = this.bufferLength;
      s > a && (s = a);
    } else {
      for (; !this.eof; )
        this.readBlock(n);
      s = this.bufferLength;
    }
    return this.pos = s, this.buffer.subarray(i, s);
  }
  async getImageData(e, n) {
    if (!this.canAsyncDecodeImageFromBuffer)
      return this.isAsyncDecoder ? this.decodeImage(null, n) : this.getBytes(e, n);
    const i = await this.stream.asyncGetBytes();
    return this.decodeImage(i, n);
  }
  reset() {
    this.pos = 0;
  }
  makeSubStream(e, n, i = null) {
    if (n === void 0)
      for (; !this.eof; )
        this.readBlock();
    else {
      const s = e + n;
      for (; this.bufferLength <= s && !this.eof; )
        this.readBlock();
    }
    return new At(this.buffer, e, n, i);
  }
  getBaseStreams() {
    return this.str ? this.str.getBaseStreams() : null;
  }
}
class N2 extends mn {
  constructor(e, n = null) {
    e = e.filter((s) => s instanceof je);
    let i = 0;
    for (const s of e)
      i += s instanceof mn ? s._rawMinBufferLength : s.length;
    super(i), this.streams = e, this._onError = n;
  }
  readBlock() {
    var o;
    const e = this.streams;
    if (e.length === 0) {
      this.eof = !0;
      return;
    }
    const n = e.shift();
    let i;
    try {
      i = n.getBytes();
    } catch (c) {
      if (this._onError) {
        this._onError(c, (o = n.dict) == null ? void 0 : o.objId);
        return;
      }
      throw c;
    }
    const s = this.bufferLength, a = s + i.length;
    this.ensureBuffer(a).set(i, s), this.bufferLength = a;
  }
  getBaseStreams() {
    const e = [];
    for (const n of this.streams) {
      const i = n.getBaseStreams();
      i && e.push(...i);
    }
    return e.length > 0 ? e : null;
  }
}
var si, n0, zr;
class Qe {
  static parse({
    cs: e,
    xref: n,
    resources: i = null,
    pdfFunctionFactory: s,
    globalColorSpaceCache: a,
    localColorSpaceCache: r,
    asyncIfNotCached: o = !1
  }) {
    const c = {
      xref: n,
      resources: i,
      pdfFunctionFactory: s,
      globalColorSpaceCache: a,
      localColorSpaceCache: r
    };
    let l, h, f;
    if (e instanceof he) {
      h = e;
      const u = a.getByRef(h) || r.getByRef(h);
      if (u)
        return u;
      e = n.fetch(e);
    }
    if (e instanceof O) {
      l = e.name;
      const u = r.getByName(l);
      if (u)
        return u;
    }
    try {
      f = J(this, si, zr).call(this, e, c);
    } catch (u) {
      if (o && !(u instanceof mt))
        return Promise.reject(u);
      throw u;
    }
    return (l || h) && (r.set(l, h, f), h && a.set(null, h, f)), o ? Promise.resolve(f) : f;
  }
  static get gray() {
    return Q(this, "gray", new A2());
  }
  static get rgb() {
    return Q(this, "rgb", new v2());
  }
  static get rgba() {
    return Q(this, "rgba", new I2());
  }
  static get cmyk() {
    if (C0.isUsable)
      try {
        return Q(this, "cmyk", new C0());
      } catch {
        I("CMYK fallback: DeviceCMYK");
      }
    return Q(this, "cmyk", new kf());
  }
}
si = new WeakSet(), n0 = function(e, n) {
  const {
    globalColorSpaceCache: i
  } = n;
  let s;
  if (e instanceof he) {
    s = e;
    const r = i.getByRef(s);
    if (r)
      return r;
  }
  const a = J(this, si, zr).call(this, e, n);
  return s && i.set(null, s, a), a;
}, zr = function(e, n) {
  const {
    xref: i,
    resources: s,
    pdfFunctionFactory: a,
    globalColorSpaceCache: r
  } = n;
  if (e = i.fetchIfRef(e), e instanceof O)
    switch (e.name) {
      case "G":
      case "DeviceGray":
        return this.gray;
      case "RGB":
      case "DeviceRGB":
        return this.rgb;
      case "DeviceRGBA":
        return this.rgba;
      case "CMYK":
      case "DeviceCMYK":
        return this.cmyk;
      case "Pattern":
        return new E1(null);
      default:
        if (s instanceof E) {
          const o = s.get("ColorSpace");
          if (o instanceof E) {
            const c = o.get(e.name);
            if (c) {
              if (c instanceof O)
                return J(this, si, zr).call(this, c, n);
              e = c;
              break;
            }
          }
        }
        return I(`Unrecognized ColorSpace: ${e.name}`), this.gray;
    }
  if (Array.isArray(e)) {
    const o = i.fetchIfRef(e[0]).name;
    let c, l, h, f, u, d;
    switch (o) {
      case "G":
      case "DeviceGray":
        return this.gray;
      case "RGB":
      case "DeviceRGB":
        return this.rgb;
      case "CMYK":
      case "DeviceCMYK":
        return this.cmyk;
      case "CalGray":
        return c = i.fetchIfRef(e[1]), f = c.getArray("WhitePoint"), u = c.getArray("BlackPoint"), d = c.get("Gamma"), new T2(f, u, d);
      case "CalRGB":
        c = i.fetchIfRef(e[1]), f = c.getArray("WhitePoint"), u = c.getArray("BlackPoint"), d = c.getArray("Gamma");
        const x = c.getArray("Matrix");
        return new $c(f, u, d, x);
      case "ICCBased":
        const g = e[1] instanceof he;
        if (g) {
          const T = r.getByRef(e[1]);
          if (T)
            return T;
        }
        const m = i.fetchIfRef(e[1]), p = m.dict;
        if (l = p.get("N"), Ns.isUsable)
          try {
            const T = new Ns(m.getBytes(), "ICCBased", l);
            return g && r.set(null, e[1], T), T;
          } catch (T) {
            if (T instanceof mt)
              throw T;
            I(`ICCBased color space (${e[1]}): "${T}".`);
          }
        const b = p.getRaw("Alternate");
        if (b) {
          const T = J(this, si, n0).call(this, b, n);
          if (T.numComps === l)
            return T;
          I("ICCBased color space: Ignoring incorrect /Alternate entry.");
        }
        if (l === 1)
          return this.gray;
        if (l === 3)
          return this.rgb;
        if (l === 4)
          return this.cmyk;
        break;
      case "Pattern":
        return h = e[1] || null, h && (h = J(this, si, n0).call(this, h, n)), new E1(h);
      case "I":
      case "Indexed":
        h = J(this, si, n0).call(this, e[1], n);
        const w = Wt(i.fetchIfRef(e[2]), 0, 255), y = i.fetchIfRef(e[3]);
        return new C2(h, w, y);
      case "Separation":
      case "DeviceN":
        const k = i.fetchIfRef(e[1]);
        l = Array.isArray(k) ? k.length : 1, h = J(this, si, n0).call(this, e[2], n);
        const S = a.create(e[3]);
        return new S2(l, h, S);
      case "Lab":
        c = i.fetchIfRef(e[1]), f = c.getArray("WhitePoint"), u = c.getArray("BlackPoint");
        const C = c.getArray("Range");
        return new F2(f, u, C);
      default:
        return I(`Unimplemented ColorSpace object: ${o}`), this.gray;
    }
  }
  return I(`Unrecognized ColorSpace object: ${e}`), this.gray;
}, Ee(Qe, si);
class Un extends bn {
  constructor(e) {
    super(e, "JpegError");
  }
}
class Kc extends bn {
  constructor(e, n) {
    super(e, "DNLMarkerError"), this.scanLines = n;
  }
}
class Ef extends bn {
  constructor(e) {
    super(e, "EOIMarkerError");
  }
}
const c0 = new Uint8Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]), mr = 4017, br = 799, wr = 3406, yr = 2276, kr = 1567, Sr = 3784, $s = 5793, Cr = 2896;
function O2(t, e) {
  let n = 0, i, s, a = 16;
  for (; a > 0 && !t[a - 1]; )
    a--;
  const r = [{
    children: [],
    index: 0
  }];
  let o = r[0], c;
  for (i = 0; i < a; i++) {
    for (s = 0; s < t[i]; s++) {
      for (o = r.pop(), o.children[o.index] = e[n]; o.index > 0; )
        o = r.pop();
      for (o.index++, r.push(o); r.length <= i; )
        r.push(c = {
          children: [],
          index: 0
        }), o.children[o.index] = c.children, o = c;
      n++;
    }
    i + 1 < a && (r.push(c = {
      children: [],
      index: 0
    }), o.children[o.index] = c.children, o = c);
  }
  return r[0].children;
}
function Yc(t, e, n) {
  return 64 * ((t.blocksPerLine + 1) * e + n);
}
function L2(t, e, n, i, s, a, r, o, c, l = !1) {
  const h = n.mcusPerLine, f = n.progressive, u = e;
  let d = 0, x = 0;
  function g() {
    if (x > 0)
      return x--, d >> x & 1;
    if (d = t[e++], d === 255) {
      const pe = t[e++];
      if (pe) {
        if (pe === 220 && l) {
          e += 2;
          const B = We(t, e);
          if (e += 2, B > 0 && B !== n.scanLines)
            throw new Kc("Found DNL marker (0xFFDC) while parsing scan data", B);
        } else if (pe === 217) {
          if (l) {
            const B = D * (n.precision === 8 ? 8 : 0);
            if (B > 0 && Math.round(n.scanLines / B) >= 5)
              throw new Kc("Found EOI marker (0xFFD9) while parsing scan data, possibly caused by incorrect `scanLines` parameter", B);
          }
          throw new Ef("Found EOI marker (0xFFD9) while parsing scan data");
        }
        throw new Un(`unexpected marker ${(d << 8 | pe).toString(16)}`);
      }
    }
    return x = 7, d >>> 7;
  }
  function m(pe) {
    let B = pe;
    for (; ; ) {
      switch (B = B[g()], typeof B) {
        case "number":
          return B;
        case "object":
          continue;
      }
      throw new Un("invalid huffman sequence");
    }
  }
  function p(pe) {
    let B = 0;
    for (; pe > 0; )
      B = B << 1 | g(), pe--;
    return B;
  }
  function b(pe) {
    if (pe === 1)
      return g() === 1 ? 1 : -1;
    const B = p(pe);
    return B >= 1 << pe - 1 ? B : B + (-1 << pe) + 1;
  }
  function w(pe, B) {
    const P = m(pe.huffmanTableDC), G = P === 0 ? 0 : b(P);
    pe.blockData[B] = pe.pred += G;
    let z = 1;
    for (; z < 64; ) {
      const ae = m(pe.huffmanTableAC), ue = ae & 15, oe = ae >> 4;
      if (ue === 0) {
        if (oe < 15)
          break;
        z += 16;
        continue;
      }
      z += oe;
      const Y = c0[z];
      pe.blockData[B + Y] = b(ue), z++;
    }
  }
  function y(pe, B) {
    const P = m(pe.huffmanTableDC), G = P === 0 ? 0 : b(P) << c;
    pe.blockData[B] = pe.pred += G;
  }
  function k(pe, B) {
    pe.blockData[B] |= g() << c;
  }
  let S = 0;
  function C(pe, B) {
    if (S > 0) {
      S--;
      return;
    }
    let P = a;
    const G = r;
    for (; P <= G; ) {
      const z = m(pe.huffmanTableAC), ae = z & 15, ue = z >> 4;
      if (ae === 0) {
        if (ue < 15) {
          S = p(ue) + (1 << ue) - 1;
          break;
        }
        P += 16;
        continue;
      }
      P += ue;
      const oe = c0[P];
      pe.blockData[B + oe] = b(ae) * (1 << c), P++;
    }
  }
  let T = 0, F;
  function R(pe, B) {
    let P = a;
    const G = r;
    let z = 0, ae, ue;
    for (; P <= G; ) {
      const oe = B + c0[P], Y = pe.blockData[oe] < 0 ? -1 : 1;
      switch (T) {
        case 0:
          if (ue = m(pe.huffmanTableAC), ae = ue & 15, z = ue >> 4, ae === 0)
            z < 15 ? (S = p(z) + (1 << z), T = 4) : (z = 16, T = 1);
          else {
            if (ae !== 1)
              throw new Un("invalid ACn encoding");
            F = b(ae), T = z ? 2 : 3;
          }
          continue;
        case 1:
        case 2:
          pe.blockData[oe] ? pe.blockData[oe] += Y * (g() << c) : (z--, z === 0 && (T = T === 2 ? 3 : 0));
          break;
        case 3:
          pe.blockData[oe] ? pe.blockData[oe] += Y * (g() << c) : (pe.blockData[oe] = F << c, T = 0);
          break;
        case 4:
          pe.blockData[oe] && (pe.blockData[oe] += Y * (g() << c));
          break;
      }
      P++;
    }
    T === 4 && (S--, S === 0 && (T = 0));
  }
  let D = 0;
  function M(pe, B, P, G, z) {
    const ae = P / h | 0, ue = P % h;
    D = ae * pe.v + G;
    const oe = ue * pe.h + z, Y = Yc(pe, D, oe);
    B(pe, Y);
  }
  function _(pe, B, P) {
    D = P / pe.blocksPerLine | 0;
    const G = P % pe.blocksPerLine, z = Yc(pe, D, G);
    B(pe, z);
  }
  const K = i.length;
  let se, H, W, le, q, L;
  f ? a === 0 ? L = o === 0 ? y : k : L = o === 0 ? C : R : L = w;
  let Fe = 0, ve;
  const Be = K === 1 ? i[0].blocksPerLine * i[0].blocksPerColumn : h * n.mcusPerColumn;
  let Ae, Ve;
  for (; Fe <= Be; ) {
    const pe = s ? Math.min(Be - Fe, s) : Be;
    if (pe > 0) {
      for (H = 0; H < K; H++)
        i[H].pred = 0;
      if (S = 0, K === 1)
        for (se = i[0], q = 0; q < pe; q++)
          _(se, L, Fe), Fe++;
      else
        for (q = 0; q < pe; q++) {
          for (H = 0; H < K; H++)
            for (se = i[H], Ae = se.h, Ve = se.v, W = 0; W < Ve; W++)
              for (le = 0; le < Ae; le++)
                M(se, L, Fe, W, le);
          Fe++;
        }
    }
    if (x = 0, ve = Uo(t, e), !ve)
      break;
    if (ve.invalid) {
      const B = pe > 0 ? "unexpected" : "excessive";
      I(`decodeScan - ${B} MCU data, current marker is: ${ve.invalid}`), e = ve.offset;
    }
    if (ve.marker >= 65488 && ve.marker <= 65495)
      e += 2;
    else
      break;
  }
  return e - u;
}
function _2(t, e, n) {
  const i = t.quantizationTable, s = t.blockData;
  let a, r, o, c, l, h, f, u, d, x, g, m, p, b, w, y, k;
  if (!i)
    throw new Un("missing required Quantization Table.");
  for (let S = 0; S < 64; S += 8) {
    if (d = s[e + S], x = s[e + S + 1], g = s[e + S + 2], m = s[e + S + 3], p = s[e + S + 4], b = s[e + S + 5], w = s[e + S + 6], y = s[e + S + 7], d *= i[S], !(x | g | m | p | b | w | y)) {
      k = $s * d + 512 >> 10, n[S] = k, n[S + 1] = k, n[S + 2] = k, n[S + 3] = k, n[S + 4] = k, n[S + 5] = k, n[S + 6] = k, n[S + 7] = k;
      continue;
    }
    x *= i[S + 1], g *= i[S + 2], m *= i[S + 3], p *= i[S + 4], b *= i[S + 5], w *= i[S + 6], y *= i[S + 7], a = $s * d + 128 >> 8, r = $s * p + 128 >> 8, o = g, c = w, l = Cr * (x - y) + 128 >> 8, u = Cr * (x + y) + 128 >> 8, h = m << 4, f = b << 4, a = a + r + 1 >> 1, r = a - r, k = o * Sr + c * kr + 128 >> 8, o = o * kr - c * Sr + 128 >> 8, c = k, l = l + f + 1 >> 1, f = l - f, u = u + h + 1 >> 1, h = u - h, a = a + c + 1 >> 1, c = a - c, r = r + o + 1 >> 1, o = r - o, k = l * yr + u * wr + 2048 >> 12, l = l * wr - u * yr + 2048 >> 12, u = k, k = h * br + f * mr + 2048 >> 12, h = h * mr - f * br + 2048 >> 12, f = k, n[S] = a + u, n[S + 7] = a - u, n[S + 1] = r + f, n[S + 6] = r - f, n[S + 2] = o + h, n[S + 5] = o - h, n[S + 3] = c + l, n[S + 4] = c - l;
  }
  for (let S = 0; S < 8; ++S) {
    if (d = n[S], x = n[S + 8], g = n[S + 16], m = n[S + 24], p = n[S + 32], b = n[S + 40], w = n[S + 48], y = n[S + 56], !(x | g | m | p | b | w | y)) {
      k = $s * d + 8192 >> 14, k < -2040 ? k = 0 : k >= 2024 ? k = 255 : k = k + 2056 >> 4, s[e + S] = k, s[e + S + 8] = k, s[e + S + 16] = k, s[e + S + 24] = k, s[e + S + 32] = k, s[e + S + 40] = k, s[e + S + 48] = k, s[e + S + 56] = k;
      continue;
    }
    a = $s * d + 2048 >> 12, r = $s * p + 2048 >> 12, o = g, c = w, l = Cr * (x - y) + 2048 >> 12, u = Cr * (x + y) + 2048 >> 12, h = m, f = b, a = (a + r + 1 >> 1) + 4112, r = a - r, k = o * Sr + c * kr + 2048 >> 12, o = o * kr - c * Sr + 2048 >> 12, c = k, l = l + f + 1 >> 1, f = l - f, u = u + h + 1 >> 1, h = u - h, a = a + c + 1 >> 1, c = a - c, r = r + o + 1 >> 1, o = r - o, k = l * yr + u * wr + 2048 >> 12, l = l * wr - u * yr + 2048 >> 12, u = k, k = h * br + f * mr + 2048 >> 12, h = h * mr - f * br + 2048 >> 12, f = k, d = a + u, y = a - u, x = r + f, w = r - f, g = o + h, b = o - h, m = c + l, p = c - l, d < 16 ? d = 0 : d >= 4080 ? d = 255 : d >>= 4, x < 16 ? x = 0 : x >= 4080 ? x = 255 : x >>= 4, g < 16 ? g = 0 : g >= 4080 ? g = 255 : g >>= 4, m < 16 ? m = 0 : m >= 4080 ? m = 255 : m >>= 4, p < 16 ? p = 0 : p >= 4080 ? p = 255 : p >>= 4, b < 16 ? b = 0 : b >= 4080 ? b = 255 : b >>= 4, w < 16 ? w = 0 : w >= 4080 ? w = 255 : w >>= 4, y < 16 ? y = 0 : y >= 4080 ? y = 255 : y >>= 4, s[e + S] = d, s[e + S + 8] = x, s[e + S + 16] = g, s[e + S + 24] = m, s[e + S + 32] = p, s[e + S + 40] = b, s[e + S + 48] = w, s[e + S + 56] = y;
  }
}
function U2(t, e) {
  const n = e.blocksPerLine, i = e.blocksPerColumn, s = new Int16Array(64);
  for (let a = 0; a < i; a++)
    for (let r = 0; r < n; r++) {
      const o = Yc(e, a, r);
      _2(e, o, s);
    }
  return e.blockData;
}
function Uo(t, e, n = e) {
  const i = t.length - 1;
  let s = n < e ? n : e;
  if (e >= i)
    return null;
  const a = We(t, e);
  if (a >= 65472 && a <= 65534)
    return {
      invalid: null,
      marker: a,
      offset: e
    };
  let r = We(t, s);
  for (; !(r >= 65472 && r <= 65534); ) {
    if (++s >= i)
      return null;
    r = We(t, s);
  }
  return {
    invalid: a.toString(16),
    marker: r,
    offset: s
  };
}
function j2(t) {
  const e = Math.ceil(t.samplesPerLine / 8 / t.maxH), n = Math.ceil(t.scanLines / 8 / t.maxV);
  for (const i of t.components) {
    const s = Math.ceil(Math.ceil(t.samplesPerLine / 8) * i.h / t.maxH), a = Math.ceil(Math.ceil(t.scanLines / 8) * i.v / t.maxV), r = e * i.h, c = 64 * (n * i.v) * (r + 1);
    i.blockData = new Int16Array(c), i.blocksPerLine = s, i.blocksPerColumn = a;
  }
  t.mcusPerLine = e, t.mcusPerColumn = n;
}
function D1(t, e) {
  const n = We(t, e);
  e += 2;
  let i = e + n - 2;
  const s = Uo(t, i, e);
  s != null && s.invalid && (I("readDataBlock - incorrect length, current marker is: " + s.invalid), i = s.offset);
  const a = t.subarray(e, i);
  return {
    appData: a,
    oldOffset: e,
    newOffset: e + a.length
  };
}
function q2(t, e) {
  const n = We(t, e);
  e += 2;
  const i = e + n - 2, s = Uo(t, i, e);
  return s != null && s.invalid ? s.offset : i;
}
class P1 {
  constructor({
    decodeTransform: e = null,
    colorTransform: n = -1
  } = {}) {
    this._decodeTransform = e, this._colorTransform = n;
  }
  static canUseImageDecoder(e, n = -1) {
    let i = null, s = 0, a = null, r = We(e, s);
    if (s += 2, r !== 65496)
      throw new Un("SOI not found");
    r = We(e, s), s += 2;
    e: for (; r !== 65497; ) {
      switch (r) {
        case 65505:
          const {
            appData: o,
            oldOffset: c,
            newOffset: l
          } = D1(e, s);
          if (s = l, o[0] === 69 && o[1] === 120 && o[2] === 105 && o[3] === 102 && o[4] === 0 && o[5] === 0) {
            if (i)
              throw new Un("Duplicate EXIF-blocks found.");
            i = {
              exifStart: c + 6,
              exifEnd: l
            };
          }
          r = We(e, s), s += 2;
          continue;
        case 65472:
        case 65473:
        case 65474:
          a = e[s + 7];
          break e;
        case 65535:
          e[s] !== 255 && s--;
          break;
      }
      s = q2(e, s), r = We(e, s), s += 2;
    }
    return a === 4 || a === 3 && n === 0 ? null : i || {};
  }
  parse(e, {
    dnlScanLines: n = null
  } = {}) {
    let i = 0, s = null, a = null, r, o, c = 0;
    const l = [], h = [], f = [];
    let u = We(e, i);
    if (i += 2, u !== 65496)
      throw new Un("SOI not found");
    u = We(e, i), i += 2;
    e: for (; u !== 65497; ) {
      let d, x, g;
      switch (u) {
        case 65504:
        case 65505:
        case 65506:
        case 65507:
        case 65508:
        case 65509:
        case 65510:
        case 65511:
        case 65512:
        case 65513:
        case 65514:
        case 65515:
        case 65516:
        case 65517:
        case 65518:
        case 65519:
        case 65534:
          const {
            appData: m,
            newOffset: p
          } = D1(e, i);
          i = p, u === 65504 && m[0] === 74 && m[1] === 70 && m[2] === 73 && m[3] === 70 && m[4] === 0 && (s = {
            version: {
              major: m[5],
              minor: m[6]
            },
            densityUnits: m[7],
            xDensity: m[8] << 8 | m[9],
            yDensity: m[10] << 8 | m[11],
            thumbWidth: m[12],
            thumbHeight: m[13],
            thumbData: m.subarray(14, 14 + 3 * m[12] * m[13])
          }), u === 65518 && m[0] === 65 && m[1] === 100 && m[2] === 111 && m[3] === 98 && m[4] === 101 && (a = {
            version: m[5] << 8 | m[6],
            flags0: m[7] << 8 | m[8],
            flags1: m[9] << 8 | m[10],
            transformCode: m[11]
          });
          break;
        case 65499:
          const b = We(e, i);
          i += 2;
          const w = b + i - 2;
          let y;
          for (; i < w; ) {
            const W = e[i++], le = new Uint16Array(64);
            if (W >> 4)
              if (W >> 4 === 1)
                for (x = 0; x < 64; x++)
                  y = c0[x], le[y] = We(e, i), i += 2;
              else
                throw new Un("DQT - invalid table spec");
            else for (x = 0; x < 64; x++)
              y = c0[x], le[y] = e[i++];
            l[W & 15] = le;
          }
          break;
        case 65472:
        case 65473:
        case 65474:
          if (r)
            throw new Un("Only single frame JPEGs supported");
          i += 2, r = {}, r.extended = u === 65473, r.progressive = u === 65474, r.precision = e[i++];
          const k = We(e, i);
          i += 2, r.scanLines = n || k, r.samplesPerLine = We(e, i), i += 2, r.components = [], r.componentIds = {};
          const S = e[i++];
          let C = 0, T = 0;
          for (d = 0; d < S; d++) {
            const W = e[i], le = e[i + 1] >> 4, q = e[i + 1] & 15;
            C < le && (C = le), T < q && (T = q);
            const L = e[i + 2];
            g = r.components.push({
              h: le,
              v: q,
              quantizationId: L,
              quantizationTable: null
            }), r.componentIds[W] = g - 1, i += 3;
          }
          r.maxH = C, r.maxV = T, j2(r);
          break;
        case 65476:
          const F = We(e, i);
          for (i += 2, d = 2; d < F; ) {
            const W = e[i++], le = new Uint8Array(16);
            let q = 0;
            for (x = 0; x < 16; x++, i++)
              q += le[x] = e[i];
            const L = new Uint8Array(q);
            for (x = 0; x < q; x++, i++)
              L[x] = e[i];
            d += 17 + q, (W >> 4 ? h : f)[W & 15] = O2(le, L);
          }
          break;
        case 65501:
          i += 2, o = We(e, i), i += 2;
          break;
        case 65498:
          const R = ++c === 1 && !n;
          i += 2;
          const D = e[i++], M = [];
          for (d = 0; d < D; d++) {
            const W = e[i++], le = r.componentIds[W], q = r.components[le];
            q.index = W;
            const L = e[i++];
            q.huffmanTableDC = f[L >> 4], q.huffmanTableAC = h[L & 15], M.push(q);
          }
          const _ = e[i++], K = e[i++], se = e[i++];
          try {
            const W = L2(e, i, r, M, o, _, K, se >> 4, se & 15, R);
            i += W;
          } catch (W) {
            if (W instanceof Kc)
              return I(`${W.message} -- attempting to re-parse the JPEG image.`), this.parse(e, {
                dnlScanLines: W.scanLines
              });
            if (W instanceof Ef) {
              I(`${W.message} -- ignoring the rest of the image data.`);
              break e;
            }
            throw W;
          }
          break;
        case 65500:
          i += 4;
          break;
        case 65535:
          e[i] !== 255 && i--;
          break;
        default:
          const H = Uo(e, i - 2, i - 3);
          if (H != null && H.invalid) {
            I("JpegImage.parse - unexpected data, current marker is: " + H.invalid), i = H.offset;
            break;
          }
          if (!H || i >= e.length - 1) {
            I("JpegImage.parse - reached the end of the image data without finding an EOI marker (0xFFD9).");
            break e;
          }
          throw new Un("JpegImage.parse - unknown marker: " + u.toString(16));
      }
      u = We(e, i), i += 2;
    }
    if (!r)
      throw new Un("JpegImage.parse - no frame data found.");
    this.width = r.samplesPerLine, this.height = r.scanLines, this.jfif = s, this.adobe = a, this.components = [];
    for (const d of r.components) {
      const x = l[d.quantizationId];
      x && (d.quantizationTable = x), this.components.push({
        index: d.index,
        output: U2(r, d),
        scaleX: d.h / r.maxH,
        scaleY: d.v / r.maxV,
        blocksPerLine: d.blocksPerLine,
        blocksPerColumn: d.blocksPerColumn
      });
    }
    this.numComponents = this.components.length;
  }
  _getLinearizedBlockData(e, n, i = !1) {
    const s = this.width / e, a = this.height / n;
    let r, o, c, l, h, f, u, d, x, g, m = 0, p;
    const b = this.components.length, w = e * n * b, y = new Uint8ClampedArray(w), k = new Uint32Array(e), S = 4294967288;
    let C;
    for (u = 0; u < b; u++) {
      if (r = this.components[u], o = r.scaleX * s, c = r.scaleY * a, m = u, p = r.output, l = r.blocksPerLine + 1 << 3, o !== C) {
        for (h = 0; h < e; h++)
          d = 0 | h * o, k[h] = (d & S) << 3 | d & 7;
        C = o;
      }
      for (f = 0; f < n; f++)
        for (d = 0 | f * c, g = l * (d & S) | (d & 7) << 3, h = 0; h < e; h++)
          y[m] = p[g + k[h]], m += b;
    }
    let T = this._decodeTransform;
    if (!i && b === 4 && !T && (T = new Int32Array([-256, 255, -256, 255, -256, 255, -256, 255])), T)
      for (u = 0; u < w; )
        for (d = 0, x = 0; d < b; d++, u++, x += 2)
          y[u] = (y[u] * T[x] >> 8) + T[x + 1];
    return y;
  }
  get _isColorConversionNeeded() {
    return this.adobe ? !!this.adobe.transformCode : this.numComponents === 3 ? this._colorTransform === 0 ? !1 : !(this.components[0].index === 82 && this.components[1].index === 71 && this.components[2].index === 66) : this._colorTransform === 1;
  }
  _convertYccToRgb(e) {
    let n, i, s;
    for (let a = 0, r = e.length; a < r; a += 3)
      n = e[a], i = e[a + 1], s = e[a + 2], e[a] = n - 179.456 + 1.402 * s, e[a + 1] = n + 135.459 - 0.344 * i - 0.714 * s, e[a + 2] = n - 226.816 + 1.772 * i;
    return e;
  }
  _convertYccToRgba(e, n) {
    for (let i = 0, s = 0, a = e.length; i < a; i += 3, s += 4) {
      const r = e[i], o = e[i + 1], c = e[i + 2];
      n[s] = r - 179.456 + 1.402 * c, n[s + 1] = r + 135.459 - 0.344 * o - 0.714 * c, n[s + 2] = r - 226.816 + 1.772 * o, n[s + 3] = 255;
    }
    return n;
  }
  _convertYcckToRgb(e) {
    return this._convertYcckToCmyk(e), this._convertCmykToRgb(e);
  }
  _convertYcckToRgba(e) {
    return this._convertYcckToCmyk(e), this._convertCmykToRgba(e);
  }
  _convertYcckToCmyk(e) {
    let n, i, s;
    for (let a = 0, r = e.length; a < r; a += 4)
      n = e[a], i = e[a + 1], s = e[a + 2], e[a] = 434.456 - n - 1.402 * s, e[a + 1] = 119.541 - n + 0.344 * i + 0.714 * s, e[a + 2] = 481.816 - n - 1.772 * i;
    return e;
  }
  _convertCmykToRgb(e) {
    const n = e.length / 4;
    return Qe.cmyk.getRgbBuffer(e, 0, n, e, 0, 8, 0), e.subarray(0, n * 3);
  }
  _convertCmykToRgba(e) {
    if (Qe.cmyk.getRgbBuffer(e, 0, e.length / 4, e, 0, 8, 1), Qe.cmyk instanceof kf)
      for (let n = 3, i = e.length; n < i; n += 4)
        e[n] = 255;
    return e;
  }
  getData({
    width: e,
    height: n,
    forceRGBA: i = !1,
    forceRGB: s = !1,
    isSourcePDF: a = !1
  }) {
    if (this.numComponents > 4)
      throw new Un("Unsupported color mode");
    const r = this._getLinearizedBlockData(e, n, a);
    if (this.numComponents === 1 && (i || s)) {
      const o = r.length * (i ? 4 : 3), c = new Uint8ClampedArray(o);
      let l = 0;
      if (i)
        M2(r, new Uint32Array(c.buffer));
      else
        for (const h of r)
          c[l++] = h, c[l++] = h, c[l++] = h;
      return c;
    } else if (this.numComponents === 3 && this._isColorConversionNeeded) {
      if (i) {
        const o = new Uint8ClampedArray(r.length / 3 * 4);
        return this._convertYccToRgba(r, o);
      }
      return this._convertYccToRgb(r);
    } else if (this.numComponents === 4) {
      if (this._isColorConversionNeeded)
        return i ? this._convertYcckToRgba(r) : s ? this._convertYcckToRgb(r) : this._convertYcckToCmyk(r);
      if (i)
        return this._convertCmykToRgba(r);
      if (s)
        return this._convertCmykToRgb(r);
    }
    return r;
  }
}
var W0, V0, Zc;
const Ro = class Ro extends mn {
  constructor(n, i, s) {
    super(i);
    Ee(this, V0);
    this.stream = n, this.dict = n.dict, this.maybeLength = i, this.params = s;
  }
  static get canUseImageDecoder() {
    return Q(this, "canUseImageDecoder", ce(this, W0) ? ImageDecoder.isTypeSupported("image/jpeg") : Promise.resolve(!1));
  }
  static setOptions({
    isImageDecoderSupported: n = !1
  }) {
    ct(this, W0, n);
  }
  get bytes() {
    return Q(this, "bytes", this.stream.getBytes(this.maybeLength));
  }
  ensureBuffer(n) {
  }
  readBlock() {
    this.decodeImage();
  }
  get jpegOptions() {
    const n = {
      decodeTransform: void 0,
      colorTransform: void 0
    }, i = this.dict.getArray("D", "Decode");
    if ((this.forceRGBA || this.forceRGB) && Array.isArray(i)) {
      const s = this.dict.get("BPC", "BitsPerComponent") || 8, a = i.length, r = new Int32Array(a);
      let o = !1;
      const c = (1 << s) - 1;
      for (let l = 0; l < a; l += 2)
        r[l] = (i[l + 1] - i[l]) * 256 | 0, r[l + 1] = i[l] * c | 0, (r[l] !== 256 || r[l + 1] !== 0) && (o = !0);
      o && (n.decodeTransform = r);
    }
    if (this.params instanceof E) {
      const s = this.params.get("ColorTransform");
      Number.isInteger(s) && (n.colorTransform = s);
    }
    return Q(this, "jpegOptions", n);
  }
  decodeImage(n) {
    if (this.eof)
      return this.buffer;
    n = J(this, V0, Zc).call(this, n || this.bytes);
    const i = new P1(this.jpegOptions);
    i.parse(n);
    const s = i.getData({
      width: this.drawWidth,
      height: this.drawHeight,
      forceRGBA: this.forceRGBA,
      forceRGB: this.forceRGB,
      isSourcePDF: !0
    });
    return this.buffer = s, this.bufferLength = s.length, this.eof = !0, this.buffer;
  }
  get canAsyncDecodeImageFromBuffer() {
    return this.stream.isAsync;
  }
  async getTransferableImage() {
    if (!await Ro.canUseImageDecoder)
      return null;
    const n = this.jpegOptions;
    if (n.decodeTransform)
      return null;
    let i;
    try {
      const s = this.canAsyncDecodeImageFromBuffer && await this.stream.asyncGetBytes() || this.bytes;
      if (!s)
        return null;
      let a = J(this, V0, Zc).call(this, s);
      const r = P1.canUseImageDecoder(a, n.colorTransform);
      return r ? (r.exifStart && (a = a.slice(), a.fill(0, r.exifStart, r.exifEnd)), i = new ImageDecoder({
        data: a,
        type: "image/jpeg",
        preferAnimation: !1
      }), (await i.decode()).image) : null;
    } catch (s) {
      return I(`getTransferableImage - failed: "${s}".`), null;
    } finally {
      i == null || i.close();
    }
  }
};
W0 = new WeakMap(), V0 = new WeakSet(), Zc = function(n) {
  for (let i = 0, s = n.length - 1; i < s; i++)
    if (n[i] === 255 && n[i + 1] === 216) {
      i > 0 && (n = n.subarray(i));
      break;
    }
  return n;
}, Ee(Ro, W0, An.isImageDecoderSupported);
let Ia = Ro;
var H2 = async function(t = {}) {
  var e, n = t, i, s, a = new Promise((Z, ee) => {
    i = Z, s = ee;
  }), r = "./this.program", o = (Z, ee) => {
    throw ee;
  }, c = import.meta.url, l = "";
  try {
    l = new URL(".", c).href;
  } catch {
  }
  var h = console.log.bind(console), f = console.error.bind(console), u, d = !1, x, g, m, p, b;
  function w() {
    var Z = u.buffer;
    g = new Int8Array(Z), m = new Uint8Array(Z), p = new Int32Array(Z), b = new Uint32Array(Z), new BigInt64Array(Z), new BigUint64Array(Z);
  }
  function y() {
    if (n.preRun)
      for (typeof n.preRun == "function" && (n.preRun = [n.preRun]); n.preRun.length; )
        q(n.preRun.shift());
    se(le);
  }
  function k() {
    vi.t();
  }
  function S() {
    if (n.postRun)
      for (typeof n.postRun == "function" && (n.postRun = [n.postRun]); n.postRun.length; )
        W(n.postRun.shift());
    se(H);
  }
  var C = 0, T = null;
  function F(Z) {
    var ee;
    C++, (ee = n.monitorRunDependencies) == null || ee.call(n, C);
  }
  function R(Z) {
    var me;
    if (C--, (me = n.monitorRunDependencies) == null || me.call(n, C), C == 0 && T) {
      var ee = T;
      T = null, ee();
    }
  }
  function D(Z) {
    var me;
    (me = n.onAbort) == null || me.call(n, Z), Z = "Aborted(" + Z + ")", f(Z), d = !0, Z += ". Build with -sASSERTIONS for more info.";
    var ee = new WebAssembly.RuntimeError(Z);
    throw s(ee), ee;
  }
  function M() {
    return {
      a: Ed
    };
  }
  async function _() {
    function Z(me, Le) {
      return vi = me.exports, u = vi.s, w(), R(), vi;
    }
    F();
    var ee = M();
    return new Promise((me, Le) => {
      n.instantiateWasm(ee, (He, xt) => {
        me(Z(He));
      });
    });
  }
  class K {
    constructor(ee) {
      Ye(this, "name", "ExitStatus");
      this.message = `Program terminated with exit(${ee})`, this.status = ee;
    }
  }
  var se = (Z) => {
    for (; Z.length > 0; )
      Z.shift()(n);
  }, H = [], W = (Z) => H.push(Z), le = [], q = (Z) => le.push(Z), L = !0, Fe = () => D(""), ve = 0, Be = () => {
    L = !1, ve = 0;
  }, Ae = {}, Ve = (Z) => {
    if (Z instanceof K || Z == "unwind")
      return x;
    o(1, Z);
  }, pe = () => L || ve > 0, B = (Z) => {
    var ee;
    x = Z, pe() || ((ee = n.onExit) == null || ee.call(n, Z), d = !0), o(Z, new K(Z));
  }, P = (Z, ee) => {
    x = Z, B(Z);
  }, G = P, z = () => {
    if (!pe())
      try {
        G(x);
      } catch (Z) {
        Ve(Z);
      }
  }, ae = (Z) => {
    if (!d)
      try {
        Z(), z();
      } catch (ee) {
        Ve(ee);
      }
  }, ue = () => performance.now(), oe = (Z, ee) => {
    if (Ae[Z] && (clearTimeout(Ae[Z].id), delete Ae[Z]), !ee) return 0;
    var me = setTimeout(() => {
      delete Ae[Z], ae(() => Rd(Z, ue()));
    }, ee);
    return Ae[Z] = {
      id: me,
      timeout_ms: ee
    }, 0;
  };
  function Y(Z, ee) {
    Z >>= 2;
    const me = n.imageData = new Uint8ClampedArray(ee), Le = p.subarray(Z, Z + ee);
    me.set(Le);
  }
  function Pe(Z, ee, me, Le) {
    Z >>= 2, ee >>= 2, me >>= 2;
    const He = n.imageData = new Uint8ClampedArray(Le * 3), xt = p.subarray(Z, Z + Le), st = p.subarray(ee, ee + Le), gt = p.subarray(me, me + Le);
    for (let pt = 0; pt < Le; pt++)
      He[3 * pt] = xt[pt], He[3 * pt + 1] = st[pt], He[3 * pt + 2] = gt[pt];
  }
  function fe(Z, ee, me, Le, He) {
    Z >>= 2, ee >>= 2, me >>= 2, Le >>= 2;
    const xt = n.imageData = new Uint8ClampedArray(He * 4), st = p.subarray(Z, Z + He), gt = p.subarray(ee, ee + He), pt = p.subarray(me, me + He), pr = p.subarray(Le, Le + He);
    for (let hi = 0; hi < He; hi++)
      xt[4 * hi] = st[hi], xt[4 * hi + 1] = gt[hi], xt[4 * hi + 2] = pt[hi], xt[4 * hi + 3] = pr[hi];
  }
  var be = () => 2147483648, te = (Z, ee) => Math.ceil(Z / ee) * ee, we = (Z) => {
    var ee = u.buffer, me = (Z - ee.byteLength + 65535) / 65536 | 0;
    try {
      return u.grow(me), w(), 1;
    } catch {
    }
  }, Se = (Z) => {
    var ee = m.length;
    Z >>>= 0;
    var me = be();
    if (Z > me)
      return !1;
    for (var Le = 1; Le <= 4; Le *= 2) {
      var He = ee * (1 + 0.2 / Le);
      He = Math.min(He, Z + 100663296);
      var xt = Math.min(me, te(Math.max(Z, He), 65536)), st = we(xt);
      if (st)
        return !0;
    }
    return !1;
  }, ke = {}, Oe = () => r || "./this.program", de = () => {
    if (!de.strings) {
      var Z = (typeof navigator == "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", ee = {
        USER: "web_user",
        LOGNAME: "web_user",
        PATH: "/",
        PWD: "/",
        HOME: "/home/web_user",
        LANG: Z,
        _: Oe()
      };
      for (var me in ke)
        ke[me] === void 0 ? delete ee[me] : ee[me] = ke[me];
      var Le = [];
      for (var me in ee)
        Le.push(`${me}=${ee[me]}`);
      de.strings = Le;
    }
    return de.strings;
  }, ie = (Z, ee, me, Le) => {
    if (!(Le > 0)) return 0;
    for (var He = me, xt = me + Le - 1, st = 0; st < Z.length; ++st) {
      var gt = Z.charCodeAt(st);
      if (gt >= 55296 && gt <= 57343) {
        var pt = Z.charCodeAt(++st);
        gt = 65536 + ((gt & 1023) << 10) | pt & 1023;
      }
      if (gt <= 127) {
        if (me >= xt) break;
        ee[me++] = gt;
      } else if (gt <= 2047) {
        if (me + 1 >= xt) break;
        ee[me++] = 192 | gt >> 6, ee[me++] = 128 | gt & 63;
      } else if (gt <= 65535) {
        if (me + 2 >= xt) break;
        ee[me++] = 224 | gt >> 12, ee[me++] = 128 | gt >> 6 & 63, ee[me++] = 128 | gt & 63;
      } else {
        if (me + 3 >= xt) break;
        ee[me++] = 240 | gt >> 18, ee[me++] = 128 | gt >> 12 & 63, ee[me++] = 128 | gt >> 6 & 63, ee[me++] = 128 | gt & 63;
      }
    }
    return ee[me] = 0, me - He;
  }, ye = (Z, ee, me) => ie(Z, m, ee, me), ze = (Z, ee) => {
    var me = 0, Le = 0;
    for (var He of de()) {
      var xt = ee + me;
      b[Z + Le >> 2] = xt, me += ye(He, xt, 1 / 0) + 1, Le += 4;
    }
    return 0;
  }, xe = (Z) => {
    for (var ee = 0, me = 0; me < Z.length; ++me) {
      var Le = Z.charCodeAt(me);
      Le <= 127 ? ee++ : Le <= 2047 ? ee += 2 : Le >= 55296 && Le <= 57343 ? (ee += 4, ++me) : ee += 3;
    }
    return ee;
  }, Re = (Z, ee) => {
    var me = de();
    b[Z >> 2] = me.length;
    var Le = 0;
    for (var He of me)
      Le += xe(He) + 1;
    return b[ee >> 2] = Le, 0;
  }, _e = (Z) => 52;
  function it(Z, ee, me, Le) {
    return 70;
  }
  var Ue = [null, [], []], Nt = typeof TextDecoder < "u" ? new TextDecoder() : void 0, Ot = (Z, ee = 0, me = NaN) => {
    for (var Le = ee + me, He = ee; Z[He] && !(He >= Le); ) ++He;
    if (He - ee > 16 && Z.buffer && Nt)
      return Nt.decode(Z.subarray(ee, He));
    for (var xt = ""; ee < He; ) {
      var st = Z[ee++];
      if (!(st & 128)) {
        xt += String.fromCharCode(st);
        continue;
      }
      var gt = Z[ee++] & 63;
      if ((st & 224) == 192) {
        xt += String.fromCharCode((st & 31) << 6 | gt);
        continue;
      }
      var pt = Z[ee++] & 63;
      if ((st & 240) == 224 ? st = (st & 15) << 12 | gt << 6 | pt : st = (st & 7) << 18 | gt << 12 | pt << 6 | Z[ee++] & 63, st < 65536)
        xt += String.fromCharCode(st);
      else {
        var pr = st - 65536;
        xt += String.fromCharCode(55296 | pr >> 10, 56320 | pr & 1023);
      }
    }
    return xt;
  }, Fn = (Z, ee) => {
    var me = Ue[Z];
    ee === 0 || ee === 10 ? ((Z === 1 ? h : f)(Ot(me)), me.length = 0) : me.push(ee);
  }, Ai = (Z, ee) => Z ? Ot(m, Z, ee) : "", ec = (Z, ee, me, Le) => {
    for (var He = 0, xt = 0; xt < me; xt++) {
      var st = b[ee >> 2], gt = b[ee + 4 >> 2];
      ee += 8;
      for (var pt = 0; pt < gt; pt++)
        Fn(Z, m[st + pt]);
      He += gt;
    }
    return b[Le >> 2] = He, 0;
  };
  function fr(Z, ee) {
    Z >>= 2;
    const me = n.imageData = new Uint8ClampedArray(ee * 4), Le = p.subarray(Z, Z + ee);
    for (let He = 0; He < ee; He++)
      me[4 * He] = me[4 * He + 1] = me[4 * He + 2] = Le[He], me[4 * He + 3] = 255;
  }
  function ur(Z, ee, me) {
    Z >>= 2, ee >>= 2;
    const Le = n.imageData = new Uint8ClampedArray(me * 4), He = p.subarray(Z, Z + me), xt = p.subarray(ee, ee + me);
    for (let st = 0; st < me; st++)
      Le[4 * st] = Le[4 * st + 1] = Le[4 * st + 2] = He[st], Le[4 * st + 3] = xt[st];
  }
  function dr(Z) {
    const ee = Ai(Z);
    (n.warn || console.warn)(`OpenJPEG: ${ee}`);
  }
  function xr(Z, ee, me, Le) {
    Z >>= 2, ee >>= 2, me >>= 2;
    const He = n.imageData = new Uint8ClampedArray(Le * 4), xt = p.subarray(Z, Z + Le), st = p.subarray(ee, ee + Le), gt = p.subarray(me, me + Le);
    for (let pt = 0; pt < Le; pt++)
      He[4 * pt] = xt[pt], He[4 * pt + 1] = st[pt], He[4 * pt + 2] = gt[pt], He[4 * pt + 3] = 255;
  }
  function gr(Z) {
    const ee = Ai(Z);
    n.errorMessages ? n.errorMessages += `
` + ee : n.errorMessages = ee;
  }
  var tc = (Z, ee) => {
    g.set(Z, ee);
  };
  n.noExitRuntime && (L = n.noExitRuntime), n.print && (h = n.print), n.printErr && (f = n.printErr), n.wasmBinary && n.wasmBinary, n.arguments && n.arguments, n.thisProgram && (r = n.thisProgram), n.writeArrayToMemory = tc;
  var Ed = {
    l: Fe,
    k: Be,
    m: oe,
    g: Y,
    f: Pe,
    e: fe,
    n: Se,
    p: ze,
    q: Re,
    b: _e,
    o: it,
    c: ec,
    r: fr,
    i: ur,
    d: dr,
    j: B,
    h: xr,
    a: gr
  }, vi = await _();
  vi.t, n._malloc = vi.u, n._free = vi.v, n._jp2_decode = vi.w;
  var Rd = vi.x;
  function nc() {
    if (C > 0) {
      T = nc;
      return;
    }
    if (y(), C > 0) {
      T = nc;
      return;
    }
    function Z() {
      var ee;
      n.calledRun = !0, !d && (k(), i(n), (ee = n.onRuntimeInitialized) == null || ee.call(n), S());
    }
    n.setStatus ? (n.setStatus("Running..."), setTimeout(() => {
      setTimeout(() => n.setStatus(""), 1), Z();
    }, 1)) : Z();
  }
  function Md() {
    if (n.preInit)
      for (typeof n.preInit == "function" && (n.preInit = [n.preInit]); n.preInit.length > 0; )
        n.preInit.shift()();
  }
  return Md(), nc(), e = a, e;
};
const G2 = H2;
class Ar extends bn {
  constructor(e) {
    super(e, "JpxError");
  }
}
var vs, ya, Is, X0, K0, ka, Us, Jc, Rf;
class Jn {
  static setOptions({
    handler: e,
    useWasm: n,
    useWorkerFetch: i,
    wasmUrl: s
  }) {
    ct(this, X0, n), ct(this, K0, i), ct(this, ka, s), i || ct(this, ya, e);
  }
  static async decode(e, {
    numComponents: n = 4,
    isIndexedColormap: i = !1,
    smaskInData: s = !1,
    reducePower: a = 0
  } = {}) {
    if (!ce(this, Is)) {
      const {
        promise: c,
        resolve: l
      } = Promise.withResolvers(), h = [c];
      ce(this, X0) ? h.push(G2({
        warn: I,
        instantiateWasm: J(this, Us, Rf).bind(this, l)
      })) : J(this, Us, Jc).call(this, l), ct(this, Is, Promise.race(h));
    }
    const r = await ce(this, Is);
    if (!r)
      throw new Ar("OpenJPEG failed to initialize");
    let o;
    try {
      const c = e.length;
      if (o = r._malloc(c), r.writeArrayToMemory(e, o), r._jp2_decode(o, c, n > 0 ? n : 0, !!i, !!s, a)) {
        const {
          errorMessages: f
        } = r;
        throw f ? (delete r.errorMessages, new Ar(f)) : new Ar("Unknown error");
      }
      const {
        imageData: h
      } = r;
      return r.imageData = null, h;
    } finally {
      o && r._free(o);
    }
  }
  static cleanup() {
    ct(this, Is, null);
  }
  static parseImageProperties(e) {
    let n = e.getByte();
    for (; n >= 0; ) {
      const i = n;
      if (n = e.getByte(), (i << 8 | n) === 65361) {
        e.skip(4);
        const a = e.getInt32() >>> 0, r = e.getInt32() >>> 0, o = e.getInt32() >>> 0, c = e.getInt32() >>> 0;
        e.skip(16);
        const l = e.getUint16();
        return {
          width: a - o,
          height: r - c,
          bitsPerComponent: 8,
          componentsCount: l
        };
      }
    }
    throw new Ar("No size marker found in JPX stream");
  }
}
vs = new WeakMap(), ya = new WeakMap(), Is = new WeakMap(), X0 = new WeakMap(), K0 = new WeakMap(), ka = new WeakMap(), Us = new WeakSet(), Jc = async function(e) {
  const n = `${ce(this, ka)}openjpeg_nowasm_fallback.js`;
  let i = null;
  try {
    i = (await import(
      /*webpackIgnore: true*/
      /*@vite-ignore*/
      n
    )).default();
  } catch (s) {
    I(`JpxImage#getJsModule: ${s}`);
  }
  e(i);
}, Rf = async function(e, n, i) {
  const s = "openjpeg.wasm";
  try {
    ce(this, vs) || (ce(this, K0) ? ct(this, vs, await Uc(`${ce(this, ka)}${s}`)) : ct(this, vs, await ce(this, ya).sendWithPromise("FetchBinaryData", {
      type: "wasmFactory",
      filename: s
    })));
    const a = await WebAssembly.instantiate(ce(this, vs), n);
    return i(a.instance);
  } catch (a) {
    return I(`JpxImage#instantiateWasm: ${a}`), J(this, Us, Jc).call(this, e), null;
  } finally {
    ct(this, ya, null);
  }
}, Ee(Jn, Us), Ee(Jn, vs, null), Ee(Jn, ya, null), Ee(Jn, Is, null), Ee(Jn, X0, !0), Ee(Jn, K0, !0), Ee(Jn, ka, null);
function nr(t, e, n, i, s) {
  let a = t;
  for (let r = 0, o = e.length - 1; r < o; r++) {
    const c = e[r];
    a = a[c] || (a[c] = []);
  }
  a[e.at(-1)] = {
    checkFn: n,
    iterateFn: i,
    processFn: s
  };
}
const Os = [];
nr(Os, [A.save, A.transform, A.paintInlineImageXObject, A.restore], null, function(e, n) {
  const i = e.fnArray, s = e.iCurr - 3, a = (n - s) % 4;
  switch (a) {
    case 0:
      return i[n] === A.save;
    case 1:
      return i[n] === A.transform;
    case 2:
      return i[n] === A.paintInlineImageXObject;
    case 3:
      return i[n] === A.restore;
  }
  throw new Error(`iterateInlineImageGroup - invalid pos: ${a}`);
}, function(e, n) {
  const o = e.fnArray, c = e.argsArray, l = e.iCurr, h = l - 3, f = l - 2, u = l - 1, d = Math.min(Math.floor((n - h) / 4), 200);
  if (d < 10)
    return n - (n - h) % 4;
  let x = 0;
  const g = [];
  let m = 0, p = 1, b = 1;
  for (let T = 0; T < d; T++) {
    const F = c[f + (T << 2)], R = c[u + (T << 2)][0];
    p + R.width > 1e3 && (x = Math.max(x, p), b += m + 2 * 1, p = 0, m = 0), g.push({
      transform: F,
      x: p,
      y: b,
      w: R.width,
      h: R.height
    }), p += R.width + 2 * 1, m = Math.max(m, R.height);
  }
  const w = Math.max(x, p) + 1, y = b + m + 1, k = new Uint8Array(w * y * 4), S = w << 2;
  for (let T = 0; T < d; T++) {
    const F = c[u + (T << 2)][0].data, R = g[T].w << 2;
    let D = 0, M = g[T].x + g[T].y * w << 2;
    k.set(F.subarray(0, R), M - S);
    for (let _ = 0, K = g[T].h; _ < K; _++)
      k.set(F.subarray(D, D + R), M), D += R, M += S;
    for (k.set(F.subarray(D - R, D), M); M >= 0; )
      F[M - 4] = F[M], F[M - 3] = F[M + 1], F[M - 2] = F[M + 2], F[M - 1] = F[M + 3], F[M + R] = F[M + R - 4], F[M + R + 1] = F[M + R - 3], F[M + R + 2] = F[M + R - 2], F[M + R + 3] = F[M + R - 1], M -= S;
  }
  const C = {
    width: w,
    height: y
  };
  if (e.isOffscreenCanvasSupported) {
    const T = new OffscreenCanvas(w, y);
    T.getContext("2d").putImageData(new ImageData(new Uint8ClampedArray(k.buffer), w, y), 0, 0), C.bitmap = T.transferToImageBitmap(), C.data = null;
  } else
    C.kind = Gt.RGBA_32BPP, C.data = k;
  return o.splice(h, d * 4, A.paintInlineImageXObjectGroup), c.splice(h, d * 4, [C, g]), h + 1;
});
nr(Os, [A.save, A.transform, A.paintImageMaskXObject, A.restore], null, function(e, n) {
  const i = e.fnArray, s = e.iCurr - 3, a = (n - s) % 4;
  switch (a) {
    case 0:
      return i[n] === A.save;
    case 1:
      return i[n] === A.transform;
    case 2:
      return i[n] === A.paintImageMaskXObject;
    case 3:
      return i[n] === A.restore;
  }
  throw new Error(`iterateImageMaskGroup - invalid pos: ${a}`);
}, function(e, n) {
  const r = e.fnArray, o = e.argsArray, c = e.iCurr, l = c - 3, h = c - 2, f = c - 1;
  let u = Math.floor((n - l) / 4);
  if (u < 10)
    return n - (n - l) % 4;
  let d = !1, x, g;
  const m = o[f][0], p = o[h][0], b = o[h][1], w = o[h][2], y = o[h][3];
  if (b === w) {
    d = !0, x = h + 4;
    let k = f + 4;
    for (let S = 1; S < u; S++, x += 4, k += 4)
      if (g = o[x], o[k][0] !== m || g[0] !== p || g[1] !== b || g[2] !== w || g[3] !== y) {
        S < 10 ? d = !1 : u = S;
        break;
      }
  }
  if (d) {
    u = Math.min(u, 1e3);
    const k = new Float32Array(u * 2);
    x = h;
    for (let S = 0; S < u; S++, x += 4)
      g = o[x], k[S << 1] = g[4], k[(S << 1) + 1] = g[5];
    r.splice(l, u * 4, A.paintImageMaskXObjectRepeat), o.splice(l, u * 4, [m, p, b, w, y, k]);
  } else {
    u = Math.min(u, 100);
    const k = [];
    for (let S = 0; S < u; S++) {
      g = o[h + (S << 2)];
      const C = o[f + (S << 2)][0];
      k.push({
        data: C.data,
        width: C.width,
        height: C.height,
        interpolate: C.interpolate,
        count: C.count,
        transform: g
      });
    }
    r.splice(l, u * 4, A.paintImageMaskXObjectGroup), o.splice(l, u * 4, [k]);
  }
  return l + 1;
});
nr(Os, [A.save, A.transform, A.paintImageXObject, A.restore], function(t) {
  const e = t.argsArray, n = t.iCurr - 2;
  return e[n][1] === 0 && e[n][2] === 0;
}, function(e, n) {
  const i = e.fnArray, s = e.argsArray, a = e.iCurr - 3, r = (n - a) % 4;
  switch (r) {
    case 0:
      return i[n] === A.save;
    case 1:
      if (i[n] !== A.transform)
        return !1;
      const o = e.iCurr - 2, c = s[o][0], l = s[o][3];
      return !(s[n][0] !== c || s[n][1] !== 0 || s[n][2] !== 0 || s[n][3] !== l);
    case 2:
      if (i[n] !== A.paintImageXObject)
        return !1;
      const h = e.iCurr - 1, f = s[h][0];
      return s[n][0] === f;
    case 3:
      return i[n] === A.restore;
  }
  throw new Error(`iterateImageGroup - invalid pos: ${r}`);
}, function(t, e) {
  const s = t.fnArray, a = t.argsArray, r = t.iCurr, o = r - 3, c = r - 2, l = r - 1, h = a[l][0], f = a[c][0], u = a[c][3], d = Math.min(Math.floor((e - o) / 4), 1e3);
  if (d < 3)
    return e - (e - o) % 4;
  const x = new Float32Array(d * 2);
  let g = c;
  for (let p = 0; p < d; p++, g += 4) {
    const b = a[g];
    x[p << 1] = b[4], x[(p << 1) + 1] = b[5];
  }
  const m = [h, f, u, x];
  return s.splice(o, d * 4, A.paintImageXObjectRepeat), a.splice(o, d * 4, m), o + 1;
});
nr(Os, [A.beginText, A.setFont, A.setTextMatrix, A.showText, A.endText], null, function(e, n) {
  const i = e.fnArray, s = e.argsArray, a = e.iCurr - 4, r = (n - a) % 5;
  switch (r) {
    case 0:
      return i[n] === A.beginText;
    case 1:
      return i[n] === A.setFont;
    case 2:
      return i[n] === A.setTextMatrix;
    case 3:
      if (i[n] !== A.showText)
        return !1;
      const o = e.iCurr - 3, c = s[o][0], l = s[o][1];
      return !(s[n][0] !== c || s[n][1] !== l);
    case 4:
      return i[n] === A.endText;
  }
  throw new Error(`iterateShowTextGroup - invalid pos: ${r}`);
}, function(t, e) {
  const s = t.fnArray, a = t.argsArray, r = t.iCurr, o = r - 4, c = r - 3, l = r - 2, h = r - 1, f = r, u = a[c][0], d = a[c][1];
  let x = Math.min(Math.floor((e - o) / 5), 1e3);
  if (x < 3)
    return e - (e - o) % 5;
  let g = o;
  o >= 4 && s[o - 4] === s[c] && s[o - 3] === s[l] && s[o - 2] === s[h] && s[o - 1] === s[f] && a[o - 4][0] === u && a[o - 4][1] === d && (x++, g -= 5);
  let m = g + 4;
  for (let p = 1; p < x; p++)
    s.splice(m, 3), a.splice(m, 3), m += 2;
  return m + 1;
});
nr(Os, [A.save, A.transform, A.constructPath, A.restore], (t) => {
  const e = t.argsArray, n = t.iCurr - 1, i = e[n][0];
  if (i !== A.stroke && i !== A.closeStroke && i !== A.fillStroke && i !== A.eoFillStroke && i !== A.closeFillStroke && i !== A.closeEOFillStroke)
    return !0;
  const s = t.iCurr - 2, a = e[s];
  return a[0] === 1 && a[1] === 0 && a[2] === 0 && a[3] === 1;
}, () => !1, (t, e) => {
  const {
    fnArray: n,
    argsArray: i
  } = t, s = t.iCurr, a = s - 3, r = s - 2, o = s - 1, c = i[o], l = i[r], [, [h], f] = c;
  if (f) {
    tt.scaleMinMax(l, f);
    for (let u = 0, d = h.length; u < d; )
      switch (h[u++]) {
        case Ut.moveTo:
        case Ut.lineTo:
          tt.applyTransform(h, l, u), u += 2;
          break;
        case Ut.curveTo:
          tt.applyTransformToBezier(h, l, u), u += 6;
          break;
      }
  }
  return n.splice(a, 4, A.constructPath), i.splice(a, 4, c), a + 1;
});
class Mf {
  constructor(e) {
    this.queue = e;
  }
  _optimize() {
  }
  push(e, n) {
    this.queue.fnArray.push(e), this.queue.argsArray.push(n), this._optimize();
  }
  flush() {
  }
  reset() {
  }
}
class $2 extends Mf {
  constructor(e) {
    super(e), this.state = null, this.context = {
      iCurr: 0,
      fnArray: e.fnArray,
      argsArray: e.argsArray,
      isOffscreenCanvasSupported: on.isOffscreenCanvasSupported
    }, this.match = null, this.lastProcessed = 0;
  }
  _optimize() {
    const e = this.queue.fnArray;
    let n = this.lastProcessed, i = e.length, s = this.state, a = this.match;
    if (!s && !a && n + 1 === i && !Os[e[n]]) {
      this.lastProcessed = i;
      return;
    }
    const r = this.context;
    for (; n < i; ) {
      if (a) {
        if ((0, a.iterateFn)(r, n)) {
          n++;
          continue;
        }
        if (n = (0, a.processFn)(r, n + 1), i = e.length, a = null, s = null, n >= i)
          break;
      }
      if (s = (s || Os)[e[n]], !s || Array.isArray(s)) {
        n++;
        continue;
      }
      if (r.iCurr = n, n++, s.checkFn && !(0, s.checkFn)(r)) {
        s = null;
        continue;
      }
      a = s, s = null;
    }
    this.state = s, this.match = a, this.lastProcessed = n;
  }
  flush() {
    for (; this.match; ) {
      const e = this.queue.fnArray.length;
      this.lastProcessed = (0, this.match.processFn)(this.context, e), this.match = null, this.state = null, this._optimize();
    }
  }
  reset() {
    this.state = null, this.match = null, this.lastProcessed = 0;
  }
}
const Bi = class Bi {
  constructor(e = 0, n) {
    this._streamSink = n, this.fnArray = [], this.argsArray = [], this.optimizer = n && !(e & un.OPLIST) ? new $2(this) : new Mf(this), this.dependencies = /* @__PURE__ */ new Set(), this._totalLength = 0, this.weight = 0, this._resolved = n ? null : Promise.resolve();
  }
  static setOptions({
    isOffscreenCanvasSupported: e
  }) {
    this.isOffscreenCanvasSupported = e;
  }
  get length() {
    return this.argsArray.length;
  }
  get ready() {
    return this._resolved || this._streamSink.ready;
  }
  get totalLength() {
    return this._totalLength + this.length;
  }
  addOp(e, n) {
    this.optimizer.push(e, n), this.weight++, this._streamSink && (this.weight >= Bi.CHUNK_SIZE ? this.flush() : this.weight >= Bi.CHUNK_SIZE_ABOUT && (e === A.restore || e === A.endText) && this.flush());
  }
  addImageOps(e, n, i, s = !1) {
    s && (this.addOp(A.save), this.addOp(A.setGState, [[["SMask", !1]]])), i !== void 0 && this.addOp(A.beginMarkedContentProps, ["OC", i]), this.addOp(e, n), i !== void 0 && this.addOp(A.endMarkedContent, []), s && this.addOp(A.restore);
  }
  addDependency(e) {
    this.dependencies.has(e) || (this.dependencies.add(e), this.addOp(A.dependency, [e]));
  }
  addDependencies(e) {
    for (const n of e)
      this.addDependency(n);
  }
  addOpList(e) {
    if (!(e instanceof Bi)) {
      I('addOpList - ignoring invalid "opList" parameter.');
      return;
    }
    for (const n of e.dependencies)
      this.dependencies.add(n);
    for (let n = 0, i = e.length; n < i; n++)
      this.addOp(e.fnArray[n], e.argsArray[n]);
  }
  getIR() {
    return {
      fnArray: this.fnArray,
      argsArray: this.argsArray,
      length: this.length
    };
  }
  get _transfers() {
    const e = [], {
      fnArray: n,
      argsArray: i,
      length: s
    } = this;
    for (let a = 0; a < s; a++)
      switch (n[a]) {
        case A.paintInlineImageXObject:
        case A.paintInlineImageXObjectGroup:
        case A.paintImageMaskXObject: {
          const {
            bitmap: c,
            data: l
          } = i[a][0];
          (c || l != null && l.buffer) && e.push(c || l.buffer);
          break;
        }
        case A.constructPath: {
          const [, [c], l] = i[a];
          c && e.push(c.buffer, l.buffer);
          break;
        }
        case A.paintFormXObjectBegin:
          const [r, o] = i[a];
          r && e.push(r.buffer), o && e.push(o.buffer);
          break;
        case A.setTextMatrix:
          e.push(i[a][0].buffer);
          break;
      }
    return e;
  }
  flush(e = !1, n = null) {
    this.optimizer.flush();
    const i = this.length;
    this._totalLength += i, this._streamSink.enqueue({
      fnArray: this.fnArray,
      argsArray: this.argsArray,
      lastChunk: e,
      separateAnnots: n,
      length: i
    }, 1, this._transfers), this.dependencies.clear(), this.fnArray.length = 0, this.argsArray.length = 0, this.weight = 0, this.optimizer.reset();
  }
};
Ye(Bi, "CHUNK_SIZE", 1e3), Ye(Bi, "CHUNK_SIZE_ABOUT", Bi.CHUNK_SIZE - 5), Ye(Bi, "isOffscreenCanvasSupported", !1);
let on = Bi;
function sn(t, e) {
  let n = 0;
  for (let i = 0; i <= e; i++)
    n = n << 8 | t[i];
  return n >>> 0;
}
function vr(t, e) {
  return e === 1 ? String.fromCharCode(t[0], t[1]) : e === 3 ? String.fromCharCode(t[0], t[1], t[2], t[3]) : String.fromCharCode(...t.subarray(0, e + 1));
}
function hn(t, e, n) {
  let i = 0;
  for (let s = n; s >= 0; s--)
    i += t[s] + e[s], t[s] = i & 255, i >>= 8;
}
function ls(t, e) {
  let n = 1;
  for (let i = e; i >= 0 && n > 0; i--)
    n += t[i], t[i] = n & 255, n >>= 8;
}
const zs = 16, z2 = 19;
class W2 {
  constructor(e) {
    this.buffer = e, this.pos = 0, this.end = e.length, this.tmpBuf = new Uint8Array(z2);
  }
  readByte() {
    return this.pos >= this.end ? -1 : this.buffer[this.pos++];
  }
  readNumber() {
    let e = 0, n;
    do {
      const i = this.readByte();
      if (i < 0)
        throw new j("unexpected EOF in bcmap");
      n = !(i & 128), e = e << 7 | i & 127;
    } while (!n);
    return e;
  }
  readSigned() {
    const e = this.readNumber();
    return e & 1 ? ~(e >>> 1) : e >>> 1;
  }
  readHex(e, n) {
    e.set(this.buffer.subarray(this.pos, this.pos + n + 1)), this.pos += n + 1;
  }
  readHexNumber(e, n) {
    let i;
    const s = this.tmpBuf;
    let a = 0;
    do {
      const l = this.readByte();
      if (l < 0)
        throw new j("unexpected EOF in bcmap");
      i = !(l & 128), s[a++] = l & 127;
    } while (!i);
    let r = n, o = 0, c = 0;
    for (; r >= 0; ) {
      for (; c < 8 && s.length > 0; )
        o |= s[--a] << c, c += 7;
      e[r] = o & 255, r--, o >>= 8, c -= 8;
    }
  }
  readHexSigned(e, n) {
    this.readHexNumber(e, n);
    const i = e[n] & 1 ? 255 : 0;
    let s = 0;
    for (let a = 0; a <= n; a++)
      s = (s & 1) << 8 | e[a], e[a] = s >> 1 ^ i;
  }
  readString() {
    const e = this.readNumber(), n = new Array(e);
    for (let i = 0; i < e; i++)
      n[i] = this.readNumber();
    return String.fromCharCode(...n);
  }
}
class V2 {
  async process(e, n, i) {
    const s = new W2(e), a = s.readByte();
    n.vertical = !!(a & 1);
    let r = null;
    const o = new Uint8Array(zs), c = new Uint8Array(zs), l = new Uint8Array(zs), h = new Uint8Array(zs), f = new Uint8Array(zs);
    let u, d;
    for (; (d = s.readByte()) >= 0; ) {
      const x = d >> 5;
      if (x === 7) {
        switch (d & 31) {
          case 0:
            s.readString();
            break;
          case 1:
            r = s.readString();
            break;
        }
        continue;
      }
      const g = !!(d & 16), m = d & 15;
      if (m + 1 > zs)
        throw new Error("BinaryCMapReader.process: Invalid dataSize.");
      const p = 1, b = s.readNumber();
      switch (x) {
        case 0:
          s.readHex(o, m), s.readHexNumber(c, m), hn(c, o, m), n.addCodespaceRange(m + 1, sn(o, m), sn(c, m));
          for (let w = 1; w < b; w++)
            ls(c, m), s.readHexNumber(o, m), hn(o, c, m), s.readHexNumber(c, m), hn(c, o, m), n.addCodespaceRange(m + 1, sn(o, m), sn(c, m));
          break;
        case 1:
          s.readHex(o, m), s.readHexNumber(c, m), hn(c, o, m), s.readNumber();
          for (let w = 1; w < b; w++)
            ls(c, m), s.readHexNumber(o, m), hn(o, c, m), s.readHexNumber(c, m), hn(c, o, m), s.readNumber();
          break;
        case 2:
          s.readHex(l, m), u = s.readNumber(), n.mapOne(sn(l, m), u);
          for (let w = 1; w < b; w++)
            ls(l, m), g || (s.readHexNumber(f, m), hn(l, f, m)), u = s.readSigned() + (u + 1), n.mapOne(sn(l, m), u);
          break;
        case 3:
          s.readHex(o, m), s.readHexNumber(c, m), hn(c, o, m), u = s.readNumber(), n.mapCidRange(sn(o, m), sn(c, m), u);
          for (let w = 1; w < b; w++)
            ls(c, m), g ? o.set(c) : (s.readHexNumber(o, m), hn(o, c, m)), s.readHexNumber(c, m), hn(c, o, m), u = s.readNumber(), n.mapCidRange(sn(o, m), sn(c, m), u);
          break;
        case 4:
          s.readHex(l, p), s.readHex(h, m), n.mapOne(sn(l, p), vr(h, m));
          for (let w = 1; w < b; w++)
            ls(l, p), g || (s.readHexNumber(f, p), hn(l, f, p)), ls(h, m), s.readHexSigned(f, m), hn(h, f, m), n.mapOne(sn(l, p), vr(h, m));
          break;
        case 5:
          s.readHex(o, p), s.readHexNumber(c, p), hn(c, o, p), s.readHex(h, m), n.mapBfRange(sn(o, p), sn(c, p), vr(h, m));
          for (let w = 1; w < b; w++)
            ls(c, p), g ? o.set(c) : (s.readHexNumber(o, p), hn(o, c, p)), s.readHexNumber(c, p), hn(c, o, p), s.readHex(h, m), n.mapBfRange(sn(o, p), sn(c, p), vr(h, m));
          break;
        default:
          throw new Error(`BinaryCMapReader.process - unknown type: ${x}`);
      }
    }
    return r ? i(r) : n;
  }
}
class X2 extends mn {
  constructor(e, n) {
    n && (n *= 0.8), super(n), this.str = e, this.dict = e.dict, this.input = new Uint8Array(5);
  }
  readBlock() {
    const s = this.str;
    let a = s.getByte();
    for (; Dn(a); )
      a = s.getByte();
    if (a === -1 || a === 126) {
      this.eof = !0;
      return;
    }
    const r = this.bufferLength;
    let o, c;
    if (a === 122) {
      for (o = this.ensureBuffer(r + 4), c = 0; c < 4; ++c)
        o[r + c] = 0;
      this.bufferLength += 4;
    } else {
      const l = this.input;
      for (l[0] = a, c = 1; c < 5; ++c) {
        for (a = s.getByte(); Dn(a); )
          a = s.getByte();
        if (l[c] = a, a === -1 || a === 126)
          break;
      }
      if (o = this.ensureBuffer(r + c - 1), this.bufferLength += c - 1, c < 5) {
        for (; c < 5; ++c)
          l[c] = 117;
        this.eof = !0;
      }
      let h = 0;
      for (c = 0; c < 5; ++c)
        h = h * 85 + (l[c] - 33);
      for (c = 3; c >= 0; --c)
        o[r + c] = h & 255, h >>= 8;
    }
  }
}
class K2 extends mn {
  constructor(e, n) {
    n && (n *= 0.5), super(n), this.str = e, this.dict = e.dict, this.firstDigit = -1;
  }
  readBlock() {
    const n = this.str.getBytes(8e3);
    if (!n.length) {
      this.eof = !0;
      return;
    }
    const i = n.length + 1 >> 1, s = this.ensureBuffer(this.bufferLength + i);
    let a = this.bufferLength, r = this.firstDigit;
    for (const o of n) {
      let c;
      if (o >= 48 && o <= 57)
        c = o & 15;
      else if (o >= 65 && o <= 70 || o >= 97 && o <= 102)
        c = (o & 15) + 9;
      else if (o === 62) {
        this.eof = !0;
        break;
      } else
        continue;
      r < 0 ? r = c : (s[a++] = r << 4 | c, r = -1);
    }
    r >= 0 && this.eof && (s[a++] = r << 4, r = -1), this.firstDigit = r, this.bufferLength = a;
  }
}
const Qc = -2, Ii = -1, Fi = 0, Kt = 1, Ie = 2, Yt = 3, Zt = 4, el = 5, tl = 6, Df = 7, Pf = 8, N1 = [[-1, -1], [-1, -1], [7, Pf], [7, Df], [6, tl], [6, tl], [6, el], [6, el], [4, Fi], [4, Fi], [4, Fi], [4, Fi], [4, Fi], [4, Fi], [4, Fi], [4, Fi], [3, Kt], [3, Kt], [3, Kt], [3, Kt], [3, Kt], [3, Kt], [3, Kt], [3, Kt], [3, Kt], [3, Kt], [3, Kt], [3, Kt], [3, Kt], [3, Kt], [3, Kt], [3, Kt], [3, Zt], [3, Zt], [3, Zt], [3, Zt], [3, Zt], [3, Zt], [3, Zt], [3, Zt], [3, Zt], [3, Zt], [3, Zt], [3, Zt], [3, Zt], [3, Zt], [3, Zt], [3, Zt], [3, Yt], [3, Yt], [3, Yt], [3, Yt], [3, Yt], [3, Yt], [3, Yt], [3, Yt], [3, Yt], [3, Yt], [3, Yt], [3, Yt], [3, Yt], [3, Yt], [3, Yt], [3, Yt], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie], [1, Ie]], O1 = [[-1, -1], [12, Qc], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [11, 1792], [11, 1792], [12, 1984], [12, 2048], [12, 2112], [12, 2176], [12, 2240], [12, 2304], [11, 1856], [11, 1856], [11, 1920], [11, 1920], [12, 2368], [12, 2432], [12, 2496], [12, 2560]], L1 = [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [8, 29], [8, 29], [8, 30], [8, 30], [8, 45], [8, 45], [8, 46], [8, 46], [7, 22], [7, 22], [7, 22], [7, 22], [7, 23], [7, 23], [7, 23], [7, 23], [8, 47], [8, 47], [8, 48], [8, 48], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [7, 20], [7, 20], [7, 20], [7, 20], [8, 33], [8, 33], [8, 34], [8, 34], [8, 35], [8, 35], [8, 36], [8, 36], [8, 37], [8, 37], [8, 38], [8, 38], [7, 19], [7, 19], [7, 19], [7, 19], [8, 31], [8, 31], [8, 32], [8, 32], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [8, 53], [8, 53], [8, 54], [8, 54], [7, 26], [7, 26], [7, 26], [7, 26], [8, 39], [8, 39], [8, 40], [8, 40], [8, 41], [8, 41], [8, 42], [8, 42], [8, 43], [8, 43], [8, 44], [8, 44], [7, 21], [7, 21], [7, 21], [7, 21], [7, 28], [7, 28], [7, 28], [7, 28], [8, 61], [8, 61], [8, 62], [8, 62], [8, 63], [8, 63], [8, 0], [8, 0], [8, 320], [8, 320], [8, 384], [8, 384], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [7, 27], [7, 27], [7, 27], [7, 27], [8, 59], [8, 59], [8, 60], [8, 60], [9, 1472], [9, 1536], [9, 1600], [9, 1728], [7, 18], [7, 18], [7, 18], [7, 18], [7, 24], [7, 24], [7, 24], [7, 24], [8, 49], [8, 49], [8, 50], [8, 50], [8, 51], [8, 51], [8, 52], [8, 52], [7, 25], [7, 25], [7, 25], [7, 25], [8, 55], [8, 55], [8, 56], [8, 56], [8, 57], [8, 57], [8, 58], [8, 58], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [8, 448], [8, 448], [8, 512], [8, 512], [9, 704], [9, 768], [8, 640], [8, 640], [8, 576], [8, 576], [9, 832], [9, 896], [9, 960], [9, 1024], [9, 1088], [9, 1152], [9, 1216], [9, 1280], [9, 1344], [9, 1408], [7, 256], [7, 256], [7, 256], [7, 256], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7]], _1 = [[-1, -1], [-1, -1], [12, Qc], [12, Qc], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [11, 1792], [11, 1792], [11, 1792], [11, 1792], [12, 1984], [12, 1984], [12, 2048], [12, 2048], [12, 2112], [12, 2112], [12, 2176], [12, 2176], [12, 2240], [12, 2240], [12, 2304], [12, 2304], [11, 1856], [11, 1856], [11, 1856], [11, 1856], [11, 1920], [11, 1920], [11, 1920], [11, 1920], [12, 2368], [12, 2368], [12, 2432], [12, 2432], [12, 2496], [12, 2496], [12, 2560], [12, 2560], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [12, 52], [12, 52], [13, 640], [13, 704], [13, 768], [13, 832], [12, 55], [12, 55], [12, 56], [12, 56], [13, 1280], [13, 1344], [13, 1408], [13, 1472], [12, 59], [12, 59], [12, 60], [12, 60], [13, 1536], [13, 1600], [11, 24], [11, 24], [11, 24], [11, 24], [11, 25], [11, 25], [11, 25], [11, 25], [13, 1664], [13, 1728], [12, 320], [12, 320], [12, 384], [12, 384], [12, 448], [12, 448], [13, 512], [13, 576], [12, 53], [12, 53], [12, 54], [12, 54], [13, 896], [13, 960], [13, 1024], [13, 1088], [13, 1152], [13, 1216], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64]], U1 = [[8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [11, 23], [11, 23], [12, 50], [12, 51], [12, 44], [12, 45], [12, 46], [12, 47], [12, 57], [12, 58], [12, 61], [12, 256], [10, 16], [10, 16], [10, 16], [10, 16], [10, 17], [10, 17], [10, 17], [10, 17], [12, 48], [12, 49], [12, 62], [12, 63], [12, 30], [12, 31], [12, 32], [12, 33], [12, 40], [12, 41], [11, 22], [11, 22], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [12, 128], [12, 192], [12, 26], [12, 27], [12, 28], [12, 29], [11, 19], [11, 19], [11, 20], [11, 20], [12, 34], [12, 35], [12, 36], [12, 37], [12, 38], [12, 39], [11, 21], [11, 21], [12, 42], [12, 43], [10, 0], [10, 0], [10, 0], [10, 0], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12]], j1 = [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [6, 9], [6, 8], [5, 7], [5, 7], [4, 6], [4, 6], [4, 6], [4, 6], [4, 5], [4, 5], [4, 5], [4, 5], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2]];
class Nf {
  constructor(e, n = {}) {
    if (typeof (e == null ? void 0 : e.next) != "function")
      throw new Error('CCITTFaxDecoder - invalid "source" parameter.');
    this.source = e, this.eof = !1, this.encoding = n.K || 0, this.eoline = n.EndOfLine || !1, this.byteAlign = n.EncodedByteAlign || !1, this.columns = n.Columns || 1728, this.rows = n.Rows || 0, this.eoblock = n.EndOfBlock ?? !0, this.black = n.BlackIs1 || !1, this.codingLine = new Uint32Array(this.columns + 1), this.refLine = new Uint32Array(this.columns + 2), this.codingLine[0] = this.columns, this.codingPos = 0, this.row = 0, this.nextLine2D = this.encoding < 0, this.inputBits = 0, this.inputBuf = 0, this.outputBits = 0, this.rowsDone = !1;
    let i;
    for (; (i = this._lookBits(12)) === 0; )
      this._eatBits(1);
    i === 1 && this._eatBits(12), this.encoding > 0 && (this.nextLine2D = !this._lookBits(1), this._eatBits(1));
  }
  readNextChar() {
    if (this.eof)
      return -1;
    const e = this.refLine, n = this.codingLine, i = this.columns;
    let s, a, r, o;
    if (this.outputBits === 0) {
      if (this.rowsDone && (this.eof = !0), this.eof)
        return -1;
      this.err = !1;
      let l, h, f;
      if (this.nextLine2D) {
        for (o = 0; n[o] < i; ++o)
          e[o] = n[o];
        for (e[o++] = i, e[o] = i, n[0] = 0, this.codingPos = 0, s = 0, a = 0; n[this.codingPos] < i; )
          switch (l = this._getTwoDimCode(), l) {
            case Fi:
              this._addPixels(e[s + 1], a), e[s + 1] < i && (s += 2);
              break;
            case Kt:
              if (l = h = 0, a) {
                do
                  l += f = this._getBlackCode();
                while (f >= 64);
                do
                  h += f = this._getWhiteCode();
                while (f >= 64);
              } else {
                do
                  l += f = this._getWhiteCode();
                while (f >= 64);
                do
                  h += f = this._getBlackCode();
                while (f >= 64);
              }
              for (this._addPixels(n[this.codingPos] + l, a), n[this.codingPos] < i && this._addPixels(n[this.codingPos] + h, a ^ 1); e[s] <= n[this.codingPos] && e[s] < i; )
                s += 2;
              break;
            case Df:
              if (this._addPixels(e[s] + 3, a), a ^= 1, n[this.codingPos] < i)
                for (++s; e[s] <= n[this.codingPos] && e[s] < i; )
                  s += 2;
              break;
            case el:
              if (this._addPixels(e[s] + 2, a), a ^= 1, n[this.codingPos] < i)
                for (++s; e[s] <= n[this.codingPos] && e[s] < i; )
                  s += 2;
              break;
            case Yt:
              if (this._addPixels(e[s] + 1, a), a ^= 1, n[this.codingPos] < i)
                for (++s; e[s] <= n[this.codingPos] && e[s] < i; )
                  s += 2;
              break;
            case Ie:
              if (this._addPixels(e[s], a), a ^= 1, n[this.codingPos] < i)
                for (++s; e[s] <= n[this.codingPos] && e[s] < i; )
                  s += 2;
              break;
            case Pf:
              if (this._addPixelsNeg(e[s] - 3, a), a ^= 1, n[this.codingPos] < i)
                for (s > 0 ? --s : ++s; e[s] <= n[this.codingPos] && e[s] < i; )
                  s += 2;
              break;
            case tl:
              if (this._addPixelsNeg(e[s] - 2, a), a ^= 1, n[this.codingPos] < i)
                for (s > 0 ? --s : ++s; e[s] <= n[this.codingPos] && e[s] < i; )
                  s += 2;
              break;
            case Zt:
              if (this._addPixelsNeg(e[s] - 1, a), a ^= 1, n[this.codingPos] < i)
                for (s > 0 ? --s : ++s; e[s] <= n[this.codingPos] && e[s] < i; )
                  s += 2;
              break;
            case Ii:
              this._addPixels(i, 0), this.eof = !0;
              break;
            default:
              Ge("bad 2d code"), this._addPixels(i, 0), this.err = !0;
          }
      } else
        for (n[0] = 0, this.codingPos = 0, a = 0; n[this.codingPos] < i; ) {
          if (l = 0, a)
            do
              l += f = this._getBlackCode();
            while (f >= 64);
          else
            do
              l += f = this._getWhiteCode();
            while (f >= 64);
          this._addPixels(n[this.codingPos] + l, a), a ^= 1;
        }
      let u = !1;
      if (this.byteAlign && (this.inputBits &= -8), !this.eoblock && this.row === this.rows - 1)
        this.rowsDone = !0;
      else {
        if (l = this._lookBits(12), this.eoline)
          for (; l !== Ii && l !== 1; )
            this._eatBits(1), l = this._lookBits(12);
        else
          for (; l === 0; )
            this._eatBits(1), l = this._lookBits(12);
        l === 1 ? (this._eatBits(12), u = !0) : l === Ii && (this.eof = !0);
      }
      if (!this.eof && this.encoding > 0 && !this.rowsDone && (this.nextLine2D = !this._lookBits(1), this._eatBits(1)), this.eoblock && u && this.byteAlign) {
        if (l = this._lookBits(12), l === 1) {
          if (this._eatBits(12), this.encoding > 0 && (this._lookBits(1), this._eatBits(1)), this.encoding >= 0)
            for (o = 0; o < 4; ++o)
              l = this._lookBits(12), l !== 1 && Ge("bad rtc code: " + l), this._eatBits(12), this.encoding > 0 && (this._lookBits(1), this._eatBits(1));
          this.eof = !0;
        }
      } else if (this.err && this.eoline) {
        for (; ; ) {
          if (l = this._lookBits(13), l === Ii)
            return this.eof = !0, -1;
          if (l >> 1 === 1)
            break;
          this._eatBits(1);
        }
        this._eatBits(12), this.encoding > 0 && (this._eatBits(1), this.nextLine2D = !(l & 1));
      }
      this.outputBits = n[0] > 0 ? n[this.codingPos = 0] : n[this.codingPos = 1], this.row++;
    }
    let c;
    if (this.outputBits >= 8)
      c = this.codingPos & 1 ? 0 : 255, this.outputBits -= 8, this.outputBits === 0 && n[this.codingPos] < i && (this.codingPos++, this.outputBits = n[this.codingPos] - n[this.codingPos - 1]);
    else {
      r = 8, c = 0;
      do {
        if (typeof this.outputBits != "number")
          throw new j('Invalid /CCITTFaxDecode data, "outputBits" must be a number.');
        this.outputBits > r ? (c <<= r, this.codingPos & 1 || (c |= 255 >> 8 - r), this.outputBits -= r, r = 0) : (c <<= this.outputBits, this.codingPos & 1 || (c |= 255 >> 8 - this.outputBits), r -= this.outputBits, this.outputBits = 0, n[this.codingPos] < i ? (this.codingPos++, this.outputBits = n[this.codingPos] - n[this.codingPos - 1]) : r > 0 && (c <<= r, r = 0));
      } while (r);
    }
    return this.black && (c ^= 255), c;
  }
  _addPixels(e, n) {
    const i = this.codingLine;
    let s = this.codingPos;
    e > i[s] && (e > this.columns && (Ge("row is wrong length"), this.err = !0, e = this.columns), s & 1 ^ n && ++s, i[s] = e), this.codingPos = s;
  }
  _addPixelsNeg(e, n) {
    const i = this.codingLine;
    let s = this.codingPos;
    if (e > i[s])
      e > this.columns && (Ge("row is wrong length"), this.err = !0, e = this.columns), s & 1 ^ n && ++s, i[s] = e;
    else if (e < i[s]) {
      for (e < 0 && (Ge("invalid code"), this.err = !0, e = 0); s > 0 && e < i[s - 1]; )
        --s;
      i[s] = e;
    }
    this.codingPos = s;
  }
  _findTableCode(e, n, i, s) {
    const a = s || 0;
    for (let r = e; r <= n; ++r) {
      let o = this._lookBits(r);
      if (o === Ii)
        return [!0, 1, !1];
      if (r < n && (o <<= n - r), !a || o >= a) {
        const c = i[o - a];
        if (c[0] === r)
          return this._eatBits(r), [!0, c[1], !0];
      }
    }
    return [!1, 0, !1];
  }
  _getTwoDimCode() {
    let e = 0, n;
    if (this.eoblock) {
      if (e = this._lookBits(7), n = N1[e], (n == null ? void 0 : n[0]) > 0)
        return this._eatBits(n[0]), n[1];
    } else {
      const i = this._findTableCode(1, 7, N1);
      if (i[0] && i[2])
        return i[1];
    }
    return Ge("Bad two dim code"), Ii;
  }
  _getWhiteCode() {
    let e = 0, n;
    if (this.eoblock) {
      if (e = this._lookBits(12), e === Ii)
        return 1;
      if (n = e >> 5 ? L1[e >> 3] : O1[e], n[0] > 0)
        return this._eatBits(n[0]), n[1];
    } else {
      let i = this._findTableCode(1, 9, L1);
      if (i[0] || (i = this._findTableCode(11, 12, O1), i[0]))
        return i[1];
    }
    return Ge("bad white code"), this._eatBits(1), 1;
  }
  _getBlackCode() {
    let e, n;
    if (this.eoblock) {
      if (e = this._lookBits(13), e === Ii)
        return 1;
      if (e >> 7 ? !(e >> 9) && e >> 7 ? n = U1[(e >> 1) - 64] : n = j1[e >> 7] : n = _1[e], n[0] > 0)
        return this._eatBits(n[0]), n[1];
    } else {
      let i = this._findTableCode(2, 6, j1);
      if (i[0] || (i = this._findTableCode(7, 12, U1, 64), i[0]) || (i = this._findTableCode(10, 13, _1), i[0]))
        return i[1];
    }
    return Ge("bad black code"), this._eatBits(1), 1;
  }
  _lookBits(e) {
    let n;
    for (; this.inputBits < e; ) {
      if ((n = this.source.next()) === -1)
        return this.inputBits === 0 ? Ii : this.inputBuf << e - this.inputBits & 65535 >> 16 - e;
      this.inputBuf = this.inputBuf << 8 | n, this.inputBits += 8;
    }
    return this.inputBuf >> this.inputBits - e & 65535 >> 16 - e;
  }
  _eatBits(e) {
    (this.inputBits -= e) < 0 && (this.inputBits = 0);
  }
}
class Y2 extends mn {
  constructor(e, n, i) {
    super(n), this.str = e, this.dict = e.dict, i instanceof E || (i = E.empty);
    const s = {
      next() {
        return e.getByte();
      }
    };
    this.ccittFaxDecoder = new Nf(s, {
      K: i.get("K"),
      EndOfLine: i.get("EndOfLine"),
      EncodedByteAlign: i.get("EncodedByteAlign"),
      Columns: i.get("Columns"),
      Rows: i.get("Rows"),
      EndOfBlock: i.get("EndOfBlock"),
      BlackIs1: i.get("BlackIs1")
    });
  }
  readBlock() {
    for (; !this.eof; ) {
      const e = this.ccittFaxDecoder.readNextChar();
      if (e === -1) {
        this.eof = !0;
        return;
      }
      this.ensureBuffer(this.bufferLength + 1), this.buffer[this.bufferLength++] = e;
    }
  }
}
const q1 = new Int32Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), Z2 = new Int32Array([3, 4, 5, 6, 7, 8, 9, 10, 65547, 65549, 65551, 65553, 131091, 131095, 131099, 131103, 196643, 196651, 196659, 196667, 262211, 262227, 262243, 262259, 327811, 327843, 327875, 327907, 258, 258, 258]), J2 = new Int32Array([1, 2, 3, 4, 65541, 65543, 131081, 131085, 196625, 196633, 262177, 262193, 327745, 327777, 393345, 393409, 459009, 459137, 524801, 525057, 590849, 591361, 657409, 658433, 724993, 727041, 794625, 798721, 868353, 876545]), Q2 = [new Int32Array([459008, 524368, 524304, 524568, 459024, 524400, 524336, 590016, 459016, 524384, 524320, 589984, 524288, 524416, 524352, 590048, 459012, 524376, 524312, 589968, 459028, 524408, 524344, 590032, 459020, 524392, 524328, 59e4, 524296, 524424, 524360, 590064, 459010, 524372, 524308, 524572, 459026, 524404, 524340, 590024, 459018, 524388, 524324, 589992, 524292, 524420, 524356, 590056, 459014, 524380, 524316, 589976, 459030, 524412, 524348, 590040, 459022, 524396, 524332, 590008, 524300, 524428, 524364, 590072, 459009, 524370, 524306, 524570, 459025, 524402, 524338, 590020, 459017, 524386, 524322, 589988, 524290, 524418, 524354, 590052, 459013, 524378, 524314, 589972, 459029, 524410, 524346, 590036, 459021, 524394, 524330, 590004, 524298, 524426, 524362, 590068, 459011, 524374, 524310, 524574, 459027, 524406, 524342, 590028, 459019, 524390, 524326, 589996, 524294, 524422, 524358, 590060, 459015, 524382, 524318, 589980, 459031, 524414, 524350, 590044, 459023, 524398, 524334, 590012, 524302, 524430, 524366, 590076, 459008, 524369, 524305, 524569, 459024, 524401, 524337, 590018, 459016, 524385, 524321, 589986, 524289, 524417, 524353, 590050, 459012, 524377, 524313, 589970, 459028, 524409, 524345, 590034, 459020, 524393, 524329, 590002, 524297, 524425, 524361, 590066, 459010, 524373, 524309, 524573, 459026, 524405, 524341, 590026, 459018, 524389, 524325, 589994, 524293, 524421, 524357, 590058, 459014, 524381, 524317, 589978, 459030, 524413, 524349, 590042, 459022, 524397, 524333, 590010, 524301, 524429, 524365, 590074, 459009, 524371, 524307, 524571, 459025, 524403, 524339, 590022, 459017, 524387, 524323, 589990, 524291, 524419, 524355, 590054, 459013, 524379, 524315, 589974, 459029, 524411, 524347, 590038, 459021, 524395, 524331, 590006, 524299, 524427, 524363, 590070, 459011, 524375, 524311, 524575, 459027, 524407, 524343, 590030, 459019, 524391, 524327, 589998, 524295, 524423, 524359, 590062, 459015, 524383, 524319, 589982, 459031, 524415, 524351, 590046, 459023, 524399, 524335, 590014, 524303, 524431, 524367, 590078, 459008, 524368, 524304, 524568, 459024, 524400, 524336, 590017, 459016, 524384, 524320, 589985, 524288, 524416, 524352, 590049, 459012, 524376, 524312, 589969, 459028, 524408, 524344, 590033, 459020, 524392, 524328, 590001, 524296, 524424, 524360, 590065, 459010, 524372, 524308, 524572, 459026, 524404, 524340, 590025, 459018, 524388, 524324, 589993, 524292, 524420, 524356, 590057, 459014, 524380, 524316, 589977, 459030, 524412, 524348, 590041, 459022, 524396, 524332, 590009, 524300, 524428, 524364, 590073, 459009, 524370, 524306, 524570, 459025, 524402, 524338, 590021, 459017, 524386, 524322, 589989, 524290, 524418, 524354, 590053, 459013, 524378, 524314, 589973, 459029, 524410, 524346, 590037, 459021, 524394, 524330, 590005, 524298, 524426, 524362, 590069, 459011, 524374, 524310, 524574, 459027, 524406, 524342, 590029, 459019, 524390, 524326, 589997, 524294, 524422, 524358, 590061, 459015, 524382, 524318, 589981, 459031, 524414, 524350, 590045, 459023, 524398, 524334, 590013, 524302, 524430, 524366, 590077, 459008, 524369, 524305, 524569, 459024, 524401, 524337, 590019, 459016, 524385, 524321, 589987, 524289, 524417, 524353, 590051, 459012, 524377, 524313, 589971, 459028, 524409, 524345, 590035, 459020, 524393, 524329, 590003, 524297, 524425, 524361, 590067, 459010, 524373, 524309, 524573, 459026, 524405, 524341, 590027, 459018, 524389, 524325, 589995, 524293, 524421, 524357, 590059, 459014, 524381, 524317, 589979, 459030, 524413, 524349, 590043, 459022, 524397, 524333, 590011, 524301, 524429, 524365, 590075, 459009, 524371, 524307, 524571, 459025, 524403, 524339, 590023, 459017, 524387, 524323, 589991, 524291, 524419, 524355, 590055, 459013, 524379, 524315, 589975, 459029, 524411, 524347, 590039, 459021, 524395, 524331, 590007, 524299, 524427, 524363, 590071, 459011, 524375, 524311, 524575, 459027, 524407, 524343, 590031, 459019, 524391, 524327, 589999, 524295, 524423, 524359, 590063, 459015, 524383, 524319, 589983, 459031, 524415, 524351, 590047, 459023, 524399, 524335, 590015, 524303, 524431, 524367, 590079]), 9], e9 = [new Int32Array([327680, 327696, 327688, 327704, 327684, 327700, 327692, 327708, 327682, 327698, 327690, 327706, 327686, 327702, 327694, 0, 327681, 327697, 327689, 327705, 327685, 327701, 327693, 327709, 327683, 327699, 327691, 327707, 327687, 327703, 327695, 0]), 5];
var Ji, Qs;
class H1 extends mn {
  constructor(n, i) {
    super(i);
    Ee(this, Ji);
    this.str = n, this.dict = n.dict;
    const s = n.getByte(), a = n.getByte();
    if (s === -1 || a === -1)
      throw new j(`Invalid header in flate stream: ${s}, ${a}`);
    if ((s & 15) !== 8)
      throw new j(`Unknown compression method in flate stream: ${s}, ${a}`);
    if (((s << 8) + a) % 31 !== 0)
      throw new j(`Bad FCHECK in flate stream: ${s}, ${a}`);
    if (a & 32)
      throw new j(`FDICT bit set in flate stream: ${s}, ${a}`);
    this.codeSize = 0, this.codeBuf = 0;
  }
  async getImageData(n, i) {
    const s = await this.asyncGetBytes();
    return s ? s.length <= n ? s : s.subarray(0, n) : this.getBytes(n);
  }
  async asyncGetBytes() {
    this.str.reset();
    const n = this.str.getBytes();
    try {
      const {
        readable: i,
        writable: s
      } = new DecompressionStream("deflate"), a = s.getWriter();
      await a.ready, a.write(n).then(async () => {
        await a.ready, await a.close();
      }).catch(() => {
      });
      const r = [];
      let o = 0;
      for await (const h of i)
        r.push(h), o += h.byteLength;
      const c = new Uint8Array(o);
      let l = 0;
      for (const h of r)
        c.set(h, l), l += h.byteLength;
      return c;
    } catch {
      return this.str = new At(n, 2, n.length, this.str.dict), this.reset(), null;
    }
  }
  get isAsync() {
    return !0;
  }
  getBits(n) {
    const i = this.str;
    let s = this.codeSize, a = this.codeBuf, r;
    for (; s < n; ) {
      if ((r = i.getByte()) === -1)
        throw new j("Bad encoding in flate stream");
      a |= r << s, s += 8;
    }
    return r = a & (1 << n) - 1, this.codeBuf = a >> n, this.codeSize = s -= n, r;
  }
  getCode(n) {
    const i = this.str, s = n[0], a = n[1];
    let r = this.codeSize, o = this.codeBuf, c;
    for (; r < a && (c = i.getByte()) !== -1; )
      o |= c << r, r += 8;
    const l = s[o & (1 << a) - 1], h = l >> 16, f = l & 65535;
    if (h < 1 || r < h)
      throw new j("Bad encoding in flate stream");
    return this.codeBuf = o >> h, this.codeSize = r - h, f;
  }
  generateHuffmanTable(n) {
    const i = n.length;
    let s = 0, a;
    for (a = 0; a < i; ++a)
      n[a] > s && (s = n[a]);
    const r = 1 << s, o = new Int32Array(r);
    for (let c = 1, l = 0, h = 2; c <= s; ++c, l <<= 1, h <<= 1)
      for (let f = 0; f < i; ++f)
        if (n[f] === c) {
          let u = 0, d = l;
          for (a = 0; a < c; ++a)
            u = u << 1 | d & 1, d >>= 1;
          for (a = u; a < r; a += h)
            o[a] = c << 16 | f;
          ++l;
        }
    return [o, s];
  }
  readBlock() {
    let n, i, s;
    const a = this.str;
    try {
      i = this.getBits(3);
    } catch (h) {
      J(this, Ji, Qs).call(this, h.message);
      return;
    }
    if (i & 1 && (this.eof = !0), i >>= 1, i === 0) {
      let h;
      if ((h = a.getByte()) === -1) {
        J(this, Ji, Qs).call(this, "Bad block header in flate stream");
        return;
      }
      let f = h;
      if ((h = a.getByte()) === -1) {
        J(this, Ji, Qs).call(this, "Bad block header in flate stream");
        return;
      }
      if (f |= h << 8, (h = a.getByte()) === -1) {
        J(this, Ji, Qs).call(this, "Bad block header in flate stream");
        return;
      }
      let u = h;
      if ((h = a.getByte()) === -1) {
        J(this, Ji, Qs).call(this, "Bad block header in flate stream");
        return;
      }
      if (u |= h << 8, u !== (~f & 65535) && (f !== 0 || u !== 0))
        throw new j("Bad uncompressed block length in flate stream");
      this.codeBuf = 0, this.codeSize = 0;
      const d = this.bufferLength, x = d + f;
      if (n = this.ensureBuffer(x), this.bufferLength = x, f === 0)
        a.peekByte() === -1 && (this.eof = !0);
      else {
        const g = a.getBytes(f);
        n.set(g, d), g.length < f && (this.eof = !0);
      }
      return;
    }
    let r, o;
    if (i === 1)
      r = Q2, o = e9;
    else if (i === 2) {
      const h = this.getBits(5) + 257, f = this.getBits(5) + 1, u = this.getBits(4) + 4, d = new Uint8Array(q1.length);
      let x;
      for (x = 0; x < u; ++x)
        d[q1[x]] = this.getBits(3);
      const g = this.generateHuffmanTable(d);
      s = 0, x = 0;
      const m = h + f, p = new Uint8Array(m);
      let b, w, y;
      for (; x < m; ) {
        const k = this.getCode(g);
        if (k === 16)
          b = 2, w = 3, y = s;
        else if (k === 17)
          b = 3, w = 3, y = s = 0;
        else if (k === 18)
          b = 7, w = 11, y = s = 0;
        else {
          p[x++] = s = k;
          continue;
        }
        let S = this.getBits(b) + w;
        for (; S-- > 0; )
          p[x++] = y;
      }
      r = this.generateHuffmanTable(p.subarray(0, h)), o = this.generateHuffmanTable(p.subarray(h, m));
    } else
      throw new j("Unknown block type in flate stream");
    n = this.buffer;
    let c = n ? n.length : 0, l = this.bufferLength;
    for (; ; ) {
      let h = this.getCode(r);
      if (h < 256) {
        l + 1 >= c && (n = this.ensureBuffer(l + 1), c = n.length), n[l++] = h;
        continue;
      }
      if (h === 256) {
        this.bufferLength = l;
        return;
      }
      h -= 257, h = Z2[h];
      let f = h >> 16;
      f > 0 && (f = this.getBits(f)), s = (h & 65535) + f, h = this.getCode(o), h = J2[h], f = h >> 16, f > 0 && (f = this.getBits(f));
      const u = (h & 65535) + f;
      l + s >= c && (n = this.ensureBuffer(l + s), c = n.length);
      for (let d = 0; d < s; ++d, ++l)
        n[l] = n[l - u];
    }
  }
}
Ji = new WeakSet(), Qs = function(n) {
  Ge(n), this.eof = !0;
};
const t9 = [{
  qe: 22017,
  nmps: 1,
  nlps: 1,
  switchFlag: 1
}, {
  qe: 13313,
  nmps: 2,
  nlps: 6,
  switchFlag: 0
}, {
  qe: 6145,
  nmps: 3,
  nlps: 9,
  switchFlag: 0
}, {
  qe: 2753,
  nmps: 4,
  nlps: 12,
  switchFlag: 0
}, {
  qe: 1313,
  nmps: 5,
  nlps: 29,
  switchFlag: 0
}, {
  qe: 545,
  nmps: 38,
  nlps: 33,
  switchFlag: 0
}, {
  qe: 22017,
  nmps: 7,
  nlps: 6,
  switchFlag: 1
}, {
  qe: 21505,
  nmps: 8,
  nlps: 14,
  switchFlag: 0
}, {
  qe: 18433,
  nmps: 9,
  nlps: 14,
  switchFlag: 0
}, {
  qe: 14337,
  nmps: 10,
  nlps: 14,
  switchFlag: 0
}, {
  qe: 12289,
  nmps: 11,
  nlps: 17,
  switchFlag: 0
}, {
  qe: 9217,
  nmps: 12,
  nlps: 18,
  switchFlag: 0
}, {
  qe: 7169,
  nmps: 13,
  nlps: 20,
  switchFlag: 0
}, {
  qe: 5633,
  nmps: 29,
  nlps: 21,
  switchFlag: 0
}, {
  qe: 22017,
  nmps: 15,
  nlps: 14,
  switchFlag: 1
}, {
  qe: 21505,
  nmps: 16,
  nlps: 14,
  switchFlag: 0
}, {
  qe: 20737,
  nmps: 17,
  nlps: 15,
  switchFlag: 0
}, {
  qe: 18433,
  nmps: 18,
  nlps: 16,
  switchFlag: 0
}, {
  qe: 14337,
  nmps: 19,
  nlps: 17,
  switchFlag: 0
}, {
  qe: 13313,
  nmps: 20,
  nlps: 18,
  switchFlag: 0
}, {
  qe: 12289,
  nmps: 21,
  nlps: 19,
  switchFlag: 0
}, {
  qe: 10241,
  nmps: 22,
  nlps: 19,
  switchFlag: 0
}, {
  qe: 9217,
  nmps: 23,
  nlps: 20,
  switchFlag: 0
}, {
  qe: 8705,
  nmps: 24,
  nlps: 21,
  switchFlag: 0
}, {
  qe: 7169,
  nmps: 25,
  nlps: 22,
  switchFlag: 0
}, {
  qe: 6145,
  nmps: 26,
  nlps: 23,
  switchFlag: 0
}, {
  qe: 5633,
  nmps: 27,
  nlps: 24,
  switchFlag: 0
}, {
  qe: 5121,
  nmps: 28,
  nlps: 25,
  switchFlag: 0
}, {
  qe: 4609,
  nmps: 29,
  nlps: 26,
  switchFlag: 0
}, {
  qe: 4353,
  nmps: 30,
  nlps: 27,
  switchFlag: 0
}, {
  qe: 2753,
  nmps: 31,
  nlps: 28,
  switchFlag: 0
}, {
  qe: 2497,
  nmps: 32,
  nlps: 29,
  switchFlag: 0
}, {
  qe: 2209,
  nmps: 33,
  nlps: 30,
  switchFlag: 0
}, {
  qe: 1313,
  nmps: 34,
  nlps: 31,
  switchFlag: 0
}, {
  qe: 1089,
  nmps: 35,
  nlps: 32,
  switchFlag: 0
}, {
  qe: 673,
  nmps: 36,
  nlps: 33,
  switchFlag: 0
}, {
  qe: 545,
  nmps: 37,
  nlps: 34,
  switchFlag: 0
}, {
  qe: 321,
  nmps: 38,
  nlps: 35,
  switchFlag: 0
}, {
  qe: 273,
  nmps: 39,
  nlps: 36,
  switchFlag: 0
}, {
  qe: 133,
  nmps: 40,
  nlps: 37,
  switchFlag: 0
}, {
  qe: 73,
  nmps: 41,
  nlps: 38,
  switchFlag: 0
}, {
  qe: 37,
  nmps: 42,
  nlps: 39,
  switchFlag: 0
}, {
  qe: 21,
  nmps: 43,
  nlps: 40,
  switchFlag: 0
}, {
  qe: 9,
  nmps: 44,
  nlps: 41,
  switchFlag: 0
}, {
  qe: 5,
  nmps: 45,
  nlps: 42,
  switchFlag: 0
}, {
  qe: 1,
  nmps: 45,
  nlps: 43,
  switchFlag: 0
}, {
  qe: 22017,
  nmps: 46,
  nlps: 46,
  switchFlag: 0
}];
class n9 {
  constructor(e, n, i) {
    this.data = e, this.bp = n, this.dataEnd = i, this.chigh = e[n], this.clow = 0, this.byteIn(), this.chigh = this.chigh << 7 & 65535 | this.clow >> 9 & 127, this.clow = this.clow << 7 & 65535, this.ct -= 7, this.a = 32768;
  }
  byteIn() {
    const e = this.data;
    let n = this.bp;
    e[n] === 255 ? e[n + 1] > 143 ? (this.clow += 65280, this.ct = 8) : (n++, this.clow += e[n] << 9, this.ct = 7, this.bp = n) : (n++, this.clow += n < this.dataEnd ? e[n] << 8 : 65280, this.ct = 8, this.bp = n), this.clow > 65535 && (this.chigh += this.clow >> 16, this.clow &= 65535);
  }
  readBit(e, n) {
    let i = e[n] >> 1, s = e[n] & 1;
    const a = t9[i], r = a.qe;
    let o, c = this.a - r;
    if (this.chigh < r)
      c < r ? (c = r, o = s, i = a.nmps) : (c = r, o = 1 ^ s, a.switchFlag === 1 && (s = o), i = a.nlps);
    else {
      if (this.chigh -= r, c & 32768)
        return this.a = c, s;
      c < r ? (o = 1 ^ s, a.switchFlag === 1 && (s = o), i = a.nlps) : (o = s, i = a.nmps);
    }
    do
      this.ct === 0 && this.byteIn(), c <<= 1, this.chigh = this.chigh << 1 & 65535 | this.clow >> 15 & 1, this.clow = this.clow << 1 & 65535, this.ct--;
    while (!(c & 32768));
    return this.a = c, e[n] = i << 1 | s, o;
  }
}
class kt extends bn {
  constructor(e) {
    super(e, "Jbig2Error");
  }
}
class i9 {
  getContexts(e) {
    return e in this ? this[e] : this[e] = new Int8Array(65536);
  }
}
class Ua {
  constructor(e, n, i) {
    this.data = e, this.start = n, this.end = i;
  }
  get decoder() {
    const e = new n9(this.data, this.start, this.end);
    return Q(this, "decoder", e);
  }
  get contextCache() {
    const e = new i9();
    return Q(this, "contextCache", e);
  }
}
function an(t, e, n) {
  const i = t.getContexts(e);
  let s = 1;
  function a(l) {
    let h = 0;
    for (let f = 0; f < l; f++) {
      const u = n.readBit(i, s);
      s = s < 256 ? s << 1 | u : (s << 1 | u) & 511 | 256, h = h << 1 | u;
    }
    return h >>> 0;
  }
  const r = a(1), o = a(1) ? a(1) ? a(1) ? a(1) ? a(1) ? a(32) + 4436 : a(12) + 340 : a(8) + 84 : a(6) + 20 : a(4) + 4 : a(2);
  let c;
  return r === 0 ? c = o : o > 0 && (c = -o), c >= Yd && c <= Nc ? c : null;
}
function Of(t, e, n) {
  const i = t.getContexts("IAID");
  let s = 1;
  for (let a = 0; a < n; a++) {
    const r = e.readBit(i, s);
    s = s << 1 | r;
  }
  return n < 31 ? s & (1 << n) - 1 : s & 2147483647;
}
const G1 = ["SymbolDictionary", null, null, null, "IntermediateTextRegion", null, "ImmediateTextRegion", "ImmediateLosslessTextRegion", null, null, null, null, null, null, null, null, "PatternDictionary", null, null, null, "IntermediateHalftoneRegion", null, "ImmediateHalftoneRegion", "ImmediateLosslessHalftoneRegion", null, null, null, null, null, null, null, null, null, null, null, null, "IntermediateGenericRegion", null, "ImmediateGenericRegion", "ImmediateLosslessGenericRegion", "IntermediateGenericRefinementRegion", null, "ImmediateGenericRefinementRegion", "ImmediateLosslessGenericRefinementRegion", null, null, null, null, "PageInformation", "EndOfPage", "EndOfStripe", "EndOfFile", "Profiles", "Tables", null, null, null, null, null, null, null, null, "Extension"], s9 = [[{
  x: -1,
  y: -2
}, {
  x: 0,
  y: -2
}, {
  x: 1,
  y: -2
}, {
  x: -2,
  y: -1
}, {
  x: -1,
  y: -1
}, {
  x: 0,
  y: -1
}, {
  x: 1,
  y: -1
}, {
  x: 2,
  y: -1
}, {
  x: -4,
  y: 0
}, {
  x: -3,
  y: 0
}, {
  x: -2,
  y: 0
}, {
  x: -1,
  y: 0
}], [{
  x: -1,
  y: -2
}, {
  x: 0,
  y: -2
}, {
  x: 1,
  y: -2
}, {
  x: 2,
  y: -2
}, {
  x: -2,
  y: -1
}, {
  x: -1,
  y: -1
}, {
  x: 0,
  y: -1
}, {
  x: 1,
  y: -1
}, {
  x: 2,
  y: -1
}, {
  x: -3,
  y: 0
}, {
  x: -2,
  y: 0
}, {
  x: -1,
  y: 0
}], [{
  x: -1,
  y: -2
}, {
  x: 0,
  y: -2
}, {
  x: 1,
  y: -2
}, {
  x: -2,
  y: -1
}, {
  x: -1,
  y: -1
}, {
  x: 0,
  y: -1
}, {
  x: 1,
  y: -1
}, {
  x: -2,
  y: 0
}, {
  x: -1,
  y: 0
}], [{
  x: -3,
  y: -1
}, {
  x: -2,
  y: -1
}, {
  x: -1,
  y: -1
}, {
  x: 0,
  y: -1
}, {
  x: 1,
  y: -1
}, {
  x: -4,
  y: 0
}, {
  x: -3,
  y: 0
}, {
  x: -2,
  y: 0
}, {
  x: -1,
  y: 0
}]], $1 = [{
  coding: [{
    x: 0,
    y: -1
  }, {
    x: 1,
    y: -1
  }, {
    x: -1,
    y: 0
  }],
  reference: [{
    x: 0,
    y: -1
  }, {
    x: 1,
    y: -1
  }, {
    x: -1,
    y: 0
  }, {
    x: 0,
    y: 0
  }, {
    x: 1,
    y: 0
  }, {
    x: -1,
    y: 1
  }, {
    x: 0,
    y: 1
  }, {
    x: 1,
    y: 1
  }]
}, {
  coding: [{
    x: -1,
    y: -1
  }, {
    x: 0,
    y: -1
  }, {
    x: 1,
    y: -1
  }, {
    x: -1,
    y: 0
  }],
  reference: [{
    x: 0,
    y: -1
  }, {
    x: -1,
    y: 0
  }, {
    x: 0,
    y: 0
  }, {
    x: 1,
    y: 0
  }, {
    x: 0,
    y: 1
  }, {
    x: 1,
    y: 1
  }]
}], a9 = [39717, 1941, 229, 405];
function r9(t, e, n) {
  const i = n.decoder, s = n.contextCache.getContexts("GB"), a = [];
  let r, o, c, l, h, f, u;
  const d = 31735;
  for (o = 0; o < e; o++)
    for (h = a[o] = new Uint8Array(t), f = o < 1 ? h : a[o - 1], u = o < 2 ? h : a[o - 2], r = u[0] << 13 | u[1] << 12 | u[2] << 11 | f[0] << 7 | f[1] << 6 | f[2] << 5 | f[3] << 4, c = 0; c < t; c++)
      h[c] = l = i.readBit(s, r), r = (r & d) << 1 | (c + 3 < t ? u[c + 3] << 11 : 0) | (c + 4 < t ? f[c + 4] << 4 : 0) | l;
  return a;
}
function jo(t, e, n, i, s, a, r, o) {
  if (t) {
    const ve = new A0(o.data, o.start, o.end);
    return Gl(ve, e, n, !1);
  }
  if (i === 0 && !s && r.length === 4 && r[0].x === 3 && r[0].y === -1 && r[1].x === -3 && r[1].y === -1 && r[2].x === 2 && r[2].y === -2 && r[3].x === -2 && r[3].y === -2)
    return r9(e, n, o);
  const c = s9[i].concat(r);
  c.sort((ve, Be) => ve.y - Be.y || ve.x - Be.x);
  const l = c.length, h = new Int8Array(l), f = new Int8Array(l), u = [];
  let d = 0, x = 0, g = 0, m = 0, p, b;
  for (b = 0; b < l; b++)
    h[b] = c[b].x, f[b] = c[b].y, x = Math.min(x, c[b].x), g = Math.max(g, c[b].x), m = Math.min(m, c[b].y), b < l - 1 && c[b].y === c[b + 1].y && c[b].x === c[b + 1].x - 1 ? d |= 1 << l - 1 - b : u.push(b);
  const w = u.length, y = new Int8Array(w), k = new Int8Array(w), S = new Uint16Array(w);
  for (p = 0; p < w; p++)
    b = u[p], y[p] = c[b].x, k[p] = c[b].y, S[p] = 1 << l - 1 - b;
  const C = -x, T = -m, F = e - g, R = a9[i];
  let D = new Uint8Array(e);
  const M = [], _ = o.decoder, K = o.contextCache.getContexts("GB");
  let se = 0, H, W, le, q = 0, L, Fe;
  for (let ve = 0; ve < n; ve++) {
    if (s) {
      const Be = _.readBit(K, R);
      if (se ^= Be, se) {
        M.push(D);
        continue;
      }
    }
    for (D = new Uint8Array(D), M.push(D), H = 0; H < e; H++) {
      if (H >= C && H < F && ve >= T)
        for (q = q << 1 & d, b = 0; b < w; b++)
          W = ve + k[b], le = H + y[b], L = M[W][le], L && (L = S[b], q |= L);
      else
        for (q = 0, Fe = l - 1, b = 0; b < l; b++, Fe--)
          le = H + h[b], le >= 0 && le < e && (W = ve + f[b], W >= 0 && (L = M[W][le], L && (q |= L << Fe)));
      const Be = _.readBit(K, q);
      D[H] = Be;
    }
  }
  return M;
}
function Lf(t, e, n, i, s, a, r, o, c) {
  let l = $1[n].coding;
  n === 0 && (l = l.concat([o[0]]));
  const h = l.length, f = new Int32Array(h), u = new Int32Array(h);
  let d;
  for (d = 0; d < h; d++)
    f[d] = l[d].x, u[d] = l[d].y;
  let x = $1[n].reference;
  n === 0 && (x = x.concat([o[1]]));
  const g = x.length, m = new Int32Array(g), p = new Int32Array(g);
  for (d = 0; d < g; d++)
    m[d] = x[d].x, p[d] = x[d].y;
  const b = i[0].length, w = i.length, y = [], k = c.decoder, S = c.contextCache.getContexts("GR");
  for (let C = 0; C < e; C++) {
    const T = new Uint8Array(t);
    y.push(T);
    for (let F = 0; F < t; F++) {
      let R, D, M = 0;
      for (d = 0; d < h; d++)
        R = C + u[d], D = F + f[d], R < 0 || D < 0 || D >= t ? M <<= 1 : M = M << 1 | y[R][D];
      for (d = 0; d < g; d++)
        R = C + p[d] - a, D = F + m[d] - s, R < 0 || R >= w || D < 0 || D >= b ? M <<= 1 : M = M << 1 | i[R][D];
      const _ = k.readBit(S, M);
      T[F] = _;
    }
  }
  return y;
}
function o9(t, e, n, i, s, a, r, o, c, l, h, f) {
  if (t && e)
    throw new kt("symbol refinement with Huffman is not supported");
  const u = [];
  let d = 0, x = jl(n.length + i);
  const g = h.decoder, m = h.contextCache;
  let p, b;
  for (t && (p = is(1), b = [], x = Math.max(x, 1)); u.length < i; ) {
    const F = t ? a.tableDeltaHeight.decode(f) : an(m, "IADH", g);
    d += F;
    let R = 0, D = 0;
    const M = t ? b.length : 0;
    for (; ; ) {
      const _ = t ? a.tableDeltaWidth.decode(f) : an(m, "IADW", g);
      if (_ === null)
        break;
      R += _, D += R;
      let K;
      if (e) {
        const se = an(m, "IAAI", g);
        if (se > 1)
          K = _f(t, e, R, d, 0, se, 1, n.concat(u), x, 0, 0, 1, 0, a, c, l, h, 0, f);
        else {
          const H = Of(m, g, x), W = an(m, "IARDX", g), le = an(m, "IARDY", g), q = H < n.length ? n[H] : u[H - n.length];
          K = Lf(R, d, c, q, W, le, !1, l, h);
        }
        u.push(K);
      } else t ? b.push(R) : (K = jo(!1, R, d, r, !1, null, o, h), u.push(K));
    }
    if (t && !e) {
      const _ = a.tableBitmapSize.decode(f);
      f.byteAlign();
      let K;
      if (_ === 0)
        K = w9(f, D, d);
      else {
        const H = f.end, W = f.position + _;
        f.end = W, K = Gl(f, D, d, !1), f.end = H, f.position = W;
      }
      const se = b.length;
      if (M === se - 1)
        u.push(K);
      else {
        let H, W, le = 0, q, L, Fe;
        for (H = M; H < se; H++) {
          for (L = b[H], q = le + L, Fe = [], W = 0; W < d; W++)
            Fe.push(K[W].subarray(le, q));
          u.push(Fe), le = q;
        }
      }
    }
  }
  const w = [], y = [];
  let k = !1, S, C;
  const T = n.length + i;
  for (; y.length < T; ) {
    let F = t ? p.decode(f) : an(m, "IAEX", g);
    for (; F--; )
      y.push(k);
    k = !k;
  }
  for (S = 0, C = n.length; S < C; S++)
    y[S] && w.push(n[S]);
  for (let F = 0; F < i; S++, F++)
    y[S] && w.push(u[F]);
  return w;
}
function _f(t, e, n, i, s, a, r, o, c, l, h, f, u, d, x, g, m, p, b) {
  if (t && e)
    throw new kt("refinement with Huffman is not supported");
  const w = [];
  let y, k;
  for (y = 0; y < i; y++)
    k = new Uint8Array(n), s && k.fill(s), w.push(k);
  const S = m.decoder, C = m.contextCache;
  let T = t ? -d.tableDeltaT.decode(b) : -an(C, "IADT", S), F = 0;
  for (y = 0; y < a; ) {
    const R = t ? d.tableDeltaT.decode(b) : an(C, "IADT", S);
    T += R;
    const D = t ? d.tableFirstS.decode(b) : an(C, "IAFS", S);
    F += D;
    let M = F;
    do {
      let _ = 0;
      r > 1 && (_ = t ? b.readBits(p) : an(C, "IAIT", S));
      const K = r * T + _, se = t ? d.symbolIDTable.decode(b) : Of(C, S, c), H = e && (t ? b.readBit() : an(C, "IARI", S));
      let W = o[se], le = W[0].length, q = W.length;
      if (H) {
        const B = an(C, "IARDW", S), P = an(C, "IARDH", S), G = an(C, "IARDX", S), z = an(C, "IARDY", S);
        le += B, q += P, W = Lf(le, q, x, W, (B >> 1) + G, (P >> 1) + z, !1, g, m);
      }
      let L = 0;
      l ? f & 1 ? L = q - 1 : M += q - 1 : f > 1 ? M += le - 1 : L = le - 1;
      const Fe = K - (f & 1 ? 0 : q - 1), ve = M - (f & 2 ? le - 1 : 0);
      let Be, Ae, Ve;
      if (l)
        for (Be = 0; Be < q; Be++) {
          if (k = w[ve + Be], !k)
            continue;
          Ve = W[Be];
          const B = Math.min(n - Fe, le);
          switch (u) {
            case 0:
              for (Ae = 0; Ae < B; Ae++)
                k[Fe + Ae] |= Ve[Ae];
              break;
            case 2:
              for (Ae = 0; Ae < B; Ae++)
                k[Fe + Ae] ^= Ve[Ae];
              break;
            default:
              throw new kt(`operator ${u} is not supported`);
          }
        }
      else
        for (Ae = 0; Ae < q; Ae++)
          if (k = w[Fe + Ae], !!k)
            switch (Ve = W[Ae], u) {
              case 0:
                for (Be = 0; Be < le; Be++)
                  k[ve + Be] |= Ve[Be];
                break;
              case 2:
                for (Be = 0; Be < le; Be++)
                  k[ve + Be] ^= Ve[Be];
                break;
              default:
                throw new kt(`operator ${u} is not supported`);
            }
      y++;
      const pe = t ? d.tableDeltaS.decode(b) : an(C, "IADS", S);
      if (pe === null)
        break;
      M += L + pe + h;
    } while (!0);
  }
  return w;
}
function c9(t, e, n, i, s, a) {
  const r = [];
  t || (r.push({
    x: -e,
    y: 0
  }), s === 0 && r.push({
    x: -3,
    y: -1
  }, {
    x: 2,
    y: -2
  }, {
    x: -2,
    y: -2
  }));
  const o = (i + 1) * e, c = jo(t, o, n, s, !1, null, r, a), l = [];
  for (let h = 0; h <= i; h++) {
    const f = [], u = e * h, d = u + e;
    for (let x = 0; x < n; x++)
      f.push(c[x].subarray(u, d));
    l.push(f);
  }
  return l;
}
function l9(t, e, n, i, s, a, r, o, c, l, h, f, u, d, x) {
  if (r)
    throw new kt("skip is not supported");
  if (o !== 0)
    throw new kt(`operator "${o}" is not supported in halftone region`);
  const m = [];
  let p, b, w;
  for (p = 0; p < s; p++)
    w = new Uint8Array(i), a && w.fill(a), m.push(w);
  const y = e.length, k = e[0], S = k[0].length, C = k.length, T = jl(y), F = [];
  t || (F.push({
    x: n <= 1 ? 3 : 2,
    y: -1
  }), n === 0 && F.push({
    x: -3,
    y: -1
  }, {
    x: 2,
    y: -2
  }, {
    x: -2,
    y: -2
  }));
  const R = [];
  let D, M;
  for (t && (D = new A0(x.data, x.start, x.end)), p = T - 1; p >= 0; p--)
    t ? M = Gl(D, c, l, !0) : M = jo(!1, c, l, n, !1, null, F, x), R[p] = M;
  let _, K, se, H, W, le, q, L, Fe;
  for (_ = 0; _ < l; _++)
    for (K = 0; K < c; K++) {
      for (se = 0, H = 0, b = T - 1; b >= 0; b--)
        se ^= R[b][_][K], H |= se << b;
      if (W = e[H], le = h + _ * d + K * u >> 8, q = f + _ * u - K * d >> 8, le >= 0 && le + S <= i && q >= 0 && q + C <= s)
        for (p = 0; p < C; p++)
          for (Fe = m[q + p], L = W[p], b = 0; b < S; b++)
            Fe[le + b] |= L[b];
      else {
        let ve, Be;
        for (p = 0; p < C; p++)
          if (Be = q + p, !(Be < 0 || Be >= s))
            for (Fe = m[Be], L = W[p], b = 0; b < S; b++)
              ve = le + b, ve >= 0 && ve < i && (Fe[ve] |= L[b]);
      }
    }
  return m;
}
function h9(t, e) {
  const n = {};
  n.number = ht(t, e);
  const i = t[e + 4], s = i & 63;
  if (!G1[s])
    throw new kt("invalid segment type: " + s);
  n.type = s, n.typeName = G1[s], n.deferredNonRetain = !!(i & 128);
  const a = !!(i & 64), r = t[e + 5];
  let o = r >> 5 & 7;
  const c = [r & 31];
  let l = e + 6;
  if (r === 7) {
    o = ht(t, l - 1) & 536870911, l += 3;
    let x = o + 7 >> 3;
    for (c[0] = t[l++]; --x > 0; )
      c.push(t[l++]);
  } else if (r === 5 || r === 6)
    throw new kt("invalid referred-to flags");
  n.retainBits = c;
  let h = 4;
  n.number <= 256 ? h = 1 : n.number <= 65536 && (h = 2);
  const f = [];
  let u, d;
  for (u = 0; u < o; u++) {
    let x;
    h === 1 ? x = t[l] : h === 2 ? x = We(t, l) : x = ht(t, l), f.push(x), l += h;
  }
  if (n.referredTo = f, a ? (n.pageAssociation = ht(t, l), l += 4) : n.pageAssociation = t[l++], n.length = ht(t, l), l += 4, n.length === 4294967295)
    if (s === 38) {
      const x = Wr(t, l), m = !!(t[l + Vr] & 1), p = 6, b = new Uint8Array(p);
      for (m || (b[0] = 255, b[1] = 172), b[2] = x.height >>> 24 & 255, b[3] = x.height >> 16 & 255, b[4] = x.height >> 8 & 255, b[5] = x.height & 255, u = l, d = t.length; u < d; u++) {
        let w = 0;
        for (; w < p && b[w] === t[u + w]; )
          w++;
        if (w === p) {
          n.length = u + p;
          break;
        }
      }
      if (n.length === 4294967295)
        throw new kt("segment end was not found");
    } else
      throw new kt("invalid unknown segment length");
  return n.headerEnd = l, n;
}
function f9(t, e, n, i) {
  const s = [];
  let a = n;
  for (; a < i; ) {
    const r = h9(e, a);
    a = r.headerEnd;
    const o = {
      header: r,
      data: e
    };
    if (t.randomAccess || (o.start = a, a += r.length, o.end = a), s.push(o), r.type === 51)
      break;
  }
  if (t.randomAccess)
    for (let r = 0, o = s.length; r < o; r++)
      s[r].start = a, a += s[r].header.length, s[r].end = a;
  return s;
}
function Wr(t, e) {
  return {
    width: ht(t, e),
    height: ht(t, e + 4),
    x: ht(t, e + 8),
    y: ht(t, e + 12),
    combinationOperator: t[e + 16] & 7
  };
}
const Vr = 17;
function u9(t, e) {
  const n = t.header, i = t.data, s = t.end;
  let a = t.start, r, o, c, l;
  switch (n.type) {
    case 0:
      const f = {}, u = We(i, a);
      if (f.huffman = !!(u & 1), f.refinement = !!(u & 2), f.huffmanDHSelector = u >> 2 & 3, f.huffmanDWSelector = u >> 4 & 3, f.bitmapSizeSelector = u >> 6 & 1, f.aggregationInstancesSelector = u >> 7 & 1, f.bitmapCodingContextUsed = !!(u & 256), f.bitmapCodingContextRetained = !!(u & 512), f.template = u >> 10 & 3, f.refinementTemplate = u >> 12 & 1, a += 2, !f.huffman) {
        for (l = f.template === 0 ? 4 : 1, o = [], c = 0; c < l; c++)
          o.push({
            x: di(i, a),
            y: di(i, a + 1)
          }), a += 2;
        f.at = o;
      }
      if (f.refinement && !f.refinementTemplate) {
        for (o = [], c = 0; c < 2; c++)
          o.push({
            x: di(i, a),
            y: di(i, a + 1)
          }), a += 2;
        f.refinementAt = o;
      }
      f.numberOfExportedSymbols = ht(i, a), a += 4, f.numberOfNewSymbols = ht(i, a), a += 4, r = [f, n.number, n.referredTo, i, a, s];
      break;
    case 6:
    case 7:
      const d = {};
      d.info = Wr(i, a), a += Vr;
      const x = We(i, a);
      if (a += 2, d.huffman = !!(x & 1), d.refinement = !!(x & 2), d.logStripSize = x >> 2 & 3, d.stripSize = 1 << d.logStripSize, d.referenceCorner = x >> 4 & 3, d.transposed = !!(x & 64), d.combinationOperator = x >> 7 & 3, d.defaultPixelValue = x >> 9 & 1, d.dsOffset = x << 17 >> 27, d.refinementTemplate = x >> 15 & 1, d.huffman) {
        const C = We(i, a);
        a += 2, d.huffmanFS = C & 3, d.huffmanDS = C >> 2 & 3, d.huffmanDT = C >> 4 & 3, d.huffmanRefinementDW = C >> 6 & 3, d.huffmanRefinementDH = C >> 8 & 3, d.huffmanRefinementDX = C >> 10 & 3, d.huffmanRefinementDY = C >> 12 & 3, d.huffmanRefinementSizeSelector = !!(C & 16384);
      }
      if (d.refinement && !d.refinementTemplate) {
        for (o = [], c = 0; c < 2; c++)
          o.push({
            x: di(i, a),
            y: di(i, a + 1)
          }), a += 2;
        d.refinementAt = o;
      }
      d.numberOfSymbolInstances = ht(i, a), a += 4, r = [d, n.referredTo, i, a, s];
      break;
    case 16:
      const g = {}, m = i[a++];
      g.mmr = !!(m & 1), g.template = m >> 1 & 3, g.patternWidth = i[a++], g.patternHeight = i[a++], g.maxPatternIndex = ht(i, a), a += 4, r = [g, n.number, i, a, s];
      break;
    case 22:
    case 23:
      const p = {};
      p.info = Wr(i, a), a += Vr;
      const b = i[a++];
      p.mmr = !!(b & 1), p.template = b >> 1 & 3, p.enableSkip = !!(b & 8), p.combinationOperator = b >> 4 & 7, p.defaultPixelValue = b >> 7 & 1, p.gridWidth = ht(i, a), a += 4, p.gridHeight = ht(i, a), a += 4, p.gridOffsetX = ht(i, a) & 4294967295, a += 4, p.gridOffsetY = ht(i, a) & 4294967295, a += 4, p.gridVectorX = We(i, a), a += 2, p.gridVectorY = We(i, a), a += 2, r = [p, n.referredTo, i, a, s];
      break;
    case 38:
    case 39:
      const w = {};
      w.info = Wr(i, a), a += Vr;
      const y = i[a++];
      if (w.mmr = !!(y & 1), w.template = y >> 1 & 3, w.prediction = !!(y & 8), !w.mmr) {
        for (l = w.template === 0 ? 4 : 1, o = [], c = 0; c < l; c++)
          o.push({
            x: di(i, a),
            y: di(i, a + 1)
          }), a += 2;
        w.at = o;
      }
      r = [w, i, a, s];
      break;
    case 48:
      const k = {
        width: ht(i, a),
        height: ht(i, a + 4),
        resolutionX: ht(i, a + 8),
        resolutionY: ht(i, a + 12)
      };
      k.height === 4294967295 && delete k.height;
      const S = i[a + 16];
      We(i, a + 17), k.lossless = !!(S & 1), k.refinement = !!(S & 2), k.defaultPixelValue = S >> 2 & 1, k.combinationOperator = S >> 3 & 3, k.requiresBuffer = !!(S & 32), k.combinationOperatorOverride = !!(S & 64), r = [k];
      break;
    case 49:
      break;
    case 50:
      break;
    case 51:
      break;
    case 53:
      r = [n.number, i, a, s];
      break;
    case 62:
      break;
    default:
      throw new kt(`segment type ${n.typeName}(${n.type}) is not implemented`);
  }
  const h = "on" + n.typeName;
  h in e && e[h].apply(e, r);
}
function d9(t, e) {
  for (let n = 0, i = t.length; n < i; n++)
    u9(t[n], e);
}
function x9(t) {
  const e = new g9();
  for (let n = 0, i = t.length; n < i; n++) {
    const s = t[n], a = f9({}, s.data, s.start, s.end);
    d9(a, e);
  }
  return e.buffer;
}
class g9 {
  onPageInformation(e) {
    this.currentPageInfo = e;
    const n = e.width + 7 >> 3, i = new Uint8ClampedArray(n * e.height);
    e.defaultPixelValue && i.fill(255), this.buffer = i;
  }
  drawBitmap(e, n) {
    const i = this.currentPageInfo, s = e.width, a = e.height, r = i.width + 7 >> 3, o = i.combinationOperatorOverride ? e.combinationOperator : i.combinationOperator, c = this.buffer, l = 128 >> (e.x & 7);
    let h = e.y * r + (e.x >> 3), f, u, d, x;
    switch (o) {
      case 0:
        for (f = 0; f < a; f++) {
          for (d = l, x = h, u = 0; u < s; u++)
            n[f][u] && (c[x] |= d), d >>= 1, d || (d = 128, x++);
          h += r;
        }
        break;
      case 2:
        for (f = 0; f < a; f++) {
          for (d = l, x = h, u = 0; u < s; u++)
            n[f][u] && (c[x] ^= d), d >>= 1, d || (d = 128, x++);
          h += r;
        }
        break;
      default:
        throw new kt(`operator ${o} is not supported`);
    }
  }
  onImmediateGenericRegion(e, n, i, s) {
    const a = e.info, r = new Ua(n, i, s), o = jo(e.mmr, a.width, a.height, e.template, e.prediction, null, e.at, r);
    this.drawBitmap(a, o);
  }
  onImmediateLosslessGenericRegion() {
    this.onImmediateGenericRegion(...arguments);
  }
  onSymbolDictionary(e, n, i, s, a, r) {
    let o, c;
    e.huffman && (o = b9(e, i, this.customTables), c = new A0(s, a, r));
    let l = this.symbols;
    l || (this.symbols = l = {});
    const h = [];
    for (const u of i) {
      const d = l[u];
      d && h.push(...d);
    }
    const f = new Ua(s, a, r);
    l[n] = o9(e.huffman, e.refinement, h, e.numberOfNewSymbols, e.numberOfExportedSymbols, o, e.template, e.at, e.refinementTemplate, e.refinementAt, f, c);
  }
  onImmediateTextRegion(e, n, i, s, a) {
    const r = e.info;
    let o, c;
    const l = this.symbols, h = [];
    for (const x of n) {
      const g = l[x];
      g && h.push(...g);
    }
    const f = jl(h.length);
    e.huffman && (c = new A0(i, s, a), o = m9(e, n, this.customTables, h.length, c));
    const u = new Ua(i, s, a), d = _f(e.huffman, e.refinement, r.width, r.height, e.defaultPixelValue, e.numberOfSymbolInstances, e.stripSize, h, f, e.transposed, e.dsOffset, e.referenceCorner, e.combinationOperator, o, e.refinementTemplate, e.refinementAt, u, e.logStripSize, c);
    this.drawBitmap(r, d);
  }
  onImmediateLosslessTextRegion() {
    this.onImmediateTextRegion(...arguments);
  }
  onPatternDictionary(e, n, i, s, a) {
    let r = this.patterns;
    r || (this.patterns = r = {});
    const o = new Ua(i, s, a);
    r[n] = c9(e.mmr, e.patternWidth, e.patternHeight, e.maxPatternIndex, e.template, o);
  }
  onImmediateHalftoneRegion(e, n, i, s, a) {
    const r = this.patterns[n[0]], o = e.info, c = new Ua(i, s, a), l = l9(e.mmr, r, e.template, o.width, o.height, e.defaultPixelValue, e.enableSkip, e.combinationOperator, e.gridWidth, e.gridHeight, e.gridOffsetX, e.gridOffsetY, e.gridVectorX, e.gridVectorY, c);
    this.drawBitmap(o, l);
  }
  onImmediateLosslessHalftoneRegion() {
    this.onImmediateHalftoneRegion(...arguments);
  }
  onTables(e, n, i, s) {
    let a = this.customTables;
    a || (this.customTables = a = {}), a[e] = p9(n, i, s);
  }
}
class ns {
  constructor(e) {
    e.length === 2 ? (this.isOOB = !0, this.rangeLow = 0, this.prefixLength = e[0], this.rangeLength = 0, this.prefixCode = e[1], this.isLowerRange = !1) : (this.isOOB = !1, this.rangeLow = e[0], this.prefixLength = e[1], this.rangeLength = e[2], this.prefixCode = e[3], this.isLowerRange = e[4] === "lower");
  }
}
class ro {
  constructor(e) {
    this.children = [], e ? (this.isLeaf = !0, this.rangeLength = e.rangeLength, this.rangeLow = e.rangeLow, this.isLowerRange = e.isLowerRange, this.isOOB = e.isOOB) : this.isLeaf = !1;
  }
  buildTree(e, n) {
    const i = e.prefixCode >> n & 1;
    if (n <= 0)
      this.children[i] = new ro(e);
    else {
      let s = this.children[i];
      s || (this.children[i] = s = new ro(null)), s.buildTree(e, n - 1);
    }
  }
  decodeNode(e) {
    if (this.isLeaf) {
      if (this.isOOB)
        return null;
      const i = e.readBits(this.rangeLength);
      return this.rangeLow + (this.isLowerRange ? -i : i);
    }
    const n = this.children[e.readBit()];
    if (!n)
      throw new kt("invalid Huffman data");
    return n.decodeNode(e);
  }
}
class oo {
  constructor(e, n) {
    n || this.assignPrefixCodes(e), this.rootNode = new ro(null);
    for (let i = 0, s = e.length; i < s; i++) {
      const a = e[i];
      a.prefixLength > 0 && this.rootNode.buildTree(a, a.prefixLength - 1);
    }
  }
  decode(e) {
    return this.rootNode.decodeNode(e);
  }
  assignPrefixCodes(e) {
    const n = e.length;
    let i = 0;
    for (let h = 0; h < n; h++)
      i = Math.max(i, e[h].prefixLength);
    const s = new Uint32Array(i + 1);
    for (let h = 0; h < n; h++)
      s[e[h].prefixLength]++;
    let a = 1, r = 0, o, c, l;
    for (s[0] = 0; a <= i; ) {
      for (r = r + s[a - 1] << 1, o = r, c = 0; c < n; )
        l = e[c], l.prefixLength === a && (l.prefixCode = o, o++), c++;
      a++;
    }
  }
}
function p9(t, e, n) {
  const i = t[e], s = ht(t, e + 1) & 4294967295, a = ht(t, e + 5) & 4294967295, r = new A0(t, e + 9, n), o = (i >> 1 & 7) + 1, c = (i >> 4 & 7) + 1, l = [];
  let h, f, u = s;
  do
    h = r.readBits(o), f = r.readBits(c), l.push(new ns([u, h, f, 0])), u += 1 << f;
  while (u < a);
  return h = r.readBits(o), l.push(new ns([s - 1, h, 32, 0, "lower"])), h = r.readBits(o), l.push(new ns([a, h, 32, 0])), i & 1 && (h = r.readBits(o), l.push(new ns([h, 0]))), new oo(l, !1);
}
const z1 = {};
function is(t) {
  let e = z1[t];
  if (e)
    return e;
  let n;
  switch (t) {
    case 1:
      n = [[0, 1, 4, 0], [16, 2, 8, 2], [272, 3, 16, 6], [65808, 3, 32, 7]];
      break;
    case 2:
      n = [[0, 1, 0, 0], [1, 2, 0, 2], [2, 3, 0, 6], [3, 4, 3, 14], [11, 5, 6, 30], [75, 6, 32, 62], [6, 63]];
      break;
    case 3:
      n = [[-256, 8, 8, 254], [0, 1, 0, 0], [1, 2, 0, 2], [2, 3, 0, 6], [3, 4, 3, 14], [11, 5, 6, 30], [-257, 8, 32, 255, "lower"], [75, 7, 32, 126], [6, 62]];
      break;
    case 4:
      n = [[1, 1, 0, 0], [2, 2, 0, 2], [3, 3, 0, 6], [4, 4, 3, 14], [12, 5, 6, 30], [76, 5, 32, 31]];
      break;
    case 5:
      n = [[-255, 7, 8, 126], [1, 1, 0, 0], [2, 2, 0, 2], [3, 3, 0, 6], [4, 4, 3, 14], [12, 5, 6, 30], [-256, 7, 32, 127, "lower"], [76, 6, 32, 62]];
      break;
    case 6:
      n = [[-2048, 5, 10, 28], [-1024, 4, 9, 8], [-512, 4, 8, 9], [-256, 4, 7, 10], [-128, 5, 6, 29], [-64, 5, 5, 30], [-32, 4, 5, 11], [0, 2, 7, 0], [128, 3, 7, 2], [256, 3, 8, 3], [512, 4, 9, 12], [1024, 4, 10, 13], [-2049, 6, 32, 62, "lower"], [2048, 6, 32, 63]];
      break;
    case 7:
      n = [[-1024, 4, 9, 8], [-512, 3, 8, 0], [-256, 4, 7, 9], [-128, 5, 6, 26], [-64, 5, 5, 27], [-32, 4, 5, 10], [0, 4, 5, 11], [32, 5, 5, 28], [64, 5, 6, 29], [128, 4, 7, 12], [256, 3, 8, 1], [512, 3, 9, 2], [1024, 3, 10, 3], [-1025, 5, 32, 30, "lower"], [2048, 5, 32, 31]];
      break;
    case 8:
      n = [[-15, 8, 3, 252], [-7, 9, 1, 508], [-5, 8, 1, 253], [-3, 9, 0, 509], [-2, 7, 0, 124], [-1, 4, 0, 10], [0, 2, 1, 0], [2, 5, 0, 26], [3, 6, 0, 58], [4, 3, 4, 4], [20, 6, 1, 59], [22, 4, 4, 11], [38, 4, 5, 12], [70, 5, 6, 27], [134, 5, 7, 28], [262, 6, 7, 60], [390, 7, 8, 125], [646, 6, 10, 61], [-16, 9, 32, 510, "lower"], [1670, 9, 32, 511], [2, 1]];
      break;
    case 9:
      n = [[-31, 8, 4, 252], [-15, 9, 2, 508], [-11, 8, 2, 253], [-7, 9, 1, 509], [-5, 7, 1, 124], [-3, 4, 1, 10], [-1, 3, 1, 2], [1, 3, 1, 3], [3, 5, 1, 26], [5, 6, 1, 58], [7, 3, 5, 4], [39, 6, 2, 59], [43, 4, 5, 11], [75, 4, 6, 12], [139, 5, 7, 27], [267, 5, 8, 28], [523, 6, 8, 60], [779, 7, 9, 125], [1291, 6, 11, 61], [-32, 9, 32, 510, "lower"], [3339, 9, 32, 511], [2, 0]];
      break;
    case 10:
      n = [[-21, 7, 4, 122], [-5, 8, 0, 252], [-4, 7, 0, 123], [-3, 5, 0, 24], [-2, 2, 2, 0], [2, 5, 0, 25], [3, 6, 0, 54], [4, 7, 0, 124], [5, 8, 0, 253], [6, 2, 6, 1], [70, 5, 5, 26], [102, 6, 5, 55], [134, 6, 6, 56], [198, 6, 7, 57], [326, 6, 8, 58], [582, 6, 9, 59], [1094, 6, 10, 60], [2118, 7, 11, 125], [-22, 8, 32, 254, "lower"], [4166, 8, 32, 255], [2, 2]];
      break;
    case 11:
      n = [[1, 1, 0, 0], [2, 2, 1, 2], [4, 4, 0, 12], [5, 4, 1, 13], [7, 5, 1, 28], [9, 5, 2, 29], [13, 6, 2, 60], [17, 7, 2, 122], [21, 7, 3, 123], [29, 7, 4, 124], [45, 7, 5, 125], [77, 7, 6, 126], [141, 7, 32, 127]];
      break;
    case 12:
      n = [[1, 1, 0, 0], [2, 2, 0, 2], [3, 3, 1, 6], [5, 5, 0, 28], [6, 5, 1, 29], [8, 6, 1, 60], [10, 7, 0, 122], [11, 7, 1, 123], [13, 7, 2, 124], [17, 7, 3, 125], [25, 7, 4, 126], [41, 8, 5, 254], [73, 8, 32, 255]];
      break;
    case 13:
      n = [[1, 1, 0, 0], [2, 3, 0, 4], [3, 4, 0, 12], [4, 5, 0, 28], [5, 4, 1, 13], [7, 3, 3, 5], [15, 6, 1, 58], [17, 6, 2, 59], [21, 6, 3, 60], [29, 6, 4, 61], [45, 6, 5, 62], [77, 7, 6, 126], [141, 7, 32, 127]];
      break;
    case 14:
      n = [[-2, 3, 0, 4], [-1, 3, 0, 5], [0, 1, 0, 0], [1, 3, 0, 6], [2, 3, 0, 7]];
      break;
    case 15:
      n = [[-24, 7, 4, 124], [-8, 6, 2, 60], [-4, 5, 1, 28], [-2, 4, 0, 12], [-1, 3, 0, 4], [0, 1, 0, 0], [1, 3, 0, 5], [2, 4, 0, 13], [3, 5, 1, 29], [5, 6, 2, 61], [9, 7, 4, 125], [-25, 7, 32, 126, "lower"], [25, 7, 32, 127]];
      break;
    default:
      throw new kt(`standard table B.${t} does not exist`);
  }
  for (let i = 0, s = n.length; i < s; i++)
    n[i] = new ns(n[i]);
  return e = new oo(n, !0), z1[t] = e, e;
}
class A0 {
  constructor(e, n, i) {
    this.data = e, this.start = n, this.end = i, this.position = n, this.shift = -1, this.currentByte = 0;
  }
  readBit() {
    if (this.shift < 0) {
      if (this.position >= this.end)
        throw new kt("end of data while reading bit");
      this.currentByte = this.data[this.position++], this.shift = 7;
    }
    const e = this.currentByte >> this.shift & 1;
    return this.shift--, e;
  }
  readBits(e) {
    let n = 0, i;
    for (i = e - 1; i >= 0; i--)
      n |= this.readBit() << i;
    return n;
  }
  byteAlign() {
    this.shift = -1;
  }
  next() {
    return this.position >= this.end ? -1 : this.data[this.position++];
  }
}
function As(t, e, n) {
  let i = 0;
  for (let s = 0, a = e.length; s < a; s++) {
    const r = n[e[s]];
    if (r) {
      if (t === i)
        return r;
      i++;
    }
  }
  throw new kt("can't find custom Huffman table");
}
function m9(t, e, n, i, s) {
  const a = [];
  for (let u = 0; u <= 34; u++) {
    const d = s.readBits(4);
    a.push(new ns([u, d, 0, 0]));
  }
  const r = new oo(a, !1);
  a.length = 0;
  for (let u = 0; u < i; ) {
    const d = r.decode(s);
    if (d >= 32) {
      let x, g, m;
      switch (d) {
        case 32:
          if (u === 0)
            throw new kt("no previous value in symbol ID table");
          g = s.readBits(2) + 3, x = a[u - 1].prefixLength;
          break;
        case 33:
          g = s.readBits(3) + 3, x = 0;
          break;
        case 34:
          g = s.readBits(7) + 11, x = 0;
          break;
        default:
          throw new kt("invalid code length in symbol ID table");
      }
      for (m = 0; m < g; m++)
        a.push(new ns([u, x, 0, 0])), u++;
    } else
      a.push(new ns([u, d, 0, 0])), u++;
  }
  s.byteAlign();
  const o = new oo(a, !1);
  let c = 0, l, h, f;
  switch (t.huffmanFS) {
    case 0:
    case 1:
      l = is(t.huffmanFS + 6);
      break;
    case 3:
      l = As(c, e, n), c++;
      break;
    default:
      throw new kt("invalid Huffman FS selector");
  }
  switch (t.huffmanDS) {
    case 0:
    case 1:
    case 2:
      h = is(t.huffmanDS + 8);
      break;
    case 3:
      h = As(c, e, n), c++;
      break;
    default:
      throw new kt("invalid Huffman DS selector");
  }
  switch (t.huffmanDT) {
    case 0:
    case 1:
    case 2:
      f = is(t.huffmanDT + 11);
      break;
    case 3:
      f = As(c, e, n), c++;
      break;
    default:
      throw new kt("invalid Huffman DT selector");
  }
  if (t.refinement)
    throw new kt("refinement with Huffman is not supported");
  return {
    symbolIDTable: o,
    tableFirstS: l,
    tableDeltaS: h,
    tableDeltaT: f
  };
}
function b9(t, e, n) {
  let i = 0, s, a;
  switch (t.huffmanDHSelector) {
    case 0:
    case 1:
      s = is(t.huffmanDHSelector + 4);
      break;
    case 3:
      s = As(i, e, n), i++;
      break;
    default:
      throw new kt("invalid Huffman DH selector");
  }
  switch (t.huffmanDWSelector) {
    case 0:
    case 1:
      a = is(t.huffmanDWSelector + 2);
      break;
    case 3:
      a = As(i, e, n), i++;
      break;
    default:
      throw new kt("invalid Huffman DW selector");
  }
  let r, o;
  return t.bitmapSizeSelector ? (r = As(i, e, n), i++) : r = is(1), t.aggregationInstancesSelector ? o = As(i, e, n) : o = is(1), {
    tableDeltaHeight: s,
    tableDeltaWidth: a,
    tableBitmapSize: r,
    tableAggregateInstances: o
  };
}
function w9(t, e, n) {
  const i = [];
  for (let s = 0; s < n; s++) {
    const a = new Uint8Array(e);
    i.push(a);
    for (let r = 0; r < e; r++)
      a[r] = t.readBit();
    t.byteAlign();
  }
  return i;
}
function Gl(t, e, n, i) {
  const s = {
    K: -1,
    Columns: e,
    Rows: n,
    BlackIs1: !0,
    EndOfBlock: i
  }, a = new Nf(t, s), r = [];
  let o, c = !1;
  for (let l = 0; l < n; l++) {
    const h = new Uint8Array(e);
    r.push(h);
    let f = -1;
    for (let u = 0; u < e; u++)
      f < 0 && (o = a.readNextChar(), o === -1 && (o = 0, c = !0), f = 7), h[u] = o >> f & 1, f--;
  }
  if (i && !c)
    for (let h = 0; h < 5 && a.readNextChar() !== -1; h++)
      ;
  return r;
}
class y9 {
  parseChunks(e) {
    return x9(e);
  }
  parse(e) {
    throw new Error("Not implemented: Jbig2Image.parse");
  }
}
class k9 extends mn {
  constructor(e, n, i) {
    super(n), this.stream = e, this.dict = e.dict, this.maybeLength = n, this.params = i;
  }
  get bytes() {
    return Q(this, "bytes", this.stream.getBytes(this.maybeLength));
  }
  ensureBuffer(e) {
  }
  readBlock() {
    this.decodeImage();
  }
  decodeImage(e) {
    if (this.eof)
      return this.buffer;
    e || (e = this.bytes);
    const n = new y9(), i = [];
    if (this.params instanceof E) {
      const r = this.params.get("JBIG2Globals");
      if (r instanceof je) {
        const o = r.getBytes();
        i.push({
          data: o,
          start: 0,
          end: o.length
        });
      }
    }
    i.push({
      data: e,
      start: 0,
      end: e.length
    });
    const s = n.parseChunks(i), a = s.length;
    for (let r = 0; r < a; r++)
      s[r] ^= 255;
    return this.buffer = s, this.bufferLength = a, this.eof = !0, this.buffer;
  }
  get canAsyncDecodeImageFromBuffer() {
    return this.stream.isAsync;
  }
}
class S9 extends mn {
  constructor(e, n, i) {
    super(n), this.stream = e, this.dict = e.dict, this.maybeLength = n, this.params = i;
  }
  get bytes() {
    return Q(this, "bytes", this.stream.getBytes(this.maybeLength));
  }
  ensureBuffer(e) {
  }
  readBlock(e) {
    Ke("JpxStream.readBlock");
  }
  get isAsyncDecoder() {
    return !0;
  }
  async decodeImage(e, n) {
    return this.eof ? this.buffer : (e || (e = this.bytes), this.buffer = await Jn.decode(e, n), this.bufferLength = this.buffer.length, this.eof = !0, this.buffer);
  }
  get canAsyncDecodeImageFromBuffer() {
    return this.stream.isAsync;
  }
}
class W1 extends mn {
  constructor(e, n, i) {
    super(n), this.str = e, this.dict = e.dict, this.cachedData = 0, this.bitsCached = 0;
    const s = 4096, a = {
      earlyChange: i,
      codeLength: 9,
      nextCode: 258,
      dictionaryValues: new Uint8Array(s),
      dictionaryLengths: new Uint16Array(s),
      dictionaryPrevCodes: new Uint16Array(s),
      currentSequence: new Uint8Array(s),
      currentSequenceLength: 0
    };
    for (let r = 0; r < 256; ++r)
      a.dictionaryValues[r] = r, a.dictionaryLengths[r] = 1;
    this.lzwState = a;
  }
  readBits(e) {
    let n = this.bitsCached, i = this.cachedData;
    for (; n < e; ) {
      const s = this.str.getByte();
      if (s === -1)
        return this.eof = !0, null;
      i = i << 8 | s, n += 8;
    }
    return this.bitsCached = n -= e, this.cachedData = i, this.lastCode = null, i >>> n & (1 << e) - 1;
  }
  readBlock() {
    let i = 1024, s, a, r;
    const o = this.lzwState;
    if (!o)
      return;
    const c = o.earlyChange;
    let l = o.nextCode;
    const h = o.dictionaryValues, f = o.dictionaryLengths, u = o.dictionaryPrevCodes;
    let d = o.codeLength, x = o.prevCode;
    const g = o.currentSequence;
    let m = o.currentSequenceLength, p = 0, b = this.bufferLength, w = this.ensureBuffer(this.bufferLength + i);
    for (s = 0; s < 512; s++) {
      const y = this.readBits(d), k = m > 0;
      if (y < 256)
        g[0] = y, m = 1;
      else if (y >= 258)
        if (y < l)
          for (m = f[y], a = m - 1, r = y; a >= 0; a--)
            g[a] = h[r], r = u[r];
        else
          g[m++] = g[0];
      else if (y === 256) {
        d = 9, l = 258, m = 0;
        continue;
      } else {
        this.eof = !0, delete this.lzwState;
        break;
      }
      if (k && (u[l] = x, f[l] = f[x] + 1, h[l] = g[0], l++, d = l + c & l + c - 1 ? d : Math.min(Math.log(l + c) / 0.6931471805599453 + 1, 12) | 0), x = y, p += m, i < p) {
        do
          i += 512;
        while (i < p);
        w = this.ensureBuffer(this.bufferLength + i);
      }
      for (a = 0; a < m; a++)
        w[b++] = g[a];
    }
    o.nextCode = l, o.codeLength = d, o.prevCode = x, o.currentSequenceLength = m, this.bufferLength = b;
  }
}
class V1 extends mn {
  constructor(e, n, i) {
    if (super(n), !(i instanceof E))
      return e;
    const s = this.predictor = i.get("Predictor") || 1;
    if (s <= 1)
      return e;
    if (s !== 2 && (s < 10 || s > 15))
      throw new j(`Unsupported predictor: ${s}`);
    this.readBlock = s === 2 ? this.readBlockTiff : this.readBlockPng, this.str = e, this.dict = e.dict;
    const a = this.colors = i.get("Colors") || 1, r = this.bits = i.get("BPC", "BitsPerComponent") || 8, o = this.columns = i.get("Columns") || 1;
    return this.pixBytes = a * r + 7 >> 3, this.rowBytes = o * a * r + 7 >> 3, this;
  }
  readBlockTiff() {
    const e = this.rowBytes, n = this.bufferLength, i = this.ensureBuffer(n + e), s = this.bits, a = this.colors, r = this.str.getBytes(e);
    if (this.eof = !r.length, this.eof)
      return;
    let o = 0, c = 0, l = 0, h = 0, f = n, u;
    if (s === 1 && a === 1)
      for (u = 0; u < e; ++u) {
        let d = r[u] ^ o;
        d ^= d >> 1, d ^= d >> 2, d ^= d >> 4, o = (d & 1) << 7, i[f++] = d;
      }
    else if (s === 8) {
      for (u = 0; u < a; ++u)
        i[f++] = r[u];
      for (; u < e; ++u)
        i[f] = i[f - a] + r[u], f++;
    } else if (s === 16) {
      const d = a * 2;
      for (u = 0; u < d; ++u)
        i[f++] = r[u];
      for (; u < e; u += 2) {
        const x = ((r[u] & 255) << 8) + (r[u + 1] & 255) + ((i[f - d] & 255) << 8) + (i[f - d + 1] & 255);
        i[f++] = x >> 8 & 255, i[f++] = x & 255;
      }
    } else {
      const d = new Uint8Array(a + 1), x = (1 << s) - 1;
      let g = 0, m = n;
      const p = this.columns;
      for (u = 0; u < p; ++u)
        for (let b = 0; b < a; ++b)
          l < s && (o = o << 8 | r[g++] & 255, l += 8), d[b] = d[b] + (o >> l - s) & x, l -= s, c = c << s | d[b], h += s, h >= 8 && (i[m++] = c >> h - 8 & 255, h -= 8);
      h > 0 && (i[m++] = (c << 8 - h) + (o & (1 << 8 - h) - 1));
    }
    this.bufferLength += e;
  }
  readBlockPng() {
    const e = this.rowBytes, n = this.pixBytes, i = this.str.getByte(), s = this.str.getBytes(e);
    if (this.eof = !s.length, this.eof)
      return;
    const a = this.bufferLength, r = this.ensureBuffer(a + e);
    let o = r.subarray(a - e, a);
    o.length === 0 && (o = new Uint8Array(e));
    let c, l = a, h, f;
    switch (i) {
      case 0:
        for (c = 0; c < e; ++c)
          r[l++] = s[c];
        break;
      case 1:
        for (c = 0; c < n; ++c)
          r[l++] = s[c];
        for (; c < e; ++c)
          r[l] = r[l - n] + s[c] & 255, l++;
        break;
      case 2:
        for (c = 0; c < e; ++c)
          r[l++] = o[c] + s[c] & 255;
        break;
      case 3:
        for (c = 0; c < n; ++c)
          r[l++] = (o[c] >> 1) + s[c];
        for (; c < e; ++c)
          r[l] = (o[c] + r[l - n] >> 1) + s[c] & 255, l++;
        break;
      case 4:
        for (c = 0; c < n; ++c)
          h = o[c], f = s[c], r[l++] = h + f;
        for (; c < e; ++c) {
          h = o[c];
          const u = o[c - n], d = r[l - n], x = d + h - u;
          let g = x - d;
          g < 0 && (g = -g);
          let m = x - h;
          m < 0 && (m = -m);
          let p = x - u;
          p < 0 && (p = -p), f = s[c], g <= m && g <= p ? r[l++] = d + f : m <= p ? r[l++] = h + f : r[l++] = u + f;
        }
        break;
      default:
        throw new j(`Unsupported predictor: ${i}`);
    }
    this.bufferLength += e;
  }
}
class C9 extends mn {
  constructor(e, n) {
    super(n), this.str = e, this.dict = e.dict;
  }
  readBlock() {
    const e = this.str.getBytes(2);
    if (!e || e.length < 2 || e[0] === 128) {
      this.eof = !0;
      return;
    }
    let n, i = this.bufferLength, s = e[0];
    if (s < 128) {
      if (n = this.ensureBuffer(i + s + 1), n[i++] = e[1], s > 0) {
        const a = this.str.getBytes(s);
        n.set(a, i), i += s;
      }
    } else
      s = 257 - s, n = this.ensureBuffer(i + s + 1), n.fill(e[1], i, i + s), i += s;
    this.bufferLength = i;
  }
}
const A9 = 1e3;
function v9(t) {
  const e = [], n = t.length;
  let i = 0;
  for (; i < n - 1; )
    e.push(t[i++] << 8 | t[i++]);
  return i < n && e.push(t[i]), n + "_" + String.fromCharCode.apply(null, e);
}
var Mo, Uf;
class zi {
  constructor({
    lexer: e,
    xref: n,
    allowStreams: i = !1,
    recoveryMode: s = !1
  }) {
    Ee(this, Mo);
    this.lexer = e, this.xref = n, this.allowStreams = i, this.recoveryMode = s, this.imageCache = /* @__PURE__ */ Object.create(null), this._imageId = 0, this.refill();
  }
  refill() {
    this.buf1 = this.lexer.getObj(), this.buf2 = this.lexer.getObj();
  }
  shift() {
    this.buf2 instanceof Mt && this.buf2.cmd === "ID" ? (this.buf1 = this.buf2, this.buf2 = null) : (this.buf1 = this.buf2, this.buf2 = this.lexer.getObj());
  }
  tryShift() {
    try {
      return this.shift(), !0;
    } catch (e) {
      if (e instanceof mt)
        throw e;
      return !1;
    }
  }
  getObj(e = null) {
    const n = this.buf1;
    if (this.shift(), n instanceof Mt)
      switch (n.cmd) {
        case "BI":
          return this.makeInlineImage(e);
        case "[":
          const i = [];
          for (; !Ht(this.buf1, "]") && this.buf1 !== $t; )
            i.push(this.getObj(e));
          if (this.buf1 === $t) {
            if (this.recoveryMode)
              return i;
            throw new _c("End of file inside array.");
          }
          return this.shift(), i;
        case "<<":
          const s = new E(this.xref);
          for (; !Ht(this.buf1, ">>") && this.buf1 !== $t; ) {
            if (!(this.buf1 instanceof O)) {
              Ge("Malformed dictionary: key must be a name object"), this.shift();
              continue;
            }
            const a = this.buf1.name;
            if (this.shift(), this.buf1 === $t)
              break;
            s.set(a, this.getObj(e));
          }
          if (this.buf1 === $t) {
            if (this.recoveryMode)
              return s;
            throw new _c("End of file inside dictionary.");
          }
          return Ht(this.buf2, "stream") ? this.allowStreams ? this.makeStream(s, e) : s : (this.shift(), s);
        default:
          return n;
      }
    if (Number.isInteger(n)) {
      if (Number.isInteger(this.buf1) && Ht(this.buf2, "R")) {
        const i = he.get(n, this.buf1);
        return this.shift(), this.shift(), i;
      }
      return n;
    }
    return typeof n == "string" && e ? e.decryptString(n) : n;
  }
  findDefaultInlineStreamEnd(e) {
    const {
      knownCommands: c
    } = this.lexer, l = e.pos, h = 15;
    let f = 0, u, d;
    for (; (u = e.getByte()) !== -1; )
      if (f === 0)
        f = u === 69 ? 1 : 0;
      else if (f === 1)
        f = u === 73 ? 2 : 0;
      else if (u === 32 || u === 10 || u === 13) {
        d = e.pos;
        const g = e.peekBytes(h), m = g.length;
        if (m === 0)
          break;
        for (let w = 0; w < m; w++)
          if (u = g[w], !(u === 0 && g[w + 1] !== 0) && u !== 10 && u !== 13 && (u < 32 || u > 127)) {
            f = 0;
            break;
          }
        if (f !== 2)
          continue;
        if (!c) {
          I("findDefaultInlineStreamEnd - `lexer.knownCommands` is undefined.");
          continue;
        }
        const p = new ti(new At(e.peekBytes(5 * h)), c);
        p._hexStringWarn = () => {
        };
        let b = 0;
        for (; ; ) {
          const w = p.getObj();
          if (w === $t) {
            f = 0;
            break;
          }
          if (w instanceof Mt) {
            const y = c[w.cmd];
            if (y) {
              if (y.variableArgs ? b <= y.numArgs : b === y.numArgs)
                break;
            } else {
              f = 0;
              break;
            }
            b = 0;
            continue;
          }
          b++;
        }
        if (f === 2)
          break;
      } else
        f = 0;
    u === -1 && (I("findDefaultInlineStreamEnd: Reached the end of the stream without finding a valid EI marker"), d && (I('... trying to recover by using the last "EI" occurrence.'), e.skip(-(e.pos - d))));
    let x = 4;
    return e.skip(-x), u = e.peekByte(), e.skip(x), Dn(u) || x--, e.pos - x - l;
  }
  findDCTDecodeInlineStreamEnd(e) {
    const n = e.pos;
    let i = !1, s, a;
    for (; (s = e.getByte()) !== -1; )
      if (s === 255) {
        switch (e.getByte()) {
          case 0:
            break;
          case 255:
            e.skip(-1);
            break;
          case 217:
            i = !0;
            break;
          case 192:
          case 193:
          case 194:
          case 195:
          case 197:
          case 198:
          case 199:
          case 201:
          case 202:
          case 203:
          case 205:
          case 206:
          case 207:
          case 196:
          case 204:
          case 218:
          case 219:
          case 220:
          case 221:
          case 222:
          case 223:
          case 224:
          case 225:
          case 226:
          case 227:
          case 228:
          case 229:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 236:
          case 237:
          case 238:
          case 239:
          case 254:
            a = e.getUint16(), a > 2 ? e.skip(a - 2) : e.skip(-2);
            break;
        }
        if (i)
          break;
      }
    const r = e.pos - n;
    return s === -1 ? (I("Inline DCTDecode image stream: EOI marker not found, searching for /EI/ instead."), e.skip(-r), this.findDefaultInlineStreamEnd(e)) : (this.inlineStreamSkipEI(e), r);
  }
  findASCII85DecodeInlineStreamEnd(e) {
    const s = e.pos;
    let a;
    for (; (a = e.getByte()) !== -1; )
      if (a === 126) {
        const o = e.pos;
        for (a = e.peekByte(); Dn(a); )
          e.skip(), a = e.peekByte();
        if (a === 62) {
          e.skip();
          break;
        }
        if (e.pos > o) {
          const c = e.peekBytes(2);
          if (c[0] === 69 && c[1] === 73)
            break;
        }
      }
    const r = e.pos - s;
    return a === -1 ? (I("Inline ASCII85Decode image stream: EOD marker not found, searching for /EI/ instead."), e.skip(-r), this.findDefaultInlineStreamEnd(e)) : (this.inlineStreamSkipEI(e), r);
  }
  findASCIIHexDecodeInlineStreamEnd(e) {
    const i = e.pos;
    let s;
    for (; (s = e.getByte()) !== -1 && s !== 62; )
      ;
    const a = e.pos - i;
    return s === -1 ? (I("Inline ASCIIHexDecode image stream: EOD marker not found, searching for /EI/ instead."), e.skip(-a), this.findDefaultInlineStreamEnd(e)) : (this.inlineStreamSkipEI(e), a);
  }
  inlineStreamSkipEI(e) {
    let s = 0, a;
    for (; (a = e.getByte()) !== -1; )
      if (s === 0)
        s = a === 69 ? 1 : 0;
      else if (s === 1)
        s = a === 73 ? 2 : 0;
      else if (s === 2)
        break;
  }
  makeInlineImage(e) {
    const n = this.lexer, i = n.stream, s = /* @__PURE__ */ Object.create(null);
    let a;
    for (; !Ht(this.buf1, "ID") && this.buf1 !== $t; ) {
      if (!(this.buf1 instanceof O))
        throw new j("Dictionary key must be a name object");
      const d = this.buf1.name;
      if (this.shift(), this.buf1 === $t)
        break;
      s[d] = this.getObj(e);
    }
    n.beginInlineImagePos !== -1 && (a = i.pos - n.beginInlineImagePos);
    const r = this.xref.fetchIfRef(s.F || s.Filter);
    let o;
    if (r instanceof O)
      o = r.name;
    else if (Array.isArray(r)) {
      const d = this.xref.fetchIfRef(r[0]);
      d instanceof O && (o = d.name);
    }
    const c = i.pos;
    let l;
    switch (o) {
      case "DCT":
      case "DCTDecode":
        l = this.findDCTDecodeInlineStreamEnd(i);
        break;
      case "A85":
      case "ASCII85Decode":
        l = this.findASCII85DecodeInlineStreamEnd(i);
        break;
      case "AHx":
      case "ASCIIHexDecode":
        l = this.findASCIIHexDecodeInlineStreamEnd(i);
        break;
      default:
        l = this.findDefaultInlineStreamEnd(i);
    }
    let h;
    if (l < A9 && a > 0) {
      const d = i.pos;
      i.pos = n.beginInlineImagePos, h = v9(i.getBytes(a + l)), i.pos = d;
      const x = this.imageCache[h];
      if (x !== void 0)
        return this.buf2 = Mt.get("EI"), this.shift(), x.reset(), x;
    }
    const f = new E(this.xref);
    for (const d in s)
      f.set(d, s[d]);
    let u = i.makeSubStream(c, l, f);
    return e && (u = e.createStream(u, l)), u = this.filter(u, f, l), u.dict = f, h !== void 0 && (u.cacheKey = `inline_img_${++this._imageId}`, this.imageCache[h] = u), this.buf2 = Mt.get("EI"), this.shift(), u;
  }
  makeStream(e, n) {
    const i = this.lexer;
    let s = i.stream;
    i.skipToNextLine();
    const a = s.pos - 1;
    let r = e.get("Length");
    if (Number.isInteger(r) || (Ge(`Bad length "${r && r.toString()}" in stream.`), r = 0), s.pos = a + r, i.nextChar(), this.tryShift() && Ht(this.buf2, "endstream"))
      this.shift();
    else {
      if (r = J(this, Mo, Uf).call(this, a), r < 0)
        throw new j("Missing endstream command.");
      i.nextChar(), this.shift(), this.shift();
    }
    return this.shift(), s = s.makeSubStream(a, r, e), n && (s = n.createStream(s, r)), s = this.filter(s, e, r), s.dict = e, s;
  }
  filter(e, n, i) {
    let s = n.get("F", "Filter"), a = n.get("DP", "DecodeParms");
    if (s instanceof O)
      return Array.isArray(a) && I("/DecodeParms should not be an Array, when /Filter is a Name."), this.makeFilter(e, s.name, i, a);
    let r = i;
    if (Array.isArray(s)) {
      const o = s, c = a;
      for (let l = 0, h = o.length; l < h; ++l) {
        if (s = this.xref.fetchIfRef(o[l]), !(s instanceof O))
          throw new j(`Bad filter name "${s}"`);
        a = null, Array.isArray(c) && l in c && (a = this.xref.fetchIfRef(c[l])), e = this.makeFilter(e, s.name, r, a), r = null;
      }
    }
    return e;
  }
  makeFilter(e, n, i, s) {
    if (i === 0)
      return I(`Empty "${n}" stream.`), new Vc();
    try {
      switch (n) {
        case "Fl":
        case "FlateDecode":
          return s ? new V1(new H1(e, i), i, s) : new H1(e, i);
        case "LZW":
        case "LZWDecode":
          let a = 1;
          return s ? (s.has("EarlyChange") && (a = s.get("EarlyChange")), new V1(new W1(e, i, a), i, s)) : new W1(e, i, a);
        case "DCT":
        case "DCTDecode":
          return new Ia(e, i, s);
        case "JPX":
        case "JPXDecode":
          return new S9(e, i, s);
        case "A85":
        case "ASCII85Decode":
          return new X2(e, i);
        case "AHx":
        case "ASCIIHexDecode":
          return new K2(e, i);
        case "CCF":
        case "CCITTFaxDecode":
          return new Y2(e, i, s);
        case "RL":
        case "RunLengthDecode":
          return new C9(e, i);
        case "JBIG2Decode":
          return new k9(e, i, s);
      }
      return I(`Filter "${n}" is not supported.`), e;
    } catch (a) {
      if (a instanceof mt)
        throw a;
      return I(`Invalid stream: "${a}"`), new Vc();
    }
  }
}
Mo = new WeakSet(), Uf = function(e) {
  const {
    stream: n
  } = this.lexer;
  n.pos = e;
  const i = 2048, s = 9, a = new Uint8Array([101, 110, 100]), r = a.length, o = [new Uint8Array([115, 116, 114, 101, 97, 109]), new Uint8Array([115, 116, 101, 97, 109]), new Uint8Array([115, 116, 114, 101, 97])], c = s - r;
  for (; n.pos < n.end; ) {
    const l = n.peekBytes(i), h = l.length - s;
    if (h <= 0)
      break;
    let f = 0;
    for (; f < h; ) {
      let u = 0;
      for (; u < r && l[f + u] === a[u]; )
        u++;
      if (u >= r) {
        let d = !1;
        for (const x of o) {
          const g = x.length;
          let m = 0;
          for (; m < g && l[f + u + m] === x[m]; )
            m++;
          if (m >= c) {
            d = !0;
            break;
          }
          if (m >= g) {
            const p = l[f + u + m];
            Dn(p) && (Ge(`Found "${Cn([...a, ...x])}" when searching for endstream command.`), d = !0);
            break;
          }
        }
        if (d)
          return n.pos += f, n.pos - e;
      }
      f++;
    }
    n.pos += h;
  }
  return -1;
};
const Ws = [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
function cc(t) {
  return t >= 48 && t <= 57 ? t & 15 : t >= 65 && t <= 70 || t >= 97 && t <= 102 ? (t & 15) + 9 : -1;
}
class ti {
  constructor(e, n = null) {
    this.stream = e, this.nextChar(), this.strBuf = [], this.knownCommands = n, this._hexStringNumWarn = 0, this.beginInlineImagePos = -1;
  }
  nextChar() {
    return this.currentChar = this.stream.getByte();
  }
  peekChar() {
    return this.stream.peekByte();
  }
  getNumber() {
    let e = this.currentChar, n = !1, i = 0, s = 1;
    if (e === 45 ? (s = -1, e = this.nextChar(), e === 45 && (e = this.nextChar())) : e === 43 && (e = this.nextChar()), e === 10 || e === 13)
      do
        e = this.nextChar();
      while (e === 10 || e === 13);
    if (e === 46 && (i = 10, e = this.nextChar()), e < 48 || e > 57) {
      const c = `Invalid number: ${String.fromCharCode(e)} (charCode ${e})`;
      if (Dn(e) || e === 40 || e === 60 || e === -1)
        return Ge(`Lexer.getNumber - "${c}".`), 0;
      throw new j(c);
    }
    let a = e - 48, r = 0, o = 1;
    for (; (e = this.nextChar()) >= 0; )
      if (e >= 48 && e <= 57) {
        const c = e - 48;
        n ? r = r * 10 + c : (i !== 0 && (i *= 10), a = a * 10 + c);
      } else if (e === 46)
        if (i === 0)
          i = 1;
        else
          break;
      else if (e === 45)
        I("Badly formatted number: minus sign in the middle");
      else if (e === 69 || e === 101) {
        if (e = this.peekChar(), e === 43 || e === 45)
          o = e === 45 ? -1 : 1, this.nextChar();
        else if (e < 48 || e > 57)
          break;
        n = !0;
      } else
        break;
    return i !== 0 && (a /= i), n && (a *= 10 ** (o * r)), s * a;
  }
  getString() {
    let e = 1, n = !1;
    const i = this.strBuf;
    i.length = 0;
    let s = this.nextChar();
    for (; ; ) {
      let a = !1;
      switch (s | 0) {
        case -1:
          I("Unterminated string"), n = !0;
          break;
        case 40:
          ++e, i.push("(");
          break;
        case 41:
          --e === 0 ? (this.nextChar(), n = !0) : i.push(")");
          break;
        case 92:
          switch (s = this.nextChar(), s) {
            case -1:
              I("Unterminated string"), n = !0;
              break;
            case 110:
              i.push(`
`);
              break;
            case 114:
              i.push("\r");
              break;
            case 116:
              i.push("	");
              break;
            case 98:
              i.push("\b");
              break;
            case 102:
              i.push("\f");
              break;
            case 92:
            case 40:
            case 41:
              i.push(String.fromCharCode(s));
              break;
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
              let r = s & 15;
              s = this.nextChar(), a = !0, s >= 48 && s <= 55 && (r = (r << 3) + (s & 15), s = this.nextChar(), s >= 48 && s <= 55 && (a = !1, r = (r << 3) + (s & 15))), i.push(String.fromCharCode(r));
              break;
            case 13:
              this.peekChar() === 10 && this.nextChar();
              break;
            case 10:
              break;
            default:
              i.push(String.fromCharCode(s));
              break;
          }
          break;
        default:
          i.push(String.fromCharCode(s));
          break;
      }
      if (n)
        break;
      a || (s = this.nextChar());
    }
    return i.join("");
  }
  getName() {
    let e, n;
    const i = this.strBuf;
    for (i.length = 0; (e = this.nextChar()) >= 0 && !Ws[e]; )
      if (e === 35) {
        if (e = this.nextChar(), Ws[e]) {
          I("Lexer_getName: NUMBER SIGN (#) should be followed by a hexadecimal number."), i.push("#");
          break;
        }
        const s = cc(e);
        if (s !== -1) {
          n = e, e = this.nextChar();
          const a = cc(e);
          if (a === -1) {
            if (I(`Lexer_getName: Illegal digit (${String.fromCharCode(e)}) in hexadecimal number.`), i.push("#", String.fromCharCode(n)), Ws[e])
              break;
            i.push(String.fromCharCode(e));
            continue;
          }
          i.push(String.fromCharCode(s << 4 | a));
        } else
          i.push("#", String.fromCharCode(e));
      } else
        i.push(String.fromCharCode(e));
    return i.length > 127 && I(`Name token is longer than allowed by the spec: ${i.length}`), O.get(i.join(""));
  }
  _hexStringWarn(e) {
    if (this._hexStringNumWarn++ === 5) {
      I("getHexString - ignoring additional invalid characters.");
      return;
    }
    this._hexStringNumWarn > 5 || I(`getHexString - ignoring invalid character: ${e}`);
  }
  getHexString() {
    const e = this.strBuf;
    e.length = 0;
    let n = this.currentChar, i = -1, s = -1;
    for (this._hexStringNumWarn = 0; ; )
      if (n < 0) {
        I("Unterminated hex string");
        break;
      } else if (n === 62) {
        this.nextChar();
        break;
      } else if (Ws[n] === 1) {
        n = this.nextChar();
        continue;
      } else
        s = cc(n), s === -1 ? this._hexStringWarn(n) : i === -1 ? i = s : (e.push(String.fromCharCode(i << 4 | s)), i = -1), n = this.nextChar();
    return i !== -1 && e.push(String.fromCharCode(i << 4)), e.join("");
  }
  getObj() {
    let e = !1, n = this.currentChar;
    for (; ; ) {
      if (n < 0)
        return $t;
      if (e)
        (n === 10 || n === 13) && (e = !1);
      else if (n === 37)
        e = !0;
      else if (Ws[n] !== 1)
        break;
      n = this.nextChar();
    }
    switch (n | 0) {
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 43:
      case 45:
      case 46:
        return this.getNumber();
      case 40:
        return this.getString();
      case 47:
        return this.getName();
      case 91:
        return this.nextChar(), Mt.get("[");
      case 93:
        return this.nextChar(), Mt.get("]");
      case 60:
        return n = this.nextChar(), n === 60 ? (this.nextChar(), Mt.get("<<")) : this.getHexString();
      case 62:
        return n = this.nextChar(), n === 62 ? (this.nextChar(), Mt.get(">>")) : Mt.get(">");
      case 123:
        return this.nextChar(), Mt.get("{");
      case 125:
        return this.nextChar(), Mt.get("}");
      case 41:
        throw this.nextChar(), new j(`Illegal character: ${n}`);
    }
    let i = String.fromCharCode(n);
    if (n < 32 || n > 127) {
      const r = this.peekChar();
      if (r >= 32 && r <= 127)
        return this.nextChar(), Mt.get(i);
    }
    const s = this.knownCommands;
    let a = (s == null ? void 0 : s[i]) !== void 0;
    for (; (n = this.nextChar()) >= 0 && !Ws[n]; ) {
      const r = i + String.fromCharCode(n);
      if (a && s[r] === void 0)
        break;
      if (i.length === 128)
        throw new j(`Command token too long: ${i.length}`);
      i = r, a = (s == null ? void 0 : s[i]) !== void 0;
    }
    return i === "true" ? !0 : i === "false" ? !1 : i === "null" ? null : (i === "BI" && (this.beginInlineImagePos = this.stream.pos), Mt.get(i));
  }
  skipToNextLine() {
    let e = this.currentChar;
    for (; e >= 0; ) {
      if (e === 13) {
        e = this.nextChar(), e === 10 && this.nextChar();
        break;
      } else if (e === 10) {
        this.nextChar();
        break;
      }
      e = this.nextChar();
    }
  }
}
class I9 {
  static create(e) {
    function n(f, u, d = !1) {
      const x = f.get(u);
      if (Number.isInteger(x) && (d ? x >= 0 : x > 0))
        return x;
      throw new Error(`The "${u}" parameter in the linearization dictionary is invalid.`);
    }
    function i(f) {
      const u = f.get("H");
      let d;
      if (Array.isArray(u) && ((d = u.length) === 2 || d === 4)) {
        for (let x = 0; x < d; x++) {
          const g = u[x];
          if (!(Number.isInteger(g) && g > 0))
            throw new Error(`Hint (${x}) in the linearization dictionary is invalid.`);
        }
        return u;
      }
      throw new Error("Hint array in the linearization dictionary is invalid.");
    }
    const s = new zi({
      lexer: new ti(e),
      xref: null
    }), a = s.getObj(), r = s.getObj(), o = s.getObj(), c = s.getObj();
    let l, h;
    if (Number.isInteger(a) && Number.isInteger(r) && Ht(o, "obj") && c instanceof E && typeof (l = c.get("Linearized")) == "number" && l > 0) {
      if ((h = n(c, "L")) !== e.length)
        throw new Error('The "L" parameter in the linearization dictionary does not equal the stream length.');
    } else return null;
    return {
      length: h,
      hints: i(c),
      objectNumberFirst: n(c, "O"),
      endFirst: n(c, "E"),
      numPages: n(c, "N"),
      mainXRefEntriesOffset: n(c, "T"),
      pageFirst: c.has("P") ? n(c, "P", !0) : 0
    };
  }
}
const T9 = ["Adobe-GB1-UCS2", "Adobe-CNS1-UCS2", "Adobe-Japan1-UCS2", "Adobe-Korea1-UCS2", "78-EUC-H", "78-EUC-V", "78-H", "78-RKSJ-H", "78-RKSJ-V", "78-V", "78ms-RKSJ-H", "78ms-RKSJ-V", "83pv-RKSJ-H", "90ms-RKSJ-H", "90ms-RKSJ-V", "90msp-RKSJ-H", "90msp-RKSJ-V", "90pv-RKSJ-H", "90pv-RKSJ-V", "Add-H", "Add-RKSJ-H", "Add-RKSJ-V", "Add-V", "Adobe-CNS1-0", "Adobe-CNS1-1", "Adobe-CNS1-2", "Adobe-CNS1-3", "Adobe-CNS1-4", "Adobe-CNS1-5", "Adobe-CNS1-6", "Adobe-GB1-0", "Adobe-GB1-1", "Adobe-GB1-2", "Adobe-GB1-3", "Adobe-GB1-4", "Adobe-GB1-5", "Adobe-Japan1-0", "Adobe-Japan1-1", "Adobe-Japan1-2", "Adobe-Japan1-3", "Adobe-Japan1-4", "Adobe-Japan1-5", "Adobe-Japan1-6", "Adobe-Korea1-0", "Adobe-Korea1-1", "Adobe-Korea1-2", "B5-H", "B5-V", "B5pc-H", "B5pc-V", "CNS-EUC-H", "CNS-EUC-V", "CNS1-H", "CNS1-V", "CNS2-H", "CNS2-V", "ETHK-B5-H", "ETHK-B5-V", "ETen-B5-H", "ETen-B5-V", "ETenms-B5-H", "ETenms-B5-V", "EUC-H", "EUC-V", "Ext-H", "Ext-RKSJ-H", "Ext-RKSJ-V", "Ext-V", "GB-EUC-H", "GB-EUC-V", "GB-H", "GB-V", "GBK-EUC-H", "GBK-EUC-V", "GBK2K-H", "GBK2K-V", "GBKp-EUC-H", "GBKp-EUC-V", "GBT-EUC-H", "GBT-EUC-V", "GBT-H", "GBT-V", "GBTpc-EUC-H", "GBTpc-EUC-V", "GBpc-EUC-H", "GBpc-EUC-V", "H", "HKdla-B5-H", "HKdla-B5-V", "HKdlb-B5-H", "HKdlb-B5-V", "HKgccs-B5-H", "HKgccs-B5-V", "HKm314-B5-H", "HKm314-B5-V", "HKm471-B5-H", "HKm471-B5-V", "HKscs-B5-H", "HKscs-B5-V", "Hankaku", "Hiragana", "KSC-EUC-H", "KSC-EUC-V", "KSC-H", "KSC-Johab-H", "KSC-Johab-V", "KSC-V", "KSCms-UHC-H", "KSCms-UHC-HW-H", "KSCms-UHC-HW-V", "KSCms-UHC-V", "KSCpc-EUC-H", "KSCpc-EUC-V", "Katakana", "NWP-H", "NWP-V", "RKSJ-H", "RKSJ-V", "Roman", "UniCNS-UCS2-H", "UniCNS-UCS2-V", "UniCNS-UTF16-H", "UniCNS-UTF16-V", "UniCNS-UTF32-H", "UniCNS-UTF32-V", "UniCNS-UTF8-H", "UniCNS-UTF8-V", "UniGB-UCS2-H", "UniGB-UCS2-V", "UniGB-UTF16-H", "UniGB-UTF16-V", "UniGB-UTF32-H", "UniGB-UTF32-V", "UniGB-UTF8-H", "UniGB-UTF8-V", "UniJIS-UCS2-H", "UniJIS-UCS2-HW-H", "UniJIS-UCS2-HW-V", "UniJIS-UCS2-V", "UniJIS-UTF16-H", "UniJIS-UTF16-V", "UniJIS-UTF32-H", "UniJIS-UTF32-V", "UniJIS-UTF8-H", "UniJIS-UTF8-V", "UniJIS2004-UTF16-H", "UniJIS2004-UTF16-V", "UniJIS2004-UTF32-H", "UniJIS2004-UTF32-V", "UniJIS2004-UTF8-H", "UniJIS2004-UTF8-V", "UniJISPro-UCS2-HW-V", "UniJISPro-UCS2-V", "UniJISPro-UTF8-V", "UniJISX0213-UTF32-H", "UniJISX0213-UTF32-V", "UniJISX02132004-UTF32-H", "UniJISX02132004-UTF32-V", "UniKS-UCS2-H", "UniKS-UCS2-V", "UniKS-UTF16-H", "UniKS-UTF16-V", "UniKS-UTF32-H", "UniKS-UTF32-V", "UniKS-UTF8-H", "UniKS-UTF8-V", "V", "WP-Symbol"], lc = 2 ** 24 - 1;
class $l {
  constructor(e = !1) {
    this.codespaceRanges = [[], [], [], []], this.numCodespaceRanges = 0, this._map = [], this.name = "", this.vertical = !1, this.useCMap = null, this.builtInCMap = e;
  }
  addCodespaceRange(e, n, i) {
    this.codespaceRanges[e - 1].push(n, i), this.numCodespaceRanges++;
  }
  mapCidRange(e, n, i) {
    if (n - e > lc)
      throw new Error("mapCidRange - ignoring data above MAX_MAP_RANGE.");
    for (; e <= n; )
      this._map[e++] = i++;
  }
  mapBfRange(e, n, i) {
    if (n - e > lc)
      throw new Error("mapBfRange - ignoring data above MAX_MAP_RANGE.");
    const s = i.length - 1;
    for (; e <= n; ) {
      this._map[e++] = i;
      const a = i.charCodeAt(s) + 1;
      if (a > 255) {
        i = i.substring(0, s - 1) + String.fromCharCode(i.charCodeAt(s - 1) + 1) + "\0";
        continue;
      }
      i = i.substring(0, s) + String.fromCharCode(a);
    }
  }
  mapBfRangeToArray(e, n, i) {
    if (n - e > lc)
      throw new Error("mapBfRangeToArray - ignoring data above MAX_MAP_RANGE.");
    const s = i.length;
    let a = 0;
    for (; e <= n && a < s; )
      this._map[e] = i[a++], ++e;
  }
  mapOne(e, n) {
    this._map[e] = n;
  }
  lookup(e) {
    return this._map[e];
  }
  contains(e) {
    return this._map[e] !== void 0;
  }
  forEach(e) {
    const n = this._map, i = n.length;
    if (i <= 65536)
      for (let s = 0; s < i; s++)
        n[s] !== void 0 && e(s, n[s]);
    else
      for (const s in n)
        e(s, n[s]);
  }
  charCodeOf(e) {
    const n = this._map;
    if (n.length <= 65536)
      return n.indexOf(e);
    for (const i in n)
      if (n[i] === e)
        return i | 0;
    return -1;
  }
  getMap() {
    return this._map;
  }
  readCharCode(e, n, i) {
    let s = 0;
    const a = this.codespaceRanges;
    for (let r = 0, o = a.length; r < o; r++) {
      s = (s << 8 | e.charCodeAt(n + r)) >>> 0;
      const c = a[r];
      for (let l = 0, h = c.length; l < h; ) {
        const f = c[l++], u = c[l++];
        if (s >= f && s <= u) {
          i.charcode = s, i.length = r + 1;
          return;
        }
      }
    }
    i.charcode = 0, i.length = 1;
  }
  getCharCodeLength(e) {
    const n = this.codespaceRanges;
    for (let i = 0, s = n.length; i < s; i++) {
      const a = n[i];
      for (let r = 0, o = a.length; r < o; ) {
        const c = a[r++], l = a[r++];
        if (e >= c && e <= l)
          return i + 1;
      }
    }
    return 1;
  }
  get length() {
    return this._map.length;
  }
  get isIdentityCMap() {
    if (!(this.name === "Identity-H" || this.name === "Identity-V") || this._map.length !== 65536)
      return !1;
    for (let e = 0; e < 65536; e++)
      if (this._map[e] !== e)
        return !1;
    return !0;
  }
}
class ua extends $l {
  constructor(e, n) {
    super(), this.vertical = e, this.addCodespaceRange(n, 0, 65535);
  }
  mapCidRange(e, n, i) {
    Ke("should not call mapCidRange");
  }
  mapBfRange(e, n, i) {
    Ke("should not call mapBfRange");
  }
  mapBfRangeToArray(e, n, i) {
    Ke("should not call mapBfRangeToArray");
  }
  mapOne(e, n) {
    Ke("should not call mapCidOne");
  }
  lookup(e) {
    return Number.isInteger(e) && e <= 65535 ? e : void 0;
  }
  contains(e) {
    return Number.isInteger(e) && e <= 65535;
  }
  forEach(e) {
    for (let n = 0; n <= 65535; n++)
      e(n, n);
  }
  charCodeOf(e) {
    return Number.isInteger(e) && e <= 65535 ? e : -1;
  }
  getMap() {
    const e = new Array(65536);
    for (let n = 0; n <= 65535; n++)
      e[n] = n;
    return e;
  }
  get length() {
    return 65536;
  }
  get isIdentityCMap() {
    Ke("should not access .isIdentityCMap");
  }
}
function rs(t) {
  let e = 0;
  for (let n = 0; n < t.length; n++)
    e = e << 8 | t.charCodeAt(n);
  return e >>> 0;
}
function Ls(t) {
  if (typeof t != "string")
    throw new j("Malformed CMap: expected string.");
}
function jf(t) {
  if (!Number.isInteger(t))
    throw new j("Malformed CMap: expected int.");
}
function F9(t, e) {
  for (; ; ) {
    let n = e.getObj();
    if (n === $t)
      break;
    if (Ht(n, "endbfchar"))
      return;
    Ls(n);
    const i = rs(n);
    n = e.getObj(), Ls(n);
    const s = n;
    t.mapOne(i, s);
  }
}
function B9(t, e) {
  for (; ; ) {
    let n = e.getObj();
    if (n === $t)
      break;
    if (Ht(n, "endbfrange"))
      return;
    Ls(n);
    const i = rs(n);
    n = e.getObj(), Ls(n);
    const s = rs(n);
    if (n = e.getObj(), Number.isInteger(n) || typeof n == "string") {
      const a = Number.isInteger(n) ? String.fromCharCode(n) : n;
      t.mapBfRange(i, s, a);
    } else if (Ht(n, "[")) {
      n = e.getObj();
      const a = [];
      for (; !Ht(n, "]") && n !== $t; )
        a.push(n), n = e.getObj();
      t.mapBfRangeToArray(i, s, a);
    } else
      break;
  }
  throw new j("Invalid bf range.");
}
function E9(t, e) {
  for (; ; ) {
    let n = e.getObj();
    if (n === $t)
      break;
    if (Ht(n, "endcidchar"))
      return;
    Ls(n);
    const i = rs(n);
    n = e.getObj(), jf(n);
    const s = n;
    t.mapOne(i, s);
  }
}
function R9(t, e) {
  for (; ; ) {
    let n = e.getObj();
    if (n === $t)
      break;
    if (Ht(n, "endcidrange"))
      return;
    Ls(n);
    const i = rs(n);
    n = e.getObj(), Ls(n);
    const s = rs(n);
    n = e.getObj(), jf(n);
    const a = n;
    t.mapCidRange(i, s, a);
  }
}
function M9(t, e) {
  for (; ; ) {
    let n = e.getObj();
    if (n === $t)
      break;
    if (Ht(n, "endcodespacerange"))
      return;
    if (typeof n != "string")
      break;
    const i = rs(n);
    if (n = e.getObj(), typeof n != "string")
      break;
    const s = rs(n);
    t.addCodespaceRange(n.length, i, s);
  }
  throw new j("Invalid codespace range.");
}
function D9(t, e) {
  const n = e.getObj();
  Number.isInteger(n) && (t.vertical = !!n);
}
function P9(t, e) {
  const n = e.getObj();
  n instanceof O && (t.name = n.name);
}
async function qf(t, e, n, i) {
  let s, a;
  e: for (; ; )
    try {
      const r = e.getObj();
      if (r === $t)
        break;
      if (r instanceof O)
        r.name === "WMode" ? D9(t, e) : r.name === "CMapName" && P9(t, e), s = r;
      else if (r instanceof Mt)
        switch (r.cmd) {
          case "endcmap":
            break e;
          case "usecmap":
            s instanceof O && (a = s.name);
            break;
          case "begincodespacerange":
            M9(t, e);
            break;
          case "beginbfchar":
            F9(t, e);
            break;
          case "begincidchar":
            E9(t, e);
            break;
          case "beginbfrange":
            B9(t, e);
            break;
          case "begincidrange":
            R9(t, e);
            break;
        }
    } catch (r) {
      if (r instanceof mt)
        throw r;
      I("Invalid cMap data: " + r);
      continue;
    }
  return !i && a && (i = a), i ? Hf(t, n, i) : t;
}
async function Hf(t, e, n) {
  if (t.useCMap = await nl(n, e), t.numCodespaceRanges === 0) {
    const i = t.useCMap.codespaceRanges;
    for (let s = 0; s < i.length; s++)
      t.codespaceRanges[s] = i[s].slice();
    t.numCodespaceRanges = t.useCMap.numCodespaceRanges;
  }
  return t.useCMap.forEach(function(i, s) {
    t.contains(i) || t.mapOne(i, s);
  }), t;
}
async function nl(t, e) {
  if (t === "Identity-H")
    return new ua(!1, 2);
  if (t === "Identity-V")
    return new ua(!0, 2);
  if (!T9.includes(t))
    throw new Error("Unknown CMap name: " + t);
  if (!e)
    throw new Error("Built-in CMap parameters are not provided.");
  const {
    cMapData: n,
    isCompressed: i
  } = await e(t), s = new $l(!0);
  if (i)
    return new V2().process(n, s, (r) => Hf(s, e, r));
  const a = new ti(new At(n));
  return qf(s, a, e, null);
}
class Ir {
  static async create({
    encoding: e,
    fetchBuiltInCMap: n,
    useCMap: i
  }) {
    if (e instanceof O)
      return nl(e.name, n);
    if (e instanceof je) {
      const s = await qf(new $l(), new ti(e), n, i);
      return s.isIdentityCMap ? nl(s.name, n) : s;
    }
    throw new Error("Encoding required.");
  }
}
const Gf = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclamsmall", "Hungarumlautsmall", "", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "", "", "", "isuperior", "", "", "lsuperior", "msuperior", "nsuperior", "osuperior", "", "", "rsuperior", "ssuperior", "tsuperior", "", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "exclamdownsmall", "centoldstyle", "Lslashsmall", "", "", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "", "Dotaccentsmall", "", "", "Macronsmall", "", "", "figuredash", "hypheninferior", "", "", "Ogoneksmall", "Ringsmall", "Cedillasmall", "", "", "", "onequarter", "onehalf", "threequarters", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "", "", "zerosuperior", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall"], N9 = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclamsmall", "Hungarumlautsmall", "centoldstyle", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "", "threequartersemdash", "", "questionsmall", "", "", "", "", "Ethsmall", "", "", "onequarter", "onehalf", "threequarters", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "", "", "", "", "", "", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "", "parenrightinferior", "Circumflexsmall", "hypheninferior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "", "", "asuperior", "centsuperior", "", "", "", "", "Aacutesmall", "Agravesmall", "Acircumflexsmall", "Adieresissmall", "Atildesmall", "Aringsmall", "Ccedillasmall", "Eacutesmall", "Egravesmall", "Ecircumflexsmall", "Edieresissmall", "Iacutesmall", "Igravesmall", "Icircumflexsmall", "Idieresissmall", "Ntildesmall", "Oacutesmall", "Ogravesmall", "Ocircumflexsmall", "Odieresissmall", "Otildesmall", "Uacutesmall", "Ugravesmall", "Ucircumflexsmall", "Udieresissmall", "", "eightsuperior", "fourinferior", "threeinferior", "sixinferior", "eightinferior", "seveninferior", "Scaronsmall", "", "centinferior", "twoinferior", "", "Dieresissmall", "", "Caronsmall", "osuperior", "fiveinferior", "", "commainferior", "periodinferior", "Yacutesmall", "", "dollarinferior", "", "", "Thornsmall", "", "nineinferior", "zeroinferior", "Zcaronsmall", "AEsmall", "Oslashsmall", "questiondownsmall", "oneinferior", "Lslashsmall", "", "", "", "", "", "", "Cedillasmall", "", "", "", "", "", "OEsmall", "figuredash", "hyphensuperior", "", "", "", "", "exclamdownsmall", "", "Ydieresissmall", "", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "ninesuperior", "zerosuperior", "", "esuperior", "rsuperior", "tsuperior", "", "", "isuperior", "ssuperior", "dsuperior", "", "", "", "", "", "lsuperior", "Ogoneksmall", "Brevesmall", "Macronsmall", "bsuperior", "nsuperior", "msuperior", "commasuperior", "periodsuperior", "Dotaccentsmall", "Ringsmall", "", "", "", ""], zl = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quotesingle", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "grave", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "", "Adieresis", "Aring", "Ccedilla", "Eacute", "Ntilde", "Odieresis", "Udieresis", "aacute", "agrave", "acircumflex", "adieresis", "atilde", "aring", "ccedilla", "eacute", "egrave", "ecircumflex", "edieresis", "iacute", "igrave", "icircumflex", "idieresis", "ntilde", "oacute", "ograve", "ocircumflex", "odieresis", "otilde", "uacute", "ugrave", "ucircumflex", "udieresis", "dagger", "degree", "cent", "sterling", "section", "bullet", "paragraph", "germandbls", "registered", "copyright", "trademark", "acute", "dieresis", "notequal", "AE", "Oslash", "infinity", "plusminus", "lessequal", "greaterequal", "yen", "mu", "partialdiff", "summation", "product", "pi", "integral", "ordfeminine", "ordmasculine", "Omega", "ae", "oslash", "questiondown", "exclamdown", "logicalnot", "radical", "florin", "approxequal", "Delta", "guillemotleft", "guillemotright", "ellipsis", "space", "Agrave", "Atilde", "Otilde", "OE", "oe", "endash", "emdash", "quotedblleft", "quotedblright", "quoteleft", "quoteright", "divide", "lozenge", "ydieresis", "Ydieresis", "fraction", "currency", "guilsinglleft", "guilsinglright", "fi", "fl", "daggerdbl", "periodcentered", "quotesinglbase", "quotedblbase", "perthousand", "Acircumflex", "Ecircumflex", "Aacute", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Oacute", "Ocircumflex", "apple", "Ograve", "Uacute", "Ucircumflex", "Ugrave", "dotlessi", "circumflex", "tilde", "macron", "breve", "dotaccent", "ring", "cedilla", "hungarumlaut", "ogonek", "caron"], Oi = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "", "endash", "dagger", "daggerdbl", "periodcentered", "", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "", "questiondown", "", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "", "ring", "cedilla", "", "hungarumlaut", "ogonek", "caron", "emdash", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "AE", "", "ordfeminine", "", "", "", "", "Lslash", "Oslash", "OE", "ordmasculine", "", "", "", "", "", "ae", "", "", "", "dotlessi", "", "", "lslash", "oslash", "oe", "germandbls", "", "", "", ""], v0 = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quotesingle", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "grave", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "bullet", "Euro", "bullet", "quotesinglbase", "florin", "quotedblbase", "ellipsis", "dagger", "daggerdbl", "circumflex", "perthousand", "Scaron", "guilsinglleft", "OE", "bullet", "Zcaron", "bullet", "bullet", "quoteleft", "quoteright", "quotedblleft", "quotedblright", "bullet", "endash", "emdash", "tilde", "trademark", "scaron", "guilsinglright", "oe", "bullet", "zcaron", "Ydieresis", "space", "exclamdown", "cent", "sterling", "currency", "yen", "brokenbar", "section", "dieresis", "copyright", "ordfeminine", "guillemotleft", "logicalnot", "hyphen", "registered", "macron", "degree", "plusminus", "twosuperior", "threesuperior", "acute", "mu", "paragraph", "periodcentered", "cedilla", "onesuperior", "ordmasculine", "guillemotright", "onequarter", "onehalf", "threequarters", "questiondown", "Agrave", "Aacute", "Acircumflex", "Atilde", "Adieresis", "Aring", "AE", "Ccedilla", "Egrave", "Eacute", "Ecircumflex", "Edieresis", "Igrave", "Iacute", "Icircumflex", "Idieresis", "Eth", "Ntilde", "Ograve", "Oacute", "Ocircumflex", "Otilde", "Odieresis", "multiply", "Oslash", "Ugrave", "Uacute", "Ucircumflex", "Udieresis", "Yacute", "Thorn", "germandbls", "agrave", "aacute", "acircumflex", "atilde", "adieresis", "aring", "ae", "ccedilla", "egrave", "eacute", "ecircumflex", "edieresis", "igrave", "iacute", "icircumflex", "idieresis", "eth", "ntilde", "ograve", "oacute", "ocircumflex", "otilde", "odieresis", "divide", "oslash", "ugrave", "uacute", "ucircumflex", "udieresis", "yacute", "thorn", "ydieresis"], Wl = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "universal", "numbersign", "existential", "percent", "ampersand", "suchthat", "parenleft", "parenright", "asteriskmath", "plus", "comma", "minus", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "congruent", "Alpha", "Beta", "Chi", "Delta", "Epsilon", "Phi", "Gamma", "Eta", "Iota", "theta1", "Kappa", "Lambda", "Mu", "Nu", "Omicron", "Pi", "Theta", "Rho", "Sigma", "Tau", "Upsilon", "sigma1", "Omega", "Xi", "Psi", "Zeta", "bracketleft", "therefore", "bracketright", "perpendicular", "underscore", "radicalex", "alpha", "beta", "chi", "delta", "epsilon", "phi", "gamma", "eta", "iota", "phi1", "kappa", "lambda", "mu", "nu", "omicron", "pi", "theta", "rho", "sigma", "tau", "upsilon", "omega1", "omega", "xi", "psi", "zeta", "braceleft", "bar", "braceright", "similar", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Euro", "Upsilon1", "minute", "lessequal", "fraction", "infinity", "florin", "club", "diamond", "heart", "spade", "arrowboth", "arrowleft", "arrowup", "arrowright", "arrowdown", "degree", "plusminus", "second", "greaterequal", "multiply", "proportional", "partialdiff", "bullet", "divide", "notequal", "equivalence", "approxequal", "ellipsis", "arrowvertex", "arrowhorizex", "carriagereturn", "aleph", "Ifraktur", "Rfraktur", "weierstrass", "circlemultiply", "circleplus", "emptyset", "intersection", "union", "propersuperset", "reflexsuperset", "notsubset", "propersubset", "reflexsubset", "element", "notelement", "angle", "gradient", "registerserif", "copyrightserif", "trademarkserif", "product", "radical", "dotmath", "logicalnot", "logicaland", "logicalor", "arrowdblboth", "arrowdblleft", "arrowdblup", "arrowdblright", "arrowdbldown", "lozenge", "angleleft", "registersans", "copyrightsans", "trademarksans", "summation", "parenlefttp", "parenleftex", "parenleftbt", "bracketlefttp", "bracketleftex", "bracketleftbt", "bracelefttp", "braceleftmid", "braceleftbt", "braceex", "", "angleright", "integral", "integraltp", "integralex", "integralbt", "parenrighttp", "parenrightex", "parenrightbt", "bracketrighttp", "bracketrightex", "bracketrightbt", "bracerighttp", "bracerightmid", "bracerightbt", ""], Vl = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "a1", "a2", "a202", "a3", "a4", "a5", "a119", "a118", "a117", "a11", "a12", "a13", "a14", "a15", "a16", "a105", "a17", "a18", "a19", "a20", "a21", "a22", "a23", "a24", "a25", "a26", "a27", "a28", "a6", "a7", "a8", "a9", "a10", "a29", "a30", "a31", "a32", "a33", "a34", "a35", "a36", "a37", "a38", "a39", "a40", "a41", "a42", "a43", "a44", "a45", "a46", "a47", "a48", "a49", "a50", "a51", "a52", "a53", "a54", "a55", "a56", "a57", "a58", "a59", "a60", "a61", "a62", "a63", "a64", "a65", "a66", "a67", "a68", "a69", "a70", "a71", "a72", "a73", "a74", "a203", "a75", "a204", "a76", "a77", "a78", "a79", "a81", "a82", "a83", "a84", "a97", "a98", "a99", "a100", "", "a89", "a90", "a93", "a94", "a91", "a92", "a205", "a85", "a206", "a86", "a87", "a88", "a95", "a96", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "a101", "a102", "a103", "a104", "a106", "a107", "a108", "a112", "a111", "a110", "a109", "a120", "a121", "a122", "a123", "a124", "a125", "a126", "a127", "a128", "a129", "a130", "a131", "a132", "a133", "a134", "a135", "a136", "a137", "a138", "a139", "a140", "a141", "a142", "a143", "a144", "a145", "a146", "a147", "a148", "a149", "a150", "a151", "a152", "a153", "a154", "a155", "a156", "a157", "a158", "a159", "a160", "a161", "a163", "a164", "a196", "a165", "a192", "a166", "a167", "a168", "a169", "a170", "a171", "a172", "a173", "a162", "a174", "a175", "a176", "a177", "a178", "a179", "a193", "a180", "a199", "a181", "a200", "a182", "", "a201", "a183", "a184", "a197", "a185", "a194", "a198", "a186", "a195", "a187", "a188", "a189", "a190", "a191", ""];
function I0(t) {
  switch (t) {
    case "WinAnsiEncoding":
      return v0;
    case "StandardEncoding":
      return Oi;
    case "MacRomanEncoding":
      return zl;
    case "SymbolSetEncoding":
      return Wl;
    case "ZapfDingbatsEncoding":
      return Vl;
    case "ExpertEncoding":
      return Gf;
    case "MacExpertEncoding":
      return N9;
    default:
      return null;
  }
}
const bi = wt(function(t) {
  t.A = 65, t.AE = 198, t.AEacute = 508, t.AEmacron = 482, t.AEsmall = 63462, t.Aacute = 193, t.Aacutesmall = 63457, t.Abreve = 258, t.Abreveacute = 7854, t.Abrevecyrillic = 1232, t.Abrevedotbelow = 7862, t.Abrevegrave = 7856, t.Abrevehookabove = 7858, t.Abrevetilde = 7860, t.Acaron = 461, t.Acircle = 9398, t.Acircumflex = 194, t.Acircumflexacute = 7844, t.Acircumflexdotbelow = 7852, t.Acircumflexgrave = 7846, t.Acircumflexhookabove = 7848, t.Acircumflexsmall = 63458, t.Acircumflextilde = 7850, t.Acute = 63177, t.Acutesmall = 63412, t.Acyrillic = 1040, t.Adblgrave = 512, t.Adieresis = 196, t.Adieresiscyrillic = 1234, t.Adieresismacron = 478, t.Adieresissmall = 63460, t.Adotbelow = 7840, t.Adotmacron = 480, t.Agrave = 192, t.Agravesmall = 63456, t.Ahookabove = 7842, t.Aiecyrillic = 1236, t.Ainvertedbreve = 514, t.Alpha = 913, t.Alphatonos = 902, t.Amacron = 256, t.Amonospace = 65313, t.Aogonek = 260, t.Aring = 197, t.Aringacute = 506, t.Aringbelow = 7680, t.Aringsmall = 63461, t.Asmall = 63329, t.Atilde = 195, t.Atildesmall = 63459, t.Aybarmenian = 1329, t.B = 66, t.Bcircle = 9399, t.Bdotaccent = 7682, t.Bdotbelow = 7684, t.Becyrillic = 1041, t.Benarmenian = 1330, t.Beta = 914, t.Bhook = 385, t.Blinebelow = 7686, t.Bmonospace = 65314, t.Brevesmall = 63220, t.Bsmall = 63330, t.Btopbar = 386, t.C = 67, t.Caarmenian = 1342, t.Cacute = 262, t.Caron = 63178, t.Caronsmall = 63221, t.Ccaron = 268, t.Ccedilla = 199, t.Ccedillaacute = 7688, t.Ccedillasmall = 63463, t.Ccircle = 9400, t.Ccircumflex = 264, t.Cdot = 266, t.Cdotaccent = 266, t.Cedillasmall = 63416, t.Chaarmenian = 1353, t.Cheabkhasiancyrillic = 1212, t.Checyrillic = 1063, t.Chedescenderabkhasiancyrillic = 1214, t.Chedescendercyrillic = 1206, t.Chedieresiscyrillic = 1268, t.Cheharmenian = 1347, t.Chekhakassiancyrillic = 1227, t.Cheverticalstrokecyrillic = 1208, t.Chi = 935, t.Chook = 391, t.Circumflexsmall = 63222, t.Cmonospace = 65315, t.Coarmenian = 1361, t.Csmall = 63331, t.D = 68, t.DZ = 497, t.DZcaron = 452, t.Daarmenian = 1332, t.Dafrican = 393, t.Dcaron = 270, t.Dcedilla = 7696, t.Dcircle = 9401, t.Dcircumflexbelow = 7698, t.Dcroat = 272, t.Ddotaccent = 7690, t.Ddotbelow = 7692, t.Decyrillic = 1044, t.Deicoptic = 1006, t.Delta = 8710, t.Deltagreek = 916, t.Dhook = 394, t.Dieresis = 63179, t.DieresisAcute = 63180, t.DieresisGrave = 63181, t.Dieresissmall = 63400, t.Digammagreek = 988, t.Djecyrillic = 1026, t.Dlinebelow = 7694, t.Dmonospace = 65316, t.Dotaccentsmall = 63223, t.Dslash = 272, t.Dsmall = 63332, t.Dtopbar = 395, t.Dz = 498, t.Dzcaron = 453, t.Dzeabkhasiancyrillic = 1248, t.Dzecyrillic = 1029, t.Dzhecyrillic = 1039, t.E = 69, t.Eacute = 201, t.Eacutesmall = 63465, t.Ebreve = 276, t.Ecaron = 282, t.Ecedillabreve = 7708, t.Echarmenian = 1333, t.Ecircle = 9402, t.Ecircumflex = 202, t.Ecircumflexacute = 7870, t.Ecircumflexbelow = 7704, t.Ecircumflexdotbelow = 7878, t.Ecircumflexgrave = 7872, t.Ecircumflexhookabove = 7874, t.Ecircumflexsmall = 63466, t.Ecircumflextilde = 7876, t.Ecyrillic = 1028, t.Edblgrave = 516, t.Edieresis = 203, t.Edieresissmall = 63467, t.Edot = 278, t.Edotaccent = 278, t.Edotbelow = 7864, t.Efcyrillic = 1060, t.Egrave = 200, t.Egravesmall = 63464, t.Eharmenian = 1335, t.Ehookabove = 7866, t.Eightroman = 8551, t.Einvertedbreve = 518, t.Eiotifiedcyrillic = 1124, t.Elcyrillic = 1051, t.Elevenroman = 8554, t.Emacron = 274, t.Emacronacute = 7702, t.Emacrongrave = 7700, t.Emcyrillic = 1052, t.Emonospace = 65317, t.Encyrillic = 1053, t.Endescendercyrillic = 1186, t.Eng = 330, t.Enghecyrillic = 1188, t.Enhookcyrillic = 1223, t.Eogonek = 280, t.Eopen = 400, t.Epsilon = 917, t.Epsilontonos = 904, t.Ercyrillic = 1056, t.Ereversed = 398, t.Ereversedcyrillic = 1069, t.Escyrillic = 1057, t.Esdescendercyrillic = 1194, t.Esh = 425, t.Esmall = 63333, t.Eta = 919, t.Etarmenian = 1336, t.Etatonos = 905, t.Eth = 208, t.Ethsmall = 63472, t.Etilde = 7868, t.Etildebelow = 7706, t.Euro = 8364, t.Ezh = 439, t.Ezhcaron = 494, t.Ezhreversed = 440, t.F = 70, t.Fcircle = 9403, t.Fdotaccent = 7710, t.Feharmenian = 1366, t.Feicoptic = 996, t.Fhook = 401, t.Fitacyrillic = 1138, t.Fiveroman = 8548, t.Fmonospace = 65318, t.Fourroman = 8547, t.Fsmall = 63334, t.G = 71, t.GBsquare = 13191, t.Gacute = 500, t.Gamma = 915, t.Gammaafrican = 404, t.Gangiacoptic = 1002, t.Gbreve = 286, t.Gcaron = 486, t.Gcedilla = 290, t.Gcircle = 9404, t.Gcircumflex = 284, t.Gcommaaccent = 290, t.Gdot = 288, t.Gdotaccent = 288, t.Gecyrillic = 1043, t.Ghadarmenian = 1346, t.Ghemiddlehookcyrillic = 1172, t.Ghestrokecyrillic = 1170, t.Gheupturncyrillic = 1168, t.Ghook = 403, t.Gimarmenian = 1331, t.Gjecyrillic = 1027, t.Gmacron = 7712, t.Gmonospace = 65319, t.Grave = 63182, t.Gravesmall = 63328, t.Gsmall = 63335, t.Gsmallhook = 667, t.Gstroke = 484, t.H = 72, t.H18533 = 9679, t.H18543 = 9642, t.H18551 = 9643, t.H22073 = 9633, t.HPsquare = 13259, t.Haabkhasiancyrillic = 1192, t.Hadescendercyrillic = 1202, t.Hardsigncyrillic = 1066, t.Hbar = 294, t.Hbrevebelow = 7722, t.Hcedilla = 7720, t.Hcircle = 9405, t.Hcircumflex = 292, t.Hdieresis = 7718, t.Hdotaccent = 7714, t.Hdotbelow = 7716, t.Hmonospace = 65320, t.Hoarmenian = 1344, t.Horicoptic = 1e3, t.Hsmall = 63336, t.Hungarumlaut = 63183, t.Hungarumlautsmall = 63224, t.Hzsquare = 13200, t.I = 73, t.IAcyrillic = 1071, t.IJ = 306, t.IUcyrillic = 1070, t.Iacute = 205, t.Iacutesmall = 63469, t.Ibreve = 300, t.Icaron = 463, t.Icircle = 9406, t.Icircumflex = 206, t.Icircumflexsmall = 63470, t.Icyrillic = 1030, t.Idblgrave = 520, t.Idieresis = 207, t.Idieresisacute = 7726, t.Idieresiscyrillic = 1252, t.Idieresissmall = 63471, t.Idot = 304, t.Idotaccent = 304, t.Idotbelow = 7882, t.Iebrevecyrillic = 1238, t.Iecyrillic = 1045, t.Ifraktur = 8465, t.Igrave = 204, t.Igravesmall = 63468, t.Ihookabove = 7880, t.Iicyrillic = 1048, t.Iinvertedbreve = 522, t.Iishortcyrillic = 1049, t.Imacron = 298, t.Imacroncyrillic = 1250, t.Imonospace = 65321, t.Iniarmenian = 1339, t.Iocyrillic = 1025, t.Iogonek = 302, t.Iota = 921, t.Iotaafrican = 406, t.Iotadieresis = 938, t.Iotatonos = 906, t.Ismall = 63337, t.Istroke = 407, t.Itilde = 296, t.Itildebelow = 7724, t.Izhitsacyrillic = 1140, t.Izhitsadblgravecyrillic = 1142, t.J = 74, t.Jaarmenian = 1345, t.Jcircle = 9407, t.Jcircumflex = 308, t.Jecyrillic = 1032, t.Jheharmenian = 1355, t.Jmonospace = 65322, t.Jsmall = 63338, t.K = 75, t.KBsquare = 13189, t.KKsquare = 13261, t.Kabashkircyrillic = 1184, t.Kacute = 7728, t.Kacyrillic = 1050, t.Kadescendercyrillic = 1178, t.Kahookcyrillic = 1219, t.Kappa = 922, t.Kastrokecyrillic = 1182, t.Kaverticalstrokecyrillic = 1180, t.Kcaron = 488, t.Kcedilla = 310, t.Kcircle = 9408, t.Kcommaaccent = 310, t.Kdotbelow = 7730, t.Keharmenian = 1364, t.Kenarmenian = 1343, t.Khacyrillic = 1061, t.Kheicoptic = 998, t.Khook = 408, t.Kjecyrillic = 1036, t.Klinebelow = 7732, t.Kmonospace = 65323, t.Koppacyrillic = 1152, t.Koppagreek = 990, t.Ksicyrillic = 1134, t.Ksmall = 63339, t.L = 76, t.LJ = 455, t.LL = 63167, t.Lacute = 313, t.Lambda = 923, t.Lcaron = 317, t.Lcedilla = 315, t.Lcircle = 9409, t.Lcircumflexbelow = 7740, t.Lcommaaccent = 315, t.Ldot = 319, t.Ldotaccent = 319, t.Ldotbelow = 7734, t.Ldotbelowmacron = 7736, t.Liwnarmenian = 1340, t.Lj = 456, t.Ljecyrillic = 1033, t.Llinebelow = 7738, t.Lmonospace = 65324, t.Lslash = 321, t.Lslashsmall = 63225, t.Lsmall = 63340, t.M = 77, t.MBsquare = 13190, t.Macron = 63184, t.Macronsmall = 63407, t.Macute = 7742, t.Mcircle = 9410, t.Mdotaccent = 7744, t.Mdotbelow = 7746, t.Menarmenian = 1348, t.Mmonospace = 65325, t.Msmall = 63341, t.Mturned = 412, t.Mu = 924, t.N = 78, t.NJ = 458, t.Nacute = 323, t.Ncaron = 327, t.Ncedilla = 325, t.Ncircle = 9411, t.Ncircumflexbelow = 7754, t.Ncommaaccent = 325, t.Ndotaccent = 7748, t.Ndotbelow = 7750, t.Nhookleft = 413, t.Nineroman = 8552, t.Nj = 459, t.Njecyrillic = 1034, t.Nlinebelow = 7752, t.Nmonospace = 65326, t.Nowarmenian = 1350, t.Nsmall = 63342, t.Ntilde = 209, t.Ntildesmall = 63473, t.Nu = 925, t.O = 79, t.OE = 338, t.OEsmall = 63226, t.Oacute = 211, t.Oacutesmall = 63475, t.Obarredcyrillic = 1256, t.Obarreddieresiscyrillic = 1258, t.Obreve = 334, t.Ocaron = 465, t.Ocenteredtilde = 415, t.Ocircle = 9412, t.Ocircumflex = 212, t.Ocircumflexacute = 7888, t.Ocircumflexdotbelow = 7896, t.Ocircumflexgrave = 7890, t.Ocircumflexhookabove = 7892, t.Ocircumflexsmall = 63476, t.Ocircumflextilde = 7894, t.Ocyrillic = 1054, t.Odblacute = 336, t.Odblgrave = 524, t.Odieresis = 214, t.Odieresiscyrillic = 1254, t.Odieresissmall = 63478, t.Odotbelow = 7884, t.Ogoneksmall = 63227, t.Ograve = 210, t.Ogravesmall = 63474, t.Oharmenian = 1365, t.Ohm = 8486, t.Ohookabove = 7886, t.Ohorn = 416, t.Ohornacute = 7898, t.Ohorndotbelow = 7906, t.Ohorngrave = 7900, t.Ohornhookabove = 7902, t.Ohorntilde = 7904, t.Ohungarumlaut = 336, t.Oi = 418, t.Oinvertedbreve = 526, t.Omacron = 332, t.Omacronacute = 7762, t.Omacrongrave = 7760, t.Omega = 8486, t.Omegacyrillic = 1120, t.Omegagreek = 937, t.Omegaroundcyrillic = 1146, t.Omegatitlocyrillic = 1148, t.Omegatonos = 911, t.Omicron = 927, t.Omicrontonos = 908, t.Omonospace = 65327, t.Oneroman = 8544, t.Oogonek = 490, t.Oogonekmacron = 492, t.Oopen = 390, t.Oslash = 216, t.Oslashacute = 510, t.Oslashsmall = 63480, t.Osmall = 63343, t.Ostrokeacute = 510, t.Otcyrillic = 1150, t.Otilde = 213, t.Otildeacute = 7756, t.Otildedieresis = 7758, t.Otildesmall = 63477, t.P = 80, t.Pacute = 7764, t.Pcircle = 9413, t.Pdotaccent = 7766, t.Pecyrillic = 1055, t.Peharmenian = 1354, t.Pemiddlehookcyrillic = 1190, t.Phi = 934, t.Phook = 420, t.Pi = 928, t.Piwrarmenian = 1363, t.Pmonospace = 65328, t.Psi = 936, t.Psicyrillic = 1136, t.Psmall = 63344, t.Q = 81, t.Qcircle = 9414, t.Qmonospace = 65329, t.Qsmall = 63345, t.R = 82, t.Raarmenian = 1356, t.Racute = 340, t.Rcaron = 344, t.Rcedilla = 342, t.Rcircle = 9415, t.Rcommaaccent = 342, t.Rdblgrave = 528, t.Rdotaccent = 7768, t.Rdotbelow = 7770, t.Rdotbelowmacron = 7772, t.Reharmenian = 1360, t.Rfraktur = 8476, t.Rho = 929, t.Ringsmall = 63228, t.Rinvertedbreve = 530, t.Rlinebelow = 7774, t.Rmonospace = 65330, t.Rsmall = 63346, t.Rsmallinverted = 641, t.Rsmallinvertedsuperior = 694, t.S = 83, t.SF010000 = 9484, t.SF020000 = 9492, t.SF030000 = 9488, t.SF040000 = 9496, t.SF050000 = 9532, t.SF060000 = 9516, t.SF070000 = 9524, t.SF080000 = 9500, t.SF090000 = 9508, t.SF100000 = 9472, t.SF110000 = 9474, t.SF190000 = 9569, t.SF200000 = 9570, t.SF210000 = 9558, t.SF220000 = 9557, t.SF230000 = 9571, t.SF240000 = 9553, t.SF250000 = 9559, t.SF260000 = 9565, t.SF270000 = 9564, t.SF280000 = 9563, t.SF360000 = 9566, t.SF370000 = 9567, t.SF380000 = 9562, t.SF390000 = 9556, t.SF400000 = 9577, t.SF410000 = 9574, t.SF420000 = 9568, t.SF430000 = 9552, t.SF440000 = 9580, t.SF450000 = 9575, t.SF460000 = 9576, t.SF470000 = 9572, t.SF480000 = 9573, t.SF490000 = 9561, t.SF500000 = 9560, t.SF510000 = 9554, t.SF520000 = 9555, t.SF530000 = 9579, t.SF540000 = 9578, t.Sacute = 346, t.Sacutedotaccent = 7780, t.Sampigreek = 992, t.Scaron = 352, t.Scarondotaccent = 7782, t.Scaronsmall = 63229, t.Scedilla = 350, t.Schwa = 399, t.Schwacyrillic = 1240, t.Schwadieresiscyrillic = 1242, t.Scircle = 9416, t.Scircumflex = 348, t.Scommaaccent = 536, t.Sdotaccent = 7776, t.Sdotbelow = 7778, t.Sdotbelowdotaccent = 7784, t.Seharmenian = 1357, t.Sevenroman = 8550, t.Shaarmenian = 1351, t.Shacyrillic = 1064, t.Shchacyrillic = 1065, t.Sheicoptic = 994, t.Shhacyrillic = 1210, t.Shimacoptic = 1004, t.Sigma = 931, t.Sixroman = 8549, t.Smonospace = 65331, t.Softsigncyrillic = 1068, t.Ssmall = 63347, t.Stigmagreek = 986, t.T = 84, t.Tau = 932, t.Tbar = 358, t.Tcaron = 356, t.Tcedilla = 354, t.Tcircle = 9417, t.Tcircumflexbelow = 7792, t.Tcommaaccent = 354, t.Tdotaccent = 7786, t.Tdotbelow = 7788, t.Tecyrillic = 1058, t.Tedescendercyrillic = 1196, t.Tenroman = 8553, t.Tetsecyrillic = 1204, t.Theta = 920, t.Thook = 428, t.Thorn = 222, t.Thornsmall = 63486, t.Threeroman = 8546, t.Tildesmall = 63230, t.Tiwnarmenian = 1359, t.Tlinebelow = 7790, t.Tmonospace = 65332, t.Toarmenian = 1337, t.Tonefive = 444, t.Tonesix = 388, t.Tonetwo = 423, t.Tretroflexhook = 430, t.Tsecyrillic = 1062, t.Tshecyrillic = 1035, t.Tsmall = 63348, t.Twelveroman = 8555, t.Tworoman = 8545, t.U = 85, t.Uacute = 218, t.Uacutesmall = 63482, t.Ubreve = 364, t.Ucaron = 467, t.Ucircle = 9418, t.Ucircumflex = 219, t.Ucircumflexbelow = 7798, t.Ucircumflexsmall = 63483, t.Ucyrillic = 1059, t.Udblacute = 368, t.Udblgrave = 532, t.Udieresis = 220, t.Udieresisacute = 471, t.Udieresisbelow = 7794, t.Udieresiscaron = 473, t.Udieresiscyrillic = 1264, t.Udieresisgrave = 475, t.Udieresismacron = 469, t.Udieresissmall = 63484, t.Udotbelow = 7908, t.Ugrave = 217, t.Ugravesmall = 63481, t.Uhookabove = 7910, t.Uhorn = 431, t.Uhornacute = 7912, t.Uhorndotbelow = 7920, t.Uhorngrave = 7914, t.Uhornhookabove = 7916, t.Uhorntilde = 7918, t.Uhungarumlaut = 368, t.Uhungarumlautcyrillic = 1266, t.Uinvertedbreve = 534, t.Ukcyrillic = 1144, t.Umacron = 362, t.Umacroncyrillic = 1262, t.Umacrondieresis = 7802, t.Umonospace = 65333, t.Uogonek = 370, t.Upsilon = 933, t.Upsilon1 = 978, t.Upsilonacutehooksymbolgreek = 979, t.Upsilonafrican = 433, t.Upsilondieresis = 939, t.Upsilondieresishooksymbolgreek = 980, t.Upsilonhooksymbol = 978, t.Upsilontonos = 910, t.Uring = 366, t.Ushortcyrillic = 1038, t.Usmall = 63349, t.Ustraightcyrillic = 1198, t.Ustraightstrokecyrillic = 1200, t.Utilde = 360, t.Utildeacute = 7800, t.Utildebelow = 7796, t.V = 86, t.Vcircle = 9419, t.Vdotbelow = 7806, t.Vecyrillic = 1042, t.Vewarmenian = 1358, t.Vhook = 434, t.Vmonospace = 65334, t.Voarmenian = 1352, t.Vsmall = 63350, t.Vtilde = 7804, t.W = 87, t.Wacute = 7810, t.Wcircle = 9420, t.Wcircumflex = 372, t.Wdieresis = 7812, t.Wdotaccent = 7814, t.Wdotbelow = 7816, t.Wgrave = 7808, t.Wmonospace = 65335, t.Wsmall = 63351, t.X = 88, t.Xcircle = 9421, t.Xdieresis = 7820, t.Xdotaccent = 7818, t.Xeharmenian = 1341, t.Xi = 926, t.Xmonospace = 65336, t.Xsmall = 63352, t.Y = 89, t.Yacute = 221, t.Yacutesmall = 63485, t.Yatcyrillic = 1122, t.Ycircle = 9422, t.Ycircumflex = 374, t.Ydieresis = 376, t.Ydieresissmall = 63487, t.Ydotaccent = 7822, t.Ydotbelow = 7924, t.Yericyrillic = 1067, t.Yerudieresiscyrillic = 1272, t.Ygrave = 7922, t.Yhook = 435, t.Yhookabove = 7926, t.Yiarmenian = 1349, t.Yicyrillic = 1031, t.Yiwnarmenian = 1362, t.Ymonospace = 65337, t.Ysmall = 63353, t.Ytilde = 7928, t.Yusbigcyrillic = 1130, t.Yusbigiotifiedcyrillic = 1132, t.Yuslittlecyrillic = 1126, t.Yuslittleiotifiedcyrillic = 1128, t.Z = 90, t.Zaarmenian = 1334, t.Zacute = 377, t.Zcaron = 381, t.Zcaronsmall = 63231, t.Zcircle = 9423, t.Zcircumflex = 7824, t.Zdot = 379, t.Zdotaccent = 379, t.Zdotbelow = 7826, t.Zecyrillic = 1047, t.Zedescendercyrillic = 1176, t.Zedieresiscyrillic = 1246, t.Zeta = 918, t.Zhearmenian = 1338, t.Zhebrevecyrillic = 1217, t.Zhecyrillic = 1046, t.Zhedescendercyrillic = 1174, t.Zhedieresiscyrillic = 1244, t.Zlinebelow = 7828, t.Zmonospace = 65338, t.Zsmall = 63354, t.Zstroke = 437, t.a = 97, t.aabengali = 2438, t.aacute = 225, t.aadeva = 2310, t.aagujarati = 2694, t.aagurmukhi = 2566, t.aamatragurmukhi = 2622, t.aarusquare = 13059, t.aavowelsignbengali = 2494, t.aavowelsigndeva = 2366, t.aavowelsigngujarati = 2750, t.abbreviationmarkarmenian = 1375, t.abbreviationsigndeva = 2416, t.abengali = 2437, t.abopomofo = 12570, t.abreve = 259, t.abreveacute = 7855, t.abrevecyrillic = 1233, t.abrevedotbelow = 7863, t.abrevegrave = 7857, t.abrevehookabove = 7859, t.abrevetilde = 7861, t.acaron = 462, t.acircle = 9424, t.acircumflex = 226, t.acircumflexacute = 7845, t.acircumflexdotbelow = 7853, t.acircumflexgrave = 7847, t.acircumflexhookabove = 7849, t.acircumflextilde = 7851, t.acute = 180, t.acutebelowcmb = 791, t.acutecmb = 769, t.acutecomb = 769, t.acutedeva = 2388, t.acutelowmod = 719, t.acutetonecmb = 833, t.acyrillic = 1072, t.adblgrave = 513, t.addakgurmukhi = 2673, t.adeva = 2309, t.adieresis = 228, t.adieresiscyrillic = 1235, t.adieresismacron = 479, t.adotbelow = 7841, t.adotmacron = 481, t.ae = 230, t.aeacute = 509, t.aekorean = 12624, t.aemacron = 483, t.afii00208 = 8213, t.afii08941 = 8356, t.afii10017 = 1040, t.afii10018 = 1041, t.afii10019 = 1042, t.afii10020 = 1043, t.afii10021 = 1044, t.afii10022 = 1045, t.afii10023 = 1025, t.afii10024 = 1046, t.afii10025 = 1047, t.afii10026 = 1048, t.afii10027 = 1049, t.afii10028 = 1050, t.afii10029 = 1051, t.afii10030 = 1052, t.afii10031 = 1053, t.afii10032 = 1054, t.afii10033 = 1055, t.afii10034 = 1056, t.afii10035 = 1057, t.afii10036 = 1058, t.afii10037 = 1059, t.afii10038 = 1060, t.afii10039 = 1061, t.afii10040 = 1062, t.afii10041 = 1063, t.afii10042 = 1064, t.afii10043 = 1065, t.afii10044 = 1066, t.afii10045 = 1067, t.afii10046 = 1068, t.afii10047 = 1069, t.afii10048 = 1070, t.afii10049 = 1071, t.afii10050 = 1168, t.afii10051 = 1026, t.afii10052 = 1027, t.afii10053 = 1028, t.afii10054 = 1029, t.afii10055 = 1030, t.afii10056 = 1031, t.afii10057 = 1032, t.afii10058 = 1033, t.afii10059 = 1034, t.afii10060 = 1035, t.afii10061 = 1036, t.afii10062 = 1038, t.afii10063 = 63172, t.afii10064 = 63173, t.afii10065 = 1072, t.afii10066 = 1073, t.afii10067 = 1074, t.afii10068 = 1075, t.afii10069 = 1076, t.afii10070 = 1077, t.afii10071 = 1105, t.afii10072 = 1078, t.afii10073 = 1079, t.afii10074 = 1080, t.afii10075 = 1081, t.afii10076 = 1082, t.afii10077 = 1083, t.afii10078 = 1084, t.afii10079 = 1085, t.afii10080 = 1086, t.afii10081 = 1087, t.afii10082 = 1088, t.afii10083 = 1089, t.afii10084 = 1090, t.afii10085 = 1091, t.afii10086 = 1092, t.afii10087 = 1093, t.afii10088 = 1094, t.afii10089 = 1095, t.afii10090 = 1096, t.afii10091 = 1097, t.afii10092 = 1098, t.afii10093 = 1099, t.afii10094 = 1100, t.afii10095 = 1101, t.afii10096 = 1102, t.afii10097 = 1103, t.afii10098 = 1169, t.afii10099 = 1106, t.afii10100 = 1107, t.afii10101 = 1108, t.afii10102 = 1109, t.afii10103 = 1110, t.afii10104 = 1111, t.afii10105 = 1112, t.afii10106 = 1113, t.afii10107 = 1114, t.afii10108 = 1115, t.afii10109 = 1116, t.afii10110 = 1118, t.afii10145 = 1039, t.afii10146 = 1122, t.afii10147 = 1138, t.afii10148 = 1140, t.afii10192 = 63174, t.afii10193 = 1119, t.afii10194 = 1123, t.afii10195 = 1139, t.afii10196 = 1141, t.afii10831 = 63175, t.afii10832 = 63176, t.afii10846 = 1241, t.afii299 = 8206, t.afii300 = 8207, t.afii301 = 8205, t.afii57381 = 1642, t.afii57388 = 1548, t.afii57392 = 1632, t.afii57393 = 1633, t.afii57394 = 1634, t.afii57395 = 1635, t.afii57396 = 1636, t.afii57397 = 1637, t.afii57398 = 1638, t.afii57399 = 1639, t.afii57400 = 1640, t.afii57401 = 1641, t.afii57403 = 1563, t.afii57407 = 1567, t.afii57409 = 1569, t.afii57410 = 1570, t.afii57411 = 1571, t.afii57412 = 1572, t.afii57413 = 1573, t.afii57414 = 1574, t.afii57415 = 1575, t.afii57416 = 1576, t.afii57417 = 1577, t.afii57418 = 1578, t.afii57419 = 1579, t.afii57420 = 1580, t.afii57421 = 1581, t.afii57422 = 1582, t.afii57423 = 1583, t.afii57424 = 1584, t.afii57425 = 1585, t.afii57426 = 1586, t.afii57427 = 1587, t.afii57428 = 1588, t.afii57429 = 1589, t.afii57430 = 1590, t.afii57431 = 1591, t.afii57432 = 1592, t.afii57433 = 1593, t.afii57434 = 1594, t.afii57440 = 1600, t.afii57441 = 1601, t.afii57442 = 1602, t.afii57443 = 1603, t.afii57444 = 1604, t.afii57445 = 1605, t.afii57446 = 1606, t.afii57448 = 1608, t.afii57449 = 1609, t.afii57450 = 1610, t.afii57451 = 1611, t.afii57452 = 1612, t.afii57453 = 1613, t.afii57454 = 1614, t.afii57455 = 1615, t.afii57456 = 1616, t.afii57457 = 1617, t.afii57458 = 1618, t.afii57470 = 1607, t.afii57505 = 1700, t.afii57506 = 1662, t.afii57507 = 1670, t.afii57508 = 1688, t.afii57509 = 1711, t.afii57511 = 1657, t.afii57512 = 1672, t.afii57513 = 1681, t.afii57514 = 1722, t.afii57519 = 1746, t.afii57534 = 1749, t.afii57636 = 8362, t.afii57645 = 1470, t.afii57658 = 1475, t.afii57664 = 1488, t.afii57665 = 1489, t.afii57666 = 1490, t.afii57667 = 1491, t.afii57668 = 1492, t.afii57669 = 1493, t.afii57670 = 1494, t.afii57671 = 1495, t.afii57672 = 1496, t.afii57673 = 1497, t.afii57674 = 1498, t.afii57675 = 1499, t.afii57676 = 1500, t.afii57677 = 1501, t.afii57678 = 1502, t.afii57679 = 1503, t.afii57680 = 1504, t.afii57681 = 1505, t.afii57682 = 1506, t.afii57683 = 1507, t.afii57684 = 1508, t.afii57685 = 1509, t.afii57686 = 1510, t.afii57687 = 1511, t.afii57688 = 1512, t.afii57689 = 1513, t.afii57690 = 1514, t.afii57694 = 64298, t.afii57695 = 64299, t.afii57700 = 64331, t.afii57705 = 64287, t.afii57716 = 1520, t.afii57717 = 1521, t.afii57718 = 1522, t.afii57723 = 64309, t.afii57793 = 1460, t.afii57794 = 1461, t.afii57795 = 1462, t.afii57796 = 1467, t.afii57797 = 1464, t.afii57798 = 1463, t.afii57799 = 1456, t.afii57800 = 1458, t.afii57801 = 1457, t.afii57802 = 1459, t.afii57803 = 1474, t.afii57804 = 1473, t.afii57806 = 1465, t.afii57807 = 1468, t.afii57839 = 1469, t.afii57841 = 1471, t.afii57842 = 1472, t.afii57929 = 700, t.afii61248 = 8453, t.afii61289 = 8467, t.afii61352 = 8470, t.afii61573 = 8236, t.afii61574 = 8237, t.afii61575 = 8238, t.afii61664 = 8204, t.afii63167 = 1645, t.afii64937 = 701, t.agrave = 224, t.agujarati = 2693, t.agurmukhi = 2565, t.ahiragana = 12354, t.ahookabove = 7843, t.aibengali = 2448, t.aibopomofo = 12574, t.aideva = 2320, t.aiecyrillic = 1237, t.aigujarati = 2704, t.aigurmukhi = 2576, t.aimatragurmukhi = 2632, t.ainarabic = 1593, t.ainfinalarabic = 65226, t.aininitialarabic = 65227, t.ainmedialarabic = 65228, t.ainvertedbreve = 515, t.aivowelsignbengali = 2504, t.aivowelsigndeva = 2376, t.aivowelsigngujarati = 2760, t.akatakana = 12450, t.akatakanahalfwidth = 65393, t.akorean = 12623, t.alef = 1488, t.alefarabic = 1575, t.alefdageshhebrew = 64304, t.aleffinalarabic = 65166, t.alefhamzaabovearabic = 1571, t.alefhamzaabovefinalarabic = 65156, t.alefhamzabelowarabic = 1573, t.alefhamzabelowfinalarabic = 65160, t.alefhebrew = 1488, t.aleflamedhebrew = 64335, t.alefmaddaabovearabic = 1570, t.alefmaddaabovefinalarabic = 65154, t.alefmaksuraarabic = 1609, t.alefmaksurafinalarabic = 65264, t.alefmaksurainitialarabic = 65267, t.alefmaksuramedialarabic = 65268, t.alefpatahhebrew = 64302, t.alefqamatshebrew = 64303, t.aleph = 8501, t.allequal = 8780, t.alpha = 945, t.alphatonos = 940, t.amacron = 257, t.amonospace = 65345, t.ampersand = 38, t.ampersandmonospace = 65286, t.ampersandsmall = 63270, t.amsquare = 13250, t.anbopomofo = 12578, t.angbopomofo = 12580, t.angbracketleft = 12296, t.angbracketright = 12297, t.angkhankhuthai = 3674, t.angle = 8736, t.anglebracketleft = 12296, t.anglebracketleftvertical = 65087, t.anglebracketright = 12297, t.anglebracketrightvertical = 65088, t.angleleft = 9001, t.angleright = 9002, t.angstrom = 8491, t.anoteleia = 903, t.anudattadeva = 2386, t.anusvarabengali = 2434, t.anusvaradeva = 2306, t.anusvaragujarati = 2690, t.aogonek = 261, t.apaatosquare = 13056, t.aparen = 9372, t.apostrophearmenian = 1370, t.apostrophemod = 700, t.apple = 63743, t.approaches = 8784, t.approxequal = 8776, t.approxequalorimage = 8786, t.approximatelyequal = 8773, t.araeaekorean = 12686, t.araeakorean = 12685, t.arc = 8978, t.arighthalfring = 7834, t.aring = 229, t.aringacute = 507, t.aringbelow = 7681, t.arrowboth = 8596, t.arrowdashdown = 8675, t.arrowdashleft = 8672, t.arrowdashright = 8674, t.arrowdashup = 8673, t.arrowdblboth = 8660, t.arrowdbldown = 8659, t.arrowdblleft = 8656, t.arrowdblright = 8658, t.arrowdblup = 8657, t.arrowdown = 8595, t.arrowdownleft = 8601, t.arrowdownright = 8600, t.arrowdownwhite = 8681, t.arrowheaddownmod = 709, t.arrowheadleftmod = 706, t.arrowheadrightmod = 707, t.arrowheadupmod = 708, t.arrowhorizex = 63719, t.arrowleft = 8592, t.arrowleftdbl = 8656, t.arrowleftdblstroke = 8653, t.arrowleftoverright = 8646, t.arrowleftwhite = 8678, t.arrowright = 8594, t.arrowrightdblstroke = 8655, t.arrowrightheavy = 10142, t.arrowrightoverleft = 8644, t.arrowrightwhite = 8680, t.arrowtableft = 8676, t.arrowtabright = 8677, t.arrowup = 8593, t.arrowupdn = 8597, t.arrowupdnbse = 8616, t.arrowupdownbase = 8616, t.arrowupleft = 8598, t.arrowupleftofdown = 8645, t.arrowupright = 8599, t.arrowupwhite = 8679, t.arrowvertex = 63718, t.asciicircum = 94, t.asciicircummonospace = 65342, t.asciitilde = 126, t.asciitildemonospace = 65374, t.ascript = 593, t.ascriptturned = 594, t.asmallhiragana = 12353, t.asmallkatakana = 12449, t.asmallkatakanahalfwidth = 65383, t.asterisk = 42, t.asteriskaltonearabic = 1645, t.asteriskarabic = 1645, t.asteriskmath = 8727, t.asteriskmonospace = 65290, t.asterisksmall = 65121, t.asterism = 8258, t.asuperior = 63209, t.asymptoticallyequal = 8771, t.at = 64, t.atilde = 227, t.atmonospace = 65312, t.atsmall = 65131, t.aturned = 592, t.aubengali = 2452, t.aubopomofo = 12576, t.audeva = 2324, t.augujarati = 2708, t.augurmukhi = 2580, t.aulengthmarkbengali = 2519, t.aumatragurmukhi = 2636, t.auvowelsignbengali = 2508, t.auvowelsigndeva = 2380, t.auvowelsigngujarati = 2764, t.avagrahadeva = 2365, t.aybarmenian = 1377, t.ayin = 1506, t.ayinaltonehebrew = 64288, t.ayinhebrew = 1506, t.b = 98, t.babengali = 2476, t.backslash = 92, t.backslashmonospace = 65340, t.badeva = 2348, t.bagujarati = 2732, t.bagurmukhi = 2604, t.bahiragana = 12400, t.bahtthai = 3647, t.bakatakana = 12496, t.bar = 124, t.barmonospace = 65372, t.bbopomofo = 12549, t.bcircle = 9425, t.bdotaccent = 7683, t.bdotbelow = 7685, t.beamedsixteenthnotes = 9836, t.because = 8757, t.becyrillic = 1073, t.beharabic = 1576, t.behfinalarabic = 65168, t.behinitialarabic = 65169, t.behiragana = 12409, t.behmedialarabic = 65170, t.behmeeminitialarabic = 64671, t.behmeemisolatedarabic = 64520, t.behnoonfinalarabic = 64621, t.bekatakana = 12505, t.benarmenian = 1378, t.bet = 1489, t.beta = 946, t.betasymbolgreek = 976, t.betdagesh = 64305, t.betdageshhebrew = 64305, t.bethebrew = 1489, t.betrafehebrew = 64332, t.bhabengali = 2477, t.bhadeva = 2349, t.bhagujarati = 2733, t.bhagurmukhi = 2605, t.bhook = 595, t.bihiragana = 12403, t.bikatakana = 12499, t.bilabialclick = 664, t.bindigurmukhi = 2562, t.birusquare = 13105, t.blackcircle = 9679, t.blackdiamond = 9670, t.blackdownpointingtriangle = 9660, t.blackleftpointingpointer = 9668, t.blackleftpointingtriangle = 9664, t.blacklenticularbracketleft = 12304, t.blacklenticularbracketleftvertical = 65083, t.blacklenticularbracketright = 12305, t.blacklenticularbracketrightvertical = 65084, t.blacklowerlefttriangle = 9699, t.blacklowerrighttriangle = 9698, t.blackrectangle = 9644, t.blackrightpointingpointer = 9658, t.blackrightpointingtriangle = 9654, t.blacksmallsquare = 9642, t.blacksmilingface = 9787, t.blacksquare = 9632, t.blackstar = 9733, t.blackupperlefttriangle = 9700, t.blackupperrighttriangle = 9701, t.blackuppointingsmalltriangle = 9652, t.blackuppointingtriangle = 9650, t.blank = 9251, t.blinebelow = 7687, t.block = 9608, t.bmonospace = 65346, t.bobaimaithai = 3610, t.bohiragana = 12412, t.bokatakana = 12508, t.bparen = 9373, t.bqsquare = 13251, t.braceex = 63732, t.braceleft = 123, t.braceleftbt = 63731, t.braceleftmid = 63730, t.braceleftmonospace = 65371, t.braceleftsmall = 65115, t.bracelefttp = 63729, t.braceleftvertical = 65079, t.braceright = 125, t.bracerightbt = 63742, t.bracerightmid = 63741, t.bracerightmonospace = 65373, t.bracerightsmall = 65116, t.bracerighttp = 63740, t.bracerightvertical = 65080, t.bracketleft = 91, t.bracketleftbt = 63728, t.bracketleftex = 63727, t.bracketleftmonospace = 65339, t.bracketlefttp = 63726, t.bracketright = 93, t.bracketrightbt = 63739, t.bracketrightex = 63738, t.bracketrightmonospace = 65341, t.bracketrighttp = 63737, t.breve = 728, t.brevebelowcmb = 814, t.brevecmb = 774, t.breveinvertedbelowcmb = 815, t.breveinvertedcmb = 785, t.breveinverteddoublecmb = 865, t.bridgebelowcmb = 810, t.bridgeinvertedbelowcmb = 826, t.brokenbar = 166, t.bstroke = 384, t.bsuperior = 63210, t.btopbar = 387, t.buhiragana = 12406, t.bukatakana = 12502, t.bullet = 8226, t.bulletinverse = 9688, t.bulletoperator = 8729, t.bullseye = 9678, t.c = 99, t.caarmenian = 1390, t.cabengali = 2458, t.cacute = 263, t.cadeva = 2330, t.cagujarati = 2714, t.cagurmukhi = 2586, t.calsquare = 13192, t.candrabindubengali = 2433, t.candrabinducmb = 784, t.candrabindudeva = 2305, t.candrabindugujarati = 2689, t.capslock = 8682, t.careof = 8453, t.caron = 711, t.caronbelowcmb = 812, t.caroncmb = 780, t.carriagereturn = 8629, t.cbopomofo = 12568, t.ccaron = 269, t.ccedilla = 231, t.ccedillaacute = 7689, t.ccircle = 9426, t.ccircumflex = 265, t.ccurl = 597, t.cdot = 267, t.cdotaccent = 267, t.cdsquare = 13253, t.cedilla = 184, t.cedillacmb = 807, t.cent = 162, t.centigrade = 8451, t.centinferior = 63199, t.centmonospace = 65504, t.centoldstyle = 63394, t.centsuperior = 63200, t.chaarmenian = 1401, t.chabengali = 2459, t.chadeva = 2331, t.chagujarati = 2715, t.chagurmukhi = 2587, t.chbopomofo = 12564, t.cheabkhasiancyrillic = 1213, t.checkmark = 10003, t.checyrillic = 1095, t.chedescenderabkhasiancyrillic = 1215, t.chedescendercyrillic = 1207, t.chedieresiscyrillic = 1269, t.cheharmenian = 1395, t.chekhakassiancyrillic = 1228, t.cheverticalstrokecyrillic = 1209, t.chi = 967, t.chieuchacirclekorean = 12919, t.chieuchaparenkorean = 12823, t.chieuchcirclekorean = 12905, t.chieuchkorean = 12618, t.chieuchparenkorean = 12809, t.chochangthai = 3594, t.chochanthai = 3592, t.chochingthai = 3593, t.chochoethai = 3596, t.chook = 392, t.cieucacirclekorean = 12918, t.cieucaparenkorean = 12822, t.cieuccirclekorean = 12904, t.cieuckorean = 12616, t.cieucparenkorean = 12808, t.cieucuparenkorean = 12828, t.circle = 9675, t.circlecopyrt = 169, t.circlemultiply = 8855, t.circleot = 8857, t.circleplus = 8853, t.circlepostalmark = 12342, t.circlewithlefthalfblack = 9680, t.circlewithrighthalfblack = 9681, t.circumflex = 710, t.circumflexbelowcmb = 813, t.circumflexcmb = 770, t.clear = 8999, t.clickalveolar = 450, t.clickdental = 448, t.clicklateral = 449, t.clickretroflex = 451, t.club = 9827, t.clubsuitblack = 9827, t.clubsuitwhite = 9831, t.cmcubedsquare = 13220, t.cmonospace = 65347, t.cmsquaredsquare = 13216, t.coarmenian = 1409, t.colon = 58, t.colonmonetary = 8353, t.colonmonospace = 65306, t.colonsign = 8353, t.colonsmall = 65109, t.colontriangularhalfmod = 721, t.colontriangularmod = 720, t.comma = 44, t.commaabovecmb = 787, t.commaaboverightcmb = 789, t.commaaccent = 63171, t.commaarabic = 1548, t.commaarmenian = 1373, t.commainferior = 63201, t.commamonospace = 65292, t.commareversedabovecmb = 788, t.commareversedmod = 701, t.commasmall = 65104, t.commasuperior = 63202, t.commaturnedabovecmb = 786, t.commaturnedmod = 699, t.compass = 9788, t.congruent = 8773, t.contourintegral = 8750, t.control = 8963, t.controlACK = 6, t.controlBEL = 7, t.controlBS = 8, t.controlCAN = 24, t.controlCR = 13, t.controlDC1 = 17, t.controlDC2 = 18, t.controlDC3 = 19, t.controlDC4 = 20, t.controlDEL = 127, t.controlDLE = 16, t.controlEM = 25, t.controlENQ = 5, t.controlEOT = 4, t.controlESC = 27, t.controlETB = 23, t.controlETX = 3, t.controlFF = 12, t.controlFS = 28, t.controlGS = 29, t.controlHT = 9, t.controlLF = 10, t.controlNAK = 21, t.controlNULL = 0, t.controlRS = 30, t.controlSI = 15, t.controlSO = 14, t.controlSOT = 2, t.controlSTX = 1, t.controlSUB = 26, t.controlSYN = 22, t.controlUS = 31, t.controlVT = 11, t.copyright = 169, t.copyrightsans = 63721, t.copyrightserif = 63193, t.cornerbracketleft = 12300, t.cornerbracketlefthalfwidth = 65378, t.cornerbracketleftvertical = 65089, t.cornerbracketright = 12301, t.cornerbracketrighthalfwidth = 65379, t.cornerbracketrightvertical = 65090, t.corporationsquare = 13183, t.cosquare = 13255, t.coverkgsquare = 13254, t.cparen = 9374, t.cruzeiro = 8354, t.cstretched = 663, t.curlyand = 8911, t.curlyor = 8910, t.currency = 164, t.cyrBreve = 63185, t.cyrFlex = 63186, t.cyrbreve = 63188, t.cyrflex = 63189, t.d = 100, t.daarmenian = 1380, t.dabengali = 2470, t.dadarabic = 1590, t.dadeva = 2342, t.dadfinalarabic = 65214, t.dadinitialarabic = 65215, t.dadmedialarabic = 65216, t.dagesh = 1468, t.dageshhebrew = 1468, t.dagger = 8224, t.daggerdbl = 8225, t.dagujarati = 2726, t.dagurmukhi = 2598, t.dahiragana = 12384, t.dakatakana = 12480, t.dalarabic = 1583, t.dalet = 1491, t.daletdagesh = 64307, t.daletdageshhebrew = 64307, t.dalethebrew = 1491, t.dalfinalarabic = 65194, t.dammaarabic = 1615, t.dammalowarabic = 1615, t.dammatanaltonearabic = 1612, t.dammatanarabic = 1612, t.danda = 2404, t.dargahebrew = 1447, t.dargalefthebrew = 1447, t.dasiapneumatacyrilliccmb = 1157, t.dblGrave = 63187, t.dblanglebracketleft = 12298, t.dblanglebracketleftvertical = 65085, t.dblanglebracketright = 12299, t.dblanglebracketrightvertical = 65086, t.dblarchinvertedbelowcmb = 811, t.dblarrowleft = 8660, t.dblarrowright = 8658, t.dbldanda = 2405, t.dblgrave = 63190, t.dblgravecmb = 783, t.dblintegral = 8748, t.dbllowline = 8215, t.dbllowlinecmb = 819, t.dbloverlinecmb = 831, t.dblprimemod = 698, t.dblverticalbar = 8214, t.dblverticallineabovecmb = 782, t.dbopomofo = 12553, t.dbsquare = 13256, t.dcaron = 271, t.dcedilla = 7697, t.dcircle = 9427, t.dcircumflexbelow = 7699, t.dcroat = 273, t.ddabengali = 2465, t.ddadeva = 2337, t.ddagujarati = 2721, t.ddagurmukhi = 2593, t.ddalarabic = 1672, t.ddalfinalarabic = 64393, t.dddhadeva = 2396, t.ddhabengali = 2466, t.ddhadeva = 2338, t.ddhagujarati = 2722, t.ddhagurmukhi = 2594, t.ddotaccent = 7691, t.ddotbelow = 7693, t.decimalseparatorarabic = 1643, t.decimalseparatorpersian = 1643, t.decyrillic = 1076, t.degree = 176, t.dehihebrew = 1453, t.dehiragana = 12391, t.deicoptic = 1007, t.dekatakana = 12487, t.deleteleft = 9003, t.deleteright = 8998, t.delta = 948, t.deltaturned = 397, t.denominatorminusonenumeratorbengali = 2552, t.dezh = 676, t.dhabengali = 2471, t.dhadeva = 2343, t.dhagujarati = 2727, t.dhagurmukhi = 2599, t.dhook = 599, t.dialytikatonos = 901, t.dialytikatonoscmb = 836, t.diamond = 9830, t.diamondsuitwhite = 9826, t.dieresis = 168, t.dieresisacute = 63191, t.dieresisbelowcmb = 804, t.dieresiscmb = 776, t.dieresisgrave = 63192, t.dieresistonos = 901, t.dihiragana = 12386, t.dikatakana = 12482, t.dittomark = 12291, t.divide = 247, t.divides = 8739, t.divisionslash = 8725, t.djecyrillic = 1106, t.dkshade = 9619, t.dlinebelow = 7695, t.dlsquare = 13207, t.dmacron = 273, t.dmonospace = 65348, t.dnblock = 9604, t.dochadathai = 3598, t.dodekthai = 3604, t.dohiragana = 12393, t.dokatakana = 12489, t.dollar = 36, t.dollarinferior = 63203, t.dollarmonospace = 65284, t.dollaroldstyle = 63268, t.dollarsmall = 65129, t.dollarsuperior = 63204, t.dong = 8363, t.dorusquare = 13094, t.dotaccent = 729, t.dotaccentcmb = 775, t.dotbelowcmb = 803, t.dotbelowcomb = 803, t.dotkatakana = 12539, t.dotlessi = 305, t.dotlessj = 63166, t.dotlessjstrokehook = 644, t.dotmath = 8901, t.dottedcircle = 9676, t.doubleyodpatah = 64287, t.doubleyodpatahhebrew = 64287, t.downtackbelowcmb = 798, t.downtackmod = 725, t.dparen = 9375, t.dsuperior = 63211, t.dtail = 598, t.dtopbar = 396, t.duhiragana = 12389, t.dukatakana = 12485, t.dz = 499, t.dzaltone = 675, t.dzcaron = 454, t.dzcurl = 677, t.dzeabkhasiancyrillic = 1249, t.dzecyrillic = 1109, t.dzhecyrillic = 1119, t.e = 101, t.eacute = 233, t.earth = 9793, t.ebengali = 2447, t.ebopomofo = 12572, t.ebreve = 277, t.ecandradeva = 2317, t.ecandragujarati = 2701, t.ecandravowelsigndeva = 2373, t.ecandravowelsigngujarati = 2757, t.ecaron = 283, t.ecedillabreve = 7709, t.echarmenian = 1381, t.echyiwnarmenian = 1415, t.ecircle = 9428, t.ecircumflex = 234, t.ecircumflexacute = 7871, t.ecircumflexbelow = 7705, t.ecircumflexdotbelow = 7879, t.ecircumflexgrave = 7873, t.ecircumflexhookabove = 7875, t.ecircumflextilde = 7877, t.ecyrillic = 1108, t.edblgrave = 517, t.edeva = 2319, t.edieresis = 235, t.edot = 279, t.edotaccent = 279, t.edotbelow = 7865, t.eegurmukhi = 2575, t.eematragurmukhi = 2631, t.efcyrillic = 1092, t.egrave = 232, t.egujarati = 2703, t.eharmenian = 1383, t.ehbopomofo = 12573, t.ehiragana = 12360, t.ehookabove = 7867, t.eibopomofo = 12575, t.eight = 56, t.eightarabic = 1640, t.eightbengali = 2542, t.eightcircle = 9319, t.eightcircleinversesansserif = 10129, t.eightdeva = 2414, t.eighteencircle = 9329, t.eighteenparen = 9349, t.eighteenperiod = 9369, t.eightgujarati = 2798, t.eightgurmukhi = 2670, t.eighthackarabic = 1640, t.eighthangzhou = 12328, t.eighthnotebeamed = 9835, t.eightideographicparen = 12839, t.eightinferior = 8328, t.eightmonospace = 65304, t.eightoldstyle = 63288, t.eightparen = 9339, t.eightperiod = 9359, t.eightpersian = 1784, t.eightroman = 8567, t.eightsuperior = 8312, t.eightthai = 3672, t.einvertedbreve = 519, t.eiotifiedcyrillic = 1125, t.ekatakana = 12456, t.ekatakanahalfwidth = 65396, t.ekonkargurmukhi = 2676, t.ekorean = 12628, t.elcyrillic = 1083, t.element = 8712, t.elevencircle = 9322, t.elevenparen = 9342, t.elevenperiod = 9362, t.elevenroman = 8570, t.ellipsis = 8230, t.ellipsisvertical = 8942, t.emacron = 275, t.emacronacute = 7703, t.emacrongrave = 7701, t.emcyrillic = 1084, t.emdash = 8212, t.emdashvertical = 65073, t.emonospace = 65349, t.emphasismarkarmenian = 1371, t.emptyset = 8709, t.enbopomofo = 12579, t.encyrillic = 1085, t.endash = 8211, t.endashvertical = 65074, t.endescendercyrillic = 1187, t.eng = 331, t.engbopomofo = 12581, t.enghecyrillic = 1189, t.enhookcyrillic = 1224, t.enspace = 8194, t.eogonek = 281, t.eokorean = 12627, t.eopen = 603, t.eopenclosed = 666, t.eopenreversed = 604, t.eopenreversedclosed = 606, t.eopenreversedhook = 605, t.eparen = 9376, t.epsilon = 949, t.epsilontonos = 941, t.equal = 61, t.equalmonospace = 65309, t.equalsmall = 65126, t.equalsuperior = 8316, t.equivalence = 8801, t.erbopomofo = 12582, t.ercyrillic = 1088, t.ereversed = 600, t.ereversedcyrillic = 1101, t.escyrillic = 1089, t.esdescendercyrillic = 1195, t.esh = 643, t.eshcurl = 646, t.eshortdeva = 2318, t.eshortvowelsigndeva = 2374, t.eshreversedloop = 426, t.eshsquatreversed = 645, t.esmallhiragana = 12359, t.esmallkatakana = 12455, t.esmallkatakanahalfwidth = 65386, t.estimated = 8494, t.esuperior = 63212, t.eta = 951, t.etarmenian = 1384, t.etatonos = 942, t.eth = 240, t.etilde = 7869, t.etildebelow = 7707, t.etnahtafoukhhebrew = 1425, t.etnahtafoukhlefthebrew = 1425, t.etnahtahebrew = 1425, t.etnahtalefthebrew = 1425, t.eturned = 477, t.eukorean = 12641, t.euro = 8364, t.evowelsignbengali = 2503, t.evowelsigndeva = 2375, t.evowelsigngujarati = 2759, t.exclam = 33, t.exclamarmenian = 1372, t.exclamdbl = 8252, t.exclamdown = 161, t.exclamdownsmall = 63393, t.exclammonospace = 65281, t.exclamsmall = 63265, t.existential = 8707, t.ezh = 658, t.ezhcaron = 495, t.ezhcurl = 659, t.ezhreversed = 441, t.ezhtail = 442, t.f = 102, t.fadeva = 2398, t.fagurmukhi = 2654, t.fahrenheit = 8457, t.fathaarabic = 1614, t.fathalowarabic = 1614, t.fathatanarabic = 1611, t.fbopomofo = 12552, t.fcircle = 9429, t.fdotaccent = 7711, t.feharabic = 1601, t.feharmenian = 1414, t.fehfinalarabic = 65234, t.fehinitialarabic = 65235, t.fehmedialarabic = 65236, t.feicoptic = 997, t.female = 9792, t.ff = 64256, t.f_f = 64256, t.ffi = 64259, t.f_f_i = 64259, t.ffl = 64260, t.f_f_l = 64260, t.fi = 64257, t.f_i = 64257, t.fifteencircle = 9326, t.fifteenparen = 9346, t.fifteenperiod = 9366, t.figuredash = 8210, t.filledbox = 9632, t.filledrect = 9644, t.finalkaf = 1498, t.finalkafdagesh = 64314, t.finalkafdageshhebrew = 64314, t.finalkafhebrew = 1498, t.finalmem = 1501, t.finalmemhebrew = 1501, t.finalnun = 1503, t.finalnunhebrew = 1503, t.finalpe = 1507, t.finalpehebrew = 1507, t.finaltsadi = 1509, t.finaltsadihebrew = 1509, t.firsttonechinese = 713, t.fisheye = 9673, t.fitacyrillic = 1139, t.five = 53, t.fivearabic = 1637, t.fivebengali = 2539, t.fivecircle = 9316, t.fivecircleinversesansserif = 10126, t.fivedeva = 2411, t.fiveeighths = 8541, t.fivegujarati = 2795, t.fivegurmukhi = 2667, t.fivehackarabic = 1637, t.fivehangzhou = 12325, t.fiveideographicparen = 12836, t.fiveinferior = 8325, t.fivemonospace = 65301, t.fiveoldstyle = 63285, t.fiveparen = 9336, t.fiveperiod = 9356, t.fivepersian = 1781, t.fiveroman = 8564, t.fivesuperior = 8309, t.fivethai = 3669, t.fl = 64258, t.f_l = 64258, t.florin = 402, t.fmonospace = 65350, t.fmsquare = 13209, t.fofanthai = 3615, t.fofathai = 3613, t.fongmanthai = 3663, t.forall = 8704, t.four = 52, t.fourarabic = 1636, t.fourbengali = 2538, t.fourcircle = 9315, t.fourcircleinversesansserif = 10125, t.fourdeva = 2410, t.fourgujarati = 2794, t.fourgurmukhi = 2666, t.fourhackarabic = 1636, t.fourhangzhou = 12324, t.fourideographicparen = 12835, t.fourinferior = 8324, t.fourmonospace = 65300, t.fournumeratorbengali = 2551, t.fouroldstyle = 63284, t.fourparen = 9335, t.fourperiod = 9355, t.fourpersian = 1780, t.fourroman = 8563, t.foursuperior = 8308, t.fourteencircle = 9325, t.fourteenparen = 9345, t.fourteenperiod = 9365, t.fourthai = 3668, t.fourthtonechinese = 715, t.fparen = 9377, t.fraction = 8260, t.franc = 8355, t.g = 103, t.gabengali = 2455, t.gacute = 501, t.gadeva = 2327, t.gafarabic = 1711, t.gaffinalarabic = 64403, t.gafinitialarabic = 64404, t.gafmedialarabic = 64405, t.gagujarati = 2711, t.gagurmukhi = 2583, t.gahiragana = 12364, t.gakatakana = 12460, t.gamma = 947, t.gammalatinsmall = 611, t.gammasuperior = 736, t.gangiacoptic = 1003, t.gbopomofo = 12557, t.gbreve = 287, t.gcaron = 487, t.gcedilla = 291, t.gcircle = 9430, t.gcircumflex = 285, t.gcommaaccent = 291, t.gdot = 289, t.gdotaccent = 289, t.gecyrillic = 1075, t.gehiragana = 12370, t.gekatakana = 12466, t.geometricallyequal = 8785, t.gereshaccenthebrew = 1436, t.gereshhebrew = 1523, t.gereshmuqdamhebrew = 1437, t.germandbls = 223, t.gershayimaccenthebrew = 1438, t.gershayimhebrew = 1524, t.getamark = 12307, t.ghabengali = 2456, t.ghadarmenian = 1394, t.ghadeva = 2328, t.ghagujarati = 2712, t.ghagurmukhi = 2584, t.ghainarabic = 1594, t.ghainfinalarabic = 65230, t.ghaininitialarabic = 65231, t.ghainmedialarabic = 65232, t.ghemiddlehookcyrillic = 1173, t.ghestrokecyrillic = 1171, t.gheupturncyrillic = 1169, t.ghhadeva = 2394, t.ghhagurmukhi = 2650, t.ghook = 608, t.ghzsquare = 13203, t.gihiragana = 12366, t.gikatakana = 12462, t.gimarmenian = 1379, t.gimel = 1490, t.gimeldagesh = 64306, t.gimeldageshhebrew = 64306, t.gimelhebrew = 1490, t.gjecyrillic = 1107, t.glottalinvertedstroke = 446, t.glottalstop = 660, t.glottalstopinverted = 662, t.glottalstopmod = 704, t.glottalstopreversed = 661, t.glottalstopreversedmod = 705, t.glottalstopreversedsuperior = 740, t.glottalstopstroke = 673, t.glottalstopstrokereversed = 674, t.gmacron = 7713, t.gmonospace = 65351, t.gohiragana = 12372, t.gokatakana = 12468, t.gparen = 9378, t.gpasquare = 13228, t.gradient = 8711, t.grave = 96, t.gravebelowcmb = 790, t.gravecmb = 768, t.gravecomb = 768, t.gravedeva = 2387, t.gravelowmod = 718, t.gravemonospace = 65344, t.gravetonecmb = 832, t.greater = 62, t.greaterequal = 8805, t.greaterequalorless = 8923, t.greatermonospace = 65310, t.greaterorequivalent = 8819, t.greaterorless = 8823, t.greateroverequal = 8807, t.greatersmall = 65125, t.gscript = 609, t.gstroke = 485, t.guhiragana = 12368, t.guillemotleft = 171, t.guillemotright = 187, t.guilsinglleft = 8249, t.guilsinglright = 8250, t.gukatakana = 12464, t.guramusquare = 13080, t.gysquare = 13257, t.h = 104, t.haabkhasiancyrillic = 1193, t.haaltonearabic = 1729, t.habengali = 2489, t.hadescendercyrillic = 1203, t.hadeva = 2361, t.hagujarati = 2745, t.hagurmukhi = 2617, t.haharabic = 1581, t.hahfinalarabic = 65186, t.hahinitialarabic = 65187, t.hahiragana = 12399, t.hahmedialarabic = 65188, t.haitusquare = 13098, t.hakatakana = 12495, t.hakatakanahalfwidth = 65418, t.halantgurmukhi = 2637, t.hamzaarabic = 1569, t.hamzalowarabic = 1569, t.hangulfiller = 12644, t.hardsigncyrillic = 1098, t.harpoonleftbarbup = 8636, t.harpoonrightbarbup = 8640, t.hasquare = 13258, t.hatafpatah = 1458, t.hatafpatah16 = 1458, t.hatafpatah23 = 1458, t.hatafpatah2f = 1458, t.hatafpatahhebrew = 1458, t.hatafpatahnarrowhebrew = 1458, t.hatafpatahquarterhebrew = 1458, t.hatafpatahwidehebrew = 1458, t.hatafqamats = 1459, t.hatafqamats1b = 1459, t.hatafqamats28 = 1459, t.hatafqamats34 = 1459, t.hatafqamatshebrew = 1459, t.hatafqamatsnarrowhebrew = 1459, t.hatafqamatsquarterhebrew = 1459, t.hatafqamatswidehebrew = 1459, t.hatafsegol = 1457, t.hatafsegol17 = 1457, t.hatafsegol24 = 1457, t.hatafsegol30 = 1457, t.hatafsegolhebrew = 1457, t.hatafsegolnarrowhebrew = 1457, t.hatafsegolquarterhebrew = 1457, t.hatafsegolwidehebrew = 1457, t.hbar = 295, t.hbopomofo = 12559, t.hbrevebelow = 7723, t.hcedilla = 7721, t.hcircle = 9431, t.hcircumflex = 293, t.hdieresis = 7719, t.hdotaccent = 7715, t.hdotbelow = 7717, t.he = 1492, t.heart = 9829, t.heartsuitblack = 9829, t.heartsuitwhite = 9825, t.hedagesh = 64308, t.hedageshhebrew = 64308, t.hehaltonearabic = 1729, t.heharabic = 1607, t.hehebrew = 1492, t.hehfinalaltonearabic = 64423, t.hehfinalalttwoarabic = 65258, t.hehfinalarabic = 65258, t.hehhamzaabovefinalarabic = 64421, t.hehhamzaaboveisolatedarabic = 64420, t.hehinitialaltonearabic = 64424, t.hehinitialarabic = 65259, t.hehiragana = 12408, t.hehmedialaltonearabic = 64425, t.hehmedialarabic = 65260, t.heiseierasquare = 13179, t.hekatakana = 12504, t.hekatakanahalfwidth = 65421, t.hekutaarusquare = 13110, t.henghook = 615, t.herutusquare = 13113, t.het = 1495, t.hethebrew = 1495, t.hhook = 614, t.hhooksuperior = 689, t.hieuhacirclekorean = 12923, t.hieuhaparenkorean = 12827, t.hieuhcirclekorean = 12909, t.hieuhkorean = 12622, t.hieuhparenkorean = 12813, t.hihiragana = 12402, t.hikatakana = 12498, t.hikatakanahalfwidth = 65419, t.hiriq = 1460, t.hiriq14 = 1460, t.hiriq21 = 1460, t.hiriq2d = 1460, t.hiriqhebrew = 1460, t.hiriqnarrowhebrew = 1460, t.hiriqquarterhebrew = 1460, t.hiriqwidehebrew = 1460, t.hlinebelow = 7830, t.hmonospace = 65352, t.hoarmenian = 1392, t.hohipthai = 3627, t.hohiragana = 12411, t.hokatakana = 12507, t.hokatakanahalfwidth = 65422, t.holam = 1465, t.holam19 = 1465, t.holam26 = 1465, t.holam32 = 1465, t.holamhebrew = 1465, t.holamnarrowhebrew = 1465, t.holamquarterhebrew = 1465, t.holamwidehebrew = 1465, t.honokhukthai = 3630, t.hookabovecomb = 777, t.hookcmb = 777, t.hookpalatalizedbelowcmb = 801, t.hookretroflexbelowcmb = 802, t.hoonsquare = 13122, t.horicoptic = 1001, t.horizontalbar = 8213, t.horncmb = 795, t.hotsprings = 9832, t.house = 8962, t.hparen = 9379, t.hsuperior = 688, t.hturned = 613, t.huhiragana = 12405, t.huiitosquare = 13107, t.hukatakana = 12501, t.hukatakanahalfwidth = 65420, t.hungarumlaut = 733, t.hungarumlautcmb = 779, t.hv = 405, t.hyphen = 45, t.hypheninferior = 63205, t.hyphenmonospace = 65293, t.hyphensmall = 65123, t.hyphensuperior = 63206, t.hyphentwo = 8208, t.i = 105, t.iacute = 237, t.iacyrillic = 1103, t.ibengali = 2439, t.ibopomofo = 12583, t.ibreve = 301, t.icaron = 464, t.icircle = 9432, t.icircumflex = 238, t.icyrillic = 1110, t.idblgrave = 521, t.ideographearthcircle = 12943, t.ideographfirecircle = 12939, t.ideographicallianceparen = 12863, t.ideographiccallparen = 12858, t.ideographiccentrecircle = 12965, t.ideographicclose = 12294, t.ideographiccomma = 12289, t.ideographiccommaleft = 65380, t.ideographiccongratulationparen = 12855, t.ideographiccorrectcircle = 12963, t.ideographicearthparen = 12847, t.ideographicenterpriseparen = 12861, t.ideographicexcellentcircle = 12957, t.ideographicfestivalparen = 12864, t.ideographicfinancialcircle = 12950, t.ideographicfinancialparen = 12854, t.ideographicfireparen = 12843, t.ideographichaveparen = 12850, t.ideographichighcircle = 12964, t.ideographiciterationmark = 12293, t.ideographiclaborcircle = 12952, t.ideographiclaborparen = 12856, t.ideographicleftcircle = 12967, t.ideographiclowcircle = 12966, t.ideographicmedicinecircle = 12969, t.ideographicmetalparen = 12846, t.ideographicmoonparen = 12842, t.ideographicnameparen = 12852, t.ideographicperiod = 12290, t.ideographicprintcircle = 12958, t.ideographicreachparen = 12867, t.ideographicrepresentparen = 12857, t.ideographicresourceparen = 12862, t.ideographicrightcircle = 12968, t.ideographicsecretcircle = 12953, t.ideographicselfparen = 12866, t.ideographicsocietyparen = 12851, t.ideographicspace = 12288, t.ideographicspecialparen = 12853, t.ideographicstockparen = 12849, t.ideographicstudyparen = 12859, t.ideographicsunparen = 12848, t.ideographicsuperviseparen = 12860, t.ideographicwaterparen = 12844, t.ideographicwoodparen = 12845, t.ideographiczero = 12295, t.ideographmetalcircle = 12942, t.ideographmooncircle = 12938, t.ideographnamecircle = 12948, t.ideographsuncircle = 12944, t.ideographwatercircle = 12940, t.ideographwoodcircle = 12941, t.ideva = 2311, t.idieresis = 239, t.idieresisacute = 7727, t.idieresiscyrillic = 1253, t.idotbelow = 7883, t.iebrevecyrillic = 1239, t.iecyrillic = 1077, t.ieungacirclekorean = 12917, t.ieungaparenkorean = 12821, t.ieungcirclekorean = 12903, t.ieungkorean = 12615, t.ieungparenkorean = 12807, t.igrave = 236, t.igujarati = 2695, t.igurmukhi = 2567, t.ihiragana = 12356, t.ihookabove = 7881, t.iibengali = 2440, t.iicyrillic = 1080, t.iideva = 2312, t.iigujarati = 2696, t.iigurmukhi = 2568, t.iimatragurmukhi = 2624, t.iinvertedbreve = 523, t.iishortcyrillic = 1081, t.iivowelsignbengali = 2496, t.iivowelsigndeva = 2368, t.iivowelsigngujarati = 2752, t.ij = 307, t.ikatakana = 12452, t.ikatakanahalfwidth = 65394, t.ikorean = 12643, t.ilde = 732, t.iluyhebrew = 1452, t.imacron = 299, t.imacroncyrillic = 1251, t.imageorapproximatelyequal = 8787, t.imatragurmukhi = 2623, t.imonospace = 65353, t.increment = 8710, t.infinity = 8734, t.iniarmenian = 1387, t.integral = 8747, t.integralbottom = 8993, t.integralbt = 8993, t.integralex = 63733, t.integraltop = 8992, t.integraltp = 8992, t.intersection = 8745, t.intisquare = 13061, t.invbullet = 9688, t.invcircle = 9689, t.invsmileface = 9787, t.iocyrillic = 1105, t.iogonek = 303, t.iota = 953, t.iotadieresis = 970, t.iotadieresistonos = 912, t.iotalatin = 617, t.iotatonos = 943, t.iparen = 9380, t.irigurmukhi = 2674, t.ismallhiragana = 12355, t.ismallkatakana = 12451, t.ismallkatakanahalfwidth = 65384, t.issharbengali = 2554, t.istroke = 616, t.isuperior = 63213, t.iterationhiragana = 12445, t.iterationkatakana = 12541, t.itilde = 297, t.itildebelow = 7725, t.iubopomofo = 12585, t.iucyrillic = 1102, t.ivowelsignbengali = 2495, t.ivowelsigndeva = 2367, t.ivowelsigngujarati = 2751, t.izhitsacyrillic = 1141, t.izhitsadblgravecyrillic = 1143, t.j = 106, t.jaarmenian = 1393, t.jabengali = 2460, t.jadeva = 2332, t.jagujarati = 2716, t.jagurmukhi = 2588, t.jbopomofo = 12560, t.jcaron = 496, t.jcircle = 9433, t.jcircumflex = 309, t.jcrossedtail = 669, t.jdotlessstroke = 607, t.jecyrillic = 1112, t.jeemarabic = 1580, t.jeemfinalarabic = 65182, t.jeeminitialarabic = 65183, t.jeemmedialarabic = 65184, t.jeharabic = 1688, t.jehfinalarabic = 64395, t.jhabengali = 2461, t.jhadeva = 2333, t.jhagujarati = 2717, t.jhagurmukhi = 2589, t.jheharmenian = 1403, t.jis = 12292, t.jmonospace = 65354, t.jparen = 9381, t.jsuperior = 690, t.k = 107, t.kabashkircyrillic = 1185, t.kabengali = 2453, t.kacute = 7729, t.kacyrillic = 1082, t.kadescendercyrillic = 1179, t.kadeva = 2325, t.kaf = 1499, t.kafarabic = 1603, t.kafdagesh = 64315, t.kafdageshhebrew = 64315, t.kaffinalarabic = 65242, t.kafhebrew = 1499, t.kafinitialarabic = 65243, t.kafmedialarabic = 65244, t.kafrafehebrew = 64333, t.kagujarati = 2709, t.kagurmukhi = 2581, t.kahiragana = 12363, t.kahookcyrillic = 1220, t.kakatakana = 12459, t.kakatakanahalfwidth = 65398, t.kappa = 954, t.kappasymbolgreek = 1008, t.kapyeounmieumkorean = 12657, t.kapyeounphieuphkorean = 12676, t.kapyeounpieupkorean = 12664, t.kapyeounssangpieupkorean = 12665, t.karoriisquare = 13069, t.kashidaautoarabic = 1600, t.kashidaautonosidebearingarabic = 1600, t.kasmallkatakana = 12533, t.kasquare = 13188, t.kasraarabic = 1616, t.kasratanarabic = 1613, t.kastrokecyrillic = 1183, t.katahiraprolongmarkhalfwidth = 65392, t.kaverticalstrokecyrillic = 1181, t.kbopomofo = 12558, t.kcalsquare = 13193, t.kcaron = 489, t.kcedilla = 311, t.kcircle = 9434, t.kcommaaccent = 311, t.kdotbelow = 7731, t.keharmenian = 1412, t.kehiragana = 12369, t.kekatakana = 12465, t.kekatakanahalfwidth = 65401, t.kenarmenian = 1391, t.kesmallkatakana = 12534, t.kgreenlandic = 312, t.khabengali = 2454, t.khacyrillic = 1093, t.khadeva = 2326, t.khagujarati = 2710, t.khagurmukhi = 2582, t.khaharabic = 1582, t.khahfinalarabic = 65190, t.khahinitialarabic = 65191, t.khahmedialarabic = 65192, t.kheicoptic = 999, t.khhadeva = 2393, t.khhagurmukhi = 2649, t.khieukhacirclekorean = 12920, t.khieukhaparenkorean = 12824, t.khieukhcirclekorean = 12906, t.khieukhkorean = 12619, t.khieukhparenkorean = 12810, t.khokhaithai = 3586, t.khokhonthai = 3589, t.khokhuatthai = 3587, t.khokhwaithai = 3588, t.khomutthai = 3675, t.khook = 409, t.khorakhangthai = 3590, t.khzsquare = 13201, t.kihiragana = 12365, t.kikatakana = 12461, t.kikatakanahalfwidth = 65399, t.kiroguramusquare = 13077, t.kiromeetorusquare = 13078, t.kirosquare = 13076, t.kiyeokacirclekorean = 12910, t.kiyeokaparenkorean = 12814, t.kiyeokcirclekorean = 12896, t.kiyeokkorean = 12593, t.kiyeokparenkorean = 12800, t.kiyeoksioskorean = 12595, t.kjecyrillic = 1116, t.klinebelow = 7733, t.klsquare = 13208, t.kmcubedsquare = 13222, t.kmonospace = 65355, t.kmsquaredsquare = 13218, t.kohiragana = 12371, t.kohmsquare = 13248, t.kokaithai = 3585, t.kokatakana = 12467, t.kokatakanahalfwidth = 65402, t.kooposquare = 13086, t.koppacyrillic = 1153, t.koreanstandardsymbol = 12927, t.koroniscmb = 835, t.kparen = 9382, t.kpasquare = 13226, t.ksicyrillic = 1135, t.ktsquare = 13263, t.kturned = 670, t.kuhiragana = 12367, t.kukatakana = 12463, t.kukatakanahalfwidth = 65400, t.kvsquare = 13240, t.kwsquare = 13246, t.l = 108, t.labengali = 2482, t.lacute = 314, t.ladeva = 2354, t.lagujarati = 2738, t.lagurmukhi = 2610, t.lakkhangyaothai = 3653, t.lamaleffinalarabic = 65276, t.lamalefhamzaabovefinalarabic = 65272, t.lamalefhamzaaboveisolatedarabic = 65271, t.lamalefhamzabelowfinalarabic = 65274, t.lamalefhamzabelowisolatedarabic = 65273, t.lamalefisolatedarabic = 65275, t.lamalefmaddaabovefinalarabic = 65270, t.lamalefmaddaaboveisolatedarabic = 65269, t.lamarabic = 1604, t.lambda = 955, t.lambdastroke = 411, t.lamed = 1500, t.lameddagesh = 64316, t.lameddageshhebrew = 64316, t.lamedhebrew = 1500, t.lamfinalarabic = 65246, t.lamhahinitialarabic = 64714, t.laminitialarabic = 65247, t.lamjeeminitialarabic = 64713, t.lamkhahinitialarabic = 64715, t.lamlamhehisolatedarabic = 65010, t.lammedialarabic = 65248, t.lammeemhahinitialarabic = 64904, t.lammeeminitialarabic = 64716, t.largecircle = 9711, t.lbar = 410, t.lbelt = 620, t.lbopomofo = 12556, t.lcaron = 318, t.lcedilla = 316, t.lcircle = 9435, t.lcircumflexbelow = 7741, t.lcommaaccent = 316, t.ldot = 320, t.ldotaccent = 320, t.ldotbelow = 7735, t.ldotbelowmacron = 7737, t.leftangleabovecmb = 794, t.lefttackbelowcmb = 792, t.less = 60, t.lessequal = 8804, t.lessequalorgreater = 8922, t.lessmonospace = 65308, t.lessorequivalent = 8818, t.lessorgreater = 8822, t.lessoverequal = 8806, t.lesssmall = 65124, t.lezh = 622, t.lfblock = 9612, t.lhookretroflex = 621, t.lira = 8356, t.liwnarmenian = 1388, t.lj = 457, t.ljecyrillic = 1113, t.ll = 63168, t.lladeva = 2355, t.llagujarati = 2739, t.llinebelow = 7739, t.llladeva = 2356, t.llvocalicbengali = 2529, t.llvocalicdeva = 2401, t.llvocalicvowelsignbengali = 2531, t.llvocalicvowelsigndeva = 2403, t.lmiddletilde = 619, t.lmonospace = 65356, t.lmsquare = 13264, t.lochulathai = 3628, t.logicaland = 8743, t.logicalnot = 172, t.logicalnotreversed = 8976, t.logicalor = 8744, t.lolingthai = 3621, t.longs = 383, t.lowlinecenterline = 65102, t.lowlinecmb = 818, t.lowlinedashed = 65101, t.lozenge = 9674, t.lparen = 9383, t.lslash = 322, t.lsquare = 8467, t.lsuperior = 63214, t.ltshade = 9617, t.luthai = 3622, t.lvocalicbengali = 2444, t.lvocalicdeva = 2316, t.lvocalicvowelsignbengali = 2530, t.lvocalicvowelsigndeva = 2402, t.lxsquare = 13267, t.m = 109, t.mabengali = 2478, t.macron = 175, t.macronbelowcmb = 817, t.macroncmb = 772, t.macronlowmod = 717, t.macronmonospace = 65507, t.macute = 7743, t.madeva = 2350, t.magujarati = 2734, t.magurmukhi = 2606, t.mahapakhhebrew = 1444, t.mahapakhlefthebrew = 1444, t.mahiragana = 12414, t.maichattawalowleftthai = 63637, t.maichattawalowrightthai = 63636, t.maichattawathai = 3659, t.maichattawaupperleftthai = 63635, t.maieklowleftthai = 63628, t.maieklowrightthai = 63627, t.maiekthai = 3656, t.maiekupperleftthai = 63626, t.maihanakatleftthai = 63620, t.maihanakatthai = 3633, t.maitaikhuleftthai = 63625, t.maitaikhuthai = 3655, t.maitholowleftthai = 63631, t.maitholowrightthai = 63630, t.maithothai = 3657, t.maithoupperleftthai = 63629, t.maitrilowleftthai = 63634, t.maitrilowrightthai = 63633, t.maitrithai = 3658, t.maitriupperleftthai = 63632, t.maiyamokthai = 3654, t.makatakana = 12510, t.makatakanahalfwidth = 65423, t.male = 9794, t.mansyonsquare = 13127, t.maqafhebrew = 1470, t.mars = 9794, t.masoracirclehebrew = 1455, t.masquare = 13187, t.mbopomofo = 12551, t.mbsquare = 13268, t.mcircle = 9436, t.mcubedsquare = 13221, t.mdotaccent = 7745, t.mdotbelow = 7747, t.meemarabic = 1605, t.meemfinalarabic = 65250, t.meeminitialarabic = 65251, t.meemmedialarabic = 65252, t.meemmeeminitialarabic = 64721, t.meemmeemisolatedarabic = 64584, t.meetorusquare = 13133, t.mehiragana = 12417, t.meizierasquare = 13182, t.mekatakana = 12513, t.mekatakanahalfwidth = 65426, t.mem = 1502, t.memdagesh = 64318, t.memdageshhebrew = 64318, t.memhebrew = 1502, t.menarmenian = 1396, t.merkhahebrew = 1445, t.merkhakefulahebrew = 1446, t.merkhakefulalefthebrew = 1446, t.merkhalefthebrew = 1445, t.mhook = 625, t.mhzsquare = 13202, t.middledotkatakanahalfwidth = 65381, t.middot = 183, t.mieumacirclekorean = 12914, t.mieumaparenkorean = 12818, t.mieumcirclekorean = 12900, t.mieumkorean = 12609, t.mieumpansioskorean = 12656, t.mieumparenkorean = 12804, t.mieumpieupkorean = 12654, t.mieumsioskorean = 12655, t.mihiragana = 12415, t.mikatakana = 12511, t.mikatakanahalfwidth = 65424, t.minus = 8722, t.minusbelowcmb = 800, t.minuscircle = 8854, t.minusmod = 727, t.minusplus = 8723, t.minute = 8242, t.miribaarusquare = 13130, t.mirisquare = 13129, t.mlonglegturned = 624, t.mlsquare = 13206, t.mmcubedsquare = 13219, t.mmonospace = 65357, t.mmsquaredsquare = 13215, t.mohiragana = 12418, t.mohmsquare = 13249, t.mokatakana = 12514, t.mokatakanahalfwidth = 65427, t.molsquare = 13270, t.momathai = 3617, t.moverssquare = 13223, t.moverssquaredsquare = 13224, t.mparen = 9384, t.mpasquare = 13227, t.mssquare = 13235, t.msuperior = 63215, t.mturned = 623, t.mu = 181, t.mu1 = 181, t.muasquare = 13186, t.muchgreater = 8811, t.muchless = 8810, t.mufsquare = 13196, t.mugreek = 956, t.mugsquare = 13197, t.muhiragana = 12416, t.mukatakana = 12512, t.mukatakanahalfwidth = 65425, t.mulsquare = 13205, t.multiply = 215, t.mumsquare = 13211, t.munahhebrew = 1443, t.munahlefthebrew = 1443, t.musicalnote = 9834, t.musicalnotedbl = 9835, t.musicflatsign = 9837, t.musicsharpsign = 9839, t.mussquare = 13234, t.muvsquare = 13238, t.muwsquare = 13244, t.mvmegasquare = 13241, t.mvsquare = 13239, t.mwmegasquare = 13247, t.mwsquare = 13245, t.n = 110, t.nabengali = 2472, t.nabla = 8711, t.nacute = 324, t.nadeva = 2344, t.nagujarati = 2728, t.nagurmukhi = 2600, t.nahiragana = 12394, t.nakatakana = 12490, t.nakatakanahalfwidth = 65413, t.napostrophe = 329, t.nasquare = 13185, t.nbopomofo = 12555, t.nbspace = 160, t.ncaron = 328, t.ncedilla = 326, t.ncircle = 9437, t.ncircumflexbelow = 7755, t.ncommaaccent = 326, t.ndotaccent = 7749, t.ndotbelow = 7751, t.nehiragana = 12397, t.nekatakana = 12493, t.nekatakanahalfwidth = 65416, t.newsheqelsign = 8362, t.nfsquare = 13195, t.ngabengali = 2457, t.ngadeva = 2329, t.ngagujarati = 2713, t.ngagurmukhi = 2585, t.ngonguthai = 3591, t.nhiragana = 12435, t.nhookleft = 626, t.nhookretroflex = 627, t.nieunacirclekorean = 12911, t.nieunaparenkorean = 12815, t.nieuncieuckorean = 12597, t.nieuncirclekorean = 12897, t.nieunhieuhkorean = 12598, t.nieunkorean = 12596, t.nieunpansioskorean = 12648, t.nieunparenkorean = 12801, t.nieunsioskorean = 12647, t.nieuntikeutkorean = 12646, t.nihiragana = 12395, t.nikatakana = 12491, t.nikatakanahalfwidth = 65414, t.nikhahitleftthai = 63641, t.nikhahitthai = 3661, t.nine = 57, t.ninearabic = 1641, t.ninebengali = 2543, t.ninecircle = 9320, t.ninecircleinversesansserif = 10130, t.ninedeva = 2415, t.ninegujarati = 2799, t.ninegurmukhi = 2671, t.ninehackarabic = 1641, t.ninehangzhou = 12329, t.nineideographicparen = 12840, t.nineinferior = 8329, t.ninemonospace = 65305, t.nineoldstyle = 63289, t.nineparen = 9340, t.nineperiod = 9360, t.ninepersian = 1785, t.nineroman = 8568, t.ninesuperior = 8313, t.nineteencircle = 9330, t.nineteenparen = 9350, t.nineteenperiod = 9370, t.ninethai = 3673, t.nj = 460, t.njecyrillic = 1114, t.nkatakana = 12531, t.nkatakanahalfwidth = 65437, t.nlegrightlong = 414, t.nlinebelow = 7753, t.nmonospace = 65358, t.nmsquare = 13210, t.nnabengali = 2467, t.nnadeva = 2339, t.nnagujarati = 2723, t.nnagurmukhi = 2595, t.nnnadeva = 2345, t.nohiragana = 12398, t.nokatakana = 12494, t.nokatakanahalfwidth = 65417, t.nonbreakingspace = 160, t.nonenthai = 3603, t.nonuthai = 3609, t.noonarabic = 1606, t.noonfinalarabic = 65254, t.noonghunnaarabic = 1722, t.noonghunnafinalarabic = 64415, t.nooninitialarabic = 65255, t.noonjeeminitialarabic = 64722, t.noonjeemisolatedarabic = 64587, t.noonmedialarabic = 65256, t.noonmeeminitialarabic = 64725, t.noonmeemisolatedarabic = 64590, t.noonnoonfinalarabic = 64653, t.notcontains = 8716, t.notelement = 8713, t.notelementof = 8713, t.notequal = 8800, t.notgreater = 8815, t.notgreaternorequal = 8817, t.notgreaternorless = 8825, t.notidentical = 8802, t.notless = 8814, t.notlessnorequal = 8816, t.notparallel = 8742, t.notprecedes = 8832, t.notsubset = 8836, t.notsucceeds = 8833, t.notsuperset = 8837, t.nowarmenian = 1398, t.nparen = 9385, t.nssquare = 13233, t.nsuperior = 8319, t.ntilde = 241, t.nu = 957, t.nuhiragana = 12396, t.nukatakana = 12492, t.nukatakanahalfwidth = 65415, t.nuktabengali = 2492, t.nuktadeva = 2364, t.nuktagujarati = 2748, t.nuktagurmukhi = 2620, t.numbersign = 35, t.numbersignmonospace = 65283, t.numbersignsmall = 65119, t.numeralsigngreek = 884, t.numeralsignlowergreek = 885, t.numero = 8470, t.nun = 1504, t.nundagesh = 64320, t.nundageshhebrew = 64320, t.nunhebrew = 1504, t.nvsquare = 13237, t.nwsquare = 13243, t.nyabengali = 2462, t.nyadeva = 2334, t.nyagujarati = 2718, t.nyagurmukhi = 2590, t.o = 111, t.oacute = 243, t.oangthai = 3629, t.obarred = 629, t.obarredcyrillic = 1257, t.obarreddieresiscyrillic = 1259, t.obengali = 2451, t.obopomofo = 12571, t.obreve = 335, t.ocandradeva = 2321, t.ocandragujarati = 2705, t.ocandravowelsigndeva = 2377, t.ocandravowelsigngujarati = 2761, t.ocaron = 466, t.ocircle = 9438, t.ocircumflex = 244, t.ocircumflexacute = 7889, t.ocircumflexdotbelow = 7897, t.ocircumflexgrave = 7891, t.ocircumflexhookabove = 7893, t.ocircumflextilde = 7895, t.ocyrillic = 1086, t.odblacute = 337, t.odblgrave = 525, t.odeva = 2323, t.odieresis = 246, t.odieresiscyrillic = 1255, t.odotbelow = 7885, t.oe = 339, t.oekorean = 12634, t.ogonek = 731, t.ogonekcmb = 808, t.ograve = 242, t.ogujarati = 2707, t.oharmenian = 1413, t.ohiragana = 12362, t.ohookabove = 7887, t.ohorn = 417, t.ohornacute = 7899, t.ohorndotbelow = 7907, t.ohorngrave = 7901, t.ohornhookabove = 7903, t.ohorntilde = 7905, t.ohungarumlaut = 337, t.oi = 419, t.oinvertedbreve = 527, t.okatakana = 12458, t.okatakanahalfwidth = 65397, t.okorean = 12631, t.olehebrew = 1451, t.omacron = 333, t.omacronacute = 7763, t.omacrongrave = 7761, t.omdeva = 2384, t.omega = 969, t.omega1 = 982, t.omegacyrillic = 1121, t.omegalatinclosed = 631, t.omegaroundcyrillic = 1147, t.omegatitlocyrillic = 1149, t.omegatonos = 974, t.omgujarati = 2768, t.omicron = 959, t.omicrontonos = 972, t.omonospace = 65359, t.one = 49, t.onearabic = 1633, t.onebengali = 2535, t.onecircle = 9312, t.onecircleinversesansserif = 10122, t.onedeva = 2407, t.onedotenleader = 8228, t.oneeighth = 8539, t.onefitted = 63196, t.onegujarati = 2791, t.onegurmukhi = 2663, t.onehackarabic = 1633, t.onehalf = 189, t.onehangzhou = 12321, t.oneideographicparen = 12832, t.oneinferior = 8321, t.onemonospace = 65297, t.onenumeratorbengali = 2548, t.oneoldstyle = 63281, t.oneparen = 9332, t.oneperiod = 9352, t.onepersian = 1777, t.onequarter = 188, t.oneroman = 8560, t.onesuperior = 185, t.onethai = 3665, t.onethird = 8531, t.oogonek = 491, t.oogonekmacron = 493, t.oogurmukhi = 2579, t.oomatragurmukhi = 2635, t.oopen = 596, t.oparen = 9386, t.openbullet = 9702, t.option = 8997, t.ordfeminine = 170, t.ordmasculine = 186, t.orthogonal = 8735, t.oshortdeva = 2322, t.oshortvowelsigndeva = 2378, t.oslash = 248, t.oslashacute = 511, t.osmallhiragana = 12361, t.osmallkatakana = 12457, t.osmallkatakanahalfwidth = 65387, t.ostrokeacute = 511, t.osuperior = 63216, t.otcyrillic = 1151, t.otilde = 245, t.otildeacute = 7757, t.otildedieresis = 7759, t.oubopomofo = 12577, t.overline = 8254, t.overlinecenterline = 65098, t.overlinecmb = 773, t.overlinedashed = 65097, t.overlinedblwavy = 65100, t.overlinewavy = 65099, t.overscore = 175, t.ovowelsignbengali = 2507, t.ovowelsigndeva = 2379, t.ovowelsigngujarati = 2763, t.p = 112, t.paampssquare = 13184, t.paasentosquare = 13099, t.pabengali = 2474, t.pacute = 7765, t.padeva = 2346, t.pagedown = 8671, t.pageup = 8670, t.pagujarati = 2730, t.pagurmukhi = 2602, t.pahiragana = 12401, t.paiyannoithai = 3631, t.pakatakana = 12497, t.palatalizationcyrilliccmb = 1156, t.palochkacyrillic = 1216, t.pansioskorean = 12671, t.paragraph = 182, t.parallel = 8741, t.parenleft = 40, t.parenleftaltonearabic = 64830, t.parenleftbt = 63725, t.parenleftex = 63724, t.parenleftinferior = 8333, t.parenleftmonospace = 65288, t.parenleftsmall = 65113, t.parenleftsuperior = 8317, t.parenlefttp = 63723, t.parenleftvertical = 65077, t.parenright = 41, t.parenrightaltonearabic = 64831, t.parenrightbt = 63736, t.parenrightex = 63735, t.parenrightinferior = 8334, t.parenrightmonospace = 65289, t.parenrightsmall = 65114, t.parenrightsuperior = 8318, t.parenrighttp = 63734, t.parenrightvertical = 65078, t.partialdiff = 8706, t.paseqhebrew = 1472, t.pashtahebrew = 1433, t.pasquare = 13225, t.patah = 1463, t.patah11 = 1463, t.patah1d = 1463, t.patah2a = 1463, t.patahhebrew = 1463, t.patahnarrowhebrew = 1463, t.patahquarterhebrew = 1463, t.patahwidehebrew = 1463, t.pazerhebrew = 1441, t.pbopomofo = 12550, t.pcircle = 9439, t.pdotaccent = 7767, t.pe = 1508, t.pecyrillic = 1087, t.pedagesh = 64324, t.pedageshhebrew = 64324, t.peezisquare = 13115, t.pefinaldageshhebrew = 64323, t.peharabic = 1662, t.peharmenian = 1402, t.pehebrew = 1508, t.pehfinalarabic = 64343, t.pehinitialarabic = 64344, t.pehiragana = 12410, t.pehmedialarabic = 64345, t.pekatakana = 12506, t.pemiddlehookcyrillic = 1191, t.perafehebrew = 64334, t.percent = 37, t.percentarabic = 1642, t.percentmonospace = 65285, t.percentsmall = 65130, t.period = 46, t.periodarmenian = 1417, t.periodcentered = 183, t.periodhalfwidth = 65377, t.periodinferior = 63207, t.periodmonospace = 65294, t.periodsmall = 65106, t.periodsuperior = 63208, t.perispomenigreekcmb = 834, t.perpendicular = 8869, t.perthousand = 8240, t.peseta = 8359, t.pfsquare = 13194, t.phabengali = 2475, t.phadeva = 2347, t.phagujarati = 2731, t.phagurmukhi = 2603, t.phi = 966, t.phi1 = 981, t.phieuphacirclekorean = 12922, t.phieuphaparenkorean = 12826, t.phieuphcirclekorean = 12908, t.phieuphkorean = 12621, t.phieuphparenkorean = 12812, t.philatin = 632, t.phinthuthai = 3642, t.phisymbolgreek = 981, t.phook = 421, t.phophanthai = 3614, t.phophungthai = 3612, t.phosamphaothai = 3616, t.pi = 960, t.pieupacirclekorean = 12915, t.pieupaparenkorean = 12819, t.pieupcieuckorean = 12662, t.pieupcirclekorean = 12901, t.pieupkiyeokkorean = 12658, t.pieupkorean = 12610, t.pieupparenkorean = 12805, t.pieupsioskiyeokkorean = 12660, t.pieupsioskorean = 12612, t.pieupsiostikeutkorean = 12661, t.pieupthieuthkorean = 12663, t.pieuptikeutkorean = 12659, t.pihiragana = 12404, t.pikatakana = 12500, t.pisymbolgreek = 982, t.piwrarmenian = 1411, t.planckover2pi = 8463, t.planckover2pi1 = 8463, t.plus = 43, t.plusbelowcmb = 799, t.pluscircle = 8853, t.plusminus = 177, t.plusmod = 726, t.plusmonospace = 65291, t.plussmall = 65122, t.plussuperior = 8314, t.pmonospace = 65360, t.pmsquare = 13272, t.pohiragana = 12413, t.pointingindexdownwhite = 9759, t.pointingindexleftwhite = 9756, t.pointingindexrightwhite = 9758, t.pointingindexupwhite = 9757, t.pokatakana = 12509, t.poplathai = 3611, t.postalmark = 12306, t.postalmarkface = 12320, t.pparen = 9387, t.precedes = 8826, t.prescription = 8478, t.primemod = 697, t.primereversed = 8245, t.product = 8719, t.projective = 8965, t.prolongedkana = 12540, t.propellor = 8984, t.propersubset = 8834, t.propersuperset = 8835, t.proportion = 8759, t.proportional = 8733, t.psi = 968, t.psicyrillic = 1137, t.psilipneumatacyrilliccmb = 1158, t.pssquare = 13232, t.puhiragana = 12407, t.pukatakana = 12503, t.pvsquare = 13236, t.pwsquare = 13242, t.q = 113, t.qadeva = 2392, t.qadmahebrew = 1448, t.qafarabic = 1602, t.qaffinalarabic = 65238, t.qafinitialarabic = 65239, t.qafmedialarabic = 65240, t.qamats = 1464, t.qamats10 = 1464, t.qamats1a = 1464, t.qamats1c = 1464, t.qamats27 = 1464, t.qamats29 = 1464, t.qamats33 = 1464, t.qamatsde = 1464, t.qamatshebrew = 1464, t.qamatsnarrowhebrew = 1464, t.qamatsqatanhebrew = 1464, t.qamatsqatannarrowhebrew = 1464, t.qamatsqatanquarterhebrew = 1464, t.qamatsqatanwidehebrew = 1464, t.qamatsquarterhebrew = 1464, t.qamatswidehebrew = 1464, t.qarneyparahebrew = 1439, t.qbopomofo = 12561, t.qcircle = 9440, t.qhook = 672, t.qmonospace = 65361, t.qof = 1511, t.qofdagesh = 64327, t.qofdageshhebrew = 64327, t.qofhebrew = 1511, t.qparen = 9388, t.quarternote = 9833, t.qubuts = 1467, t.qubuts18 = 1467, t.qubuts25 = 1467, t.qubuts31 = 1467, t.qubutshebrew = 1467, t.qubutsnarrowhebrew = 1467, t.qubutsquarterhebrew = 1467, t.qubutswidehebrew = 1467, t.question = 63, t.questionarabic = 1567, t.questionarmenian = 1374, t.questiondown = 191, t.questiondownsmall = 63423, t.questiongreek = 894, t.questionmonospace = 65311, t.questionsmall = 63295, t.quotedbl = 34, t.quotedblbase = 8222, t.quotedblleft = 8220, t.quotedblmonospace = 65282, t.quotedblprime = 12318, t.quotedblprimereversed = 12317, t.quotedblright = 8221, t.quoteleft = 8216, t.quoteleftreversed = 8219, t.quotereversed = 8219, t.quoteright = 8217, t.quoterightn = 329, t.quotesinglbase = 8218, t.quotesingle = 39, t.quotesinglemonospace = 65287, t.r = 114, t.raarmenian = 1404, t.rabengali = 2480, t.racute = 341, t.radeva = 2352, t.radical = 8730, t.radicalex = 63717, t.radoverssquare = 13230, t.radoverssquaredsquare = 13231, t.radsquare = 13229, t.rafe = 1471, t.rafehebrew = 1471, t.ragujarati = 2736, t.ragurmukhi = 2608, t.rahiragana = 12425, t.rakatakana = 12521, t.rakatakanahalfwidth = 65431, t.ralowerdiagonalbengali = 2545, t.ramiddlediagonalbengali = 2544, t.ramshorn = 612, t.ratio = 8758, t.rbopomofo = 12566, t.rcaron = 345, t.rcedilla = 343, t.rcircle = 9441, t.rcommaaccent = 343, t.rdblgrave = 529, t.rdotaccent = 7769, t.rdotbelow = 7771, t.rdotbelowmacron = 7773, t.referencemark = 8251, t.reflexsubset = 8838, t.reflexsuperset = 8839, t.registered = 174, t.registersans = 63720, t.registerserif = 63194, t.reharabic = 1585, t.reharmenian = 1408, t.rehfinalarabic = 65198, t.rehiragana = 12428, t.rekatakana = 12524, t.rekatakanahalfwidth = 65434, t.resh = 1512, t.reshdageshhebrew = 64328, t.reshhebrew = 1512, t.reversedtilde = 8765, t.reviahebrew = 1431, t.reviamugrashhebrew = 1431, t.revlogicalnot = 8976, t.rfishhook = 638, t.rfishhookreversed = 639, t.rhabengali = 2525, t.rhadeva = 2397, t.rho = 961, t.rhook = 637, t.rhookturned = 635, t.rhookturnedsuperior = 693, t.rhosymbolgreek = 1009, t.rhotichookmod = 734, t.rieulacirclekorean = 12913, t.rieulaparenkorean = 12817, t.rieulcirclekorean = 12899, t.rieulhieuhkorean = 12608, t.rieulkiyeokkorean = 12602, t.rieulkiyeoksioskorean = 12649, t.rieulkorean = 12601, t.rieulmieumkorean = 12603, t.rieulpansioskorean = 12652, t.rieulparenkorean = 12803, t.rieulphieuphkorean = 12607, t.rieulpieupkorean = 12604, t.rieulpieupsioskorean = 12651, t.rieulsioskorean = 12605, t.rieulthieuthkorean = 12606, t.rieultikeutkorean = 12650, t.rieulyeorinhieuhkorean = 12653, t.rightangle = 8735, t.righttackbelowcmb = 793, t.righttriangle = 8895, t.rihiragana = 12426, t.rikatakana = 12522, t.rikatakanahalfwidth = 65432, t.ring = 730, t.ringbelowcmb = 805, t.ringcmb = 778, t.ringhalfleft = 703, t.ringhalfleftarmenian = 1369, t.ringhalfleftbelowcmb = 796, t.ringhalfleftcentered = 723, t.ringhalfright = 702, t.ringhalfrightbelowcmb = 825, t.ringhalfrightcentered = 722, t.rinvertedbreve = 531, t.rittorusquare = 13137, t.rlinebelow = 7775, t.rlongleg = 636, t.rlonglegturned = 634, t.rmonospace = 65362, t.rohiragana = 12429, t.rokatakana = 12525, t.rokatakanahalfwidth = 65435, t.roruathai = 3619, t.rparen = 9389, t.rrabengali = 2524, t.rradeva = 2353, t.rragurmukhi = 2652, t.rreharabic = 1681, t.rrehfinalarabic = 64397, t.rrvocalicbengali = 2528, t.rrvocalicdeva = 2400, t.rrvocalicgujarati = 2784, t.rrvocalicvowelsignbengali = 2500, t.rrvocalicvowelsigndeva = 2372, t.rrvocalicvowelsigngujarati = 2756, t.rsuperior = 63217, t.rtblock = 9616, t.rturned = 633, t.rturnedsuperior = 692, t.ruhiragana = 12427, t.rukatakana = 12523, t.rukatakanahalfwidth = 65433, t.rupeemarkbengali = 2546, t.rupeesignbengali = 2547, t.rupiah = 63197, t.ruthai = 3620, t.rvocalicbengali = 2443, t.rvocalicdeva = 2315, t.rvocalicgujarati = 2699, t.rvocalicvowelsignbengali = 2499, t.rvocalicvowelsigndeva = 2371, t.rvocalicvowelsigngujarati = 2755, t.s = 115, t.sabengali = 2488, t.sacute = 347, t.sacutedotaccent = 7781, t.sadarabic = 1589, t.sadeva = 2360, t.sadfinalarabic = 65210, t.sadinitialarabic = 65211, t.sadmedialarabic = 65212, t.sagujarati = 2744, t.sagurmukhi = 2616, t.sahiragana = 12373, t.sakatakana = 12469, t.sakatakanahalfwidth = 65403, t.sallallahoualayhewasallamarabic = 65018, t.samekh = 1505, t.samekhdagesh = 64321, t.samekhdageshhebrew = 64321, t.samekhhebrew = 1505, t.saraaathai = 3634, t.saraaethai = 3649, t.saraaimaimalaithai = 3652, t.saraaimaimuanthai = 3651, t.saraamthai = 3635, t.saraathai = 3632, t.saraethai = 3648, t.saraiileftthai = 63622, t.saraiithai = 3637, t.saraileftthai = 63621, t.saraithai = 3636, t.saraothai = 3650, t.saraueeleftthai = 63624, t.saraueethai = 3639, t.saraueleftthai = 63623, t.sarauethai = 3638, t.sarauthai = 3640, t.sarauuthai = 3641, t.sbopomofo = 12569, t.scaron = 353, t.scarondotaccent = 7783, t.scedilla = 351, t.schwa = 601, t.schwacyrillic = 1241, t.schwadieresiscyrillic = 1243, t.schwahook = 602, t.scircle = 9442, t.scircumflex = 349, t.scommaaccent = 537, t.sdotaccent = 7777, t.sdotbelow = 7779, t.sdotbelowdotaccent = 7785, t.seagullbelowcmb = 828, t.second = 8243, t.secondtonechinese = 714, t.section = 167, t.seenarabic = 1587, t.seenfinalarabic = 65202, t.seeninitialarabic = 65203, t.seenmedialarabic = 65204, t.segol = 1462, t.segol13 = 1462, t.segol1f = 1462, t.segol2c = 1462, t.segolhebrew = 1462, t.segolnarrowhebrew = 1462, t.segolquarterhebrew = 1462, t.segoltahebrew = 1426, t.segolwidehebrew = 1462, t.seharmenian = 1405, t.sehiragana = 12379, t.sekatakana = 12475, t.sekatakanahalfwidth = 65406, t.semicolon = 59, t.semicolonarabic = 1563, t.semicolonmonospace = 65307, t.semicolonsmall = 65108, t.semivoicedmarkkana = 12444, t.semivoicedmarkkanahalfwidth = 65439, t.sentisquare = 13090, t.sentosquare = 13091, t.seven = 55, t.sevenarabic = 1639, t.sevenbengali = 2541, t.sevencircle = 9318, t.sevencircleinversesansserif = 10128, t.sevendeva = 2413, t.seveneighths = 8542, t.sevengujarati = 2797, t.sevengurmukhi = 2669, t.sevenhackarabic = 1639, t.sevenhangzhou = 12327, t.sevenideographicparen = 12838, t.seveninferior = 8327, t.sevenmonospace = 65303, t.sevenoldstyle = 63287, t.sevenparen = 9338, t.sevenperiod = 9358, t.sevenpersian = 1783, t.sevenroman = 8566, t.sevensuperior = 8311, t.seventeencircle = 9328, t.seventeenparen = 9348, t.seventeenperiod = 9368, t.seventhai = 3671, t.sfthyphen = 173, t.shaarmenian = 1399, t.shabengali = 2486, t.shacyrillic = 1096, t.shaddaarabic = 1617, t.shaddadammaarabic = 64609, t.shaddadammatanarabic = 64606, t.shaddafathaarabic = 64608, t.shaddakasraarabic = 64610, t.shaddakasratanarabic = 64607, t.shade = 9618, t.shadedark = 9619, t.shadelight = 9617, t.shademedium = 9618, t.shadeva = 2358, t.shagujarati = 2742, t.shagurmukhi = 2614, t.shalshelethebrew = 1427, t.shbopomofo = 12565, t.shchacyrillic = 1097, t.sheenarabic = 1588, t.sheenfinalarabic = 65206, t.sheeninitialarabic = 65207, t.sheenmedialarabic = 65208, t.sheicoptic = 995, t.sheqel = 8362, t.sheqelhebrew = 8362, t.sheva = 1456, t.sheva115 = 1456, t.sheva15 = 1456, t.sheva22 = 1456, t.sheva2e = 1456, t.shevahebrew = 1456, t.shevanarrowhebrew = 1456, t.shevaquarterhebrew = 1456, t.shevawidehebrew = 1456, t.shhacyrillic = 1211, t.shimacoptic = 1005, t.shin = 1513, t.shindagesh = 64329, t.shindageshhebrew = 64329, t.shindageshshindot = 64300, t.shindageshshindothebrew = 64300, t.shindageshsindot = 64301, t.shindageshsindothebrew = 64301, t.shindothebrew = 1473, t.shinhebrew = 1513, t.shinshindot = 64298, t.shinshindothebrew = 64298, t.shinsindot = 64299, t.shinsindothebrew = 64299, t.shook = 642, t.sigma = 963, t.sigma1 = 962, t.sigmafinal = 962, t.sigmalunatesymbolgreek = 1010, t.sihiragana = 12375, t.sikatakana = 12471, t.sikatakanahalfwidth = 65404, t.siluqhebrew = 1469, t.siluqlefthebrew = 1469, t.similar = 8764, t.sindothebrew = 1474, t.siosacirclekorean = 12916, t.siosaparenkorean = 12820, t.sioscieuckorean = 12670, t.sioscirclekorean = 12902, t.sioskiyeokkorean = 12666, t.sioskorean = 12613, t.siosnieunkorean = 12667, t.siosparenkorean = 12806, t.siospieupkorean = 12669, t.siostikeutkorean = 12668, t.six = 54, t.sixarabic = 1638, t.sixbengali = 2540, t.sixcircle = 9317, t.sixcircleinversesansserif = 10127, t.sixdeva = 2412, t.sixgujarati = 2796, t.sixgurmukhi = 2668, t.sixhackarabic = 1638, t.sixhangzhou = 12326, t.sixideographicparen = 12837, t.sixinferior = 8326, t.sixmonospace = 65302, t.sixoldstyle = 63286, t.sixparen = 9337, t.sixperiod = 9357, t.sixpersian = 1782, t.sixroman = 8565, t.sixsuperior = 8310, t.sixteencircle = 9327, t.sixteencurrencydenominatorbengali = 2553, t.sixteenparen = 9347, t.sixteenperiod = 9367, t.sixthai = 3670, t.slash = 47, t.slashmonospace = 65295, t.slong = 383, t.slongdotaccent = 7835, t.smileface = 9786, t.smonospace = 65363, t.sofpasuqhebrew = 1475, t.softhyphen = 173, t.softsigncyrillic = 1100, t.sohiragana = 12381, t.sokatakana = 12477, t.sokatakanahalfwidth = 65407, t.soliduslongoverlaycmb = 824, t.solidusshortoverlaycmb = 823, t.sorusithai = 3625, t.sosalathai = 3624, t.sosothai = 3595, t.sosuathai = 3626, t.space = 32, t.spacehackarabic = 32, t.spade = 9824, t.spadesuitblack = 9824, t.spadesuitwhite = 9828, t.sparen = 9390, t.squarebelowcmb = 827, t.squarecc = 13252, t.squarecm = 13213, t.squarediagonalcrosshatchfill = 9641, t.squarehorizontalfill = 9636, t.squarekg = 13199, t.squarekm = 13214, t.squarekmcapital = 13262, t.squareln = 13265, t.squarelog = 13266, t.squaremg = 13198, t.squaremil = 13269, t.squaremm = 13212, t.squaremsquared = 13217, t.squareorthogonalcrosshatchfill = 9638, t.squareupperlefttolowerrightfill = 9639, t.squareupperrighttolowerleftfill = 9640, t.squareverticalfill = 9637, t.squarewhitewithsmallblack = 9635, t.srsquare = 13275, t.ssabengali = 2487, t.ssadeva = 2359, t.ssagujarati = 2743, t.ssangcieuckorean = 12617, t.ssanghieuhkorean = 12677, t.ssangieungkorean = 12672, t.ssangkiyeokkorean = 12594, t.ssangnieunkorean = 12645, t.ssangpieupkorean = 12611, t.ssangsioskorean = 12614, t.ssangtikeutkorean = 12600, t.ssuperior = 63218, t.sterling = 163, t.sterlingmonospace = 65505, t.strokelongoverlaycmb = 822, t.strokeshortoverlaycmb = 821, t.subset = 8834, t.subsetnotequal = 8842, t.subsetorequal = 8838, t.succeeds = 8827, t.suchthat = 8715, t.suhiragana = 12377, t.sukatakana = 12473, t.sukatakanahalfwidth = 65405, t.sukunarabic = 1618, t.summation = 8721, t.sun = 9788, t.superset = 8835, t.supersetnotequal = 8843, t.supersetorequal = 8839, t.svsquare = 13276, t.syouwaerasquare = 13180, t.t = 116, t.tabengali = 2468, t.tackdown = 8868, t.tackleft = 8867, t.tadeva = 2340, t.tagujarati = 2724, t.tagurmukhi = 2596, t.taharabic = 1591, t.tahfinalarabic = 65218, t.tahinitialarabic = 65219, t.tahiragana = 12383, t.tahmedialarabic = 65220, t.taisyouerasquare = 13181, t.takatakana = 12479, t.takatakanahalfwidth = 65408, t.tatweelarabic = 1600, t.tau = 964, t.tav = 1514, t.tavdages = 64330, t.tavdagesh = 64330, t.tavdageshhebrew = 64330, t.tavhebrew = 1514, t.tbar = 359, t.tbopomofo = 12554, t.tcaron = 357, t.tccurl = 680, t.tcedilla = 355, t.tcheharabic = 1670, t.tchehfinalarabic = 64379, t.tchehinitialarabic = 64380, t.tchehmedialarabic = 64381, t.tcircle = 9443, t.tcircumflexbelow = 7793, t.tcommaaccent = 355, t.tdieresis = 7831, t.tdotaccent = 7787, t.tdotbelow = 7789, t.tecyrillic = 1090, t.tedescendercyrillic = 1197, t.teharabic = 1578, t.tehfinalarabic = 65174, t.tehhahinitialarabic = 64674, t.tehhahisolatedarabic = 64524, t.tehinitialarabic = 65175, t.tehiragana = 12390, t.tehjeeminitialarabic = 64673, t.tehjeemisolatedarabic = 64523, t.tehmarbutaarabic = 1577, t.tehmarbutafinalarabic = 65172, t.tehmedialarabic = 65176, t.tehmeeminitialarabic = 64676, t.tehmeemisolatedarabic = 64526, t.tehnoonfinalarabic = 64627, t.tekatakana = 12486, t.tekatakanahalfwidth = 65411, t.telephone = 8481, t.telephoneblack = 9742, t.telishagedolahebrew = 1440, t.telishaqetanahebrew = 1449, t.tencircle = 9321, t.tenideographicparen = 12841, t.tenparen = 9341, t.tenperiod = 9361, t.tenroman = 8569, t.tesh = 679, t.tet = 1496, t.tetdagesh = 64312, t.tetdageshhebrew = 64312, t.tethebrew = 1496, t.tetsecyrillic = 1205, t.tevirhebrew = 1435, t.tevirlefthebrew = 1435, t.thabengali = 2469, t.thadeva = 2341, t.thagujarati = 2725, t.thagurmukhi = 2597, t.thalarabic = 1584, t.thalfinalarabic = 65196, t.thanthakhatlowleftthai = 63640, t.thanthakhatlowrightthai = 63639, t.thanthakhatthai = 3660, t.thanthakhatupperleftthai = 63638, t.theharabic = 1579, t.thehfinalarabic = 65178, t.thehinitialarabic = 65179, t.thehmedialarabic = 65180, t.thereexists = 8707, t.therefore = 8756, t.theta = 952, t.theta1 = 977, t.thetasymbolgreek = 977, t.thieuthacirclekorean = 12921, t.thieuthaparenkorean = 12825, t.thieuthcirclekorean = 12907, t.thieuthkorean = 12620, t.thieuthparenkorean = 12811, t.thirteencircle = 9324, t.thirteenparen = 9344, t.thirteenperiod = 9364, t.thonangmonthothai = 3601, t.thook = 429, t.thophuthaothai = 3602, t.thorn = 254, t.thothahanthai = 3607, t.thothanthai = 3600, t.thothongthai = 3608, t.thothungthai = 3606, t.thousandcyrillic = 1154, t.thousandsseparatorarabic = 1644, t.thousandsseparatorpersian = 1644, t.three = 51, t.threearabic = 1635, t.threebengali = 2537, t.threecircle = 9314, t.threecircleinversesansserif = 10124, t.threedeva = 2409, t.threeeighths = 8540, t.threegujarati = 2793, t.threegurmukhi = 2665, t.threehackarabic = 1635, t.threehangzhou = 12323, t.threeideographicparen = 12834, t.threeinferior = 8323, t.threemonospace = 65299, t.threenumeratorbengali = 2550, t.threeoldstyle = 63283, t.threeparen = 9334, t.threeperiod = 9354, t.threepersian = 1779, t.threequarters = 190, t.threequartersemdash = 63198, t.threeroman = 8562, t.threesuperior = 179, t.threethai = 3667, t.thzsquare = 13204, t.tihiragana = 12385, t.tikatakana = 12481, t.tikatakanahalfwidth = 65409, t.tikeutacirclekorean = 12912, t.tikeutaparenkorean = 12816, t.tikeutcirclekorean = 12898, t.tikeutkorean = 12599, t.tikeutparenkorean = 12802, t.tilde = 732, t.tildebelowcmb = 816, t.tildecmb = 771, t.tildecomb = 771, t.tildedoublecmb = 864, t.tildeoperator = 8764, t.tildeoverlaycmb = 820, t.tildeverticalcmb = 830, t.timescircle = 8855, t.tipehahebrew = 1430, t.tipehalefthebrew = 1430, t.tippigurmukhi = 2672, t.titlocyrilliccmb = 1155, t.tiwnarmenian = 1407, t.tlinebelow = 7791, t.tmonospace = 65364, t.toarmenian = 1385, t.tohiragana = 12392, t.tokatakana = 12488, t.tokatakanahalfwidth = 65412, t.tonebarextrahighmod = 741, t.tonebarextralowmod = 745, t.tonebarhighmod = 742, t.tonebarlowmod = 744, t.tonebarmidmod = 743, t.tonefive = 445, t.tonesix = 389, t.tonetwo = 424, t.tonos = 900, t.tonsquare = 13095, t.topatakthai = 3599, t.tortoiseshellbracketleft = 12308, t.tortoiseshellbracketleftsmall = 65117, t.tortoiseshellbracketleftvertical = 65081, t.tortoiseshellbracketright = 12309, t.tortoiseshellbracketrightsmall = 65118, t.tortoiseshellbracketrightvertical = 65082, t.totaothai = 3605, t.tpalatalhook = 427, t.tparen = 9391, t.trademark = 8482, t.trademarksans = 63722, t.trademarkserif = 63195, t.tretroflexhook = 648, t.triagdn = 9660, t.triaglf = 9668, t.triagrt = 9658, t.triagup = 9650, t.ts = 678, t.tsadi = 1510, t.tsadidagesh = 64326, t.tsadidageshhebrew = 64326, t.tsadihebrew = 1510, t.tsecyrillic = 1094, t.tsere = 1461, t.tsere12 = 1461, t.tsere1e = 1461, t.tsere2b = 1461, t.tserehebrew = 1461, t.tserenarrowhebrew = 1461, t.tserequarterhebrew = 1461, t.tserewidehebrew = 1461, t.tshecyrillic = 1115, t.tsuperior = 63219, t.ttabengali = 2463, t.ttadeva = 2335, t.ttagujarati = 2719, t.ttagurmukhi = 2591, t.tteharabic = 1657, t.ttehfinalarabic = 64359, t.ttehinitialarabic = 64360, t.ttehmedialarabic = 64361, t.tthabengali = 2464, t.tthadeva = 2336, t.tthagujarati = 2720, t.tthagurmukhi = 2592, t.tturned = 647, t.tuhiragana = 12388, t.tukatakana = 12484, t.tukatakanahalfwidth = 65410, t.tusmallhiragana = 12387, t.tusmallkatakana = 12483, t.tusmallkatakanahalfwidth = 65391, t.twelvecircle = 9323, t.twelveparen = 9343, t.twelveperiod = 9363, t.twelveroman = 8571, t.twentycircle = 9331, t.twentyhangzhou = 21316, t.twentyparen = 9351, t.twentyperiod = 9371, t.two = 50, t.twoarabic = 1634, t.twobengali = 2536, t.twocircle = 9313, t.twocircleinversesansserif = 10123, t.twodeva = 2408, t.twodotenleader = 8229, t.twodotleader = 8229, t.twodotleadervertical = 65072, t.twogujarati = 2792, t.twogurmukhi = 2664, t.twohackarabic = 1634, t.twohangzhou = 12322, t.twoideographicparen = 12833, t.twoinferior = 8322, t.twomonospace = 65298, t.twonumeratorbengali = 2549, t.twooldstyle = 63282, t.twoparen = 9333, t.twoperiod = 9353, t.twopersian = 1778, t.tworoman = 8561, t.twostroke = 443, t.twosuperior = 178, t.twothai = 3666, t.twothirds = 8532, t.u = 117, t.uacute = 250, t.ubar = 649, t.ubengali = 2441, t.ubopomofo = 12584, t.ubreve = 365, t.ucaron = 468, t.ucircle = 9444, t.ucircumflex = 251, t.ucircumflexbelow = 7799, t.ucyrillic = 1091, t.udattadeva = 2385, t.udblacute = 369, t.udblgrave = 533, t.udeva = 2313, t.udieresis = 252, t.udieresisacute = 472, t.udieresisbelow = 7795, t.udieresiscaron = 474, t.udieresiscyrillic = 1265, t.udieresisgrave = 476, t.udieresismacron = 470, t.udotbelow = 7909, t.ugrave = 249, t.ugujarati = 2697, t.ugurmukhi = 2569, t.uhiragana = 12358, t.uhookabove = 7911, t.uhorn = 432, t.uhornacute = 7913, t.uhorndotbelow = 7921, t.uhorngrave = 7915, t.uhornhookabove = 7917, t.uhorntilde = 7919, t.uhungarumlaut = 369, t.uhungarumlautcyrillic = 1267, t.uinvertedbreve = 535, t.ukatakana = 12454, t.ukatakanahalfwidth = 65395, t.ukcyrillic = 1145, t.ukorean = 12636, t.umacron = 363, t.umacroncyrillic = 1263, t.umacrondieresis = 7803, t.umatragurmukhi = 2625, t.umonospace = 65365, t.underscore = 95, t.underscoredbl = 8215, t.underscoremonospace = 65343, t.underscorevertical = 65075, t.underscorewavy = 65103, t.union = 8746, t.universal = 8704, t.uogonek = 371, t.uparen = 9392, t.upblock = 9600, t.upperdothebrew = 1476, t.upsilon = 965, t.upsilondieresis = 971, t.upsilondieresistonos = 944, t.upsilonlatin = 650, t.upsilontonos = 973, t.uptackbelowcmb = 797, t.uptackmod = 724, t.uragurmukhi = 2675, t.uring = 367, t.ushortcyrillic = 1118, t.usmallhiragana = 12357, t.usmallkatakana = 12453, t.usmallkatakanahalfwidth = 65385, t.ustraightcyrillic = 1199, t.ustraightstrokecyrillic = 1201, t.utilde = 361, t.utildeacute = 7801, t.utildebelow = 7797, t.uubengali = 2442, t.uudeva = 2314, t.uugujarati = 2698, t.uugurmukhi = 2570, t.uumatragurmukhi = 2626, t.uuvowelsignbengali = 2498, t.uuvowelsigndeva = 2370, t.uuvowelsigngujarati = 2754, t.uvowelsignbengali = 2497, t.uvowelsigndeva = 2369, t.uvowelsigngujarati = 2753, t.v = 118, t.vadeva = 2357, t.vagujarati = 2741, t.vagurmukhi = 2613, t.vakatakana = 12535, t.vav = 1493, t.vavdagesh = 64309, t.vavdagesh65 = 64309, t.vavdageshhebrew = 64309, t.vavhebrew = 1493, t.vavholam = 64331, t.vavholamhebrew = 64331, t.vavvavhebrew = 1520, t.vavyodhebrew = 1521, t.vcircle = 9445, t.vdotbelow = 7807, t.vecyrillic = 1074, t.veharabic = 1700, t.vehfinalarabic = 64363, t.vehinitialarabic = 64364, t.vehmedialarabic = 64365, t.vekatakana = 12537, t.venus = 9792, t.verticalbar = 124, t.verticallineabovecmb = 781, t.verticallinebelowcmb = 809, t.verticallinelowmod = 716, t.verticallinemod = 712, t.vewarmenian = 1406, t.vhook = 651, t.vikatakana = 12536, t.viramabengali = 2509, t.viramadeva = 2381, t.viramagujarati = 2765, t.visargabengali = 2435, t.visargadeva = 2307, t.visargagujarati = 2691, t.vmonospace = 65366, t.voarmenian = 1400, t.voicediterationhiragana = 12446, t.voicediterationkatakana = 12542, t.voicedmarkkana = 12443, t.voicedmarkkanahalfwidth = 65438, t.vokatakana = 12538, t.vparen = 9393, t.vtilde = 7805, t.vturned = 652, t.vuhiragana = 12436, t.vukatakana = 12532, t.w = 119, t.wacute = 7811, t.waekorean = 12633, t.wahiragana = 12431, t.wakatakana = 12527, t.wakatakanahalfwidth = 65436, t.wakorean = 12632, t.wasmallhiragana = 12430, t.wasmallkatakana = 12526, t.wattosquare = 13143, t.wavedash = 12316, t.wavyunderscorevertical = 65076, t.wawarabic = 1608, t.wawfinalarabic = 65262, t.wawhamzaabovearabic = 1572, t.wawhamzaabovefinalarabic = 65158, t.wbsquare = 13277, t.wcircle = 9446, t.wcircumflex = 373, t.wdieresis = 7813, t.wdotaccent = 7815, t.wdotbelow = 7817, t.wehiragana = 12433, t.weierstrass = 8472, t.wekatakana = 12529, t.wekorean = 12638, t.weokorean = 12637, t.wgrave = 7809, t.whitebullet = 9702, t.whitecircle = 9675, t.whitecircleinverse = 9689, t.whitecornerbracketleft = 12302, t.whitecornerbracketleftvertical = 65091, t.whitecornerbracketright = 12303, t.whitecornerbracketrightvertical = 65092, t.whitediamond = 9671, t.whitediamondcontainingblacksmalldiamond = 9672, t.whitedownpointingsmalltriangle = 9663, t.whitedownpointingtriangle = 9661, t.whiteleftpointingsmalltriangle = 9667, t.whiteleftpointingtriangle = 9665, t.whitelenticularbracketleft = 12310, t.whitelenticularbracketright = 12311, t.whiterightpointingsmalltriangle = 9657, t.whiterightpointingtriangle = 9655, t.whitesmallsquare = 9643, t.whitesmilingface = 9786, t.whitesquare = 9633, t.whitestar = 9734, t.whitetelephone = 9743, t.whitetortoiseshellbracketleft = 12312, t.whitetortoiseshellbracketright = 12313, t.whiteuppointingsmalltriangle = 9653, t.whiteuppointingtriangle = 9651, t.wihiragana = 12432, t.wikatakana = 12528, t.wikorean = 12639, t.wmonospace = 65367, t.wohiragana = 12434, t.wokatakana = 12530, t.wokatakanahalfwidth = 65382, t.won = 8361, t.wonmonospace = 65510, t.wowaenthai = 3623, t.wparen = 9394, t.wring = 7832, t.wsuperior = 695, t.wturned = 653, t.wynn = 447, t.x = 120, t.xabovecmb = 829, t.xbopomofo = 12562, t.xcircle = 9447, t.xdieresis = 7821, t.xdotaccent = 7819, t.xeharmenian = 1389, t.xi = 958, t.xmonospace = 65368, t.xparen = 9395, t.xsuperior = 739, t.y = 121, t.yaadosquare = 13134, t.yabengali = 2479, t.yacute = 253, t.yadeva = 2351, t.yaekorean = 12626, t.yagujarati = 2735, t.yagurmukhi = 2607, t.yahiragana = 12420, t.yakatakana = 12516, t.yakatakanahalfwidth = 65428, t.yakorean = 12625, t.yamakkanthai = 3662, t.yasmallhiragana = 12419, t.yasmallkatakana = 12515, t.yasmallkatakanahalfwidth = 65388, t.yatcyrillic = 1123, t.ycircle = 9448, t.ycircumflex = 375, t.ydieresis = 255, t.ydotaccent = 7823, t.ydotbelow = 7925, t.yeharabic = 1610, t.yehbarreearabic = 1746, t.yehbarreefinalarabic = 64431, t.yehfinalarabic = 65266, t.yehhamzaabovearabic = 1574, t.yehhamzaabovefinalarabic = 65162, t.yehhamzaaboveinitialarabic = 65163, t.yehhamzaabovemedialarabic = 65164, t.yehinitialarabic = 65267, t.yehmedialarabic = 65268, t.yehmeeminitialarabic = 64733, t.yehmeemisolatedarabic = 64600, t.yehnoonfinalarabic = 64660, t.yehthreedotsbelowarabic = 1745, t.yekorean = 12630, t.yen = 165, t.yenmonospace = 65509, t.yeokorean = 12629, t.yeorinhieuhkorean = 12678, t.yerahbenyomohebrew = 1450, t.yerahbenyomolefthebrew = 1450, t.yericyrillic = 1099, t.yerudieresiscyrillic = 1273, t.yesieungkorean = 12673, t.yesieungpansioskorean = 12675, t.yesieungsioskorean = 12674, t.yetivhebrew = 1434, t.ygrave = 7923, t.yhook = 436, t.yhookabove = 7927, t.yiarmenian = 1397, t.yicyrillic = 1111, t.yikorean = 12642, t.yinyang = 9775, t.yiwnarmenian = 1410, t.ymonospace = 65369, t.yod = 1497, t.yoddagesh = 64313, t.yoddageshhebrew = 64313, t.yodhebrew = 1497, t.yodyodhebrew = 1522, t.yodyodpatahhebrew = 64287, t.yohiragana = 12424, t.yoikorean = 12681, t.yokatakana = 12520, t.yokatakanahalfwidth = 65430, t.yokorean = 12635, t.yosmallhiragana = 12423, t.yosmallkatakana = 12519, t.yosmallkatakanahalfwidth = 65390, t.yotgreek = 1011, t.yoyaekorean = 12680, t.yoyakorean = 12679, t.yoyakthai = 3618, t.yoyingthai = 3597, t.yparen = 9396, t.ypogegrammeni = 890, t.ypogegrammenigreekcmb = 837, t.yr = 422, t.yring = 7833, t.ysuperior = 696, t.ytilde = 7929, t.yturned = 654, t.yuhiragana = 12422, t.yuikorean = 12684, t.yukatakana = 12518, t.yukatakanahalfwidth = 65429, t.yukorean = 12640, t.yusbigcyrillic = 1131, t.yusbigiotifiedcyrillic = 1133, t.yuslittlecyrillic = 1127, t.yuslittleiotifiedcyrillic = 1129, t.yusmallhiragana = 12421, t.yusmallkatakana = 12517, t.yusmallkatakanahalfwidth = 65389, t.yuyekorean = 12683, t.yuyeokorean = 12682, t.yyabengali = 2527, t.yyadeva = 2399, t.z = 122, t.zaarmenian = 1382, t.zacute = 378, t.zadeva = 2395, t.zagurmukhi = 2651, t.zaharabic = 1592, t.zahfinalarabic = 65222, t.zahinitialarabic = 65223, t.zahiragana = 12374, t.zahmedialarabic = 65224, t.zainarabic = 1586, t.zainfinalarabic = 65200, t.zakatakana = 12470, t.zaqefgadolhebrew = 1429, t.zaqefqatanhebrew = 1428, t.zarqahebrew = 1432, t.zayin = 1494, t.zayindagesh = 64310, t.zayindageshhebrew = 64310, t.zayinhebrew = 1494, t.zbopomofo = 12567, t.zcaron = 382, t.zcircle = 9449, t.zcircumflex = 7825, t.zcurl = 657, t.zdot = 380, t.zdotaccent = 380, t.zdotbelow = 7827, t.zecyrillic = 1079, t.zedescendercyrillic = 1177, t.zedieresiscyrillic = 1247, t.zehiragana = 12380, t.zekatakana = 12476, t.zero = 48, t.zeroarabic = 1632, t.zerobengali = 2534, t.zerodeva = 2406, t.zerogujarati = 2790, t.zerogurmukhi = 2662, t.zerohackarabic = 1632, t.zeroinferior = 8320, t.zeromonospace = 65296, t.zerooldstyle = 63280, t.zeropersian = 1776, t.zerosuperior = 8304, t.zerothai = 3664, t.zerowidthjoiner = 65279, t.zerowidthnonjoiner = 8204, t.zerowidthspace = 8203, t.zeta = 950, t.zhbopomofo = 12563, t.zhearmenian = 1386, t.zhebrevecyrillic = 1218, t.zhecyrillic = 1078, t.zhedescendercyrillic = 1175, t.zhedieresiscyrillic = 1245, t.zihiragana = 12376, t.zikatakana = 12472, t.zinorhebrew = 1454, t.zlinebelow = 7829, t.zmonospace = 65370, t.zohiragana = 12382, t.zokatakana = 12478, t.zparen = 9397, t.zretroflexhook = 656, t.zstroke = 438, t.zuhiragana = 12378, t.zukatakana = 12474, t[".notdef"] = 0, t.angbracketleftbig = 9001, t.angbracketleftBig = 9001, t.angbracketleftbigg = 9001, t.angbracketleftBigg = 9001, t.angbracketrightBig = 9002, t.angbracketrightbig = 9002, t.angbracketrightBigg = 9002, t.angbracketrightbigg = 9002, t.arrowhookleft = 8618, t.arrowhookright = 8617, t.arrowlefttophalf = 8636, t.arrowleftbothalf = 8637, t.arrownortheast = 8599, t.arrownorthwest = 8598, t.arrowrighttophalf = 8640, t.arrowrightbothalf = 8641, t.arrowsoutheast = 8600, t.arrowsouthwest = 8601, t.backslashbig = 8726, t.backslashBig = 8726, t.backslashBigg = 8726, t.backslashbigg = 8726, t.bardbl = 8214, t.bracehtipdownleft = 65079, t.bracehtipdownright = 65079, t.bracehtipupleft = 65080, t.bracehtipupright = 65080, t.braceleftBig = 123, t.braceleftbig = 123, t.braceleftbigg = 123, t.braceleftBigg = 123, t.bracerightBig = 125, t.bracerightbig = 125, t.bracerightbigg = 125, t.bracerightBigg = 125, t.bracketleftbig = 91, t.bracketleftBig = 91, t.bracketleftbigg = 91, t.bracketleftBigg = 91, t.bracketrightBig = 93, t.bracketrightbig = 93, t.bracketrightbigg = 93, t.bracketrightBigg = 93, t.ceilingleftbig = 8968, t.ceilingleftBig = 8968, t.ceilingleftBigg = 8968, t.ceilingleftbigg = 8968, t.ceilingrightbig = 8969, t.ceilingrightBig = 8969, t.ceilingrightbigg = 8969, t.ceilingrightBigg = 8969, t.circledotdisplay = 8857, t.circledottext = 8857, t.circlemultiplydisplay = 8855, t.circlemultiplytext = 8855, t.circleplusdisplay = 8853, t.circleplustext = 8853, t.contintegraldisplay = 8750, t.contintegraltext = 8750, t.coproductdisplay = 8720, t.coproducttext = 8720, t.floorleftBig = 8970, t.floorleftbig = 8970, t.floorleftbigg = 8970, t.floorleftBigg = 8970, t.floorrightbig = 8971, t.floorrightBig = 8971, t.floorrightBigg = 8971, t.floorrightbigg = 8971, t.hatwide = 770, t.hatwider = 770, t.hatwidest = 770, t.intercal = 7488, t.integraldisplay = 8747, t.integraltext = 8747, t.intersectiondisplay = 8898, t.intersectiontext = 8898, t.logicalanddisplay = 8743, t.logicalandtext = 8743, t.logicalordisplay = 8744, t.logicalortext = 8744, t.parenleftBig = 40, t.parenleftbig = 40, t.parenleftBigg = 40, t.parenleftbigg = 40, t.parenrightBig = 41, t.parenrightbig = 41, t.parenrightBigg = 41, t.parenrightbigg = 41, t.prime = 8242, t.productdisplay = 8719, t.producttext = 8719, t.radicalbig = 8730, t.radicalBig = 8730, t.radicalBigg = 8730, t.radicalbigg = 8730, t.radicalbt = 8730, t.radicaltp = 8730, t.radicalvertex = 8730, t.slashbig = 47, t.slashBig = 47, t.slashBigg = 47, t.slashbigg = 47, t.summationdisplay = 8721, t.summationtext = 8721, t.tildewide = 732, t.tildewider = 732, t.tildewidest = 732, t.uniondisplay = 8899, t.unionmultidisplay = 8846, t.unionmultitext = 8846, t.unionsqdisplay = 8852, t.unionsqtext = 8852, t.uniontext = 8899, t.vextenddouble = 8741, t.vextendsingle = 8739;
}), O9 = wt(function(t) {
  t.space = 32, t.a1 = 9985, t.a2 = 9986, t.a202 = 9987, t.a3 = 9988, t.a4 = 9742, t.a5 = 9990, t.a119 = 9991, t.a118 = 9992, t.a117 = 9993, t.a11 = 9755, t.a12 = 9758, t.a13 = 9996, t.a14 = 9997, t.a15 = 9998, t.a16 = 9999, t.a105 = 1e4, t.a17 = 10001, t.a18 = 10002, t.a19 = 10003, t.a20 = 10004, t.a21 = 10005, t.a22 = 10006, t.a23 = 10007, t.a24 = 10008, t.a25 = 10009, t.a26 = 10010, t.a27 = 10011, t.a28 = 10012, t.a6 = 10013, t.a7 = 10014, t.a8 = 10015, t.a9 = 10016, t.a10 = 10017, t.a29 = 10018, t.a30 = 10019, t.a31 = 10020, t.a32 = 10021, t.a33 = 10022, t.a34 = 10023, t.a35 = 9733, t.a36 = 10025, t.a37 = 10026, t.a38 = 10027, t.a39 = 10028, t.a40 = 10029, t.a41 = 10030, t.a42 = 10031, t.a43 = 10032, t.a44 = 10033, t.a45 = 10034, t.a46 = 10035, t.a47 = 10036, t.a48 = 10037, t.a49 = 10038, t.a50 = 10039, t.a51 = 10040, t.a52 = 10041, t.a53 = 10042, t.a54 = 10043, t.a55 = 10044, t.a56 = 10045, t.a57 = 10046, t.a58 = 10047, t.a59 = 10048, t.a60 = 10049, t.a61 = 10050, t.a62 = 10051, t.a63 = 10052, t.a64 = 10053, t.a65 = 10054, t.a66 = 10055, t.a67 = 10056, t.a68 = 10057, t.a69 = 10058, t.a70 = 10059, t.a71 = 9679, t.a72 = 10061, t.a73 = 9632, t.a74 = 10063, t.a203 = 10064, t.a75 = 10065, t.a204 = 10066, t.a76 = 9650, t.a77 = 9660, t.a78 = 9670, t.a79 = 10070, t.a81 = 9687, t.a82 = 10072, t.a83 = 10073, t.a84 = 10074, t.a97 = 10075, t.a98 = 10076, t.a99 = 10077, t.a100 = 10078, t.a101 = 10081, t.a102 = 10082, t.a103 = 10083, t.a104 = 10084, t.a106 = 10085, t.a107 = 10086, t.a108 = 10087, t.a112 = 9827, t.a111 = 9830, t.a110 = 9829, t.a109 = 9824, t.a120 = 9312, t.a121 = 9313, t.a122 = 9314, t.a123 = 9315, t.a124 = 9316, t.a125 = 9317, t.a126 = 9318, t.a127 = 9319, t.a128 = 9320, t.a129 = 9321, t.a130 = 10102, t.a131 = 10103, t.a132 = 10104, t.a133 = 10105, t.a134 = 10106, t.a135 = 10107, t.a136 = 10108, t.a137 = 10109, t.a138 = 10110, t.a139 = 10111, t.a140 = 10112, t.a141 = 10113, t.a142 = 10114, t.a143 = 10115, t.a144 = 10116, t.a145 = 10117, t.a146 = 10118, t.a147 = 10119, t.a148 = 10120, t.a149 = 10121, t.a150 = 10122, t.a151 = 10123, t.a152 = 10124, t.a153 = 10125, t.a154 = 10126, t.a155 = 10127, t.a156 = 10128, t.a157 = 10129, t.a158 = 10130, t.a159 = 10131, t.a160 = 10132, t.a161 = 8594, t.a163 = 8596, t.a164 = 8597, t.a196 = 10136, t.a165 = 10137, t.a192 = 10138, t.a166 = 10139, t.a167 = 10140, t.a168 = 10141, t.a169 = 10142, t.a170 = 10143, t.a171 = 10144, t.a172 = 10145, t.a173 = 10146, t.a162 = 10147, t.a174 = 10148, t.a175 = 10149, t.a176 = 10150, t.a177 = 10151, t.a178 = 10152, t.a179 = 10153, t.a193 = 10154, t.a180 = 10155, t.a199 = 10156, t.a181 = 10157, t.a200 = 10158, t.a182 = 10159, t.a201 = 10161, t.a183 = 10162, t.a184 = 10163, t.a197 = 10164, t.a185 = 10165, t.a194 = 10166, t.a198 = 10167, t.a186 = 10168, t.a195 = 10169, t.a187 = 10170, t.a188 = 10171, t.a189 = 10172, t.a190 = 10173, t.a191 = 10174, t.a89 = 10088, t.a90 = 10089, t.a93 = 10090, t.a94 = 10091, t.a91 = 10092, t.a92 = 10093, t.a205 = 10094, t.a85 = 10095, t.a206 = 10096, t.a86 = 10097, t.a87 = 10098, t.a88 = 10099, t.a95 = 10100, t.a96 = 10101, t[".notdef"] = 0;
}), L9 = wt(function(t) {
  t[63721] = 169, t[63193] = 169, t[63720] = 174, t[63194] = 174, t[63722] = 8482, t[63195] = 8482, t[63729] = 9127, t[63730] = 9128, t[63731] = 9129, t[63740] = 9131, t[63741] = 9132, t[63742] = 9133, t[63726] = 9121, t[63727] = 9122, t[63728] = 9123, t[63737] = 9124, t[63738] = 9125, t[63739] = 9126, t[63723] = 9115, t[63724] = 9116, t[63725] = 9117, t[63734] = 9118, t[63735] = 9119, t[63736] = 9120;
});
function _9(t) {
  return t >= 65520 && t <= 65535 ? 0 : t >= 62976 && t <= 63743 ? L9()[t] || t : t === 173 ? 45 : t;
}
function Ta(t, e) {
  let n = e[t];
  if (n !== void 0)
    return n;
  if (!t)
    return -1;
  if (t[0] === "u") {
    const i = t.length;
    let s;
    if (i === 7 && t[1] === "n" && t[2] === "i")
      s = t.substring(3);
    else if (i >= 5 && i <= 7)
      s = t.substring(1);
    else
      return -1;
    if (s === s.toUpperCase() && (n = parseInt(s, 16), n >= 0))
      return n;
  }
  return -1;
}
const hc = [[0, 127], [128, 255], [256, 383], [384, 591], [592, 687, 7424, 7551, 7552, 7615], [688, 767, 42752, 42783], [768, 879, 7616, 7679], [880, 1023], [11392, 11519], [1024, 1279, 1280, 1327, 11744, 11775, 42560, 42655], [1328, 1423], [1424, 1535], [42240, 42559], [1536, 1791, 1872, 1919], [1984, 2047], [2304, 2431], [2432, 2559], [2560, 2687], [2688, 2815], [2816, 2943], [2944, 3071], [3072, 3199], [3200, 3327], [3328, 3455], [3584, 3711], [3712, 3839], [4256, 4351, 11520, 11567], [6912, 7039], [4352, 4607], [7680, 7935, 11360, 11391, 42784, 43007], [7936, 8191], [8192, 8303, 11776, 11903], [8304, 8351], [8352, 8399], [8400, 8447], [8448, 8527], [8528, 8591], [8592, 8703, 10224, 10239, 10496, 10623, 11008, 11263], [8704, 8959, 10752, 11007, 10176, 10223, 10624, 10751], [8960, 9215], [9216, 9279], [9280, 9311], [9312, 9471], [9472, 9599], [9600, 9631], [9632, 9727], [9728, 9983], [9984, 10175], [12288, 12351], [12352, 12447], [12448, 12543, 12784, 12799], [12544, 12591, 12704, 12735], [12592, 12687], [43072, 43135], [12800, 13055], [13056, 13311], [44032, 55215], [55296, 57343], [67840, 67871], [19968, 40959, 11904, 12031, 12032, 12255, 12272, 12287, 13312, 19903, 131072, 173791, 12688, 12703], [57344, 63743], [12736, 12783, 63744, 64255, 194560, 195103], [64256, 64335], [64336, 65023], [65056, 65071], [65040, 65055], [65104, 65135], [65136, 65279], [65280, 65519], [65520, 65535], [3840, 4095], [1792, 1871], [1920, 1983], [3456, 3583], [4096, 4255], [4608, 4991, 4992, 5023, 11648, 11743], [5024, 5119], [5120, 5759], [5760, 5791], [5792, 5887], [6016, 6143], [6144, 6319], [10240, 10495], [40960, 42127], [5888, 5919, 5920, 5951, 5952, 5983, 5984, 6015], [66304, 66351], [66352, 66383], [66560, 66639], [118784, 119039, 119040, 119295, 119296, 119375], [119808, 120831], [1044480, 1048573], [65024, 65039, 917760, 917999], [917504, 917631], [6400, 6479], [6480, 6527], [6528, 6623], [6656, 6687], [11264, 11359], [11568, 11647], [19904, 19967], [43008, 43055], [65536, 65663, 65664, 65791, 65792, 65855], [65856, 65935], [66432, 66463], [66464, 66527], [66640, 66687], [66688, 66735], [67584, 67647], [68096, 68191], [119552, 119647], [73728, 74751, 74752, 74879], [119648, 119679], [7040, 7103], [7168, 7247], [7248, 7295], [43136, 43231], [43264, 43311], [43312, 43359], [43520, 43615], [65936, 65999], [66e3, 66047], [66208, 66271, 66176, 66207, 67872, 67903], [127024, 127135, 126976, 127023]];
function U9(t, e = -1) {
  if (e !== -1) {
    const n = hc[e];
    for (let i = 0, s = n.length; i < s; i += 2)
      if (t >= n[i] && t <= n[i + 1])
        return e;
  }
  for (let n = 0, i = hc.length; n < i; n++) {
    const s = hc[n];
    for (let a = 0, r = s.length; a < r; a += 2)
      if (t >= s[a] && t <= s[a + 1])
        return n;
  }
  return -1;
}
const j9 = new RegExp("^(\\s)|(\\p{Mn})|(\\p{Cf})$", "u"), il = /* @__PURE__ */ new Map();
function q9(t) {
  const e = il.get(t);
  if (e)
    return e;
  const n = t.match(j9), i = {
    isWhitespace: !!(n != null && n[1]),
    isZeroWidthDiacritic: !!(n != null && n[2]),
    isInvisibleFormatMark: !!(n != null && n[3])
  };
  return il.set(t, i), i;
}
function H9() {
  il.clear();
}
const da = !0, Qn = {
  FixedPitch: 1,
  Serif: 2,
  Symbolic: 4,
  Nonsymbolic: 32
}, X1 = [".notdef", ".null", "nonmarkingreturn", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quotesingle", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "grave", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "Adieresis", "Aring", "Ccedilla", "Eacute", "Ntilde", "Odieresis", "Udieresis", "aacute", "agrave", "acircumflex", "adieresis", "atilde", "aring", "ccedilla", "eacute", "egrave", "ecircumflex", "edieresis", "iacute", "igrave", "icircumflex", "idieresis", "ntilde", "oacute", "ograve", "ocircumflex", "odieresis", "otilde", "uacute", "ugrave", "ucircumflex", "udieresis", "dagger", "degree", "cent", "sterling", "section", "bullet", "paragraph", "germandbls", "registered", "copyright", "trademark", "acute", "dieresis", "notequal", "AE", "Oslash", "infinity", "plusminus", "lessequal", "greaterequal", "yen", "mu", "partialdiff", "summation", "product", "pi", "integral", "ordfeminine", "ordmasculine", "Omega", "ae", "oslash", "questiondown", "exclamdown", "logicalnot", "radical", "florin", "approxequal", "Delta", "guillemotleft", "guillemotright", "ellipsis", "nonbreakingspace", "Agrave", "Atilde", "Otilde", "OE", "oe", "endash", "emdash", "quotedblleft", "quotedblright", "quoteleft", "quoteright", "divide", "lozenge", "ydieresis", "Ydieresis", "fraction", "currency", "guilsinglleft", "guilsinglright", "fi", "fl", "daggerdbl", "periodcentered", "quotesinglbase", "quotedblbase", "perthousand", "Acircumflex", "Ecircumflex", "Aacute", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Oacute", "Ocircumflex", "apple", "Ograve", "Uacute", "Ucircumflex", "Ugrave", "dotlessi", "circumflex", "tilde", "macron", "breve", "dotaccent", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "Lslash", "lslash", "Scaron", "scaron", "Zcaron", "zcaron", "brokenbar", "Eth", "eth", "Yacute", "yacute", "Thorn", "thorn", "minus", "multiply", "onesuperior", "twosuperior", "threesuperior", "onehalf", "onequarter", "threequarters", "franc", "Gbreve", "gbreve", "Idotaccent", "Scedilla", "scedilla", "Cacute", "cacute", "Ccaron", "ccaron", "dcroat"];
function $f(t, e) {
  if (e[t] !== void 0)
    return t;
  const n = Ta(t, e);
  if (n !== -1) {
    for (const i in e)
      if (e[i] === n)
        return i;
  }
  return Ge("Unable to recover a standard glyph name for: " + t), t;
}
function zf(t, e, n) {
  const i = /* @__PURE__ */ Object.create(null);
  let s, a, r;
  const o = !!(t.flags & Qn.Symbolic);
  if (t.isInternalFont)
    for (r = e, a = 0; a < r.length; a++)
      s = n.indexOf(r[a]), i[a] = s >= 0 ? s : 0;
  else if (t.baseEncodingName)
    for (r = I0(t.baseEncodingName), a = 0; a < r.length; a++)
      s = n.indexOf(r[a]), i[a] = s >= 0 ? s : 0;
  else if (o)
    for (a in e)
      i[a] = e[a];
  else
    for (r = Oi, a = 0; a < r.length; a++)
      s = n.indexOf(r[a]), i[a] = s >= 0 ? s : 0;
  const c = t.differences;
  let l;
  if (c)
    for (a in c) {
      const h = c[a];
      if (s = n.indexOf(h), s === -1) {
        l || (l = bi());
        const f = $f(h, l);
        f !== h && (s = n.indexOf(f));
      }
      i[a] = s >= 0 ? s : 0;
    }
  return i;
}
function ir(t) {
  return t.replaceAll(/[,_]/g, "-").replaceAll(/\s/g, "");
}
const G9 = wt((t) => {
  t[8211] = 65074, t[8212] = 65073, t[8229] = 65072, t[8230] = 65049, t[12289] = 65041, t[12290] = 65042, t[12296] = 65087, t[12297] = 65088, t[12298] = 65085, t[12299] = 65086, t[12300] = 65089, t[12301] = 65090, t[12302] = 65091, t[12303] = 65092, t[12304] = 65083, t[12305] = 65084, t[12308] = 65081, t[12309] = 65082, t[12310] = 65047, t[12311] = 65048, t[65103] = 65076, t[65281] = 65045, t[65288] = 65077, t[65289] = 65078, t[65292] = 65040, t[65306] = 65043, t[65307] = 65044, t[65311] = 65046, t[65339] = 65095, t[65341] = 65096, t[65343] = 65075, t[65371] = 65079, t[65373] = 65080;
}), K1 = 1e3;
function $9({
  data: t,
  width: e,
  height: n
}) {
  if (e > K1 || n > K1)
    return null;
  const i = 1e3, s = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]), a = e + 1, r = new Uint8Array(a * (n + 1));
  let o, c, l;
  const h = e + 7 & -8, f = new Uint8Array(h * n);
  let u = 0;
  for (const S of t) {
    let C = 128;
    for (; C > 0; )
      f[u++] = S & C ? 0 : 255, C >>= 1;
  }
  let d = 0;
  for (u = 0, f[u] !== 0 && (r[0] = 1, ++d), c = 1; c < e; c++)
    f[u] !== f[u + 1] && (r[c] = f[u] ? 2 : 1, ++d), u++;
  for (f[u] !== 0 && (r[c] = 2, ++d), o = 1; o < n; o++) {
    u = o * h, l = o * a, f[u - h] !== f[u] && (r[l] = f[u] ? 1 : 8, ++d);
    let S = (f[u] ? 4 : 0) + (f[u - h] ? 8 : 0);
    for (c = 1; c < e; c++)
      S = (S >> 2) + (f[u + 1] ? 4 : 0) + (f[u - h + 1] ? 8 : 0), s[S] && (r[l + c] = s[S], ++d), u++;
    if (f[u - h] !== f[u] && (r[l + c] = f[u] ? 2 : 4, ++d), d > i)
      return null;
  }
  for (u = h * (n - 1), l = o * a, f[u] !== 0 && (r[l] = 8, ++d), c = 1; c < e; c++)
    f[u] !== f[u + 1] && (r[l + c] = f[u] ? 4 : 8, ++d), u++;
  if (f[u] !== 0 && (r[l + c] = 4, ++d), d > i)
    return null;
  const x = new Int32Array([0, a, -1, 0, -a, 0, 0, 0, 1]), g = [], {
    a: m,
    b: p,
    c: b,
    d: w,
    e: y,
    f: k
  } = new DOMMatrix().scaleSelf(1 / e, -1 / n).translateSelf(0, -n);
  for (o = 0; d && o <= n; o++) {
    let S = o * a;
    const C = S + e;
    for (; S < C && !r[S]; )
      S++;
    if (S === C)
      continue;
    let T = S % a, F = o;
    g.push(Ut.moveTo, m * T + b * F + y, p * T + w * F + k);
    const R = S;
    let D = r[S];
    do {
      const M = x[D];
      do
        S += M;
      while (!r[S]);
      const _ = r[S];
      _ !== 5 && _ !== 10 ? (D = _, r[S] = 0) : (D = _ & 51 * D >> 4, r[S] &= D >> 2 | D << 2), T = S % a, F = S / a | 0, g.push(Ut.lineTo, m * T + b * F + y, p * T + w * F + k), r[S] || --d;
    } while (R !== S);
    --o;
  }
  return [A.rawFillPath, [new Float32Array(g)], new Float32Array([0, 0, e, n])];
}
const z9 = [".notdef", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "endash", "dagger", "daggerdbl", "periodcentered", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "questiondown", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "emdash", "AE", "ordfeminine", "Lslash", "Oslash", "OE", "ordmasculine", "ae", "dotlessi", "lslash", "oslash", "oe", "germandbls", "onesuperior", "logicalnot", "mu", "trademark", "Eth", "onehalf", "plusminus", "Thorn", "onequarter", "divide", "brokenbar", "degree", "thorn", "threequarters", "twosuperior", "registered", "minus", "eth", "multiply", "threesuperior", "copyright", "Aacute", "Acircumflex", "Adieresis", "Agrave", "Aring", "Atilde", "Ccedilla", "Eacute", "Ecircumflex", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Ntilde", "Oacute", "Ocircumflex", "Odieresis", "Ograve", "Otilde", "Scaron", "Uacute", "Ucircumflex", "Udieresis", "Ugrave", "Yacute", "Ydieresis", "Zcaron", "aacute", "acircumflex", "adieresis", "agrave", "aring", "atilde", "ccedilla", "eacute", "ecircumflex", "edieresis", "egrave", "iacute", "icircumflex", "idieresis", "igrave", "ntilde", "oacute", "ocircumflex", "odieresis", "ograve", "otilde", "scaron", "uacute", "ucircumflex", "udieresis", "ugrave", "yacute", "ydieresis", "zcaron"], W9 = [".notdef", "space", "exclamsmall", "Hungarumlautsmall", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "isuperior", "lsuperior", "msuperior", "nsuperior", "osuperior", "rsuperior", "ssuperior", "tsuperior", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "exclamdownsmall", "centoldstyle", "Lslashsmall", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "Dotaccentsmall", "Macronsmall", "figuredash", "hypheninferior", "Ogoneksmall", "Ringsmall", "Cedillasmall", "onequarter", "onehalf", "threequarters", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "zerosuperior", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall"], V9 = [".notdef", "space", "dollaroldstyle", "dollarsuperior", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "commasuperior", "threequartersemdash", "periodsuperior", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "isuperior", "lsuperior", "msuperior", "nsuperior", "osuperior", "rsuperior", "ssuperior", "tsuperior", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "parenrightinferior", "hyphensuperior", "colonmonetary", "onefitted", "rupiah", "centoldstyle", "figuredash", "hypheninferior", "onequarter", "onehalf", "threequarters", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "zerosuperior", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior"], X9 = 10, Xr = [".notdef", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "endash", "dagger", "daggerdbl", "periodcentered", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "questiondown", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "emdash", "AE", "ordfeminine", "Lslash", "Oslash", "OE", "ordmasculine", "ae", "dotlessi", "lslash", "oslash", "oe", "germandbls", "onesuperior", "logicalnot", "mu", "trademark", "Eth", "onehalf", "plusminus", "Thorn", "onequarter", "divide", "brokenbar", "degree", "thorn", "threequarters", "twosuperior", "registered", "minus", "eth", "multiply", "threesuperior", "copyright", "Aacute", "Acircumflex", "Adieresis", "Agrave", "Aring", "Atilde", "Ccedilla", "Eacute", "Ecircumflex", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Ntilde", "Oacute", "Ocircumflex", "Odieresis", "Ograve", "Otilde", "Scaron", "Uacute", "Ucircumflex", "Udieresis", "Ugrave", "Yacute", "Ydieresis", "Zcaron", "aacute", "acircumflex", "adieresis", "agrave", "aring", "atilde", "ccedilla", "eacute", "ecircumflex", "edieresis", "egrave", "iacute", "icircumflex", "idieresis", "igrave", "ntilde", "oacute", "ocircumflex", "odieresis", "ograve", "otilde", "scaron", "uacute", "ucircumflex", "udieresis", "ugrave", "yacute", "ydieresis", "zcaron", "exclamsmall", "Hungarumlautsmall", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "isuperior", "lsuperior", "msuperior", "nsuperior", "osuperior", "rsuperior", "ssuperior", "tsuperior", "ff", "ffi", "ffl", "parenleftinferior", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "exclamdownsmall", "centoldstyle", "Lslashsmall", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "Dotaccentsmall", "Macronsmall", "figuredash", "hypheninferior", "Ogoneksmall", "Ringsmall", "Cedillasmall", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "zerosuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall", "001.000", "001.001", "001.002", "001.003", "Black", "Bold", "Book", "Light", "Medium", "Regular", "Roman", "Semibold"], Tr = 391, Vs = [null, {
  id: "hstem",
  min: 2,
  stackClearing: !0,
  stem: !0
}, null, {
  id: "vstem",
  min: 2,
  stackClearing: !0,
  stem: !0
}, {
  id: "vmoveto",
  min: 1,
  stackClearing: !0
}, {
  id: "rlineto",
  min: 2,
  resetStack: !0
}, {
  id: "hlineto",
  min: 1,
  resetStack: !0
}, {
  id: "vlineto",
  min: 1,
  resetStack: !0
}, {
  id: "rrcurveto",
  min: 6,
  resetStack: !0
}, null, {
  id: "callsubr",
  min: 1,
  undefStack: !0
}, {
  id: "return",
  min: 0,
  undefStack: !0
}, null, null, {
  id: "endchar",
  min: 0,
  stackClearing: !0
}, null, null, null, {
  id: "hstemhm",
  min: 2,
  stackClearing: !0,
  stem: !0
}, {
  id: "hintmask",
  min: 0,
  stackClearing: !0
}, {
  id: "cntrmask",
  min: 0,
  stackClearing: !0
}, {
  id: "rmoveto",
  min: 2,
  stackClearing: !0
}, {
  id: "hmoveto",
  min: 1,
  stackClearing: !0
}, {
  id: "vstemhm",
  min: 2,
  stackClearing: !0,
  stem: !0
}, {
  id: "rcurveline",
  min: 8,
  resetStack: !0
}, {
  id: "rlinecurve",
  min: 8,
  resetStack: !0
}, {
  id: "vvcurveto",
  min: 4,
  resetStack: !0
}, {
  id: "hhcurveto",
  min: 4,
  resetStack: !0
}, null, {
  id: "callgsubr",
  min: 1,
  undefStack: !0
}, {
  id: "vhcurveto",
  min: 4,
  resetStack: !0
}, {
  id: "hvcurveto",
  min: 4,
  resetStack: !0
}], K9 = [null, null, null, {
  id: "and",
  min: 2,
  stackDelta: -1
}, {
  id: "or",
  min: 2,
  stackDelta: -1
}, {
  id: "not",
  min: 1,
  stackDelta: 0
}, null, null, null, {
  id: "abs",
  min: 1,
  stackDelta: 0
}, {
  id: "add",
  min: 2,
  stackDelta: -1,
  stackFn(t, e) {
    t[e - 2] = t[e - 2] + t[e - 1];
  }
}, {
  id: "sub",
  min: 2,
  stackDelta: -1,
  stackFn(t, e) {
    t[e - 2] = t[e - 2] - t[e - 1];
  }
}, {
  id: "div",
  min: 2,
  stackDelta: -1,
  stackFn(t, e) {
    t[e - 2] = t[e - 2] / t[e - 1];
  }
}, null, {
  id: "neg",
  min: 1,
  stackDelta: 0,
  stackFn(t, e) {
    t[e - 1] = -t[e - 1];
  }
}, {
  id: "eq",
  min: 2,
  stackDelta: -1
}, null, null, {
  id: "drop",
  min: 1,
  stackDelta: -1
}, null, {
  id: "put",
  min: 2,
  stackDelta: -2
}, {
  id: "get",
  min: 1,
  stackDelta: 0
}, {
  id: "ifelse",
  min: 4,
  stackDelta: -3
}, {
  id: "random",
  min: 0,
  stackDelta: 1
}, {
  id: "mul",
  min: 2,
  stackDelta: -1,
  stackFn(t, e) {
    t[e - 2] = t[e - 2] * t[e - 1];
  }
}, null, {
  id: "sqrt",
  min: 1,
  stackDelta: 0
}, {
  id: "dup",
  min: 1,
  stackDelta: 1
}, {
  id: "exch",
  min: 2,
  stackDelta: 0
}, {
  id: "index",
  min: 2,
  stackDelta: 0
}, {
  id: "roll",
  min: 3,
  stackDelta: -2
}, null, null, null, {
  id: "hflex",
  min: 7,
  resetStack: !0
}, {
  id: "flex",
  min: 13,
  resetStack: !0
}, {
  id: "hflex1",
  min: 9,
  resetStack: !0
}, {
  id: "flex1",
  min: 11,
  resetStack: !0
}];
class Xl {
  constructor(e, n, i) {
    this.bytes = e.getBytes(), this.properties = n, this.seacAnalysisEnabled = !!i;
  }
  parse() {
    const e = this.properties, n = new Wf();
    this.cff = n;
    const i = this.parseHeader(), s = this.parseIndex(i.endPos), a = this.parseIndex(s.endPos), r = this.parseIndex(a.endPos), o = this.parseIndex(r.endPos), c = this.parseDict(a.obj.get(0)), l = this.createDict(T0, c, n.strings);
    n.header = i.obj, n.names = this.parseNameIndex(s.obj), n.strings = this.parseStringIndex(r.obj), n.topDict = l, n.globalSubrIndex = o.obj, this.parsePrivateDict(n.topDict), n.isCIDFont = l.hasName("ROS");
    const h = l.getByName("CharStrings"), f = this.parseIndex(h).obj, u = l.getByName("FontMatrix");
    u && (e.fontMatrix = u);
    const d = l.getByName("FontBBox");
    d && (e.ascent = Math.max(d[3], d[1]), e.descent = Math.min(d[1], d[3]), e.ascentScaled = !0);
    let x, g;
    if (n.isCIDFont) {
      const p = this.parseIndex(l.getByName("FDArray")).obj;
      for (let b = 0, w = p.count; b < w; ++b) {
        const y = p.get(b), k = this.createDict(T0, this.parseDict(y), n.strings);
        this.parsePrivateDict(k), n.fdArray.push(k);
      }
      g = null, x = this.parseCharsets(l.getByName("charset"), f.count, n.strings, !0), n.fdSelect = this.parseFDSelect(l.getByName("FDSelect"), f.count);
    } else
      x = this.parseCharsets(l.getByName("charset"), f.count, n.strings, !1), g = this.parseEncoding(l.getByName("Encoding"), e, n.strings, x.charset);
    n.charset = x, n.encoding = g;
    const m = this.parseCharStrings({
      charStrings: f,
      localSubrIndex: l.privateDict.subrsIndex,
      globalSubrIndex: o.obj,
      fdSelect: n.fdSelect,
      fdArray: n.fdArray,
      privateDict: l.privateDict
    });
    return n.charStrings = m.charStrings, n.seacs = m.seacs, n.widths = m.widths, n;
  }
  parseHeader() {
    let e = this.bytes;
    const n = e.length;
    let i = 0;
    for (; i < n && e[i] !== 1; )
      ++i;
    if (i >= n)
      throw new j("Invalid CFF header");
    i !== 0 && (Ge("cff data is shifted"), e = e.subarray(i), this.bytes = e);
    const s = e[0], a = e[1], r = e[2], o = e[3];
    return {
      obj: new Vf(s, a, r, o),
      endPos: r
    };
  }
  parseDict(e) {
    let n = 0;
    function i() {
      let c = e[n++];
      return c === 30 ? s() : c === 28 ? (c = Mi(e, n), n += 2, c) : c === 29 ? (c = e[n++], c = c << 8 | e[n++], c = c << 8 | e[n++], c = c << 8 | e[n++], c) : c >= 32 && c <= 246 ? c - 139 : c >= 247 && c <= 250 ? (c - 247) * 256 + e[n++] + 108 : c >= 251 && c <= 254 ? -((c - 251) * 256) - e[n++] - 108 : (I('CFFParser_parseDict: "' + c + '" is a reserved command.'), NaN);
    }
    function s() {
      let c = "";
      const h = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "E", "E-", null, "-"], f = e.length;
      for (; n < f; ) {
        const u = e[n++], d = u >> 4, x = u & 15;
        if (d === 15 || (c += h[d], x === 15))
          break;
        c += h[x];
      }
      return parseFloat(c);
    }
    let a = [];
    const r = [];
    n = 0;
    const o = e.length;
    for (; n < o; ) {
      let c = e[n];
      c <= 21 ? (c === 12 && (c = c << 8 | e[++n]), r.push([c, a]), a = [], ++n) : a.push(i());
    }
    return r;
  }
  parseIndex(e) {
    const n = new ss(), i = this.bytes, s = i[e++] << 8 | i[e++], a = [];
    let r = e, o, c;
    if (s !== 0) {
      const l = i[e++], h = e + (s + 1) * l - 1;
      for (o = 0, c = s + 1; o < c; ++o) {
        let f = 0;
        for (let u = 0; u < l; ++u)
          f <<= 8, f += i[e++];
        a.push(h + f);
      }
      r = a[s];
    }
    for (o = 0, c = a.length - 1; o < c; ++o) {
      const l = a[o], h = a[o + 1];
      n.add(i.subarray(l, h));
    }
    return {
      obj: n,
      endPos: r
    };
  }
  parseNameIndex(e) {
    const n = [];
    for (let i = 0, s = e.count; i < s; ++i) {
      const a = e.get(i);
      n.push(Cn(a));
    }
    return n;
  }
  parseStringIndex(e) {
    const n = new Kl();
    for (let i = 0, s = e.count; i < s; ++i) {
      const a = e.get(i);
      n.add(Cn(a));
    }
    return n;
  }
  createDict(e, n, i) {
    const s = new e(i);
    for (const [a, r] of n)
      s.setByKey(a, r);
    return s;
  }
  parseCharString(e, n, i, s) {
    if (!n || e.callDepth > X9)
      return !1;
    let a = e.stackSize;
    const r = e.stack;
    let o = n.length;
    for (let c = 0; c < o; ) {
      const l = n[c++];
      let h = null;
      if (l === 12) {
        const f = n[c++];
        f === 0 ? (n[c - 2] = 139, n[c - 1] = 22, a = 0) : h = K9[f];
      } else if (l === 28)
        r[a] = Mi(n, c), c += 2, a++;
      else if (l === 14) {
        if (a >= 4 && (a -= 4, this.seacAnalysisEnabled))
          return e.seac = r.slice(a, a + 4), !1;
        h = Vs[l];
      } else if (l >= 32 && l <= 246)
        r[a] = l - 139, a++;
      else if (l >= 247 && l <= 254)
        r[a] = l < 251 ? (l - 247 << 8) + n[c] + 108 : -(l - 251 << 8) - n[c] - 108, c++, a++;
      else if (l === 255)
        r[a] = (n[c] << 24 | n[c + 1] << 16 | n[c + 2] << 8 | n[c + 3]) / 65536, c += 4, a++;
      else if (l === 19 || l === 20) {
        if (e.hints += a >> 1, e.hints === 0) {
          n.copyWithin(c - 1, c, -1), c -= 1, o -= 1;
          continue;
        }
        c += e.hints + 7 >> 3, a %= 2, h = Vs[l];
      } else if (l === 10 || l === 29) {
        const f = l === 10 ? i : s;
        if (!f)
          return h = Vs[l], I("Missing subrsIndex for " + h.id), !1;
        let u = 32768;
        f.count < 1240 ? u = 107 : f.count < 33900 && (u = 1131);
        const d = r[--a] + u;
        if (d < 0 || d >= f.count || isNaN(d))
          return h = Vs[l], I("Out of bounds subrIndex for " + h.id), !1;
        if (e.stackSize = a, e.callDepth++, !this.parseCharString(e, f.get(d), i, s))
          return !1;
        e.callDepth--, a = e.stackSize;
        continue;
      } else {
        if (l === 11)
          return e.stackSize = a, !0;
        if (l === 0 && c === n.length)
          n[c - 1] = 14, h = Vs[14];
        else if (l === 9) {
          n.copyWithin(c - 1, c, -1), c -= 1, o -= 1;
          continue;
        } else
          h = Vs[l];
      }
      if (h) {
        if (h.stem && (e.hints += a >> 1, l === 3 || l === 23 ? e.hasVStems = !0 : e.hasVStems && (l === 1 || l === 18) && (I("CFF stem hints are in wrong order"), n[c - 1] = l === 1 ? 3 : 23)), "min" in h && !e.undefStack && a < h.min)
          return I("Not enough parameters for " + h.id + "; actual: " + a + ", expected: " + h.min), a === 0 ? (n[c - 1] = 14, !0) : !1;
        e.firstStackClearing && h.stackClearing && (e.firstStackClearing = !1, a -= h.min, a >= 2 && h.stem ? a %= 2 : a > 1 && I("Found too many parameters for stack-clearing command"), a > 0 && (e.width = r[a - 1])), "stackDelta" in h ? ("stackFn" in h && h.stackFn(r, a), a += h.stackDelta) : h.stackClearing ? a = 0 : h.resetStack ? (a = 0, e.undefStack = !1) : h.undefStack && (a = 0, e.undefStack = !0, e.firstStackClearing = !1);
      }
    }
    return o < n.length && n.fill(14, o), e.stackSize = a, !0;
  }
  parseCharStrings({
    charStrings: e,
    localSubrIndex: n,
    globalSubrIndex: i,
    fdSelect: s,
    fdArray: a,
    privateDict: r
  }) {
    const o = [], c = [], l = e.count;
    for (let h = 0; h < l; h++) {
      const f = e.get(h), u = {
        callDepth: 0,
        stackSize: 0,
        stack: [],
        undefStack: !0,
        hints: 0,
        firstStackClearing: !0,
        seac: null,
        width: null,
        hasVStems: !1
      };
      let d = !0, x = null, g = r;
      if (s && a.length) {
        const m = s.getFDIndex(h);
        m === -1 && (I("Glyph index is not in fd select."), d = !1), m >= a.length && (I("Invalid fd index for glyph index."), d = !1), d && (g = a[m].privateDict, x = g.subrsIndex);
      } else n && (x = n);
      if (d && (d = this.parseCharString(u, f, x, i)), u.width !== null) {
        const m = g.getByName("nominalWidthX");
        c[h] = m + u.width;
      } else {
        const m = g.getByName("defaultWidthX");
        c[h] = m;
      }
      u.seac !== null && (o[h] = u.seac), d || e.set(h, new Uint8Array([14]));
    }
    return {
      charStrings: e,
      seacs: o,
      widths: c
    };
  }
  emptyPrivateDictionary(e) {
    const n = this.createDict(F0, [], e.strings);
    e.setByKey(18, [0, 0]), e.privateDict = n;
  }
  parsePrivateDict(e) {
    if (!e.hasName("Private")) {
      this.emptyPrivateDictionary(e);
      return;
    }
    const n = e.getByName("Private");
    if (!Array.isArray(n) || n.length !== 2) {
      e.removeByName("Private");
      return;
    }
    const i = n[0], s = n[1];
    if (i === 0 || s >= this.bytes.length) {
      this.emptyPrivateDictionary(e);
      return;
    }
    const a = s + i, r = this.bytes.subarray(s, a), o = this.parseDict(r), c = this.createDict(F0, o, e.strings);
    if (e.privateDict = c, c.getByName("ExpansionFactor") === 0 && c.setByName("ExpansionFactor", 0.06), !c.getByName("Subrs"))
      return;
    const l = c.getByName("Subrs"), h = s + l;
    if (l === 0 || h >= this.bytes.length) {
      this.emptyPrivateDictionary(e);
      return;
    }
    const f = this.parseIndex(h);
    c.subrsIndex = f.obj;
  }
  parseCharsets(e, n, i, s) {
    if (e === 0)
      return new i0(!0, fc.ISO_ADOBE, z9);
    if (e === 1)
      return new i0(!0, fc.EXPERT, W9);
    if (e === 2)
      return new i0(!0, fc.EXPERT_SUBSET, V9);
    const a = this.bytes, r = e, o = a[e++], c = [s ? 0 : ".notdef"];
    let l, h, f;
    switch (n -= 1, o) {
      case 0:
        for (f = 0; f < n; f++)
          l = a[e++] << 8 | a[e++], c.push(s ? l : i.get(l));
        break;
      case 1:
        for (; c.length <= n; )
          for (l = a[e++] << 8 | a[e++], h = a[e++], f = 0; f <= h; f++)
            c.push(s ? l++ : i.get(l++));
        break;
      case 2:
        for (; c.length <= n; )
          for (l = a[e++] << 8 | a[e++], h = a[e++] << 8 | a[e++], f = 0; f <= h; f++)
            c.push(s ? l++ : i.get(l++));
        break;
      default:
        throw new j("Unknown charset format");
    }
    const u = e, d = a.subarray(r, u);
    return new i0(!1, o, c, d);
  }
  parseEncoding(e, n, i, s) {
    const a = /* @__PURE__ */ Object.create(null), r = this.bytes;
    let o = !1, c, l, h, f = null;
    function u() {
      const d = r[e++];
      for (l = 0; l < d; l++) {
        const x = r[e++], g = (r[e++] << 8) + (r[e++] & 255);
        a[x] = s.indexOf(i.get(g));
      }
    }
    if (e === 0 || e === 1) {
      o = !0, c = e;
      const d = e ? Gf : Oi;
      for (l = 0, h = s.length; l < h; l++) {
        const x = d.indexOf(s[l]);
        x !== -1 && (a[x] = l);
      }
    } else {
      const d = e;
      switch (c = r[e++], c & 127) {
        case 0:
          const g = r[e++];
          for (l = 1; l <= g; l++)
            a[r[e++]] = l;
          break;
        case 1:
          const m = r[e++];
          let p = 1;
          for (l = 0; l < m; l++) {
            const b = r[e++], w = r[e++];
            for (let y = b; y <= b + w; y++)
              a[y] = p++;
          }
          break;
        default:
          throw new j(`Unknown encoding format: ${c} in CFF`);
      }
      const x = e;
      c & 128 && (r[d] &= 127, u()), f = r.subarray(d, x);
    }
    return c &= 127, new J9(o, c, a, f);
  }
  parseFDSelect(e, n) {
    const i = this.bytes, s = i[e++], a = [];
    let r;
    switch (s) {
      case 0:
        for (r = 0; r < n; ++r) {
          const c = i[e++];
          a.push(c);
        }
        break;
      case 3:
        const o = i[e++] << 8 | i[e++];
        for (r = 0; r < o; ++r) {
          let c = i[e++] << 8 | i[e++];
          r === 0 && c !== 0 && (I("parseFDSelect: The first range must have a first GID of 0 -- trying to recover."), c = 0);
          const l = i[e++], h = i[e] << 8 | i[e + 1];
          for (let f = c; f < h; ++f)
            a.push(l);
        }
        e += 2;
        break;
      default:
        throw new j(`parseFDSelect: Unknown format "${s}".`);
    }
    if (a.length !== n)
      throw new j("parseFDSelect: Invalid font data.");
    return new Q9(s, a);
  }
}
class Wf {
  constructor() {
    this.header = null, this.names = [], this.topDict = null, this.strings = new Kl(), this.globalSubrIndex = null, this.encoding = null, this.charset = null, this.charStrings = null, this.fdArray = [], this.fdSelect = null, this.isCIDFont = !1;
  }
  duplicateFirstGlyph() {
    if (this.charStrings.count >= 65535) {
      I("Not enough space in charstrings to duplicate first glyph.");
      return;
    }
    const e = this.charStrings.get(0);
    this.charStrings.add(e), this.isCIDFont && this.fdSelect.fdSelect.push(this.fdSelect.fdSelect[0]);
  }
  hasGlyphId(e) {
    return e < 0 || e >= this.charStrings.count ? !1 : this.charStrings.get(e).length > 0;
  }
}
class Vf {
  constructor(e, n, i, s) {
    this.major = e, this.minor = n, this.hdrSize = i, this.offSize = s;
  }
}
class Kl {
  constructor() {
    this.strings = [];
  }
  get(e) {
    return e >= 0 && e <= Tr - 1 ? Xr[e] : e - Tr <= this.strings.length ? this.strings[e - Tr] : Xr[0];
  }
  getSID(e) {
    let n = Xr.indexOf(e);
    return n !== -1 ? n : (n = this.strings.indexOf(e), n !== -1 ? n + Tr : -1);
  }
  add(e) {
    this.strings.push(e);
  }
  get count() {
    return this.strings.length;
  }
}
class ss {
  constructor() {
    this.objects = [], this.length = 0;
  }
  add(e) {
    this.length += e.length, this.objects.push(e);
  }
  set(e, n) {
    this.length += n.length - this.objects[e].length, this.objects[e] = n;
  }
  get(e) {
    return this.objects[e];
  }
  get count() {
    return this.objects.length;
  }
}
class Xf {
  constructor(e, n) {
    this.keyToNameMap = e.keyToNameMap, this.nameToKeyMap = e.nameToKeyMap, this.defaults = e.defaults, this.types = e.types, this.opcodes = e.opcodes, this.order = e.order, this.strings = n, this.values = /* @__PURE__ */ Object.create(null);
  }
  setByKey(e, n) {
    if (!(e in this.keyToNameMap))
      return !1;
    if (n.length === 0)
      return !0;
    for (const s of n)
      if (isNaN(s))
        return I(`Invalid CFFDict value: "${n}" for key "${e}".`), !0;
    const i = this.types[e];
    return (i === "num" || i === "sid" || i === "offset") && (n = n[0]), this.values[e] = n, !0;
  }
  setByName(e, n) {
    if (!(e in this.nameToKeyMap))
      throw new j(`Invalid dictionary name "${e}"`);
    this.values[this.nameToKeyMap[e]] = n;
  }
  hasName(e) {
    return this.nameToKeyMap[e] in this.values;
  }
  getByName(e) {
    if (!(e in this.nameToKeyMap))
      throw new j(`Invalid dictionary name ${e}"`);
    const n = this.nameToKeyMap[e];
    return n in this.values ? this.values[n] : this.defaults[n];
  }
  removeByName(e) {
    delete this.values[this.nameToKeyMap[e]];
  }
  static createTables(e) {
    const n = {
      keyToNameMap: {},
      nameToKeyMap: {},
      defaults: {},
      types: {},
      opcodes: {},
      order: []
    };
    for (const i of e) {
      const s = Array.isArray(i[0]) ? (i[0][0] << 8) + i[0][1] : i[0];
      n.keyToNameMap[s] = i[1], n.nameToKeyMap[i[1]] = s, n.types[s] = i[2], n.defaults[s] = i[3], n.opcodes[s] = Array.isArray(i[0]) ? i[0] : [i[0]], n.order.push(s);
    }
    return n;
  }
}
const Y9 = [[[12, 30], "ROS", ["sid", "sid", "num"], null], [[12, 20], "SyntheticBase", "num", null], [0, "version", "sid", null], [1, "Notice", "sid", null], [[12, 0], "Copyright", "sid", null], [2, "FullName", "sid", null], [3, "FamilyName", "sid", null], [4, "Weight", "sid", null], [[12, 1], "isFixedPitch", "num", 0], [[12, 2], "ItalicAngle", "num", 0], [[12, 3], "UnderlinePosition", "num", -100], [[12, 4], "UnderlineThickness", "num", 50], [[12, 5], "PaintType", "num", 0], [[12, 6], "CharstringType", "num", 2], [[12, 7], "FontMatrix", ["num", "num", "num", "num", "num", "num"], [1e-3, 0, 0, 1e-3, 0, 0]], [13, "UniqueID", "num", null], [5, "FontBBox", ["num", "num", "num", "num"], [0, 0, 0, 0]], [[12, 8], "StrokeWidth", "num", 0], [14, "XUID", "array", null], [15, "charset", "offset", 0], [16, "Encoding", "offset", 0], [17, "CharStrings", "offset", 0], [18, "Private", ["offset", "offset"], null], [[12, 21], "PostScript", "sid", null], [[12, 22], "BaseFontName", "sid", null], [[12, 23], "BaseFontBlend", "delta", null], [[12, 31], "CIDFontVersion", "num", 0], [[12, 32], "CIDFontRevision", "num", 0], [[12, 33], "CIDFontType", "num", 0], [[12, 34], "CIDCount", "num", 8720], [[12, 35], "UIDBase", "num", null], [[12, 37], "FDSelect", "offset", null], [[12, 36], "FDArray", "offset", null], [[12, 38], "FontName", "sid", null]];
class T0 extends Xf {
  static get tables() {
    return Q(this, "tables", this.createTables(Y9));
  }
  constructor(e) {
    super(T0.tables, e), this.privateDict = null;
  }
}
const Z9 = [[6, "BlueValues", "delta", null], [7, "OtherBlues", "delta", null], [8, "FamilyBlues", "delta", null], [9, "FamilyOtherBlues", "delta", null], [[12, 9], "BlueScale", "num", 0.039625], [[12, 10], "BlueShift", "num", 7], [[12, 11], "BlueFuzz", "num", 1], [10, "StdHW", "num", null], [11, "StdVW", "num", null], [[12, 12], "StemSnapH", "delta", null], [[12, 13], "StemSnapV", "delta", null], [[12, 14], "ForceBold", "num", 0], [[12, 17], "LanguageGroup", "num", 0], [[12, 18], "ExpansionFactor", "num", 0.06], [[12, 19], "initialRandomSeed", "num", 0], [20, "defaultWidthX", "num", 0], [21, "nominalWidthX", "num", 0], [19, "Subrs", "offset", null]];
class F0 extends Xf {
  static get tables() {
    return Q(this, "tables", this.createTables(Z9));
  }
  constructor(e) {
    super(F0.tables, e), this.subrsIndex = null;
  }
}
const fc = {
  ISO_ADOBE: 0,
  EXPERT: 1,
  EXPERT_SUBSET: 2
};
class i0 {
  constructor(e, n, i, s) {
    this.predefined = e, this.format = n, this.charset = i, this.raw = s;
  }
}
class J9 {
  constructor(e, n, i, s) {
    this.predefined = e, this.format = n, this.encoding = i, this.raw = s;
  }
}
class Q9 {
  constructor(e, n) {
    this.format = e, this.fdSelect = n;
  }
  getFDIndex(e) {
    return e < 0 || e >= this.fdSelect.length ? -1 : this.fdSelect[e];
  }
}
class Y1 {
  constructor() {
    this.offsets = /* @__PURE__ */ Object.create(null);
  }
  isTracking(e) {
    return e in this.offsets;
  }
  track(e, n) {
    if (e in this.offsets)
      throw new j(`Already tracking location of ${e}`);
    this.offsets[e] = n;
  }
  offset(e) {
    for (const n in this.offsets)
      this.offsets[n] += e;
  }
  setEntryLocation(e, n, i) {
    if (!(e in this.offsets))
      throw new j(`Not tracking location of ${e}`);
    const s = i.data, a = this.offsets[e], r = 5;
    for (let o = 0, c = n.length; o < c; ++o) {
      const l = o * r + a, h = l + 1, f = l + 2, u = l + 3, d = l + 4;
      if (s[l] !== 29 || s[h] !== 0 || s[f] !== 0 || s[u] !== 0 || s[d] !== 0)
        throw new j("writing to an offset that is not empty");
      const x = n[o];
      s[l] = 29, s[h] = x >> 24 & 255, s[f] = x >> 16 & 255, s[u] = x >> 8 & 255, s[d] = x & 255;
    }
  }
}
class sr {
  constructor(e) {
    this.cff = e;
  }
  compile() {
    const e = this.cff, n = {
      data: [],
      length: 0,
      add(u) {
        try {
          this.data.push(...u);
        } catch {
          this.data = this.data.concat(u);
        }
        this.length = this.data.length;
      }
    }, i = this.compileHeader(e.header);
    n.add(i);
    const s = this.compileNameIndex(e.names);
    if (n.add(s), e.isCIDFont && e.topDict.hasName("FontMatrix")) {
      const u = e.topDict.getByName("FontMatrix");
      e.topDict.removeByName("FontMatrix");
      for (const d of e.fdArray) {
        let x = u.slice(0);
        d.hasName("FontMatrix") && (x = tt.transform(x, d.getByName("FontMatrix"))), d.setByName("FontMatrix", x);
      }
    }
    const a = e.topDict.getByName("XUID");
    (a == null ? void 0 : a.length) > 16 && e.topDict.removeByName("XUID"), e.topDict.setByName("charset", 0);
    let r = this.compileTopDicts([e.topDict], n.length, e.isCIDFont);
    n.add(r.output);
    const o = r.trackers[0], c = this.compileStringIndex(e.strings.strings);
    n.add(c);
    const l = this.compileIndex(e.globalSubrIndex);
    if (n.add(l), e.encoding && e.topDict.hasName("Encoding"))
      if (e.encoding.predefined)
        o.setEntryLocation("Encoding", [e.encoding.format], n);
      else {
        const u = this.compileEncoding(e.encoding);
        o.setEntryLocation("Encoding", [n.length], n), n.add(u);
      }
    const h = this.compileCharset(e.charset, e.charStrings.count, e.strings, e.isCIDFont);
    o.setEntryLocation("charset", [n.length], n), n.add(h);
    const f = this.compileCharStrings(e.charStrings);
    if (o.setEntryLocation("CharStrings", [n.length], n), n.add(f), e.isCIDFont) {
      o.setEntryLocation("FDSelect", [n.length], n);
      const u = this.compileFDSelect(e.fdSelect);
      n.add(u), r = this.compileTopDicts(e.fdArray, n.length, !0), o.setEntryLocation("FDArray", [n.length], n), n.add(r.output);
      const d = r.trackers;
      this.compilePrivateDicts(e.fdArray, d, n);
    }
    return this.compilePrivateDicts([e.topDict], [o], n), n.add([0]), n.data;
  }
  encodeNumber(e) {
    return Number.isInteger(e) ? this.encodeInteger(e) : this.encodeFloat(e);
  }
  static get EncodeFloatRegExp() {
    return Q(this, "EncodeFloatRegExp", /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/);
  }
  encodeFloat(e) {
    let n = e.toString();
    const i = sr.EncodeFloatRegExp.exec(n);
    if (i) {
      const c = parseFloat("1e" + ((i[2] ? +i[2] : 0) + i[1].length));
      n = (Math.round(e * c) / c).toString();
    }
    let s = "", a, r;
    for (a = 0, r = n.length; a < r; ++a) {
      const c = n[a];
      c === "e" ? s += n[++a] === "-" ? "c" : "b" : c === "." ? s += "a" : c === "-" ? s += "e" : s += c;
    }
    s += s.length & 1 ? "f" : "ff";
    const o = [30];
    for (a = 0, r = s.length; a < r; a += 2)
      o.push(parseInt(s.substring(a, a + 2), 16));
    return o;
  }
  encodeInteger(e) {
    let n;
    return e >= -107 && e <= 107 ? n = [e + 139] : e >= 108 && e <= 1131 ? (e -= 108, n = [(e >> 8) + 247, e & 255]) : e >= -1131 && e <= -108 ? (e = -e - 108, n = [(e >> 8) + 251, e & 255]) : e >= -32768 && e <= 32767 ? n = [28, e >> 8 & 255, e & 255] : n = [29, e >> 24 & 255, e >> 16 & 255, e >> 8 & 255, e & 255], n;
  }
  compileHeader(e) {
    return [e.major, e.minor, 4, e.offSize];
  }
  compileNameIndex(e) {
    const n = new ss();
    for (const i of e) {
      const s = Math.min(i.length, 127);
      let a = new Array(s);
      for (let r = 0; r < s; r++) {
        let o = i[r];
        (o < "!" || o > "~" || o === "[" || o === "]" || o === "(" || o === ")" || o === "{" || o === "}" || o === "<" || o === ">" || o === "/" || o === "%") && (o = "_"), a[r] = o;
      }
      a = a.join(""), a === "" && (a = "Bad_Font_Name"), n.add(en(a));
    }
    return this.compileIndex(n);
  }
  compileTopDicts(e, n, i) {
    const s = [];
    let a = new ss();
    for (const r of e) {
      i && (r.removeByName("CIDFontVersion"), r.removeByName("CIDFontRevision"), r.removeByName("CIDFontType"), r.removeByName("CIDCount"), r.removeByName("UIDBase"));
      const o = new Y1(), c = this.compileDict(r, o);
      s.push(o), a.add(c), o.offset(n);
    }
    return a = this.compileIndex(a, s), {
      trackers: s,
      output: a
    };
  }
  compilePrivateDicts(e, n, i) {
    for (let s = 0, a = e.length; s < a; ++s) {
      const r = e[s], o = r.privateDict;
      if (!o || !r.hasName("Private"))
        throw new j("There must be a private dictionary.");
      const c = new Y1(), l = this.compileDict(o, c);
      let h = i.length;
      if (c.offset(h), l.length || (h = 0), n[s].setEntryLocation("Private", [l.length, h], i), i.add(l), o.subrsIndex && o.hasName("Subrs")) {
        const f = this.compileIndex(o.subrsIndex);
        c.setEntryLocation("Subrs", [l.length], i), i.add(f);
      }
    }
  }
  compileDict(e, n) {
    const i = [];
    for (const s of e.order) {
      if (!(s in e.values))
        continue;
      let a = e.values[s], r = e.types[s];
      if (Array.isArray(r) || (r = [r]), Array.isArray(a) || (a = [a]), a.length !== 0) {
        for (let o = 0, c = r.length; o < c; ++o) {
          const l = r[o], h = a[o];
          switch (l) {
            case "num":
            case "sid":
              i.push(...this.encodeNumber(h));
              break;
            case "offset":
              const f = e.keyToNameMap[s];
              n.isTracking(f) || n.track(f, i.length), i.push(29, 0, 0, 0, 0);
              break;
            case "array":
            case "delta":
              i.push(...this.encodeNumber(h));
              for (let u = 1, d = a.length; u < d; ++u)
                i.push(...this.encodeNumber(a[u]));
              break;
            default:
              throw new j(`Unknown data type of ${l}`);
          }
        }
        i.push(...e.opcodes[s]);
      }
    }
    return i;
  }
  compileStringIndex(e) {
    const n = new ss();
    for (const i of e)
      n.add(en(i));
    return this.compileIndex(n);
  }
  compileCharStrings(e) {
    const n = new ss();
    for (let i = 0; i < e.count; i++) {
      const s = e.get(i);
      if (s.length === 0) {
        n.add(new Uint8Array([139, 14]));
        continue;
      }
      n.add(s);
    }
    return this.compileIndex(n);
  }
  compileCharset(e, n, i, s) {
    let a;
    const r = n - 1;
    if (s) {
      const o = r - 1;
      a = new Uint8Array([2, 0, 0, o >> 8 & 255, o & 255]);
    } else {
      const o = 1 + r * 2;
      a = new Uint8Array(o), a[0] = 0;
      let c = 0;
      const l = e.charset.length;
      let h = !1;
      for (let f = 1; f < a.length; f += 2) {
        let u = 0;
        if (c < l) {
          const d = e.charset[c++];
          u = i.getSID(d), u === -1 && (u = 0, h || (h = !0, I(`Couldn't find ${d} in CFF strings`)));
        }
        a[f] = u >> 8 & 255, a[f + 1] = u & 255;
      }
    }
    return this.compileTypedArray(a);
  }
  compileEncoding(e) {
    return this.compileTypedArray(e.raw);
  }
  compileFDSelect(e) {
    const n = e.format;
    let i, s;
    switch (n) {
      case 0:
        for (i = new Uint8Array(1 + e.fdSelect.length), i[0] = n, s = 0; s < e.fdSelect.length; s++)
          i[s + 1] = e.fdSelect[s];
        break;
      case 3:
        const a = 0;
        let r = e.fdSelect[0];
        const o = [n, 0, 0, a >> 8 & 255, a & 255, r];
        for (s = 1; s < e.fdSelect.length; s++) {
          const l = e.fdSelect[s];
          l !== r && (o.push(s >> 8 & 255, s & 255, l), r = l);
        }
        const c = (o.length - 3) / 3;
        o[1] = c >> 8 & 255, o[2] = c & 255, o.push(s >> 8 & 255, s & 255), i = new Uint8Array(o);
        break;
    }
    return this.compileTypedArray(i);
  }
  compileTypedArray(e) {
    return Array.from(e);
  }
  compileIndex(e, n = []) {
    const i = e.objects, s = i.length;
    if (s === 0)
      return [0, 0];
    const a = [s >> 8 & 255, s & 255];
    let r = 1, o;
    for (o = 0; o < s; ++o)
      r += i[o].length;
    let c;
    r < 256 ? c = 1 : r < 65536 ? c = 2 : r < 16777216 ? c = 3 : c = 4, a.push(c);
    let l = 1;
    for (o = 0; o < s + 1; o++)
      c === 1 ? a.push(l & 255) : c === 2 ? a.push(l >> 8 & 255, l & 255) : c === 3 ? a.push(l >> 16 & 255, l >> 8 & 255, l & 255) : a.push(l >>> 24 & 255, l >> 16 & 255, l >> 8 & 255, l & 255), i[o] && (l += i[o].length);
    for (o = 0; o < s; o++)
      n[o] && n[o].offset(a.length), a.push(...i[o]);
    return a;
  }
}
const qo = wt(function(t) {
  t["Times-Roman"] = "Times-Roman", t.Helvetica = "Helvetica", t.Courier = "Courier", t.Symbol = "Symbol", t["Times-Bold"] = "Times-Bold", t["Helvetica-Bold"] = "Helvetica-Bold", t["Courier-Bold"] = "Courier-Bold", t.ZapfDingbats = "ZapfDingbats", t["Times-Italic"] = "Times-Italic", t["Helvetica-Oblique"] = "Helvetica-Oblique", t["Courier-Oblique"] = "Courier-Oblique", t["Times-BoldItalic"] = "Times-BoldItalic", t["Helvetica-BoldOblique"] = "Helvetica-BoldOblique", t["Courier-BoldOblique"] = "Courier-BoldOblique", t.ArialNarrow = "Helvetica", t["ArialNarrow-Bold"] = "Helvetica-Bold", t["ArialNarrow-BoldItalic"] = "Helvetica-BoldOblique", t["ArialNarrow-Italic"] = "Helvetica-Oblique", t.ArialBlack = "Helvetica", t["ArialBlack-Bold"] = "Helvetica-Bold", t["ArialBlack-BoldItalic"] = "Helvetica-BoldOblique", t["ArialBlack-Italic"] = "Helvetica-Oblique", t["Arial-Black"] = "Helvetica", t["Arial-Black-Bold"] = "Helvetica-Bold", t["Arial-Black-BoldItalic"] = "Helvetica-BoldOblique", t["Arial-Black-Italic"] = "Helvetica-Oblique", t.Arial = "Helvetica", t["Arial-Bold"] = "Helvetica-Bold", t["Arial-BoldItalic"] = "Helvetica-BoldOblique", t["Arial-Italic"] = "Helvetica-Oblique", t.ArialMT = "Helvetica", t["Arial-BoldItalicMT"] = "Helvetica-BoldOblique", t["Arial-BoldMT"] = "Helvetica-Bold", t["Arial-ItalicMT"] = "Helvetica-Oblique", t["Arial-BoldItalicMT-BoldItalic"] = "Helvetica-BoldOblique", t["Arial-BoldMT-Bold"] = "Helvetica-Bold", t["Arial-ItalicMT-Italic"] = "Helvetica-Oblique", t.ArialUnicodeMS = "Helvetica", t["ArialUnicodeMS-Bold"] = "Helvetica-Bold", t["ArialUnicodeMS-BoldItalic"] = "Helvetica-BoldOblique", t["ArialUnicodeMS-Italic"] = "Helvetica-Oblique", t["Courier-BoldItalic"] = "Courier-BoldOblique", t["Courier-Italic"] = "Courier-Oblique", t.CourierNew = "Courier", t["CourierNew-Bold"] = "Courier-Bold", t["CourierNew-BoldItalic"] = "Courier-BoldOblique", t["CourierNew-Italic"] = "Courier-Oblique", t["CourierNewPS-BoldItalicMT"] = "Courier-BoldOblique", t["CourierNewPS-BoldMT"] = "Courier-Bold", t["CourierNewPS-ItalicMT"] = "Courier-Oblique", t.CourierNewPSMT = "Courier", t["Helvetica-BoldItalic"] = "Helvetica-BoldOblique", t["Helvetica-Italic"] = "Helvetica-Oblique", t["HelveticaLTStd-Bold"] = "Helvetica-Bold", t["Symbol-Bold"] = "Symbol", t["Symbol-BoldItalic"] = "Symbol", t["Symbol-Italic"] = "Symbol", t.TimesNewRoman = "Times-Roman", t["TimesNewRoman-Bold"] = "Times-Bold", t["TimesNewRoman-BoldItalic"] = "Times-BoldItalic", t["TimesNewRoman-Italic"] = "Times-Italic", t.TimesNewRomanPS = "Times-Roman", t["TimesNewRomanPS-Bold"] = "Times-Bold", t["TimesNewRomanPS-BoldItalic"] = "Times-BoldItalic", t["TimesNewRomanPS-BoldItalicMT"] = "Times-BoldItalic", t["TimesNewRomanPS-BoldMT"] = "Times-Bold", t["TimesNewRomanPS-Italic"] = "Times-Italic", t["TimesNewRomanPS-ItalicMT"] = "Times-Italic", t.TimesNewRomanPSMT = "Times-Roman", t["TimesNewRomanPSMT-Bold"] = "Times-Bold", t["TimesNewRomanPSMT-BoldItalic"] = "Times-BoldItalic", t["TimesNewRomanPSMT-Italic"] = "Times-Italic";
}), ex = wt(function(t) {
  t.Courier = "FoxitFixed.pfb", t["Courier-Bold"] = "FoxitFixedBold.pfb", t["Courier-BoldOblique"] = "FoxitFixedBoldItalic.pfb", t["Courier-Oblique"] = "FoxitFixedItalic.pfb", t.Helvetica = "LiberationSans-Regular.ttf", t["Helvetica-Bold"] = "LiberationSans-Bold.ttf", t["Helvetica-BoldOblique"] = "LiberationSans-BoldItalic.ttf", t["Helvetica-Oblique"] = "LiberationSans-Italic.ttf", t["Times-Roman"] = "FoxitSerif.pfb", t["Times-Bold"] = "FoxitSerifBold.pfb", t["Times-BoldItalic"] = "FoxitSerifBoldItalic.pfb", t["Times-Italic"] = "FoxitSerifItalic.pfb", t.Symbol = "FoxitSymbol.pfb", t.ZapfDingbats = "FoxitDingbats.pfb", t["LiberationSans-Regular"] = "LiberationSans-Regular.ttf", t["LiberationSans-Bold"] = "LiberationSans-Bold.ttf", t["LiberationSans-Italic"] = "LiberationSans-Italic.ttf", t["LiberationSans-BoldItalic"] = "LiberationSans-BoldItalic.ttf";
}), Kf = wt(function(t) {
  t.Calibri = "Helvetica", t["Calibri-Bold"] = "Helvetica-Bold", t["Calibri-BoldItalic"] = "Helvetica-BoldOblique", t["Calibri-Italic"] = "Helvetica-Oblique", t.CenturyGothic = "Helvetica", t["CenturyGothic-Bold"] = "Helvetica-Bold", t["CenturyGothic-BoldItalic"] = "Helvetica-BoldOblique", t["CenturyGothic-Italic"] = "Helvetica-Oblique", t.ComicSansMS = "Comic Sans MS", t["ComicSansMS-Bold"] = "Comic Sans MS-Bold", t["ComicSansMS-BoldItalic"] = "Comic Sans MS-BoldItalic", t["ComicSansMS-Italic"] = "Comic Sans MS-Italic", t.GillSansMT = "Helvetica", t["GillSansMT-Bold"] = "Helvetica-Bold", t["GillSansMT-BoldItalic"] = "Helvetica-BoldOblique", t["GillSansMT-Italic"] = "Helvetica-Oblique", t.Impact = "Helvetica", t["ItcSymbol-Bold"] = "Helvetica-Bold", t["ItcSymbol-BoldItalic"] = "Helvetica-BoldOblique", t["ItcSymbol-Book"] = "Helvetica", t["ItcSymbol-BookItalic"] = "Helvetica-Oblique", t["ItcSymbol-Medium"] = "Helvetica", t["ItcSymbol-MediumItalic"] = "Helvetica-Oblique", t.LucidaConsole = "Courier", t["LucidaConsole-Bold"] = "Courier-Bold", t["LucidaConsole-BoldItalic"] = "Courier-BoldOblique", t["LucidaConsole-Italic"] = "Courier-Oblique", t["LucidaSans-Demi"] = "Helvetica-Bold", t["MS-Gothic"] = "MS Gothic", t["MS-Gothic-Bold"] = "MS Gothic-Bold", t["MS-Gothic-BoldItalic"] = "MS Gothic-BoldItalic", t["MS-Gothic-Italic"] = "MS Gothic-Italic", t["MS-Mincho"] = "MS Mincho", t["MS-Mincho-Bold"] = "MS Mincho-Bold", t["MS-Mincho-BoldItalic"] = "MS Mincho-BoldItalic", t["MS-Mincho-Italic"] = "MS Mincho-Italic", t["MS-PGothic"] = "MS PGothic", t["MS-PGothic-Bold"] = "MS PGothic-Bold", t["MS-PGothic-BoldItalic"] = "MS PGothic-BoldItalic", t["MS-PGothic-Italic"] = "MS PGothic-Italic", t["MS-PMincho"] = "MS PMincho", t["MS-PMincho-Bold"] = "MS PMincho-Bold", t["MS-PMincho-BoldItalic"] = "MS PMincho-BoldItalic", t["MS-PMincho-Italic"] = "MS PMincho-Italic", t.NuptialScript = "Times-Italic", t.SegoeUISymbol = "Helvetica";
}), Yl = wt(function(t) {
  t["Adobe Jenson"] = !0, t["Adobe Text"] = !0, t.Albertus = !0, t.Aldus = !0, t.Alexandria = !0, t.Algerian = !0, t["American Typewriter"] = !0, t.Antiqua = !0, t.Apex = !0, t.Arno = !0, t.Aster = !0, t.Aurora = !0, t.Baskerville = !0, t.Bell = !0, t.Bembo = !0, t["Bembo Schoolbook"] = !0, t.Benguiat = !0, t["Berkeley Old Style"] = !0, t["Bernhard Modern"] = !0, t["Berthold City"] = !0, t.Bodoni = !0, t["Bauer Bodoni"] = !0, t["Book Antiqua"] = !0, t.Bookman = !0, t["Bordeaux Roman"] = !0, t["Californian FB"] = !0, t.Calisto = !0, t.Calvert = !0, t.Capitals = !0, t.Cambria = !0, t.Cartier = !0, t.Caslon = !0, t.Catull = !0, t.Centaur = !0, t["Century Old Style"] = !0, t["Century Schoolbook"] = !0, t.Chaparral = !0, t["Charis SIL"] = !0, t.Cheltenham = !0, t["Cholla Slab"] = !0, t.Clarendon = !0, t.Clearface = !0, t.Cochin = !0, t.Colonna = !0, t["Computer Modern"] = !0, t["Concrete Roman"] = !0, t.Constantia = !0, t["Cooper Black"] = !0, t.Corona = !0, t.Ecotype = !0, t.Egyptienne = !0, t.Elephant = !0, t.Excelsior = !0, t.Fairfield = !0, t["FF Scala"] = !0, t.Folkard = !0, t.Footlight = !0, t.FreeSerif = !0, t["Friz Quadrata"] = !0, t.Garamond = !0, t.Gentium = !0, t.Georgia = !0, t.Gloucester = !0, t["Goudy Old Style"] = !0, t["Goudy Schoolbook"] = !0, t["Goudy Pro Font"] = !0, t.Granjon = !0, t["Guardian Egyptian"] = !0, t.Heather = !0, t.Hercules = !0, t["High Tower Text"] = !0, t.Hiroshige = !0, t["Hoefler Text"] = !0, t["Humana Serif"] = !0, t.Imprint = !0, t["Ionic No. 5"] = !0, t.Janson = !0, t.Joanna = !0, t.Korinna = !0, t.Lexicon = !0, t.LiberationSerif = !0, t["Liberation Serif"] = !0, t["Linux Libertine"] = !0, t.Literaturnaya = !0, t.Lucida = !0, t["Lucida Bright"] = !0, t.Melior = !0, t.Memphis = !0, t.Miller = !0, t.Minion = !0, t.Modern = !0, t["Mona Lisa"] = !0, t["Mrs Eaves"] = !0, t["MS Serif"] = !0, t["Museo Slab"] = !0, t["New York"] = !0, t["Nimbus Roman"] = !0, t["NPS Rawlinson Roadway"] = !0, t.NuptialScript = !0, t.Palatino = !0, t.Perpetua = !0, t.Plantin = !0, t["Plantin Schoolbook"] = !0, t.Playbill = !0, t["Poor Richard"] = !0, t["Rawlinson Roadway"] = !0, t.Renault = !0, t.Requiem = !0, t.Rockwell = !0, t.Roman = !0, t["Rotis Serif"] = !0, t.Sabon = !0, t.Scala = !0, t.Seagull = !0, t.Sistina = !0, t.Souvenir = !0, t.STIX = !0, t["Stone Informal"] = !0, t["Stone Serif"] = !0, t.Sylfaen = !0, t.Times = !0, t.Trajan = !0, t.Trinité = !0, t["Trump Mediaeval"] = !0, t.Utopia = !0, t["Vale Type"] = !0, t["Bitstream Vera"] = !0, t["Vera Serif"] = !0, t.Versailles = !0, t.Wanted = !0, t.Weiss = !0, t["Wide Latin"] = !0, t.Windsor = !0, t.XITS = !0;
}), sl = wt(function(t) {
  t.Dingbats = !0, t.Symbol = !0, t.ZapfDingbats = !0, t.Wingdings = !0, t["Wingdings-Bold"] = !0, t["Wingdings-Regular"] = !0;
}), Z1 = wt(function(t) {
  t[2] = 10, t[3] = 32, t[4] = 33, t[5] = 34, t[6] = 35, t[7] = 36, t[8] = 37, t[9] = 38, t[10] = 39, t[11] = 40, t[12] = 41, t[13] = 42, t[14] = 43, t[15] = 44, t[16] = 45, t[17] = 46, t[18] = 47, t[19] = 48, t[20] = 49, t[21] = 50, t[22] = 51, t[23] = 52, t[24] = 53, t[25] = 54, t[26] = 55, t[27] = 56, t[28] = 57, t[29] = 58, t[30] = 894, t[31] = 60, t[32] = 61, t[33] = 62, t[34] = 63, t[35] = 64, t[36] = 65, t[37] = 66, t[38] = 67, t[39] = 68, t[40] = 69, t[41] = 70, t[42] = 71, t[43] = 72, t[44] = 73, t[45] = 74, t[46] = 75, t[47] = 76, t[48] = 77, t[49] = 78, t[50] = 79, t[51] = 80, t[52] = 81, t[53] = 82, t[54] = 83, t[55] = 84, t[56] = 85, t[57] = 86, t[58] = 87, t[59] = 88, t[60] = 89, t[61] = 90, t[62] = 91, t[63] = 92, t[64] = 93, t[65] = 94, t[66] = 95, t[67] = 96, t[68] = 97, t[69] = 98, t[70] = 99, t[71] = 100, t[72] = 101, t[73] = 102, t[74] = 103, t[75] = 104, t[76] = 105, t[77] = 106, t[78] = 107, t[79] = 108, t[80] = 109, t[81] = 110, t[82] = 111, t[83] = 112, t[84] = 113, t[85] = 114, t[86] = 115, t[87] = 116, t[88] = 117, t[89] = 118, t[90] = 119, t[91] = 120, t[92] = 121, t[93] = 122, t[94] = 123, t[95] = 124, t[96] = 125, t[97] = 126, t[98] = 196, t[99] = 197, t[100] = 199, t[101] = 201, t[102] = 209, t[103] = 214, t[104] = 220, t[105] = 225, t[106] = 224, t[107] = 226, t[108] = 228, t[109] = 227, t[110] = 229, t[111] = 231, t[112] = 233, t[113] = 232, t[114] = 234, t[115] = 235, t[116] = 237, t[117] = 236, t[118] = 238, t[119] = 239, t[120] = 241, t[121] = 243, t[122] = 242, t[123] = 244, t[124] = 246, t[125] = 245, t[126] = 250, t[127] = 249, t[128] = 251, t[129] = 252, t[130] = 8224, t[131] = 176, t[132] = 162, t[133] = 163, t[134] = 167, t[135] = 8226, t[136] = 182, t[137] = 223, t[138] = 174, t[139] = 169, t[140] = 8482, t[141] = 180, t[142] = 168, t[143] = 8800, t[144] = 198, t[145] = 216, t[146] = 8734, t[147] = 177, t[148] = 8804, t[149] = 8805, t[150] = 165, t[151] = 181, t[152] = 8706, t[153] = 8721, t[154] = 8719, t[156] = 8747, t[157] = 170, t[158] = 186, t[159] = 8486, t[160] = 230, t[161] = 248, t[162] = 191, t[163] = 161, t[164] = 172, t[165] = 8730, t[166] = 402, t[167] = 8776, t[168] = 8710, t[169] = 171, t[170] = 187, t[171] = 8230, t[179] = 8220, t[180] = 8221, t[181] = 8216, t[182] = 8217, t[200] = 193, t[203] = 205, t[207] = 211, t[210] = 218, t[223] = 711, t[224] = 321, t[225] = 322, t[226] = 352, t[227] = 353, t[228] = 381, t[229] = 382, t[233] = 221, t[234] = 253, t[252] = 263, t[253] = 268, t[254] = 269, t[258] = 258, t[260] = 260, t[261] = 261, t[265] = 280, t[266] = 281, t[267] = 282, t[268] = 283, t[269] = 313, t[275] = 323, t[276] = 324, t[278] = 328, t[283] = 344, t[284] = 345, t[285] = 346, t[286] = 347, t[292] = 367, t[295] = 377, t[296] = 378, t[298] = 380, t[305] = 963, t[306] = 964, t[307] = 966, t[308] = 8215, t[309] = 8252, t[310] = 8319, t[311] = 8359, t[312] = 8592, t[313] = 8593, t[337] = 9552, t[493] = 1039, t[494] = 1040, t[570] = 1040, t[571] = 1041, t[572] = 1042, t[573] = 1043, t[574] = 1044, t[575] = 1045, t[576] = 1046, t[577] = 1047, t[578] = 1048, t[579] = 1049, t[580] = 1050, t[581] = 1051, t[582] = 1052, t[583] = 1053, t[584] = 1054, t[585] = 1055, t[586] = 1056, t[587] = 1057, t[588] = 1058, t[589] = 1059, t[590] = 1060, t[591] = 1061, t[592] = 1062, t[593] = 1063, t[594] = 1064, t[595] = 1065, t[596] = 1066, t[597] = 1067, t[598] = 1068, t[599] = 1069, t[600] = 1070, t[672] = 1488, t[673] = 1489, t[674] = 1490, t[675] = 1491, t[676] = 1492, t[677] = 1493, t[678] = 1494, t[679] = 1495, t[680] = 1496, t[681] = 1497, t[682] = 1498, t[683] = 1499, t[684] = 1500, t[685] = 1501, t[686] = 1502, t[687] = 1503, t[688] = 1504, t[689] = 1505, t[690] = 1506, t[691] = 1507, t[692] = 1508, t[693] = 1509, t[694] = 1510, t[695] = 1511, t[696] = 1512, t[697] = 1513, t[698] = 1514, t[705] = 1524, t[706] = 8362, t[710] = 64288, t[711] = 64298, t[759] = 1617, t[761] = 1776, t[763] = 1778, t[775] = 1652, t[777] = 1764, t[778] = 1780, t[779] = 1781, t[780] = 1782, t[782] = 771, t[783] = 64726, t[786] = 8363, t[788] = 8532, t[790] = 768, t[791] = 769, t[792] = 768, t[795] = 803, t[797] = 64336, t[798] = 64337, t[799] = 64342, t[800] = 64343, t[801] = 64344, t[802] = 64345, t[803] = 64362, t[804] = 64363, t[805] = 64364, t[2424] = 7821, t[2425] = 7822, t[2426] = 7823, t[2427] = 7824, t[2428] = 7825, t[2429] = 7826, t[2430] = 7827, t[2433] = 7682, t[2678] = 8045, t[2679] = 8046, t[2830] = 1552, t[2838] = 686, t[2840] = 751, t[2842] = 753, t[2843] = 754, t[2844] = 755, t[2846] = 757, t[2856] = 767, t[2857] = 848, t[2858] = 849, t[2862] = 853, t[2863] = 854, t[2864] = 855, t[2865] = 861, t[2866] = 862, t[2906] = 7460, t[2908] = 7462, t[2909] = 7463, t[2910] = 7464, t[2912] = 7466, t[2913] = 7467, t[2914] = 7468, t[2916] = 7470, t[2917] = 7471, t[2918] = 7472, t[2920] = 7474, t[2921] = 7475, t[2922] = 7476, t[2924] = 7478, t[2925] = 7479, t[2926] = 7480, t[2928] = 7482, t[2929] = 7483, t[2930] = 7484, t[2932] = 7486, t[2933] = 7487, t[2934] = 7488, t[2936] = 7490, t[2937] = 7491, t[2938] = 7492, t[2940] = 7494, t[2941] = 7495, t[2942] = 7496, t[2944] = 7498, t[2946] = 7500, t[2948] = 7502, t[2950] = 7504, t[2951] = 7505, t[2952] = 7506, t[2954] = 7508, t[2955] = 7509, t[2956] = 7510, t[2958] = 7512, t[2959] = 7513, t[2960] = 7514, t[2962] = 7516, t[2963] = 7517, t[2964] = 7518, t[2966] = 7520, t[2967] = 7521, t[2968] = 7522, t[2970] = 7524, t[2971] = 7525, t[2972] = 7526, t[2974] = 7528, t[2975] = 7529, t[2976] = 7530, t[2978] = 1537, t[2979] = 1538, t[2980] = 1539, t[2982] = 1549, t[2983] = 1551, t[2984] = 1552, t[2986] = 1554, t[2987] = 1555, t[2988] = 1556, t[2990] = 1623, t[2991] = 1624, t[2995] = 1775, t[2999] = 1791, t[3002] = 64290, t[3003] = 64291, t[3004] = 64292, t[3006] = 64294, t[3007] = 64295, t[3008] = 64296, t[3011] = 1900, t[3014] = 8223, t[3015] = 8244, t[3017] = 7532, t[3018] = 7533, t[3019] = 7534, t[3075] = 7590, t[3076] = 7591, t[3079] = 7594, t[3080] = 7595, t[3083] = 7598, t[3084] = 7599, t[3087] = 7602, t[3088] = 7603, t[3091] = 7606, t[3092] = 7607, t[3095] = 7610, t[3096] = 7611, t[3099] = 7614, t[3100] = 7615, t[3103] = 7618, t[3104] = 7619, t[3107] = 8337, t[3108] = 8338, t[3116] = 1884, t[3119] = 1885, t[3120] = 1885, t[3123] = 1886, t[3124] = 1886, t[3127] = 1887, t[3128] = 1887, t[3131] = 1888, t[3132] = 1888, t[3135] = 1889, t[3136] = 1889, t[3139] = 1890, t[3140] = 1890, t[3143] = 1891, t[3144] = 1891, t[3147] = 1892, t[3148] = 1892, t[3153] = 580, t[3154] = 581, t[3157] = 584, t[3158] = 585, t[3161] = 588, t[3162] = 589, t[3165] = 891, t[3166] = 892, t[3169] = 1274, t[3170] = 1275, t[3173] = 1278, t[3174] = 1279, t[3181] = 7622, t[3182] = 7623, t[3282] = 11799, t[3316] = 578, t[3379] = 42785, t[3393] = 1159, t[3416] = 8377;
}), tx = wt(function(t) {
  t[227] = 322, t[264] = 261, t[291] = 346;
}), nx = wt(function(t) {
  t[1] = 32, t[4] = 65, t[5] = 192, t[6] = 193, t[9] = 196, t[17] = 66, t[18] = 67, t[21] = 268, t[24] = 68, t[28] = 69, t[29] = 200, t[30] = 201, t[32] = 282, t[38] = 70, t[39] = 71, t[44] = 72, t[47] = 73, t[48] = 204, t[49] = 205, t[58] = 74, t[60] = 75, t[62] = 76, t[68] = 77, t[69] = 78, t[75] = 79, t[76] = 210, t[80] = 214, t[87] = 80, t[89] = 81, t[90] = 82, t[92] = 344, t[94] = 83, t[97] = 352, t[100] = 84, t[104] = 85, t[109] = 220, t[115] = 86, t[116] = 87, t[121] = 88, t[122] = 89, t[124] = 221, t[127] = 90, t[129] = 381, t[258] = 97, t[259] = 224, t[260] = 225, t[263] = 228, t[268] = 261, t[271] = 98, t[272] = 99, t[273] = 263, t[275] = 269, t[282] = 100, t[286] = 101, t[287] = 232, t[288] = 233, t[290] = 283, t[295] = 281, t[296] = 102, t[336] = 103, t[346] = 104, t[349] = 105, t[350] = 236, t[351] = 237, t[361] = 106, t[364] = 107, t[367] = 108, t[371] = 322, t[373] = 109, t[374] = 110, t[381] = 111, t[382] = 242, t[383] = 243, t[386] = 246, t[393] = 112, t[395] = 113, t[396] = 114, t[398] = 345, t[400] = 115, t[401] = 347, t[403] = 353, t[410] = 116, t[437] = 117, t[442] = 252, t[448] = 118, t[449] = 119, t[454] = 120, t[455] = 121, t[457] = 253, t[460] = 122, t[462] = 382, t[463] = 380, t[853] = 44, t[855] = 58, t[856] = 46, t[876] = 47, t[878] = 45, t[882] = 45, t[894] = 40, t[895] = 41, t[896] = 91, t[897] = 93, t[923] = 64, t[940] = 163, t[1004] = 48, t[1005] = 49, t[1006] = 50, t[1007] = 51, t[1008] = 52, t[1009] = 53, t[1010] = 54, t[1011] = 55, t[1012] = 56, t[1013] = 57, t[1081] = 37, t[1085] = 43, t[1086] = 45;
});
function J1(t) {
  const e = ir(t);
  return qo()[e];
}
function Q1(t) {
  const e = ir(t);
  return !!(qo()[e] || Kf()[e] || Yl()[e] || sl()[e]);
}
class s0 {
  constructor(e = []) {
    this._map = e;
  }
  get length() {
    return this._map.length;
  }
  forEach(e) {
    for (const n in this._map)
      e(n, this._map[n].codePointAt(0));
  }
  has(e) {
    return this._map[e] !== void 0;
  }
  get(e) {
    return this._map[e];
  }
  charCodeOf(e) {
    const n = this._map;
    if (n.length <= 65536)
      return n.indexOf(e);
    for (const i in n)
      if (n[i] === e)
        return i | 0;
    return -1;
  }
  amend(e) {
    for (const n in e)
      this._map[n] = e[n];
  }
}
class Hn {
  constructor(e, n) {
    this.firstChar = e, this.lastChar = n;
  }
  get length() {
    return this.lastChar + 1 - this.firstChar;
  }
  forEach(e) {
    for (let n = this.firstChar, i = this.lastChar; n <= i; n++)
      e(n, n);
  }
  has(e) {
    return this.firstChar <= e && e <= this.lastChar;
  }
  get(e) {
    if (this.firstChar <= e && e <= this.lastChar)
      return String.fromCharCode(e);
  }
  charCodeOf(e) {
    return Number.isInteger(e) && e >= this.firstChar && e <= this.lastChar ? e : -1;
  }
  amend(e) {
    Ke("Should not call amend()");
  }
}
class uc {
  constructor(e, n) {
    this.properties = n;
    const i = new Xl(e, n, da);
    this.cff = i.parse(), this.cff.duplicateFirstGlyph();
    const s = new sr(this.cff);
    this.seacs = this.cff.seacs;
    try {
      this.data = s.compile();
    } catch {
      I("Failed to compile font " + n.loadedName), this.data = e;
    }
    this._createBuiltInEncoding();
  }
  get numGlyphs() {
    return this.cff.charStrings.count;
  }
  getCharset() {
    return this.cff.charset.charset;
  }
  getGlyphMapping() {
    const e = this.cff, n = this.properties, {
      cidToGidMap: i,
      cMap: s
    } = n, a = e.charset.charset;
    let r, o;
    if (n.composite) {
      let l;
      if ((i == null ? void 0 : i.length) > 0) {
        l = /* @__PURE__ */ Object.create(null);
        for (let f = 0, u = i.length; f < u; f++) {
          const d = i[f];
          d !== void 0 && (l[d] = f);
        }
      }
      r = /* @__PURE__ */ Object.create(null);
      let h;
      if (e.isCIDFont)
        for (o = 0; o < a.length; o++) {
          const f = a[o];
          h = s.charCodeOf(f), (l == null ? void 0 : l[h]) !== void 0 && (h = l[h]), r[h] = o;
        }
      else
        for (o = 0; o < e.charStrings.count; o++)
          h = s.charCodeOf(o), r[h] = o;
      return r;
    }
    let c = e.encoding ? e.encoding.encoding : null;
    return n.isInternalFont && (c = n.defaultEncoding), r = zf(n, c, a), r;
  }
  hasGlyphId(e) {
    return this.cff.hasGlyphId(e);
  }
  _createBuiltInEncoding() {
    const {
      charset: e,
      encoding: n
    } = this.cff;
    if (!e || !n)
      return;
    const i = e.charset, s = n.encoding, a = [];
    for (const r in s) {
      const o = s[r];
      if (o >= 0) {
        const c = i[o];
        c && (a[r] = c);
      }
    }
    a.length > 0 && (this.properties.builtInEncoding = a);
  }
}
function hs(t, e) {
  return Mi(t, e) / 16384;
}
function al(t) {
  const e = t.length;
  let n = 32768;
  return e < 1240 ? n = 107 : e < 33900 && (n = 1131), n;
}
function ix(t, e, n) {
  const i = We(t, e + 2) === 1 ? ht(t, e + 8) : ht(t, e + 16), s = We(t, e + i);
  let a, r, o;
  if (s === 4) {
    We(t, e + i + 2);
    const c = We(t, e + i + 6) >> 1;
    for (r = e + i + 14, a = [], o = 0; o < c; o++, r += 2)
      a[o] = {
        end: We(t, r)
      };
    for (r += 2, o = 0; o < c; o++, r += 2)
      a[o].start = We(t, r);
    for (o = 0; o < c; o++, r += 2)
      a[o].idDelta = We(t, r);
    for (o = 0; o < c; o++, r += 2) {
      let l = We(t, r);
      if (l !== 0) {
        a[o].ids = [];
        for (let h = 0, f = a[o].end - a[o].start + 1; h < f; h++)
          a[o].ids[h] = We(t, r + l), l += 2;
      }
    }
    return a;
  } else if (s === 12) {
    const c = ht(t, e + i + 12);
    for (r = e + i + 16, a = [], o = 0; o < c; o++)
      e = ht(t, r), a.push({
        start: e,
        end: ht(t, r + 4),
        idDelta: ht(t, r + 8) - e
      }), r += 12;
    return a;
  }
  throw new j(`unsupported cmap: ${s}`);
}
function sx(t, e, n, i) {
  var o, c, l;
  const s = {}, r = new Xl(new At(t, e, n - e), s, i).parse();
  return {
    glyphs: r.charStrings.objects,
    subrs: (c = (o = r.topDict.privateDict) == null ? void 0 : o.subrsIndex) == null ? void 0 : c.objects,
    gsubrs: (l = r.globalSubrIndex) == null ? void 0 : l.objects,
    isCFFCIDFont: r.isCIDFont,
    fdSelect: r.fdSelect,
    fdArray: r.fdArray
  };
}
function ax(t, e, n) {
  let i, s;
  n ? (i = 4, s = ht) : (i = 2, s = (o, c) => 2 * We(o, c));
  const a = [];
  let r = s(e, 0);
  for (let o = i; o < e.length; o += i) {
    const c = s(e, o);
    a.push(t.subarray(r, c)), r = c;
  }
  return a;
}
function co(t, e) {
  const n = e.codePointAt(0);
  let i = 0, s = 0, a = t.length - 1;
  for (; s < a; ) {
    const r = s + a + 1 >> 1;
    n < t[r].start ? a = r - 1 : s = r;
  }
  return t[s].start <= n && n <= t[s].end && (i = t[s].idDelta + (t[s].ids ? t[s].ids[n - t[s].start] : n) & 65535), {
    charCode: n,
    glyphId: i
  };
}
function Yf(t, e, n) {
  function i(u, d) {
    l && e.add("L", l), l = [u, d], e.add("M", [u, d]);
  }
  function s(u, d) {
    e.add("L", [u, d]);
  }
  function a(u, d, x, g) {
    e.add("Q", [u, d, x, g]);
  }
  let r = 0;
  const o = Mi(t, r);
  let c, l = null, h = 0, f = 0;
  if (r += 10, o < 0)
    do {
      c = We(t, r);
      const u = We(t, r + 2);
      r += 4;
      let d, x;
      c & 1 ? (c & 2 ? (d = Mi(t, r), x = Mi(t, r + 2)) : (d = We(t, r), x = We(t, r + 2)), r += 4) : c & 2 ? (d = di(t, r++), x = di(t, r++)) : (d = t[r++], x = t[r++]), c & 2 ? (h = d, f = x) : (h = 0, f = 0);
      let g = 1, m = 1, p = 0, b = 0;
      c & 8 ? (g = m = hs(t, r), r += 2) : c & 64 ? (g = hs(t, r), m = hs(t, r + 2), r += 4) : c & 128 && (g = hs(t, r), p = hs(t, r + 2), b = hs(t, r + 4), m = hs(t, r + 6), r += 8);
      const w = n.glyphs[u];
      w && (e.save(), e.transform([g, p, b, m, h, f]), Yf(w, e, n), e.restore());
    } while (c & 32);
  else {
    const u = [];
    let d, x;
    for (d = 0; d < o; d++)
      u.push(We(t, r)), r += 2;
    const g = We(t, r);
    r += 2 + g;
    const m = u.at(-1) + 1, p = [];
    for (; p.length < m; ) {
      c = t[r++];
      let w = 1;
      for (c & 8 && (w += t[r++]); w-- > 0; )
        p.push({
          flags: c
        });
    }
    for (d = 0; d < m; d++) {
      switch (p[d].flags & 18) {
        case 0:
          h += Mi(t, r), r += 2;
          break;
        case 2:
          h -= t[r++];
          break;
        case 18:
          h += t[r++];
          break;
      }
      p[d].x = h;
    }
    for (d = 0; d < m; d++) {
      switch (p[d].flags & 36) {
        case 0:
          f += Mi(t, r), r += 2;
          break;
        case 4:
          f -= t[r++];
          break;
        case 36:
          f += t[r++];
          break;
      }
      p[d].y = f;
    }
    let b = 0;
    for (r = 0; r < o; r++) {
      const w = u[r], y = p.slice(b, w + 1);
      if (y[0].flags & 1)
        y.push(y[0]);
      else if (y.at(-1).flags & 1)
        y.unshift(y.at(-1));
      else {
        const k = {
          flags: 1,
          x: (y[0].x + y.at(-1).x) / 2,
          y: (y[0].y + y.at(-1).y) / 2
        };
        y.unshift(k), y.push(k);
      }
      for (i(y[0].x, y[0].y), d = 1, x = y.length; d < x; d++)
        y[d].flags & 1 ? s(y[d].x, y[d].y) : y[d + 1].flags & 1 ? (a(y[d].x, y[d].y, y[d + 1].x, y[d + 1].y), d++) : a(y[d].x, y[d].y, (y[d].x + y[d + 1].x) / 2, (y[d].y + y[d + 1].y) / 2);
      b = w + 1;
    }
  }
}
function rl(t, e, n, i) {
  function s(d, x) {
    f && e.add("L", f), f = [d, x], e.add("M", [d, x]);
  }
  function a(d, x) {
    e.add("L", [d, x]);
  }
  function r(d, x, g, m, p, b) {
    e.add("C", [d, x, g, m, p, b]);
  }
  const o = [];
  let c = 0, l = 0, h = 0, f = null;
  function u(d) {
    var g;
    let x = 0;
    for (; x < d.length; ) {
      let m = !1, p = d[x++], b, w, y, k, S, C, T, F, R;
      switch (p) {
        case 1:
          h += o.length >> 1, m = !0;
          break;
        case 3:
          h += o.length >> 1, m = !0;
          break;
        case 4:
          l += o.pop(), s(c, l), m = !0;
          break;
        case 5:
          for (; o.length > 0; )
            c += o.shift(), l += o.shift(), a(c, l);
          break;
        case 6:
          for (; o.length > 0 && (c += o.shift(), a(c, l), o.length !== 0); )
            l += o.shift(), a(c, l);
          break;
        case 7:
          for (; o.length > 0 && (l += o.shift(), a(c, l), o.length !== 0); )
            c += o.shift(), a(c, l);
          break;
        case 8:
          for (; o.length > 0; )
            b = c + o.shift(), y = l + o.shift(), w = b + o.shift(), k = y + o.shift(), c = w + o.shift(), l = k + o.shift(), r(b, y, w, k, c, l);
          break;
        case 10:
          if (F = o.pop(), R = null, n.isCFFCIDFont) {
            const D = n.fdSelect.getFDIndex(i);
            if (D >= 0 && D < n.fdArray.length) {
              const M = n.fdArray[D];
              let _;
              (g = M.privateDict) != null && g.subrsIndex && (_ = M.privateDict.subrsIndex.objects), _ && (F += al(_), R = _[F]);
            } else
              I("Invalid fd index for glyph index.");
          } else
            R = n.subrs[F + n.subrsBias];
          R && u(R);
          break;
        case 11:
          return;
        case 12:
          switch (p = d[x++], p) {
            case 34:
              b = c + o.shift(), w = b + o.shift(), S = l + o.shift(), c = w + o.shift(), r(b, l, w, S, c, S), b = c + o.shift(), w = b + o.shift(), c = w + o.shift(), r(b, S, w, l, c, l);
              break;
            case 35:
              b = c + o.shift(), y = l + o.shift(), w = b + o.shift(), k = y + o.shift(), c = w + o.shift(), l = k + o.shift(), r(b, y, w, k, c, l), b = c + o.shift(), y = l + o.shift(), w = b + o.shift(), k = y + o.shift(), c = w + o.shift(), l = k + o.shift(), r(b, y, w, k, c, l), o.pop();
              break;
            case 36:
              b = c + o.shift(), S = l + o.shift(), w = b + o.shift(), C = S + o.shift(), c = w + o.shift(), r(b, S, w, C, c, C), b = c + o.shift(), w = b + o.shift(), T = C + o.shift(), c = w + o.shift(), r(b, C, w, T, c, l);
              break;
            case 37:
              const D = c, M = l;
              b = c + o.shift(), y = l + o.shift(), w = b + o.shift(), k = y + o.shift(), c = w + o.shift(), l = k + o.shift(), r(b, y, w, k, c, l), b = c + o.shift(), y = l + o.shift(), w = b + o.shift(), k = y + o.shift(), c = w, l = k, Math.abs(c - D) > Math.abs(l - M) ? c += o.shift() : l += o.shift(), r(b, y, w, k, c, l);
              break;
            default:
              throw new j(`unknown operator: 12 ${p}`);
          }
          break;
        case 14:
          if (o.length >= 4) {
            const D = o.pop(), M = o.pop();
            l = o.pop(), c = o.pop(), e.save(), e.translate(c, l);
            let _ = co(n.cmap, String.fromCharCode(n.glyphNameMap[Oi[D]]));
            rl(n.glyphs[_.glyphId], e, n, _.glyphId), e.restore(), _ = co(n.cmap, String.fromCharCode(n.glyphNameMap[Oi[M]])), rl(n.glyphs[_.glyphId], e, n, _.glyphId);
          }
          return;
        case 18:
          h += o.length >> 1, m = !0;
          break;
        case 19:
          h += o.length >> 1, x += h + 7 >> 3, m = !0;
          break;
        case 20:
          h += o.length >> 1, x += h + 7 >> 3, m = !0;
          break;
        case 21:
          l += o.pop(), c += o.pop(), s(c, l), m = !0;
          break;
        case 22:
          c += o.pop(), s(c, l), m = !0;
          break;
        case 23:
          h += o.length >> 1, m = !0;
          break;
        case 24:
          for (; o.length > 2; )
            b = c + o.shift(), y = l + o.shift(), w = b + o.shift(), k = y + o.shift(), c = w + o.shift(), l = k + o.shift(), r(b, y, w, k, c, l);
          c += o.shift(), l += o.shift(), a(c, l);
          break;
        case 25:
          for (; o.length > 6; )
            c += o.shift(), l += o.shift(), a(c, l);
          b = c + o.shift(), y = l + o.shift(), w = b + o.shift(), k = y + o.shift(), c = w + o.shift(), l = k + o.shift(), r(b, y, w, k, c, l);
          break;
        case 26:
          for (o.length % 2 && (c += o.shift()); o.length > 0; )
            b = c, y = l + o.shift(), w = b + o.shift(), k = y + o.shift(), c = w, l = k + o.shift(), r(b, y, w, k, c, l);
          break;
        case 27:
          for (o.length % 2 && (l += o.shift()); o.length > 0; )
            b = c + o.shift(), y = l, w = b + o.shift(), k = y + o.shift(), c = w + o.shift(), l = k, r(b, y, w, k, c, l);
          break;
        case 28:
          o.push(Mi(d, x)), x += 2;
          break;
        case 29:
          F = o.pop() + n.gsubrsBias, R = n.gsubrs[F], R && u(R);
          break;
        case 30:
          for (; o.length > 0 && (b = c, y = l + o.shift(), w = b + o.shift(), k = y + o.shift(), c = w + o.shift(), l = k + (o.length === 1 ? o.shift() : 0), r(b, y, w, k, c, l), o.length !== 0); )
            b = c + o.shift(), y = l, w = b + o.shift(), k = y + o.shift(), l = k + o.shift(), c = w + (o.length === 1 ? o.shift() : 0), r(b, y, w, k, c, l);
          break;
        case 31:
          for (; o.length > 0 && (b = c + o.shift(), y = l, w = b + o.shift(), k = y + o.shift(), l = k + o.shift(), c = w + (o.length === 1 ? o.shift() : 0), r(b, y, w, k, c, l), o.length !== 0); )
            b = c, y = l + o.shift(), w = b + o.shift(), k = y + o.shift(), c = w + o.shift(), l = k + (o.length === 1 ? o.shift() : 0), r(b, y, w, k, c, l);
          break;
        default:
          if (p < 32)
            throw new j(`unknown operator: ${p}`);
          p < 247 ? o.push(p - 139) : p < 251 ? o.push((p - 247) * 256 + d[x++] + 108) : p < 255 ? o.push(-(p - 251) * 256 - d[x++] - 108) : (o.push((d[x] << 24 | d[x + 1] << 16 | d[x + 2] << 8 | d[x + 3]) / 65536), x += 4);
          break;
      }
      m && (o.length = 0);
    }
  }
  u(t);
}
const eh = "";
class rx {
  constructor() {
    Ye(this, "cmds", []);
    Ye(this, "transformStack", []);
    Ye(this, "currentTransform", [1, 0, 0, 1, 0, 0]);
  }
  add(e, n) {
    if (n) {
      const {
        currentTransform: i
      } = this;
      for (let s = 0, a = n.length; s < a; s += 2)
        tt.applyTransform(n, i, s);
      this.cmds.push(`${e}${n.join(" ")}`);
    } else
      this.cmds.push(e);
  }
  transform(e) {
    this.currentTransform = tt.transform(this.currentTransform, e);
  }
  translate(e, n) {
    this.transform([1, 0, 0, 1, e, n]);
  }
  save() {
    this.transformStack.push(this.currentTransform.slice());
  }
  restore() {
    this.currentTransform = this.transformStack.pop() || [1, 0, 0, 1, 0, 0];
  }
  getSVG() {
    return this.cmds.join("");
  }
}
class Zf {
  constructor(e) {
    this.fontMatrix = e, this.compiledGlyphs = /* @__PURE__ */ Object.create(null), this.compiledCharCodeToGlyphId = /* @__PURE__ */ Object.create(null);
  }
  getPathJs(e) {
    var r;
    const {
      charCode: n,
      glyphId: i
    } = co(this.cmap, e);
    let s = this.compiledGlyphs[i], a;
    if (s === void 0) {
      try {
        s = this.compileGlyph(this.glyphs[i], i);
      } catch (o) {
        s = eh, a = o;
      }
      this.compiledGlyphs[i] = s;
    }
    if ((r = this.compiledCharCodeToGlyphId)[n] ?? (r[n] = i), a)
      throw a;
    return s;
  }
  compileGlyph(e, n) {
    if (!(e != null && e.length) || e[0] === 14)
      return eh;
    let i = this.fontMatrix;
    if (this.isCFFCIDFont) {
      const a = this.fdSelect.getFDIndex(n);
      a >= 0 && a < this.fdArray.length ? i = this.fdArray[a].getByName("FontMatrix") || Bs : I("Invalid fd index for glyph index.");
    }
    zt(xn(i, 6), "Expected a valid fontMatrix.");
    const s = new rx();
    return s.transform(i.slice()), this.compileGlyphImpl(e, s, n), s.add("Z"), s.getSVG();
  }
  compileGlyphImpl() {
    Ke("Children classes should implement this.");
  }
  hasBuiltPath(e) {
    const {
      charCode: n,
      glyphId: i
    } = co(this.cmap, e);
    return this.compiledGlyphs[i] !== void 0 && this.compiledCharCodeToGlyphId[n] !== void 0;
  }
}
class ox extends Zf {
  constructor(e, n, i) {
    super(i || [488e-6, 0, 0, 488e-6, 0, 0]), this.glyphs = e, this.cmap = n;
  }
  compileGlyphImpl(e, n) {
    Yf(e, n, this);
  }
}
class cx extends Zf {
  constructor(e, n, i) {
    super(i || [1e-3, 0, 0, 1e-3, 0, 0]), this.glyphs = e.glyphs, this.gsubrs = e.gsubrs || [], this.subrs = e.subrs || [], this.cmap = n, this.glyphNameMap = bi(), this.gsubrsBias = al(this.gsubrs), this.subrsBias = al(this.subrs), this.isCFFCIDFont = e.isCFFCIDFont, this.fdSelect = e.fdSelect, this.fdArray = e.fdArray;
  }
  compileGlyphImpl(e, n, i) {
    rl(e, n, this, i);
  }
}
class lx {
  static create(e, n) {
    const i = new Uint8Array(e.data);
    let s, a, r, o, c, l;
    const h = We(i, 4);
    for (let f = 0, u = 12; f < h; f++, u += 16) {
      const d = Cn(i.subarray(u, u + 4)), x = ht(i, u + 8), g = ht(i, u + 12);
      switch (d) {
        case "cmap":
          s = ix(i, x);
          break;
        case "glyf":
          a = i.subarray(x, x + g);
          break;
        case "loca":
          r = i.subarray(x, x + g);
          break;
        case "head":
          l = We(i, x + 18), c = We(i, x + 50);
          break;
        case "CFF ":
          o = sx(i, x, x + g, n);
          break;
      }
    }
    if (a) {
      const f = l ? [1 / l, 0, 0, 1 / l, 0, 0] : e.fontMatrix;
      return new ox(ax(a, r, c), s, f);
    }
    return new cx(o, s, e.fontMatrix);
  }
}
const hx = wt(function(t) {
  t.Courier = 600, t["Courier-Bold"] = 600, t["Courier-BoldOblique"] = 600, t["Courier-Oblique"] = 600, t.Helvetica = wt(function(e) {
    e.space = 278, e.exclam = 278, e.quotedbl = 355, e.numbersign = 556, e.dollar = 556, e.percent = 889, e.ampersand = 667, e.quoteright = 222, e.parenleft = 333, e.parenright = 333, e.asterisk = 389, e.plus = 584, e.comma = 278, e.hyphen = 333, e.period = 278, e.slash = 278, e.zero = 556, e.one = 556, e.two = 556, e.three = 556, e.four = 556, e.five = 556, e.six = 556, e.seven = 556, e.eight = 556, e.nine = 556, e.colon = 278, e.semicolon = 278, e.less = 584, e.equal = 584, e.greater = 584, e.question = 556, e.at = 1015, e.A = 667, e.B = 667, e.C = 722, e.D = 722, e.E = 667, e.F = 611, e.G = 778, e.H = 722, e.I = 278, e.J = 500, e.K = 667, e.L = 556, e.M = 833, e.N = 722, e.O = 778, e.P = 667, e.Q = 778, e.R = 722, e.S = 667, e.T = 611, e.U = 722, e.V = 667, e.W = 944, e.X = 667, e.Y = 667, e.Z = 611, e.bracketleft = 278, e.backslash = 278, e.bracketright = 278, e.asciicircum = 469, e.underscore = 556, e.quoteleft = 222, e.a = 556, e.b = 556, e.c = 500, e.d = 556, e.e = 556, e.f = 278, e.g = 556, e.h = 556, e.i = 222, e.j = 222, e.k = 500, e.l = 222, e.m = 833, e.n = 556, e.o = 556, e.p = 556, e.q = 556, e.r = 333, e.s = 500, e.t = 278, e.u = 556, e.v = 500, e.w = 722, e.x = 500, e.y = 500, e.z = 500, e.braceleft = 334, e.bar = 260, e.braceright = 334, e.asciitilde = 584, e.exclamdown = 333, e.cent = 556, e.sterling = 556, e.fraction = 167, e.yen = 556, e.florin = 556, e.section = 556, e.currency = 556, e.quotesingle = 191, e.quotedblleft = 333, e.guillemotleft = 556, e.guilsinglleft = 333, e.guilsinglright = 333, e.fi = 500, e.fl = 500, e.endash = 556, e.dagger = 556, e.daggerdbl = 556, e.periodcentered = 278, e.paragraph = 537, e.bullet = 350, e.quotesinglbase = 222, e.quotedblbase = 333, e.quotedblright = 333, e.guillemotright = 556, e.ellipsis = 1e3, e.perthousand = 1e3, e.questiondown = 611, e.grave = 333, e.acute = 333, e.circumflex = 333, e.tilde = 333, e.macron = 333, e.breve = 333, e.dotaccent = 333, e.dieresis = 333, e.ring = 333, e.cedilla = 333, e.hungarumlaut = 333, e.ogonek = 333, e.caron = 333, e.emdash = 1e3, e.AE = 1e3, e.ordfeminine = 370, e.Lslash = 556, e.Oslash = 778, e.OE = 1e3, e.ordmasculine = 365, e.ae = 889, e.dotlessi = 278, e.lslash = 222, e.oslash = 611, e.oe = 944, e.germandbls = 611, e.Idieresis = 278, e.eacute = 556, e.abreve = 556, e.uhungarumlaut = 556, e.ecaron = 556, e.Ydieresis = 667, e.divide = 584, e.Yacute = 667, e.Acircumflex = 667, e.aacute = 556, e.Ucircumflex = 722, e.yacute = 500, e.scommaaccent = 500, e.ecircumflex = 556, e.Uring = 722, e.Udieresis = 722, e.aogonek = 556, e.Uacute = 722, e.uogonek = 556, e.Edieresis = 667, e.Dcroat = 722, e.commaaccent = 250, e.copyright = 737, e.Emacron = 667, e.ccaron = 500, e.aring = 556, e.Ncommaaccent = 722, e.lacute = 222, e.agrave = 556, e.Tcommaaccent = 611, e.Cacute = 722, e.atilde = 556, e.Edotaccent = 667, e.scaron = 500, e.scedilla = 500, e.iacute = 278, e.lozenge = 471, e.Rcaron = 722, e.Gcommaaccent = 778, e.ucircumflex = 556, e.acircumflex = 556, e.Amacron = 667, e.rcaron = 333, e.ccedilla = 500, e.Zdotaccent = 611, e.Thorn = 667, e.Omacron = 778, e.Racute = 722, e.Sacute = 667, e.dcaron = 643, e.Umacron = 722, e.uring = 556, e.threesuperior = 333, e.Ograve = 778, e.Agrave = 667, e.Abreve = 667, e.multiply = 584, e.uacute = 556, e.Tcaron = 611, e.partialdiff = 476, e.ydieresis = 500, e.Nacute = 722, e.icircumflex = 278, e.Ecircumflex = 667, e.adieresis = 556, e.edieresis = 556, e.cacute = 500, e.nacute = 556, e.umacron = 556, e.Ncaron = 722, e.Iacute = 278, e.plusminus = 584, e.brokenbar = 260, e.registered = 737, e.Gbreve = 778, e.Idotaccent = 278, e.summation = 600, e.Egrave = 667, e.racute = 333, e.omacron = 556, e.Zacute = 611, e.Zcaron = 611, e.greaterequal = 549, e.Eth = 722, e.Ccedilla = 722, e.lcommaaccent = 222, e.tcaron = 317, e.eogonek = 556, e.Uogonek = 722, e.Aacute = 667, e.Adieresis = 667, e.egrave = 556, e.zacute = 500, e.iogonek = 222, e.Oacute = 778, e.oacute = 556, e.amacron = 556, e.sacute = 500, e.idieresis = 278, e.Ocircumflex = 778, e.Ugrave = 722, e.Delta = 612, e.thorn = 556, e.twosuperior = 333, e.Odieresis = 778, e.mu = 556, e.igrave = 278, e.ohungarumlaut = 556, e.Eogonek = 667, e.dcroat = 556, e.threequarters = 834, e.Scedilla = 667, e.lcaron = 299, e.Kcommaaccent = 667, e.Lacute = 556, e.trademark = 1e3, e.edotaccent = 556, e.Igrave = 278, e.Imacron = 278, e.Lcaron = 556, e.onehalf = 834, e.lessequal = 549, e.ocircumflex = 556, e.ntilde = 556, e.Uhungarumlaut = 722, e.Eacute = 667, e.emacron = 556, e.gbreve = 556, e.onequarter = 834, e.Scaron = 667, e.Scommaaccent = 667, e.Ohungarumlaut = 778, e.degree = 400, e.ograve = 556, e.Ccaron = 722, e.ugrave = 556, e.radical = 453, e.Dcaron = 722, e.rcommaaccent = 333, e.Ntilde = 722, e.otilde = 556, e.Rcommaaccent = 722, e.Lcommaaccent = 556, e.Atilde = 667, e.Aogonek = 667, e.Aring = 667, e.Otilde = 778, e.zdotaccent = 500, e.Ecaron = 667, e.Iogonek = 278, e.kcommaaccent = 500, e.minus = 584, e.Icircumflex = 278, e.ncaron = 556, e.tcommaaccent = 278, e.logicalnot = 584, e.odieresis = 556, e.udieresis = 556, e.notequal = 549, e.gcommaaccent = 556, e.eth = 556, e.zcaron = 500, e.ncommaaccent = 556, e.onesuperior = 333, e.imacron = 278, e.Euro = 556;
  }), t["Helvetica-Bold"] = wt(function(e) {
    e.space = 278, e.exclam = 333, e.quotedbl = 474, e.numbersign = 556, e.dollar = 556, e.percent = 889, e.ampersand = 722, e.quoteright = 278, e.parenleft = 333, e.parenright = 333, e.asterisk = 389, e.plus = 584, e.comma = 278, e.hyphen = 333, e.period = 278, e.slash = 278, e.zero = 556, e.one = 556, e.two = 556, e.three = 556, e.four = 556, e.five = 556, e.six = 556, e.seven = 556, e.eight = 556, e.nine = 556, e.colon = 333, e.semicolon = 333, e.less = 584, e.equal = 584, e.greater = 584, e.question = 611, e.at = 975, e.A = 722, e.B = 722, e.C = 722, e.D = 722, e.E = 667, e.F = 611, e.G = 778, e.H = 722, e.I = 278, e.J = 556, e.K = 722, e.L = 611, e.M = 833, e.N = 722, e.O = 778, e.P = 667, e.Q = 778, e.R = 722, e.S = 667, e.T = 611, e.U = 722, e.V = 667, e.W = 944, e.X = 667, e.Y = 667, e.Z = 611, e.bracketleft = 333, e.backslash = 278, e.bracketright = 333, e.asciicircum = 584, e.underscore = 556, e.quoteleft = 278, e.a = 556, e.b = 611, e.c = 556, e.d = 611, e.e = 556, e.f = 333, e.g = 611, e.h = 611, e.i = 278, e.j = 278, e.k = 556, e.l = 278, e.m = 889, e.n = 611, e.o = 611, e.p = 611, e.q = 611, e.r = 389, e.s = 556, e.t = 333, e.u = 611, e.v = 556, e.w = 778, e.x = 556, e.y = 556, e.z = 500, e.braceleft = 389, e.bar = 280, e.braceright = 389, e.asciitilde = 584, e.exclamdown = 333, e.cent = 556, e.sterling = 556, e.fraction = 167, e.yen = 556, e.florin = 556, e.section = 556, e.currency = 556, e.quotesingle = 238, e.quotedblleft = 500, e.guillemotleft = 556, e.guilsinglleft = 333, e.guilsinglright = 333, e.fi = 611, e.fl = 611, e.endash = 556, e.dagger = 556, e.daggerdbl = 556, e.periodcentered = 278, e.paragraph = 556, e.bullet = 350, e.quotesinglbase = 278, e.quotedblbase = 500, e.quotedblright = 500, e.guillemotright = 556, e.ellipsis = 1e3, e.perthousand = 1e3, e.questiondown = 611, e.grave = 333, e.acute = 333, e.circumflex = 333, e.tilde = 333, e.macron = 333, e.breve = 333, e.dotaccent = 333, e.dieresis = 333, e.ring = 333, e.cedilla = 333, e.hungarumlaut = 333, e.ogonek = 333, e.caron = 333, e.emdash = 1e3, e.AE = 1e3, e.ordfeminine = 370, e.Lslash = 611, e.Oslash = 778, e.OE = 1e3, e.ordmasculine = 365, e.ae = 889, e.dotlessi = 278, e.lslash = 278, e.oslash = 611, e.oe = 944, e.germandbls = 611, e.Idieresis = 278, e.eacute = 556, e.abreve = 556, e.uhungarumlaut = 611, e.ecaron = 556, e.Ydieresis = 667, e.divide = 584, e.Yacute = 667, e.Acircumflex = 722, e.aacute = 556, e.Ucircumflex = 722, e.yacute = 556, e.scommaaccent = 556, e.ecircumflex = 556, e.Uring = 722, e.Udieresis = 722, e.aogonek = 556, e.Uacute = 722, e.uogonek = 611, e.Edieresis = 667, e.Dcroat = 722, e.commaaccent = 250, e.copyright = 737, e.Emacron = 667, e.ccaron = 556, e.aring = 556, e.Ncommaaccent = 722, e.lacute = 278, e.agrave = 556, e.Tcommaaccent = 611, e.Cacute = 722, e.atilde = 556, e.Edotaccent = 667, e.scaron = 556, e.scedilla = 556, e.iacute = 278, e.lozenge = 494, e.Rcaron = 722, e.Gcommaaccent = 778, e.ucircumflex = 611, e.acircumflex = 556, e.Amacron = 722, e.rcaron = 389, e.ccedilla = 556, e.Zdotaccent = 611, e.Thorn = 667, e.Omacron = 778, e.Racute = 722, e.Sacute = 667, e.dcaron = 743, e.Umacron = 722, e.uring = 611, e.threesuperior = 333, e.Ograve = 778, e.Agrave = 722, e.Abreve = 722, e.multiply = 584, e.uacute = 611, e.Tcaron = 611, e.partialdiff = 494, e.ydieresis = 556, e.Nacute = 722, e.icircumflex = 278, e.Ecircumflex = 667, e.adieresis = 556, e.edieresis = 556, e.cacute = 556, e.nacute = 611, e.umacron = 611, e.Ncaron = 722, e.Iacute = 278, e.plusminus = 584, e.brokenbar = 280, e.registered = 737, e.Gbreve = 778, e.Idotaccent = 278, e.summation = 600, e.Egrave = 667, e.racute = 389, e.omacron = 611, e.Zacute = 611, e.Zcaron = 611, e.greaterequal = 549, e.Eth = 722, e.Ccedilla = 722, e.lcommaaccent = 278, e.tcaron = 389, e.eogonek = 556, e.Uogonek = 722, e.Aacute = 722, e.Adieresis = 722, e.egrave = 556, e.zacute = 500, e.iogonek = 278, e.Oacute = 778, e.oacute = 611, e.amacron = 556, e.sacute = 556, e.idieresis = 278, e.Ocircumflex = 778, e.Ugrave = 722, e.Delta = 612, e.thorn = 611, e.twosuperior = 333, e.Odieresis = 778, e.mu = 611, e.igrave = 278, e.ohungarumlaut = 611, e.Eogonek = 667, e.dcroat = 611, e.threequarters = 834, e.Scedilla = 667, e.lcaron = 400, e.Kcommaaccent = 722, e.Lacute = 611, e.trademark = 1e3, e.edotaccent = 556, e.Igrave = 278, e.Imacron = 278, e.Lcaron = 611, e.onehalf = 834, e.lessequal = 549, e.ocircumflex = 611, e.ntilde = 611, e.Uhungarumlaut = 722, e.Eacute = 667, e.emacron = 556, e.gbreve = 611, e.onequarter = 834, e.Scaron = 667, e.Scommaaccent = 667, e.Ohungarumlaut = 778, e.degree = 400, e.ograve = 611, e.Ccaron = 722, e.ugrave = 611, e.radical = 549, e.Dcaron = 722, e.rcommaaccent = 389, e.Ntilde = 722, e.otilde = 611, e.Rcommaaccent = 722, e.Lcommaaccent = 611, e.Atilde = 722, e.Aogonek = 722, e.Aring = 722, e.Otilde = 778, e.zdotaccent = 500, e.Ecaron = 667, e.Iogonek = 278, e.kcommaaccent = 556, e.minus = 584, e.Icircumflex = 278, e.ncaron = 611, e.tcommaaccent = 333, e.logicalnot = 584, e.odieresis = 611, e.udieresis = 611, e.notequal = 549, e.gcommaaccent = 611, e.eth = 611, e.zcaron = 500, e.ncommaaccent = 611, e.onesuperior = 333, e.imacron = 278, e.Euro = 556;
  }), t["Helvetica-BoldOblique"] = wt(function(e) {
    e.space = 278, e.exclam = 333, e.quotedbl = 474, e.numbersign = 556, e.dollar = 556, e.percent = 889, e.ampersand = 722, e.quoteright = 278, e.parenleft = 333, e.parenright = 333, e.asterisk = 389, e.plus = 584, e.comma = 278, e.hyphen = 333, e.period = 278, e.slash = 278, e.zero = 556, e.one = 556, e.two = 556, e.three = 556, e.four = 556, e.five = 556, e.six = 556, e.seven = 556, e.eight = 556, e.nine = 556, e.colon = 333, e.semicolon = 333, e.less = 584, e.equal = 584, e.greater = 584, e.question = 611, e.at = 975, e.A = 722, e.B = 722, e.C = 722, e.D = 722, e.E = 667, e.F = 611, e.G = 778, e.H = 722, e.I = 278, e.J = 556, e.K = 722, e.L = 611, e.M = 833, e.N = 722, e.O = 778, e.P = 667, e.Q = 778, e.R = 722, e.S = 667, e.T = 611, e.U = 722, e.V = 667, e.W = 944, e.X = 667, e.Y = 667, e.Z = 611, e.bracketleft = 333, e.backslash = 278, e.bracketright = 333, e.asciicircum = 584, e.underscore = 556, e.quoteleft = 278, e.a = 556, e.b = 611, e.c = 556, e.d = 611, e.e = 556, e.f = 333, e.g = 611, e.h = 611, e.i = 278, e.j = 278, e.k = 556, e.l = 278, e.m = 889, e.n = 611, e.o = 611, e.p = 611, e.q = 611, e.r = 389, e.s = 556, e.t = 333, e.u = 611, e.v = 556, e.w = 778, e.x = 556, e.y = 556, e.z = 500, e.braceleft = 389, e.bar = 280, e.braceright = 389, e.asciitilde = 584, e.exclamdown = 333, e.cent = 556, e.sterling = 556, e.fraction = 167, e.yen = 556, e.florin = 556, e.section = 556, e.currency = 556, e.quotesingle = 238, e.quotedblleft = 500, e.guillemotleft = 556, e.guilsinglleft = 333, e.guilsinglright = 333, e.fi = 611, e.fl = 611, e.endash = 556, e.dagger = 556, e.daggerdbl = 556, e.periodcentered = 278, e.paragraph = 556, e.bullet = 350, e.quotesinglbase = 278, e.quotedblbase = 500, e.quotedblright = 500, e.guillemotright = 556, e.ellipsis = 1e3, e.perthousand = 1e3, e.questiondown = 611, e.grave = 333, e.acute = 333, e.circumflex = 333, e.tilde = 333, e.macron = 333, e.breve = 333, e.dotaccent = 333, e.dieresis = 333, e.ring = 333, e.cedilla = 333, e.hungarumlaut = 333, e.ogonek = 333, e.caron = 333, e.emdash = 1e3, e.AE = 1e3, e.ordfeminine = 370, e.Lslash = 611, e.Oslash = 778, e.OE = 1e3, e.ordmasculine = 365, e.ae = 889, e.dotlessi = 278, e.lslash = 278, e.oslash = 611, e.oe = 944, e.germandbls = 611, e.Idieresis = 278, e.eacute = 556, e.abreve = 556, e.uhungarumlaut = 611, e.ecaron = 556, e.Ydieresis = 667, e.divide = 584, e.Yacute = 667, e.Acircumflex = 722, e.aacute = 556, e.Ucircumflex = 722, e.yacute = 556, e.scommaaccent = 556, e.ecircumflex = 556, e.Uring = 722, e.Udieresis = 722, e.aogonek = 556, e.Uacute = 722, e.uogonek = 611, e.Edieresis = 667, e.Dcroat = 722, e.commaaccent = 250, e.copyright = 737, e.Emacron = 667, e.ccaron = 556, e.aring = 556, e.Ncommaaccent = 722, e.lacute = 278, e.agrave = 556, e.Tcommaaccent = 611, e.Cacute = 722, e.atilde = 556, e.Edotaccent = 667, e.scaron = 556, e.scedilla = 556, e.iacute = 278, e.lozenge = 494, e.Rcaron = 722, e.Gcommaaccent = 778, e.ucircumflex = 611, e.acircumflex = 556, e.Amacron = 722, e.rcaron = 389, e.ccedilla = 556, e.Zdotaccent = 611, e.Thorn = 667, e.Omacron = 778, e.Racute = 722, e.Sacute = 667, e.dcaron = 743, e.Umacron = 722, e.uring = 611, e.threesuperior = 333, e.Ograve = 778, e.Agrave = 722, e.Abreve = 722, e.multiply = 584, e.uacute = 611, e.Tcaron = 611, e.partialdiff = 494, e.ydieresis = 556, e.Nacute = 722, e.icircumflex = 278, e.Ecircumflex = 667, e.adieresis = 556, e.edieresis = 556, e.cacute = 556, e.nacute = 611, e.umacron = 611, e.Ncaron = 722, e.Iacute = 278, e.plusminus = 584, e.brokenbar = 280, e.registered = 737, e.Gbreve = 778, e.Idotaccent = 278, e.summation = 600, e.Egrave = 667, e.racute = 389, e.omacron = 611, e.Zacute = 611, e.Zcaron = 611, e.greaterequal = 549, e.Eth = 722, e.Ccedilla = 722, e.lcommaaccent = 278, e.tcaron = 389, e.eogonek = 556, e.Uogonek = 722, e.Aacute = 722, e.Adieresis = 722, e.egrave = 556, e.zacute = 500, e.iogonek = 278, e.Oacute = 778, e.oacute = 611, e.amacron = 556, e.sacute = 556, e.idieresis = 278, e.Ocircumflex = 778, e.Ugrave = 722, e.Delta = 612, e.thorn = 611, e.twosuperior = 333, e.Odieresis = 778, e.mu = 611, e.igrave = 278, e.ohungarumlaut = 611, e.Eogonek = 667, e.dcroat = 611, e.threequarters = 834, e.Scedilla = 667, e.lcaron = 400, e.Kcommaaccent = 722, e.Lacute = 611, e.trademark = 1e3, e.edotaccent = 556, e.Igrave = 278, e.Imacron = 278, e.Lcaron = 611, e.onehalf = 834, e.lessequal = 549, e.ocircumflex = 611, e.ntilde = 611, e.Uhungarumlaut = 722, e.Eacute = 667, e.emacron = 556, e.gbreve = 611, e.onequarter = 834, e.Scaron = 667, e.Scommaaccent = 667, e.Ohungarumlaut = 778, e.degree = 400, e.ograve = 611, e.Ccaron = 722, e.ugrave = 611, e.radical = 549, e.Dcaron = 722, e.rcommaaccent = 389, e.Ntilde = 722, e.otilde = 611, e.Rcommaaccent = 722, e.Lcommaaccent = 611, e.Atilde = 722, e.Aogonek = 722, e.Aring = 722, e.Otilde = 778, e.zdotaccent = 500, e.Ecaron = 667, e.Iogonek = 278, e.kcommaaccent = 556, e.minus = 584, e.Icircumflex = 278, e.ncaron = 611, e.tcommaaccent = 333, e.logicalnot = 584, e.odieresis = 611, e.udieresis = 611, e.notequal = 549, e.gcommaaccent = 611, e.eth = 611, e.zcaron = 500, e.ncommaaccent = 611, e.onesuperior = 333, e.imacron = 278, e.Euro = 556;
  }), t["Helvetica-Oblique"] = wt(function(e) {
    e.space = 278, e.exclam = 278, e.quotedbl = 355, e.numbersign = 556, e.dollar = 556, e.percent = 889, e.ampersand = 667, e.quoteright = 222, e.parenleft = 333, e.parenright = 333, e.asterisk = 389, e.plus = 584, e.comma = 278, e.hyphen = 333, e.period = 278, e.slash = 278, e.zero = 556, e.one = 556, e.two = 556, e.three = 556, e.four = 556, e.five = 556, e.six = 556, e.seven = 556, e.eight = 556, e.nine = 556, e.colon = 278, e.semicolon = 278, e.less = 584, e.equal = 584, e.greater = 584, e.question = 556, e.at = 1015, e.A = 667, e.B = 667, e.C = 722, e.D = 722, e.E = 667, e.F = 611, e.G = 778, e.H = 722, e.I = 278, e.J = 500, e.K = 667, e.L = 556, e.M = 833, e.N = 722, e.O = 778, e.P = 667, e.Q = 778, e.R = 722, e.S = 667, e.T = 611, e.U = 722, e.V = 667, e.W = 944, e.X = 667, e.Y = 667, e.Z = 611, e.bracketleft = 278, e.backslash = 278, e.bracketright = 278, e.asciicircum = 469, e.underscore = 556, e.quoteleft = 222, e.a = 556, e.b = 556, e.c = 500, e.d = 556, e.e = 556, e.f = 278, e.g = 556, e.h = 556, e.i = 222, e.j = 222, e.k = 500, e.l = 222, e.m = 833, e.n = 556, e.o = 556, e.p = 556, e.q = 556, e.r = 333, e.s = 500, e.t = 278, e.u = 556, e.v = 500, e.w = 722, e.x = 500, e.y = 500, e.z = 500, e.braceleft = 334, e.bar = 260, e.braceright = 334, e.asciitilde = 584, e.exclamdown = 333, e.cent = 556, e.sterling = 556, e.fraction = 167, e.yen = 556, e.florin = 556, e.section = 556, e.currency = 556, e.quotesingle = 191, e.quotedblleft = 333, e.guillemotleft = 556, e.guilsinglleft = 333, e.guilsinglright = 333, e.fi = 500, e.fl = 500, e.endash = 556, e.dagger = 556, e.daggerdbl = 556, e.periodcentered = 278, e.paragraph = 537, e.bullet = 350, e.quotesinglbase = 222, e.quotedblbase = 333, e.quotedblright = 333, e.guillemotright = 556, e.ellipsis = 1e3, e.perthousand = 1e3, e.questiondown = 611, e.grave = 333, e.acute = 333, e.circumflex = 333, e.tilde = 333, e.macron = 333, e.breve = 333, e.dotaccent = 333, e.dieresis = 333, e.ring = 333, e.cedilla = 333, e.hungarumlaut = 333, e.ogonek = 333, e.caron = 333, e.emdash = 1e3, e.AE = 1e3, e.ordfeminine = 370, e.Lslash = 556, e.Oslash = 778, e.OE = 1e3, e.ordmasculine = 365, e.ae = 889, e.dotlessi = 278, e.lslash = 222, e.oslash = 611, e.oe = 944, e.germandbls = 611, e.Idieresis = 278, e.eacute = 556, e.abreve = 556, e.uhungarumlaut = 556, e.ecaron = 556, e.Ydieresis = 667, e.divide = 584, e.Yacute = 667, e.Acircumflex = 667, e.aacute = 556, e.Ucircumflex = 722, e.yacute = 500, e.scommaaccent = 500, e.ecircumflex = 556, e.Uring = 722, e.Udieresis = 722, e.aogonek = 556, e.Uacute = 722, e.uogonek = 556, e.Edieresis = 667, e.Dcroat = 722, e.commaaccent = 250, e.copyright = 737, e.Emacron = 667, e.ccaron = 500, e.aring = 556, e.Ncommaaccent = 722, e.lacute = 222, e.agrave = 556, e.Tcommaaccent = 611, e.Cacute = 722, e.atilde = 556, e.Edotaccent = 667, e.scaron = 500, e.scedilla = 500, e.iacute = 278, e.lozenge = 471, e.Rcaron = 722, e.Gcommaaccent = 778, e.ucircumflex = 556, e.acircumflex = 556, e.Amacron = 667, e.rcaron = 333, e.ccedilla = 500, e.Zdotaccent = 611, e.Thorn = 667, e.Omacron = 778, e.Racute = 722, e.Sacute = 667, e.dcaron = 643, e.Umacron = 722, e.uring = 556, e.threesuperior = 333, e.Ograve = 778, e.Agrave = 667, e.Abreve = 667, e.multiply = 584, e.uacute = 556, e.Tcaron = 611, e.partialdiff = 476, e.ydieresis = 500, e.Nacute = 722, e.icircumflex = 278, e.Ecircumflex = 667, e.adieresis = 556, e.edieresis = 556, e.cacute = 500, e.nacute = 556, e.umacron = 556, e.Ncaron = 722, e.Iacute = 278, e.plusminus = 584, e.brokenbar = 260, e.registered = 737, e.Gbreve = 778, e.Idotaccent = 278, e.summation = 600, e.Egrave = 667, e.racute = 333, e.omacron = 556, e.Zacute = 611, e.Zcaron = 611, e.greaterequal = 549, e.Eth = 722, e.Ccedilla = 722, e.lcommaaccent = 222, e.tcaron = 317, e.eogonek = 556, e.Uogonek = 722, e.Aacute = 667, e.Adieresis = 667, e.egrave = 556, e.zacute = 500, e.iogonek = 222, e.Oacute = 778, e.oacute = 556, e.amacron = 556, e.sacute = 500, e.idieresis = 278, e.Ocircumflex = 778, e.Ugrave = 722, e.Delta = 612, e.thorn = 556, e.twosuperior = 333, e.Odieresis = 778, e.mu = 556, e.igrave = 278, e.ohungarumlaut = 556, e.Eogonek = 667, e.dcroat = 556, e.threequarters = 834, e.Scedilla = 667, e.lcaron = 299, e.Kcommaaccent = 667, e.Lacute = 556, e.trademark = 1e3, e.edotaccent = 556, e.Igrave = 278, e.Imacron = 278, e.Lcaron = 556, e.onehalf = 834, e.lessequal = 549, e.ocircumflex = 556, e.ntilde = 556, e.Uhungarumlaut = 722, e.Eacute = 667, e.emacron = 556, e.gbreve = 556, e.onequarter = 834, e.Scaron = 667, e.Scommaaccent = 667, e.Ohungarumlaut = 778, e.degree = 400, e.ograve = 556, e.Ccaron = 722, e.ugrave = 556, e.radical = 453, e.Dcaron = 722, e.rcommaaccent = 333, e.Ntilde = 722, e.otilde = 556, e.Rcommaaccent = 722, e.Lcommaaccent = 556, e.Atilde = 667, e.Aogonek = 667, e.Aring = 667, e.Otilde = 778, e.zdotaccent = 500, e.Ecaron = 667, e.Iogonek = 278, e.kcommaaccent = 500, e.minus = 584, e.Icircumflex = 278, e.ncaron = 556, e.tcommaaccent = 278, e.logicalnot = 584, e.odieresis = 556, e.udieresis = 556, e.notequal = 549, e.gcommaaccent = 556, e.eth = 556, e.zcaron = 500, e.ncommaaccent = 556, e.onesuperior = 333, e.imacron = 278, e.Euro = 556;
  }), t.Symbol = wt(function(e) {
    e.space = 250, e.exclam = 333, e.universal = 713, e.numbersign = 500, e.existential = 549, e.percent = 833, e.ampersand = 778, e.suchthat = 439, e.parenleft = 333, e.parenright = 333, e.asteriskmath = 500, e.plus = 549, e.comma = 250, e.minus = 549, e.period = 250, e.slash = 278, e.zero = 500, e.one = 500, e.two = 500, e.three = 500, e.four = 500, e.five = 500, e.six = 500, e.seven = 500, e.eight = 500, e.nine = 500, e.colon = 278, e.semicolon = 278, e.less = 549, e.equal = 549, e.greater = 549, e.question = 444, e.congruent = 549, e.Alpha = 722, e.Beta = 667, e.Chi = 722, e.Delta = 612, e.Epsilon = 611, e.Phi = 763, e.Gamma = 603, e.Eta = 722, e.Iota = 333, e.theta1 = 631, e.Kappa = 722, e.Lambda = 686, e.Mu = 889, e.Nu = 722, e.Omicron = 722, e.Pi = 768, e.Theta = 741, e.Rho = 556, e.Sigma = 592, e.Tau = 611, e.Upsilon = 690, e.sigma1 = 439, e.Omega = 768, e.Xi = 645, e.Psi = 795, e.Zeta = 611, e.bracketleft = 333, e.therefore = 863, e.bracketright = 333, e.perpendicular = 658, e.underscore = 500, e.radicalex = 500, e.alpha = 631, e.beta = 549, e.chi = 549, e.delta = 494, e.epsilon = 439, e.phi = 521, e.gamma = 411, e.eta = 603, e.iota = 329, e.phi1 = 603, e.kappa = 549, e.lambda = 549, e.mu = 576, e.nu = 521, e.omicron = 549, e.pi = 549, e.theta = 521, e.rho = 549, e.sigma = 603, e.tau = 439, e.upsilon = 576, e.omega1 = 713, e.omega = 686, e.xi = 493, e.psi = 686, e.zeta = 494, e.braceleft = 480, e.bar = 200, e.braceright = 480, e.similar = 549, e.Euro = 750, e.Upsilon1 = 620, e.minute = 247, e.lessequal = 549, e.fraction = 167, e.infinity = 713, e.florin = 500, e.club = 753, e.diamond = 753, e.heart = 753, e.spade = 753, e.arrowboth = 1042, e.arrowleft = 987, e.arrowup = 603, e.arrowright = 987, e.arrowdown = 603, e.degree = 400, e.plusminus = 549, e.second = 411, e.greaterequal = 549, e.multiply = 549, e.proportional = 713, e.partialdiff = 494, e.bullet = 460, e.divide = 549, e.notequal = 549, e.equivalence = 549, e.approxequal = 549, e.ellipsis = 1e3, e.arrowvertex = 603, e.arrowhorizex = 1e3, e.carriagereturn = 658, e.aleph = 823, e.Ifraktur = 686, e.Rfraktur = 795, e.weierstrass = 987, e.circlemultiply = 768, e.circleplus = 768, e.emptyset = 823, e.intersection = 768, e.union = 768, e.propersuperset = 713, e.reflexsuperset = 713, e.notsubset = 713, e.propersubset = 713, e.reflexsubset = 713, e.element = 713, e.notelement = 713, e.angle = 768, e.gradient = 713, e.registerserif = 790, e.copyrightserif = 790, e.trademarkserif = 890, e.product = 823, e.radical = 549, e.dotmath = 250, e.logicalnot = 713, e.logicaland = 603, e.logicalor = 603, e.arrowdblboth = 1042, e.arrowdblleft = 987, e.arrowdblup = 603, e.arrowdblright = 987, e.arrowdbldown = 603, e.lozenge = 494, e.angleleft = 329, e.registersans = 790, e.copyrightsans = 790, e.trademarksans = 786, e.summation = 713, e.parenlefttp = 384, e.parenleftex = 384, e.parenleftbt = 384, e.bracketlefttp = 384, e.bracketleftex = 384, e.bracketleftbt = 384, e.bracelefttp = 494, e.braceleftmid = 494, e.braceleftbt = 494, e.braceex = 494, e.angleright = 329, e.integral = 274, e.integraltp = 686, e.integralex = 686, e.integralbt = 686, e.parenrighttp = 384, e.parenrightex = 384, e.parenrightbt = 384, e.bracketrighttp = 384, e.bracketrightex = 384, e.bracketrightbt = 384, e.bracerighttp = 494, e.bracerightmid = 494, e.bracerightbt = 494, e.apple = 790;
  }), t["Times-Roman"] = wt(function(e) {
    e.space = 250, e.exclam = 333, e.quotedbl = 408, e.numbersign = 500, e.dollar = 500, e.percent = 833, e.ampersand = 778, e.quoteright = 333, e.parenleft = 333, e.parenright = 333, e.asterisk = 500, e.plus = 564, e.comma = 250, e.hyphen = 333, e.period = 250, e.slash = 278, e.zero = 500, e.one = 500, e.two = 500, e.three = 500, e.four = 500, e.five = 500, e.six = 500, e.seven = 500, e.eight = 500, e.nine = 500, e.colon = 278, e.semicolon = 278, e.less = 564, e.equal = 564, e.greater = 564, e.question = 444, e.at = 921, e.A = 722, e.B = 667, e.C = 667, e.D = 722, e.E = 611, e.F = 556, e.G = 722, e.H = 722, e.I = 333, e.J = 389, e.K = 722, e.L = 611, e.M = 889, e.N = 722, e.O = 722, e.P = 556, e.Q = 722, e.R = 667, e.S = 556, e.T = 611, e.U = 722, e.V = 722, e.W = 944, e.X = 722, e.Y = 722, e.Z = 611, e.bracketleft = 333, e.backslash = 278, e.bracketright = 333, e.asciicircum = 469, e.underscore = 500, e.quoteleft = 333, e.a = 444, e.b = 500, e.c = 444, e.d = 500, e.e = 444, e.f = 333, e.g = 500, e.h = 500, e.i = 278, e.j = 278, e.k = 500, e.l = 278, e.m = 778, e.n = 500, e.o = 500, e.p = 500, e.q = 500, e.r = 333, e.s = 389, e.t = 278, e.u = 500, e.v = 500, e.w = 722, e.x = 500, e.y = 500, e.z = 444, e.braceleft = 480, e.bar = 200, e.braceright = 480, e.asciitilde = 541, e.exclamdown = 333, e.cent = 500, e.sterling = 500, e.fraction = 167, e.yen = 500, e.florin = 500, e.section = 500, e.currency = 500, e.quotesingle = 180, e.quotedblleft = 444, e.guillemotleft = 500, e.guilsinglleft = 333, e.guilsinglright = 333, e.fi = 556, e.fl = 556, e.endash = 500, e.dagger = 500, e.daggerdbl = 500, e.periodcentered = 250, e.paragraph = 453, e.bullet = 350, e.quotesinglbase = 333, e.quotedblbase = 444, e.quotedblright = 444, e.guillemotright = 500, e.ellipsis = 1e3, e.perthousand = 1e3, e.questiondown = 444, e.grave = 333, e.acute = 333, e.circumflex = 333, e.tilde = 333, e.macron = 333, e.breve = 333, e.dotaccent = 333, e.dieresis = 333, e.ring = 333, e.cedilla = 333, e.hungarumlaut = 333, e.ogonek = 333, e.caron = 333, e.emdash = 1e3, e.AE = 889, e.ordfeminine = 276, e.Lslash = 611, e.Oslash = 722, e.OE = 889, e.ordmasculine = 310, e.ae = 667, e.dotlessi = 278, e.lslash = 278, e.oslash = 500, e.oe = 722, e.germandbls = 500, e.Idieresis = 333, e.eacute = 444, e.abreve = 444, e.uhungarumlaut = 500, e.ecaron = 444, e.Ydieresis = 722, e.divide = 564, e.Yacute = 722, e.Acircumflex = 722, e.aacute = 444, e.Ucircumflex = 722, e.yacute = 500, e.scommaaccent = 389, e.ecircumflex = 444, e.Uring = 722, e.Udieresis = 722, e.aogonek = 444, e.Uacute = 722, e.uogonek = 500, e.Edieresis = 611, e.Dcroat = 722, e.commaaccent = 250, e.copyright = 760, e.Emacron = 611, e.ccaron = 444, e.aring = 444, e.Ncommaaccent = 722, e.lacute = 278, e.agrave = 444, e.Tcommaaccent = 611, e.Cacute = 667, e.atilde = 444, e.Edotaccent = 611, e.scaron = 389, e.scedilla = 389, e.iacute = 278, e.lozenge = 471, e.Rcaron = 667, e.Gcommaaccent = 722, e.ucircumflex = 500, e.acircumflex = 444, e.Amacron = 722, e.rcaron = 333, e.ccedilla = 444, e.Zdotaccent = 611, e.Thorn = 556, e.Omacron = 722, e.Racute = 667, e.Sacute = 556, e.dcaron = 588, e.Umacron = 722, e.uring = 500, e.threesuperior = 300, e.Ograve = 722, e.Agrave = 722, e.Abreve = 722, e.multiply = 564, e.uacute = 500, e.Tcaron = 611, e.partialdiff = 476, e.ydieresis = 500, e.Nacute = 722, e.icircumflex = 278, e.Ecircumflex = 611, e.adieresis = 444, e.edieresis = 444, e.cacute = 444, e.nacute = 500, e.umacron = 500, e.Ncaron = 722, e.Iacute = 333, e.plusminus = 564, e.brokenbar = 200, e.registered = 760, e.Gbreve = 722, e.Idotaccent = 333, e.summation = 600, e.Egrave = 611, e.racute = 333, e.omacron = 500, e.Zacute = 611, e.Zcaron = 611, e.greaterequal = 549, e.Eth = 722, e.Ccedilla = 667, e.lcommaaccent = 278, e.tcaron = 326, e.eogonek = 444, e.Uogonek = 722, e.Aacute = 722, e.Adieresis = 722, e.egrave = 444, e.zacute = 444, e.iogonek = 278, e.Oacute = 722, e.oacute = 500, e.amacron = 444, e.sacute = 389, e.idieresis = 278, e.Ocircumflex = 722, e.Ugrave = 722, e.Delta = 612, e.thorn = 500, e.twosuperior = 300, e.Odieresis = 722, e.mu = 500, e.igrave = 278, e.ohungarumlaut = 500, e.Eogonek = 611, e.dcroat = 500, e.threequarters = 750, e.Scedilla = 556, e.lcaron = 344, e.Kcommaaccent = 722, e.Lacute = 611, e.trademark = 980, e.edotaccent = 444, e.Igrave = 333, e.Imacron = 333, e.Lcaron = 611, e.onehalf = 750, e.lessequal = 549, e.ocircumflex = 500, e.ntilde = 500, e.Uhungarumlaut = 722, e.Eacute = 611, e.emacron = 444, e.gbreve = 500, e.onequarter = 750, e.Scaron = 556, e.Scommaaccent = 556, e.Ohungarumlaut = 722, e.degree = 400, e.ograve = 500, e.Ccaron = 667, e.ugrave = 500, e.radical = 453, e.Dcaron = 722, e.rcommaaccent = 333, e.Ntilde = 722, e.otilde = 500, e.Rcommaaccent = 667, e.Lcommaaccent = 611, e.Atilde = 722, e.Aogonek = 722, e.Aring = 722, e.Otilde = 722, e.zdotaccent = 444, e.Ecaron = 611, e.Iogonek = 333, e.kcommaaccent = 500, e.minus = 564, e.Icircumflex = 333, e.ncaron = 500, e.tcommaaccent = 278, e.logicalnot = 564, e.odieresis = 500, e.udieresis = 500, e.notequal = 549, e.gcommaaccent = 500, e.eth = 500, e.zcaron = 444, e.ncommaaccent = 500, e.onesuperior = 300, e.imacron = 278, e.Euro = 500;
  }), t["Times-Bold"] = wt(function(e) {
    e.space = 250, e.exclam = 333, e.quotedbl = 555, e.numbersign = 500, e.dollar = 500, e.percent = 1e3, e.ampersand = 833, e.quoteright = 333, e.parenleft = 333, e.parenright = 333, e.asterisk = 500, e.plus = 570, e.comma = 250, e.hyphen = 333, e.period = 250, e.slash = 278, e.zero = 500, e.one = 500, e.two = 500, e.three = 500, e.four = 500, e.five = 500, e.six = 500, e.seven = 500, e.eight = 500, e.nine = 500, e.colon = 333, e.semicolon = 333, e.less = 570, e.equal = 570, e.greater = 570, e.question = 500, e.at = 930, e.A = 722, e.B = 667, e.C = 722, e.D = 722, e.E = 667, e.F = 611, e.G = 778, e.H = 778, e.I = 389, e.J = 500, e.K = 778, e.L = 667, e.M = 944, e.N = 722, e.O = 778, e.P = 611, e.Q = 778, e.R = 722, e.S = 556, e.T = 667, e.U = 722, e.V = 722, e.W = 1e3, e.X = 722, e.Y = 722, e.Z = 667, e.bracketleft = 333, e.backslash = 278, e.bracketright = 333, e.asciicircum = 581, e.underscore = 500, e.quoteleft = 333, e.a = 500, e.b = 556, e.c = 444, e.d = 556, e.e = 444, e.f = 333, e.g = 500, e.h = 556, e.i = 278, e.j = 333, e.k = 556, e.l = 278, e.m = 833, e.n = 556, e.o = 500, e.p = 556, e.q = 556, e.r = 444, e.s = 389, e.t = 333, e.u = 556, e.v = 500, e.w = 722, e.x = 500, e.y = 500, e.z = 444, e.braceleft = 394, e.bar = 220, e.braceright = 394, e.asciitilde = 520, e.exclamdown = 333, e.cent = 500, e.sterling = 500, e.fraction = 167, e.yen = 500, e.florin = 500, e.section = 500, e.currency = 500, e.quotesingle = 278, e.quotedblleft = 500, e.guillemotleft = 500, e.guilsinglleft = 333, e.guilsinglright = 333, e.fi = 556, e.fl = 556, e.endash = 500, e.dagger = 500, e.daggerdbl = 500, e.periodcentered = 250, e.paragraph = 540, e.bullet = 350, e.quotesinglbase = 333, e.quotedblbase = 500, e.quotedblright = 500, e.guillemotright = 500, e.ellipsis = 1e3, e.perthousand = 1e3, e.questiondown = 500, e.grave = 333, e.acute = 333, e.circumflex = 333, e.tilde = 333, e.macron = 333, e.breve = 333, e.dotaccent = 333, e.dieresis = 333, e.ring = 333, e.cedilla = 333, e.hungarumlaut = 333, e.ogonek = 333, e.caron = 333, e.emdash = 1e3, e.AE = 1e3, e.ordfeminine = 300, e.Lslash = 667, e.Oslash = 778, e.OE = 1e3, e.ordmasculine = 330, e.ae = 722, e.dotlessi = 278, e.lslash = 278, e.oslash = 500, e.oe = 722, e.germandbls = 556, e.Idieresis = 389, e.eacute = 444, e.abreve = 500, e.uhungarumlaut = 556, e.ecaron = 444, e.Ydieresis = 722, e.divide = 570, e.Yacute = 722, e.Acircumflex = 722, e.aacute = 500, e.Ucircumflex = 722, e.yacute = 500, e.scommaaccent = 389, e.ecircumflex = 444, e.Uring = 722, e.Udieresis = 722, e.aogonek = 500, e.Uacute = 722, e.uogonek = 556, e.Edieresis = 667, e.Dcroat = 722, e.commaaccent = 250, e.copyright = 747, e.Emacron = 667, e.ccaron = 444, e.aring = 500, e.Ncommaaccent = 722, e.lacute = 278, e.agrave = 500, e.Tcommaaccent = 667, e.Cacute = 722, e.atilde = 500, e.Edotaccent = 667, e.scaron = 389, e.scedilla = 389, e.iacute = 278, e.lozenge = 494, e.Rcaron = 722, e.Gcommaaccent = 778, e.ucircumflex = 556, e.acircumflex = 500, e.Amacron = 722, e.rcaron = 444, e.ccedilla = 444, e.Zdotaccent = 667, e.Thorn = 611, e.Omacron = 778, e.Racute = 722, e.Sacute = 556, e.dcaron = 672, e.Umacron = 722, e.uring = 556, e.threesuperior = 300, e.Ograve = 778, e.Agrave = 722, e.Abreve = 722, e.multiply = 570, e.uacute = 556, e.Tcaron = 667, e.partialdiff = 494, e.ydieresis = 500, e.Nacute = 722, e.icircumflex = 278, e.Ecircumflex = 667, e.adieresis = 500, e.edieresis = 444, e.cacute = 444, e.nacute = 556, e.umacron = 556, e.Ncaron = 722, e.Iacute = 389, e.plusminus = 570, e.brokenbar = 220, e.registered = 747, e.Gbreve = 778, e.Idotaccent = 389, e.summation = 600, e.Egrave = 667, e.racute = 444, e.omacron = 500, e.Zacute = 667, e.Zcaron = 667, e.greaterequal = 549, e.Eth = 722, e.Ccedilla = 722, e.lcommaaccent = 278, e.tcaron = 416, e.eogonek = 444, e.Uogonek = 722, e.Aacute = 722, e.Adieresis = 722, e.egrave = 444, e.zacute = 444, e.iogonek = 278, e.Oacute = 778, e.oacute = 500, e.amacron = 500, e.sacute = 389, e.idieresis = 278, e.Ocircumflex = 778, e.Ugrave = 722, e.Delta = 612, e.thorn = 556, e.twosuperior = 300, e.Odieresis = 778, e.mu = 556, e.igrave = 278, e.ohungarumlaut = 500, e.Eogonek = 667, e.dcroat = 556, e.threequarters = 750, e.Scedilla = 556, e.lcaron = 394, e.Kcommaaccent = 778, e.Lacute = 667, e.trademark = 1e3, e.edotaccent = 444, e.Igrave = 389, e.Imacron = 389, e.Lcaron = 667, e.onehalf = 750, e.lessequal = 549, e.ocircumflex = 500, e.ntilde = 556, e.Uhungarumlaut = 722, e.Eacute = 667, e.emacron = 444, e.gbreve = 500, e.onequarter = 750, e.Scaron = 556, e.Scommaaccent = 556, e.Ohungarumlaut = 778, e.degree = 400, e.ograve = 500, e.Ccaron = 722, e.ugrave = 556, e.radical = 549, e.Dcaron = 722, e.rcommaaccent = 444, e.Ntilde = 722, e.otilde = 500, e.Rcommaaccent = 722, e.Lcommaaccent = 667, e.Atilde = 722, e.Aogonek = 722, e.Aring = 722, e.Otilde = 778, e.zdotaccent = 444, e.Ecaron = 667, e.Iogonek = 389, e.kcommaaccent = 556, e.minus = 570, e.Icircumflex = 389, e.ncaron = 556, e.tcommaaccent = 333, e.logicalnot = 570, e.odieresis = 500, e.udieresis = 556, e.notequal = 549, e.gcommaaccent = 500, e.eth = 500, e.zcaron = 444, e.ncommaaccent = 556, e.onesuperior = 300, e.imacron = 278, e.Euro = 500;
  }), t["Times-BoldItalic"] = wt(function(e) {
    e.space = 250, e.exclam = 389, e.quotedbl = 555, e.numbersign = 500, e.dollar = 500, e.percent = 833, e.ampersand = 778, e.quoteright = 333, e.parenleft = 333, e.parenright = 333, e.asterisk = 500, e.plus = 570, e.comma = 250, e.hyphen = 333, e.period = 250, e.slash = 278, e.zero = 500, e.one = 500, e.two = 500, e.three = 500, e.four = 500, e.five = 500, e.six = 500, e.seven = 500, e.eight = 500, e.nine = 500, e.colon = 333, e.semicolon = 333, e.less = 570, e.equal = 570, e.greater = 570, e.question = 500, e.at = 832, e.A = 667, e.B = 667, e.C = 667, e.D = 722, e.E = 667, e.F = 667, e.G = 722, e.H = 778, e.I = 389, e.J = 500, e.K = 667, e.L = 611, e.M = 889, e.N = 722, e.O = 722, e.P = 611, e.Q = 722, e.R = 667, e.S = 556, e.T = 611, e.U = 722, e.V = 667, e.W = 889, e.X = 667, e.Y = 611, e.Z = 611, e.bracketleft = 333, e.backslash = 278, e.bracketright = 333, e.asciicircum = 570, e.underscore = 500, e.quoteleft = 333, e.a = 500, e.b = 500, e.c = 444, e.d = 500, e.e = 444, e.f = 333, e.g = 500, e.h = 556, e.i = 278, e.j = 278, e.k = 500, e.l = 278, e.m = 778, e.n = 556, e.o = 500, e.p = 500, e.q = 500, e.r = 389, e.s = 389, e.t = 278, e.u = 556, e.v = 444, e.w = 667, e.x = 500, e.y = 444, e.z = 389, e.braceleft = 348, e.bar = 220, e.braceright = 348, e.asciitilde = 570, e.exclamdown = 389, e.cent = 500, e.sterling = 500, e.fraction = 167, e.yen = 500, e.florin = 500, e.section = 500, e.currency = 500, e.quotesingle = 278, e.quotedblleft = 500, e.guillemotleft = 500, e.guilsinglleft = 333, e.guilsinglright = 333, e.fi = 556, e.fl = 556, e.endash = 500, e.dagger = 500, e.daggerdbl = 500, e.periodcentered = 250, e.paragraph = 500, e.bullet = 350, e.quotesinglbase = 333, e.quotedblbase = 500, e.quotedblright = 500, e.guillemotright = 500, e.ellipsis = 1e3, e.perthousand = 1e3, e.questiondown = 500, e.grave = 333, e.acute = 333, e.circumflex = 333, e.tilde = 333, e.macron = 333, e.breve = 333, e.dotaccent = 333, e.dieresis = 333, e.ring = 333, e.cedilla = 333, e.hungarumlaut = 333, e.ogonek = 333, e.caron = 333, e.emdash = 1e3, e.AE = 944, e.ordfeminine = 266, e.Lslash = 611, e.Oslash = 722, e.OE = 944, e.ordmasculine = 300, e.ae = 722, e.dotlessi = 278, e.lslash = 278, e.oslash = 500, e.oe = 722, e.germandbls = 500, e.Idieresis = 389, e.eacute = 444, e.abreve = 500, e.uhungarumlaut = 556, e.ecaron = 444, e.Ydieresis = 611, e.divide = 570, e.Yacute = 611, e.Acircumflex = 667, e.aacute = 500, e.Ucircumflex = 722, e.yacute = 444, e.scommaaccent = 389, e.ecircumflex = 444, e.Uring = 722, e.Udieresis = 722, e.aogonek = 500, e.Uacute = 722, e.uogonek = 556, e.Edieresis = 667, e.Dcroat = 722, e.commaaccent = 250, e.copyright = 747, e.Emacron = 667, e.ccaron = 444, e.aring = 500, e.Ncommaaccent = 722, e.lacute = 278, e.agrave = 500, e.Tcommaaccent = 611, e.Cacute = 667, e.atilde = 500, e.Edotaccent = 667, e.scaron = 389, e.scedilla = 389, e.iacute = 278, e.lozenge = 494, e.Rcaron = 667, e.Gcommaaccent = 722, e.ucircumflex = 556, e.acircumflex = 500, e.Amacron = 667, e.rcaron = 389, e.ccedilla = 444, e.Zdotaccent = 611, e.Thorn = 611, e.Omacron = 722, e.Racute = 667, e.Sacute = 556, e.dcaron = 608, e.Umacron = 722, e.uring = 556, e.threesuperior = 300, e.Ograve = 722, e.Agrave = 667, e.Abreve = 667, e.multiply = 570, e.uacute = 556, e.Tcaron = 611, e.partialdiff = 494, e.ydieresis = 444, e.Nacute = 722, e.icircumflex = 278, e.Ecircumflex = 667, e.adieresis = 500, e.edieresis = 444, e.cacute = 444, e.nacute = 556, e.umacron = 556, e.Ncaron = 722, e.Iacute = 389, e.plusminus = 570, e.brokenbar = 220, e.registered = 747, e.Gbreve = 722, e.Idotaccent = 389, e.summation = 600, e.Egrave = 667, e.racute = 389, e.omacron = 500, e.Zacute = 611, e.Zcaron = 611, e.greaterequal = 549, e.Eth = 722, e.Ccedilla = 667, e.lcommaaccent = 278, e.tcaron = 366, e.eogonek = 444, e.Uogonek = 722, e.Aacute = 667, e.Adieresis = 667, e.egrave = 444, e.zacute = 389, e.iogonek = 278, e.Oacute = 722, e.oacute = 500, e.amacron = 500, e.sacute = 389, e.idieresis = 278, e.Ocircumflex = 722, e.Ugrave = 722, e.Delta = 612, e.thorn = 500, e.twosuperior = 300, e.Odieresis = 722, e.mu = 576, e.igrave = 278, e.ohungarumlaut = 500, e.Eogonek = 667, e.dcroat = 500, e.threequarters = 750, e.Scedilla = 556, e.lcaron = 382, e.Kcommaaccent = 667, e.Lacute = 611, e.trademark = 1e3, e.edotaccent = 444, e.Igrave = 389, e.Imacron = 389, e.Lcaron = 611, e.onehalf = 750, e.lessequal = 549, e.ocircumflex = 500, e.ntilde = 556, e.Uhungarumlaut = 722, e.Eacute = 667, e.emacron = 444, e.gbreve = 500, e.onequarter = 750, e.Scaron = 556, e.Scommaaccent = 556, e.Ohungarumlaut = 722, e.degree = 400, e.ograve = 500, e.Ccaron = 667, e.ugrave = 556, e.radical = 549, e.Dcaron = 722, e.rcommaaccent = 389, e.Ntilde = 722, e.otilde = 500, e.Rcommaaccent = 667, e.Lcommaaccent = 611, e.Atilde = 667, e.Aogonek = 667, e.Aring = 667, e.Otilde = 722, e.zdotaccent = 389, e.Ecaron = 667, e.Iogonek = 389, e.kcommaaccent = 500, e.minus = 606, e.Icircumflex = 389, e.ncaron = 556, e.tcommaaccent = 278, e.logicalnot = 606, e.odieresis = 500, e.udieresis = 556, e.notequal = 549, e.gcommaaccent = 500, e.eth = 500, e.zcaron = 389, e.ncommaaccent = 556, e.onesuperior = 300, e.imacron = 278, e.Euro = 500;
  }), t["Times-Italic"] = wt(function(e) {
    e.space = 250, e.exclam = 333, e.quotedbl = 420, e.numbersign = 500, e.dollar = 500, e.percent = 833, e.ampersand = 778, e.quoteright = 333, e.parenleft = 333, e.parenright = 333, e.asterisk = 500, e.plus = 675, e.comma = 250, e.hyphen = 333, e.period = 250, e.slash = 278, e.zero = 500, e.one = 500, e.two = 500, e.three = 500, e.four = 500, e.five = 500, e.six = 500, e.seven = 500, e.eight = 500, e.nine = 500, e.colon = 333, e.semicolon = 333, e.less = 675, e.equal = 675, e.greater = 675, e.question = 500, e.at = 920, e.A = 611, e.B = 611, e.C = 667, e.D = 722, e.E = 611, e.F = 611, e.G = 722, e.H = 722, e.I = 333, e.J = 444, e.K = 667, e.L = 556, e.M = 833, e.N = 667, e.O = 722, e.P = 611, e.Q = 722, e.R = 611, e.S = 500, e.T = 556, e.U = 722, e.V = 611, e.W = 833, e.X = 611, e.Y = 556, e.Z = 556, e.bracketleft = 389, e.backslash = 278, e.bracketright = 389, e.asciicircum = 422, e.underscore = 500, e.quoteleft = 333, e.a = 500, e.b = 500, e.c = 444, e.d = 500, e.e = 444, e.f = 278, e.g = 500, e.h = 500, e.i = 278, e.j = 278, e.k = 444, e.l = 278, e.m = 722, e.n = 500, e.o = 500, e.p = 500, e.q = 500, e.r = 389, e.s = 389, e.t = 278, e.u = 500, e.v = 444, e.w = 667, e.x = 444, e.y = 444, e.z = 389, e.braceleft = 400, e.bar = 275, e.braceright = 400, e.asciitilde = 541, e.exclamdown = 389, e.cent = 500, e.sterling = 500, e.fraction = 167, e.yen = 500, e.florin = 500, e.section = 500, e.currency = 500, e.quotesingle = 214, e.quotedblleft = 556, e.guillemotleft = 500, e.guilsinglleft = 333, e.guilsinglright = 333, e.fi = 500, e.fl = 500, e.endash = 500, e.dagger = 500, e.daggerdbl = 500, e.periodcentered = 250, e.paragraph = 523, e.bullet = 350, e.quotesinglbase = 333, e.quotedblbase = 556, e.quotedblright = 556, e.guillemotright = 500, e.ellipsis = 889, e.perthousand = 1e3, e.questiondown = 500, e.grave = 333, e.acute = 333, e.circumflex = 333, e.tilde = 333, e.macron = 333, e.breve = 333, e.dotaccent = 333, e.dieresis = 333, e.ring = 333, e.cedilla = 333, e.hungarumlaut = 333, e.ogonek = 333, e.caron = 333, e.emdash = 889, e.AE = 889, e.ordfeminine = 276, e.Lslash = 556, e.Oslash = 722, e.OE = 944, e.ordmasculine = 310, e.ae = 667, e.dotlessi = 278, e.lslash = 278, e.oslash = 500, e.oe = 667, e.germandbls = 500, e.Idieresis = 333, e.eacute = 444, e.abreve = 500, e.uhungarumlaut = 500, e.ecaron = 444, e.Ydieresis = 556, e.divide = 675, e.Yacute = 556, e.Acircumflex = 611, e.aacute = 500, e.Ucircumflex = 722, e.yacute = 444, e.scommaaccent = 389, e.ecircumflex = 444, e.Uring = 722, e.Udieresis = 722, e.aogonek = 500, e.Uacute = 722, e.uogonek = 500, e.Edieresis = 611, e.Dcroat = 722, e.commaaccent = 250, e.copyright = 760, e.Emacron = 611, e.ccaron = 444, e.aring = 500, e.Ncommaaccent = 667, e.lacute = 278, e.agrave = 500, e.Tcommaaccent = 556, e.Cacute = 667, e.atilde = 500, e.Edotaccent = 611, e.scaron = 389, e.scedilla = 389, e.iacute = 278, e.lozenge = 471, e.Rcaron = 611, e.Gcommaaccent = 722, e.ucircumflex = 500, e.acircumflex = 500, e.Amacron = 611, e.rcaron = 389, e.ccedilla = 444, e.Zdotaccent = 556, e.Thorn = 611, e.Omacron = 722, e.Racute = 611, e.Sacute = 500, e.dcaron = 544, e.Umacron = 722, e.uring = 500, e.threesuperior = 300, e.Ograve = 722, e.Agrave = 611, e.Abreve = 611, e.multiply = 675, e.uacute = 500, e.Tcaron = 556, e.partialdiff = 476, e.ydieresis = 444, e.Nacute = 667, e.icircumflex = 278, e.Ecircumflex = 611, e.adieresis = 500, e.edieresis = 444, e.cacute = 444, e.nacute = 500, e.umacron = 500, e.Ncaron = 667, e.Iacute = 333, e.plusminus = 675, e.brokenbar = 275, e.registered = 760, e.Gbreve = 722, e.Idotaccent = 333, e.summation = 600, e.Egrave = 611, e.racute = 389, e.omacron = 500, e.Zacute = 556, e.Zcaron = 556, e.greaterequal = 549, e.Eth = 722, e.Ccedilla = 667, e.lcommaaccent = 278, e.tcaron = 300, e.eogonek = 444, e.Uogonek = 722, e.Aacute = 611, e.Adieresis = 611, e.egrave = 444, e.zacute = 389, e.iogonek = 278, e.Oacute = 722, e.oacute = 500, e.amacron = 500, e.sacute = 389, e.idieresis = 278, e.Ocircumflex = 722, e.Ugrave = 722, e.Delta = 612, e.thorn = 500, e.twosuperior = 300, e.Odieresis = 722, e.mu = 500, e.igrave = 278, e.ohungarumlaut = 500, e.Eogonek = 611, e.dcroat = 500, e.threequarters = 750, e.Scedilla = 500, e.lcaron = 300, e.Kcommaaccent = 667, e.Lacute = 556, e.trademark = 980, e.edotaccent = 444, e.Igrave = 333, e.Imacron = 333, e.Lcaron = 611, e.onehalf = 750, e.lessequal = 549, e.ocircumflex = 500, e.ntilde = 500, e.Uhungarumlaut = 722, e.Eacute = 611, e.emacron = 444, e.gbreve = 500, e.onequarter = 750, e.Scaron = 500, e.Scommaaccent = 500, e.Ohungarumlaut = 722, e.degree = 400, e.ograve = 500, e.Ccaron = 667, e.ugrave = 500, e.radical = 453, e.Dcaron = 722, e.rcommaaccent = 389, e.Ntilde = 667, e.otilde = 500, e.Rcommaaccent = 611, e.Lcommaaccent = 556, e.Atilde = 611, e.Aogonek = 611, e.Aring = 611, e.Otilde = 722, e.zdotaccent = 389, e.Ecaron = 611, e.Iogonek = 333, e.kcommaaccent = 444, e.minus = 675, e.Icircumflex = 333, e.ncaron = 500, e.tcommaaccent = 278, e.logicalnot = 675, e.odieresis = 500, e.udieresis = 500, e.notequal = 549, e.gcommaaccent = 500, e.eth = 500, e.zcaron = 389, e.ncommaaccent = 500, e.onesuperior = 300, e.imacron = 278, e.Euro = 500;
  }), t.ZapfDingbats = wt(function(e) {
    e.space = 278, e.a1 = 974, e.a2 = 961, e.a202 = 974, e.a3 = 980, e.a4 = 719, e.a5 = 789, e.a119 = 790, e.a118 = 791, e.a117 = 690, e.a11 = 960, e.a12 = 939, e.a13 = 549, e.a14 = 855, e.a15 = 911, e.a16 = 933, e.a105 = 911, e.a17 = 945, e.a18 = 974, e.a19 = 755, e.a20 = 846, e.a21 = 762, e.a22 = 761, e.a23 = 571, e.a24 = 677, e.a25 = 763, e.a26 = 760, e.a27 = 759, e.a28 = 754, e.a6 = 494, e.a7 = 552, e.a8 = 537, e.a9 = 577, e.a10 = 692, e.a29 = 786, e.a30 = 788, e.a31 = 788, e.a32 = 790, e.a33 = 793, e.a34 = 794, e.a35 = 816, e.a36 = 823, e.a37 = 789, e.a38 = 841, e.a39 = 823, e.a40 = 833, e.a41 = 816, e.a42 = 831, e.a43 = 923, e.a44 = 744, e.a45 = 723, e.a46 = 749, e.a47 = 790, e.a48 = 792, e.a49 = 695, e.a50 = 776, e.a51 = 768, e.a52 = 792, e.a53 = 759, e.a54 = 707, e.a55 = 708, e.a56 = 682, e.a57 = 701, e.a58 = 826, e.a59 = 815, e.a60 = 789, e.a61 = 789, e.a62 = 707, e.a63 = 687, e.a64 = 696, e.a65 = 689, e.a66 = 786, e.a67 = 787, e.a68 = 713, e.a69 = 791, e.a70 = 785, e.a71 = 791, e.a72 = 873, e.a73 = 761, e.a74 = 762, e.a203 = 762, e.a75 = 759, e.a204 = 759, e.a76 = 892, e.a77 = 892, e.a78 = 788, e.a79 = 784, e.a81 = 438, e.a82 = 138, e.a83 = 277, e.a84 = 415, e.a97 = 392, e.a98 = 392, e.a99 = 668, e.a100 = 668, e.a89 = 390, e.a90 = 390, e.a93 = 317, e.a94 = 317, e.a91 = 276, e.a92 = 276, e.a205 = 509, e.a85 = 509, e.a206 = 410, e.a86 = 410, e.a87 = 234, e.a88 = 234, e.a95 = 334, e.a96 = 334, e.a101 = 732, e.a102 = 544, e.a103 = 544, e.a104 = 910, e.a106 = 667, e.a107 = 760, e.a108 = 760, e.a112 = 776, e.a111 = 595, e.a110 = 694, e.a109 = 626, e.a120 = 788, e.a121 = 788, e.a122 = 788, e.a123 = 788, e.a124 = 788, e.a125 = 788, e.a126 = 788, e.a127 = 788, e.a128 = 788, e.a129 = 788, e.a130 = 788, e.a131 = 788, e.a132 = 788, e.a133 = 788, e.a134 = 788, e.a135 = 788, e.a136 = 788, e.a137 = 788, e.a138 = 788, e.a139 = 788, e.a140 = 788, e.a141 = 788, e.a142 = 788, e.a143 = 788, e.a144 = 788, e.a145 = 788, e.a146 = 788, e.a147 = 788, e.a148 = 788, e.a149 = 788, e.a150 = 788, e.a151 = 788, e.a152 = 788, e.a153 = 788, e.a154 = 788, e.a155 = 788, e.a156 = 788, e.a157 = 788, e.a158 = 788, e.a159 = 788, e.a160 = 894, e.a161 = 838, e.a163 = 1016, e.a164 = 458, e.a196 = 748, e.a165 = 924, e.a192 = 748, e.a166 = 918, e.a167 = 927, e.a168 = 928, e.a169 = 928, e.a170 = 834, e.a171 = 873, e.a172 = 828, e.a173 = 924, e.a162 = 924, e.a174 = 917, e.a175 = 930, e.a176 = 931, e.a177 = 463, e.a178 = 883, e.a179 = 836, e.a193 = 836, e.a180 = 867, e.a199 = 867, e.a181 = 696, e.a200 = 696, e.a182 = 874, e.a201 = 874, e.a183 = 760, e.a184 = 946, e.a197 = 771, e.a185 = 865, e.a194 = 771, e.a198 = 888, e.a186 = 967, e.a195 = 888, e.a187 = 831, e.a188 = 873, e.a189 = 927, e.a190 = 970, e.a191 = 918;
  });
}), fx = wt(function(t) {
  t.Courier = {
    ascent: 629,
    descent: -157,
    capHeight: 562,
    xHeight: -426
  }, t["Courier-Bold"] = {
    ascent: 629,
    descent: -157,
    capHeight: 562,
    xHeight: 439
  }, t["Courier-Oblique"] = {
    ascent: 629,
    descent: -157,
    capHeight: 562,
    xHeight: 426
  }, t["Courier-BoldOblique"] = {
    ascent: 629,
    descent: -157,
    capHeight: 562,
    xHeight: 426
  }, t.Helvetica = {
    ascent: 718,
    descent: -207,
    capHeight: 718,
    xHeight: 523
  }, t["Helvetica-Bold"] = {
    ascent: 718,
    descent: -207,
    capHeight: 718,
    xHeight: 532
  }, t["Helvetica-Oblique"] = {
    ascent: 718,
    descent: -207,
    capHeight: 718,
    xHeight: 523
  }, t["Helvetica-BoldOblique"] = {
    ascent: 718,
    descent: -207,
    capHeight: 718,
    xHeight: 532
  }, t["Times-Roman"] = {
    ascent: 683,
    descent: -217,
    capHeight: 662,
    xHeight: 450
  }, t["Times-Bold"] = {
    ascent: 683,
    descent: -217,
    capHeight: 676,
    xHeight: 461
  }, t["Times-Italic"] = {
    ascent: 683,
    descent: -217,
    capHeight: 653,
    xHeight: 441
  }, t["Times-BoldItalic"] = {
    ascent: 683,
    descent: -217,
    capHeight: 669,
    xHeight: 462
  }, t.Symbol = {
    ascent: Math.NaN,
    descent: Math.NaN,
    capHeight: Math.NaN,
    xHeight: Math.NaN
  }, t.ZapfDingbats = {
    ascent: Math.NaN,
    descent: Math.NaN,
    capHeight: Math.NaN,
    xHeight: Math.NaN
  };
}), ux = 1, Fr = 2, Br = 4, th = 8, ja = 16, qa = 32, dx = 64, Ha = 1, Er = 2, xx = 8, gx = 32, px = 64, mx = 128, dc = 256;
class bx {
  constructor({
    glyfTable: e,
    isGlyphLocationsLong: n,
    locaTable: i,
    numGlyphs: s
  }) {
    this.glyphs = [];
    const a = new DataView(i.buffer, i.byteOffset, i.byteLength), r = new DataView(e.buffer, e.byteOffset, e.byteLength), o = n ? 4 : 2;
    let c = n ? a.getUint32(0) : 2 * a.getUint16(0), l = 0;
    for (let h = 0; h < s; h++) {
      l += o;
      const f = n ? a.getUint32(l) : 2 * a.getUint16(l);
      if (f === c) {
        this.glyphs.push(new B0({}));
        continue;
      }
      const u = B0.parse(c, r);
      this.glyphs.push(u), c = f;
    }
  }
  getSize() {
    return Math.sumPrecise(this.glyphs.map((e) => e.getSize() + 3 & -4));
  }
  write() {
    const e = this.getSize(), n = new DataView(new ArrayBuffer(e)), i = e > 131070, s = i ? 4 : 2, a = new DataView(new ArrayBuffer((this.glyphs.length + 1) * s));
    i ? a.setUint32(0, 0) : a.setUint16(0, 0);
    let r = 0, o = 0;
    for (const c of this.glyphs)
      r += c.write(r, n), r = r + 3 & -4, o += s, i ? a.setUint32(o, r) : a.setUint16(o, r >> 1);
    return {
      isLocationLong: i,
      loca: new Uint8Array(a.buffer),
      glyf: new Uint8Array(n.buffer)
    };
  }
  scale(e) {
    for (let n = 0, i = this.glyphs.length; n < i; n++)
      this.glyphs[n].scale(e[n]);
  }
}
class B0 {
  constructor({
    header: e = null,
    simple: n = null,
    composites: i = null
  }) {
    this.header = e, this.simple = n, this.composites = i;
  }
  static parse(e, n) {
    const [i, s] = Zl.parse(e, n);
    if (e += i, s.numberOfContours < 0) {
      const r = [];
      for (; ; ) {
        const [o, c] = Ql.parse(e, n);
        if (e += o, r.push(c), !(c.flags & gx))
          break;
      }
      return new B0({
        header: s,
        composites: r
      });
    }
    const a = Jl.parse(e, n, s.numberOfContours);
    return new B0({
      header: s,
      simple: a
    });
  }
  getSize() {
    if (!this.header)
      return 0;
    const e = this.simple ? this.simple.getSize() : Math.sumPrecise(this.composites.map((n) => n.getSize()));
    return this.header.getSize() + e;
  }
  write(e, n) {
    if (!this.header)
      return 0;
    const i = e;
    if (e += this.header.write(e, n), this.simple)
      e += this.simple.write(e, n);
    else
      for (const s of this.composites)
        e += s.write(e, n);
    return e - i;
  }
  scale(e) {
    if (!this.header)
      return;
    const n = (this.header.xMin + this.header.xMax) / 2;
    if (this.header.scale(n, e), this.simple)
      this.simple.scale(n, e);
    else
      for (const i of this.composites)
        i.scale(n, e);
  }
}
class Zl {
  constructor({
    numberOfContours: e,
    xMin: n,
    yMin: i,
    xMax: s,
    yMax: a
  }) {
    this.numberOfContours = e, this.xMin = n, this.yMin = i, this.xMax = s, this.yMax = a;
  }
  static parse(e, n) {
    return [10, new Zl({
      numberOfContours: n.getInt16(e),
      xMin: n.getInt16(e + 2),
      yMin: n.getInt16(e + 4),
      xMax: n.getInt16(e + 6),
      yMax: n.getInt16(e + 8)
    })];
  }
  getSize() {
    return 10;
  }
  write(e, n) {
    return n.setInt16(e, this.numberOfContours), n.setInt16(e + 2, this.xMin), n.setInt16(e + 4, this.yMin), n.setInt16(e + 6, this.xMax), n.setInt16(e + 8, this.yMax), 10;
  }
  scale(e, n) {
    this.xMin = Math.round(e + (this.xMin - e) * n), this.xMax = Math.round(e + (this.xMax - e) * n);
  }
}
class wx {
  constructor({
    flags: e,
    xCoordinates: n,
    yCoordinates: i
  }) {
    this.xCoordinates = n, this.yCoordinates = i, this.flags = e;
  }
}
class Jl {
  constructor({
    contours: e,
    instructions: n
  }) {
    this.contours = e, this.instructions = n;
  }
  static parse(e, n, i) {
    const s = [];
    for (let m = 0; m < i; m++) {
      const p = n.getUint16(e);
      e += 2, s.push(p);
    }
    const a = s[i - 1] + 1, r = n.getUint16(e);
    e += 2;
    const o = new Uint8Array(n).slice(e, e + r);
    e += r;
    const c = [];
    for (let m = 0; m < a; e++, m++) {
      let p = n.getUint8(e);
      if (c.push(p), p & th) {
        const b = n.getUint8(++e);
        p ^= th;
        for (let w = 0; w < b; w++)
          c.push(p);
        m += b;
      }
    }
    const l = [];
    let h = [], f = [], u = [];
    const d = [];
    let x = 0, g = 0;
    for (let m = 0; m < a; m++) {
      const p = c[m];
      if (p & Fr) {
        const b = n.getUint8(e++);
        g += p & ja ? b : -b, h.push(g);
      } else p & ja || (g += n.getInt16(e), e += 2), h.push(g);
      s[x] === m && (x++, l.push(h), h = []);
    }
    g = 0, x = 0;
    for (let m = 0; m < a; m++) {
      const p = c[m];
      if (p & Br) {
        const b = n.getUint8(e++);
        g += p & qa ? b : -b, f.push(g);
      } else p & qa || (g += n.getInt16(e), e += 2), f.push(g);
      u.push(p & ux | p & dx), s[x] === m && (h = l[x], x++, d.push(new wx({
        flags: u,
        xCoordinates: h,
        yCoordinates: f
      })), f = [], u = []);
    }
    return new Jl({
      contours: d,
      instructions: o
    });
  }
  getSize() {
    let e = this.contours.length * 2 + 2 + this.instructions.length, n = 0, i = 0;
    for (const s of this.contours) {
      e += s.flags.length;
      for (let a = 0, r = s.xCoordinates.length; a < r; a++) {
        const o = s.xCoordinates[a], c = s.yCoordinates[a];
        let l = Math.abs(o - n);
        l > 255 ? e += 2 : l > 0 && (e += 1), n = o, l = Math.abs(c - i), l > 255 ? e += 2 : l > 0 && (e += 1), i = c;
      }
    }
    return e;
  }
  write(e, n) {
    const i = e, s = [], a = [], r = [];
    let o = 0, c = 0;
    for (const l of this.contours) {
      for (let h = 0, f = l.xCoordinates.length; h < f; h++) {
        let u = l.flags[h];
        const d = l.xCoordinates[h];
        let x = d - o;
        if (x === 0)
          u |= ja, s.push(0);
        else {
          const m = Math.abs(x);
          m <= 255 ? (u |= x >= 0 ? Fr | ja : Fr, s.push(m)) : s.push(x);
        }
        o = d;
        const g = l.yCoordinates[h];
        if (x = g - c, x === 0)
          u |= qa, a.push(0);
        else {
          const m = Math.abs(x);
          m <= 255 ? (u |= x >= 0 ? Br | qa : Br, a.push(m)) : a.push(x);
        }
        c = g, r.push(u);
      }
      n.setUint16(e, s.length - 1), e += 2;
    }
    n.setUint16(e, this.instructions.length), e += 2, this.instructions.length && (new Uint8Array(n.buffer, 0, n.buffer.byteLength).set(this.instructions, e), e += this.instructions.length);
    for (const l of r)
      n.setUint8(e++, l);
    for (let l = 0, h = s.length; l < h; l++) {
      const f = s[l], u = r[l];
      u & Fr ? n.setUint8(e++, f) : u & ja || (n.setInt16(e, f), e += 2);
    }
    for (let l = 0, h = a.length; l < h; l++) {
      const f = a[l], u = r[l];
      u & Br ? n.setUint8(e++, f) : u & qa || (n.setInt16(e, f), e += 2);
    }
    return e - i;
  }
  scale(e, n) {
    for (const i of this.contours)
      if (i.xCoordinates.length !== 0)
        for (let s = 0, a = i.xCoordinates.length; s < a; s++)
          i.xCoordinates[s] = Math.round(e + (i.xCoordinates[s] - e) * n);
  }
}
class Ql {
  constructor({
    flags: e,
    glyphIndex: n,
    argument1: i,
    argument2: s,
    transf: a,
    instructions: r
  }) {
    this.flags = e, this.glyphIndex = n, this.argument1 = i, this.argument2 = s, this.transf = a, this.instructions = r;
  }
  static parse(e, n) {
    const i = e, s = [];
    let a = n.getUint16(e);
    const r = n.getUint16(e + 2);
    e += 4;
    let o, c;
    a & Ha ? (a & Er ? (o = n.getInt16(e), c = n.getInt16(e + 2)) : (o = n.getUint16(e), c = n.getUint16(e + 2)), e += 4, a ^= Ha) : (a & Er ? (o = n.getInt8(e), c = n.getInt8(e + 1)) : (o = n.getUint8(e), c = n.getUint8(e + 1)), e += 2), a & xx ? (s.push(n.getUint16(e)), e += 2) : a & px ? (s.push(n.getUint16(e), n.getUint16(e + 2)), e += 4) : a & mx && (s.push(n.getUint16(e), n.getUint16(e + 2), n.getUint16(e + 4), n.getUint16(e + 6)), e += 8);
    let l = null;
    if (a & dc) {
      const h = n.getUint16(e);
      e += 2, l = new Uint8Array(n).slice(e, e + h), e += h;
    }
    return [e - i, new Ql({
      flags: a,
      glyphIndex: r,
      argument1: o,
      argument2: c,
      transf: s,
      instructions: l
    })];
  }
  getSize() {
    let e = 4 + this.transf.length * 2;
    return this.flags & dc && (e += 2 + this.instructions.length), e += 2, this.flags & 2 ? this.argument1 >= -128 && this.argument1 <= 127 && this.argument2 >= -128 && this.argument2 <= 127 || (e += 2) : this.argument1 >= 0 && this.argument1 <= 255 && this.argument2 >= 0 && this.argument2 <= 255 || (e += 2), e;
  }
  write(e, n) {
    const i = e;
    return this.flags & Er ? this.argument1 >= -128 && this.argument1 <= 127 && this.argument2 >= -128 && this.argument2 <= 127 || (this.flags |= Ha) : this.argument1 >= 0 && this.argument1 <= 255 && this.argument2 >= 0 && this.argument2 <= 255 || (this.flags |= Ha), n.setUint16(e, this.flags), n.setUint16(e + 2, this.glyphIndex), e += 4, this.flags & Ha ? (this.flags & Er ? (n.setInt16(e, this.argument1), n.setInt16(e + 2, this.argument2)) : (n.setUint16(e, this.argument1), n.setUint16(e + 2, this.argument2)), e += 4) : (n.setUint8(e, this.argument1), n.setUint8(e + 1, this.argument2), e += 2), this.flags & dc && (n.setUint16(e, this.instructions.length), e += 2, this.instructions.length && (new Uint8Array(n.buffer, 0, n.buffer.byteLength).set(this.instructions, e), e += this.instructions.length)), e - i;
  }
  scale(e, n) {
  }
}
function Rr(t, e, n) {
  t[e] = n >> 8 & 255, t[e + 1] = n & 255;
}
function xc(t, e, n) {
  t[e] = n >> 24 & 255, t[e + 1] = n >> 16 & 255, t[e + 2] = n >> 8 & 255, t[e + 3] = n & 255;
}
function yx(t, e, n) {
  if (n instanceof Uint8Array)
    t.set(n, e);
  else if (typeof n == "string")
    for (let i = 0, s = n.length; i < s; i++)
      t[e++] = n.charCodeAt(i) & 255;
  else
    for (const i of n)
      t[e++] = i & 255;
}
const nh = 12, ih = 16;
class E0 {
  constructor(e) {
    this.sfnt = e, this.tables = /* @__PURE__ */ Object.create(null);
  }
  static getSearchParams(e, n) {
    let i = 1, s = 0;
    for (; (i ^ e) > i; )
      i <<= 1, s++;
    const a = i * n;
    return {
      range: a,
      entry: s,
      rangeShift: n * e - a
    };
  }
  toArray() {
    let e = this.sfnt;
    const n = this.tables, i = Object.keys(n);
    i.sort();
    const s = i.length;
    let a, r, o, c, l, h = nh + s * ih;
    const f = [h];
    for (a = 0; a < s; a++) {
      c = n[i[a]];
      const x = (c.length + 3 & -4) >>> 0;
      h += x, f.push(h);
    }
    const u = new Uint8Array(h);
    for (a = 0; a < s; a++)
      c = n[i[a]], yx(u, f[a], c);
    e === "true" && (e = Qt(65536)), u[0] = e.charCodeAt(0) & 255, u[1] = e.charCodeAt(1) & 255, u[2] = e.charCodeAt(2) & 255, u[3] = e.charCodeAt(3) & 255, Rr(u, 4, s);
    const d = E0.getSearchParams(s, 16);
    for (Rr(u, 6, d.range), Rr(u, 8, d.entry), Rr(u, 10, d.rangeShift), h = nh, a = 0; a < s; a++) {
      l = i[a], u[h] = l.charCodeAt(0) & 255, u[h + 1] = l.charCodeAt(1) & 255, u[h + 2] = l.charCodeAt(2) & 255, u[h + 3] = l.charCodeAt(3) & 255;
      let x = 0;
      for (r = f[a], o = f[a + 1]; r < o; r += 4) {
        const g = ht(u, r);
        x = x + g >>> 0;
      }
      xc(u, h + 4, x), xc(u, h + 8, f[a]), xc(u, h + 12, n[l].length), h += ih;
    }
    return u;
  }
  addTable(e, n) {
    if (e in this.tables)
      throw new Error("Table " + e + " already exists");
    this.tables[e] = n;
  }
}
const kx = !1, fn = {
  vmoveto: [4],
  rlineto: [5],
  hlineto: [6],
  vlineto: [7],
  rrcurveto: [8],
  flex: [12, 35],
  endchar: [14],
  rmoveto: [21],
  hmoveto: [22],
  vhcurveto: [30],
  hvcurveto: [31]
};
class Sx {
  constructor() {
    this.width = 0, this.lsb = 0, this.flexing = !1, this.output = [], this.stack = [];
  }
  convert(e, n, i) {
    const s = e.length;
    let a = !1, r, o, c;
    for (let l = 0; l < s; l++) {
      let h = e[l];
      if (h < 32) {
        switch (h === 12 && (h = (h << 8) + e[++l]), h) {
          case 1: {
            this.stack = [];
            break;
          }
          case 3: {
            this.stack = [];
            break;
          }
          case 4:
            if (this.flexing) {
              if (this.stack.length < 1) {
                a = !0;
                break;
              }
              const g = this.stack.pop();
              this.stack.push(0, g);
              break;
            }
            a = this.executeCommand(1, fn.vmoveto);
            break;
          case 5:
            a = this.executeCommand(2, fn.rlineto);
            break;
          case 6:
            a = this.executeCommand(1, fn.hlineto);
            break;
          case 7:
            a = this.executeCommand(1, fn.vlineto);
            break;
          case 8:
            a = this.executeCommand(6, fn.rrcurveto);
            break;
          case 9:
            this.stack = [];
            break;
          case 10:
            if (this.stack.length < 1) {
              a = !0;
              break;
            }
            if (c = this.stack.pop(), !n[c]) {
              a = !0;
              break;
            }
            a = this.convert(n[c], n, i);
            break;
          case 11:
            return a;
          case 13:
            if (this.stack.length < 2) {
              a = !0;
              break;
            }
            r = this.stack.pop(), o = this.stack.pop(), this.lsb = o, this.width = r, this.stack.push(r, o), a = this.executeCommand(2, fn.hmoveto);
            break;
          case 14:
            this.output.push(fn.endchar[0]);
            break;
          case 21:
            if (this.flexing)
              break;
            a = this.executeCommand(2, fn.rmoveto);
            break;
          case 22:
            if (this.flexing) {
              this.stack.push(0);
              break;
            }
            a = this.executeCommand(1, fn.hmoveto);
            break;
          case 30:
            a = this.executeCommand(4, fn.vhcurveto);
            break;
          case 31:
            a = this.executeCommand(4, fn.hvcurveto);
            break;
          case 3072:
            this.stack = [];
            break;
          case 3073: {
            this.stack = [];
            break;
          }
          case 3074: {
            this.stack = [];
            break;
          }
          case 3078:
            if (i) {
              const g = this.stack.at(-5);
              this.seac = this.stack.splice(-4, 4), this.seac[0] += this.lsb - g, a = this.executeCommand(0, fn.endchar);
            } else
              a = this.executeCommand(4, fn.endchar);
            break;
          case 3079:
            if (this.stack.length < 4) {
              a = !0;
              break;
            }
            this.stack.pop(), r = this.stack.pop();
            const f = this.stack.pop();
            o = this.stack.pop(), this.lsb = o, this.width = r, this.stack.push(r, o, f), a = this.executeCommand(3, fn.rmoveto);
            break;
          case 3084:
            if (this.stack.length < 2) {
              a = !0;
              break;
            }
            const u = this.stack.pop(), d = this.stack.pop();
            this.stack.push(d / u);
            break;
          case 3088:
            if (this.stack.length < 2) {
              a = !0;
              break;
            }
            c = this.stack.pop();
            const x = this.stack.pop();
            if (c === 0 && x === 3) {
              const g = this.stack.splice(-17, 17);
              this.stack.push(g[2] + g[0], g[3] + g[1], g[4], g[5], g[6], g[7], g[8], g[9], g[10], g[11], g[12], g[13], g[14]), a = this.executeCommand(13, fn.flex, !0), this.flexing = !1, this.stack.push(g[15], g[16]);
            } else c === 1 && x === 0 && (this.flexing = !0);
            break;
          case 3089:
            break;
          case 3105:
            this.stack = [];
            break;
          default:
            I('Unknown type 1 charstring command of "' + h + '"');
            break;
        }
        if (a)
          break;
        continue;
      } else h <= 246 ? h -= 139 : h <= 250 ? h = (h - 247) * 256 + e[++l] + 108 : h <= 254 ? h = -((h - 251) * 256) - e[++l] - 108 : h = (e[++l] & 255) << 24 | (e[++l] & 255) << 16 | (e[++l] & 255) << 8 | (e[++l] & 255) << 0;
      this.stack.push(h);
    }
    return a;
  }
  executeCommand(e, n, i) {
    const s = this.stack.length;
    if (e > s)
      return !0;
    const a = s - e;
    for (let r = a; r < s; r++) {
      let o = this.stack[r];
      Number.isInteger(o) ? this.output.push(28, o >> 8 & 255, o & 255) : (o = 65536 * o | 0, this.output.push(255, o >> 24 & 255, o >> 16 & 255, o >> 8 & 255, o & 255));
    }
    return this.output.push(...n), i ? this.stack.splice(a, e) : this.stack.length = 0, !1;
  }
}
const sh = 55665, Cx = 4330;
function xi(t) {
  return t >= 48 && t <= 57 || t >= 65 && t <= 70 || t >= 97 && t <= 102;
}
function ah(t, e, n) {
  if (n >= t.length)
    return new Uint8Array(0);
  const i = 52845, s = 22719;
  let a = e | 0, r, o;
  for (r = 0; r < n; r++)
    a = (t[r] + a) * i + s & 65535;
  const c = t.length - n, l = new Uint8Array(c);
  for (r = n, o = 0; o < c; r++, o++) {
    const h = t[r];
    l[o] = h ^ a >> 8, a = (h + a) * i + s & 65535;
  }
  return l;
}
function Ax(t, e, n) {
  let a = e | 0;
  const r = t.length, o = r >>> 1, c = new Uint8Array(o);
  let l, h;
  for (l = 0, h = 0; l < r; l++) {
    const f = t[l];
    if (!xi(f))
      continue;
    l++;
    let u;
    for (; l < r && !xi(u = t[l]); )
      l++;
    if (l < r) {
      const d = parseInt(String.fromCharCode(f, u), 16);
      c[h++] = d ^ a >> 8, a = (d + a) * 52845 + 22719 & 65535;
    }
  }
  return c.slice(n, h);
}
function rh(t) {
  return t === 47 || t === 91 || t === 93 || t === 123 || t === 125 || t === 40 || t === 41;
}
class oh {
  constructor(e, n, i) {
    if (n) {
      const s = e.getBytes(), a = !((xi(s[0]) || Dn(s[0])) && xi(s[1]) && xi(s[2]) && xi(s[3]) && xi(s[4]) && xi(s[5]) && xi(s[6]) && xi(s[7]));
      e = new At(a ? ah(s, sh, 4) : Ax(s, sh, 4));
    }
    this.seacAnalysisEnabled = !!i, this.stream = e, this.nextChar();
  }
  readNumberArray() {
    this.getToken();
    const e = [];
    for (; ; ) {
      const n = this.getToken();
      if (n === null || n === "]" || n === "}")
        break;
      e.push(parseFloat(n || 0));
    }
    return e;
  }
  readNumber() {
    const e = this.getToken();
    return parseFloat(e || 0);
  }
  readInt() {
    const e = this.getToken();
    return parseInt(e || 0, 10) | 0;
  }
  readBoolean() {
    return this.getToken() === "true" ? 1 : 0;
  }
  nextChar() {
    return this.currentChar = this.stream.getByte();
  }
  prevChar() {
    return this.stream.skip(-2), this.currentChar = this.stream.getByte();
  }
  getToken() {
    let e = !1, n = this.currentChar;
    for (; ; ) {
      if (n === -1)
        return null;
      if (e)
        (n === 10 || n === 13) && (e = !1);
      else if (n === 37)
        e = !0;
      else if (!Dn(n))
        break;
      n = this.nextChar();
    }
    if (rh(n))
      return this.nextChar(), String.fromCharCode(n);
    let i = "";
    do
      i += String.fromCharCode(n), n = this.nextChar();
    while (n >= 0 && !Dn(n) && !rh(n));
    return i;
  }
  readCharStrings(e, n) {
    return n === -1 ? e : ah(e, Cx, n);
  }
  extractFontProgram(e) {
    const n = this.stream, i = [], s = [], a = /* @__PURE__ */ Object.create(null);
    a.lenIV = 4;
    const r = {
      subrs: [],
      charstrings: [],
      properties: {
        privateData: a
      }
    };
    let o, c, l, h;
    for (; (o = this.getToken()) !== null; )
      if (o === "/")
        switch (o = this.getToken(), o) {
          case "CharStrings":
            for (this.getToken(), this.getToken(), this.getToken(), this.getToken(); o = this.getToken(), !(o === null || o === "end"); ) {
              if (o !== "/")
                continue;
              const u = this.getToken();
              c = this.readInt(), this.getToken(), l = c > 0 ? n.getBytes(c) : new Uint8Array(0), h = r.properties.privateData.lenIV;
              const d = this.readCharStrings(l, h);
              this.nextChar(), o = this.getToken(), o === "noaccess" ? this.getToken() : o === "/" && this.prevChar(), s.push({
                glyph: u,
                encoded: d
              });
            }
            break;
          case "Subrs":
            for (this.readInt(), this.getToken(); this.getToken() === "dup"; ) {
              const u = this.readInt();
              c = this.readInt(), this.getToken(), l = c > 0 ? n.getBytes(c) : new Uint8Array(0), h = r.properties.privateData.lenIV;
              const d = this.readCharStrings(l, h);
              this.nextChar(), o = this.getToken(), o === "noaccess" && this.getToken(), i[u] = d;
            }
            break;
          case "BlueValues":
          case "OtherBlues":
          case "FamilyBlues":
          case "FamilyOtherBlues":
            const f = this.readNumberArray();
            f.length > 0 && f.length % 2;
            break;
          case "StemSnapH":
          case "StemSnapV":
            r.properties.privateData[o] = this.readNumberArray();
            break;
          case "StdHW":
          case "StdVW":
            r.properties.privateData[o] = this.readNumberArray()[0];
            break;
          case "BlueShift":
          case "lenIV":
          case "BlueFuzz":
          case "BlueScale":
          case "LanguageGroup":
            r.properties.privateData[o] = this.readNumber();
            break;
          case "ExpansionFactor":
            r.properties.privateData[o] = this.readNumber() || 0.06;
            break;
          case "ForceBold":
            r.properties.privateData[o] = this.readBoolean();
            break;
        }
    for (const {
      encoded: f,
      glyph: u
    } of s) {
      const d = new Sx(), x = d.convert(f, i, this.seacAnalysisEnabled);
      let g = d.output;
      x && (g = [14]);
      const m = {
        glyphName: u,
        charstring: g,
        width: d.width,
        lsb: d.lsb,
        seac: d.seac
      };
      if (u === ".notdef" ? r.charstrings.unshift(m) : r.charstrings.push(m), e.builtInEncoding) {
        const p = e.builtInEncoding.indexOf(u);
        p > -1 && e.widths[p] === void 0 && p >= e.firstChar && p <= e.lastChar && (e.widths[p] = d.width);
      }
    }
    return r;
  }
  extractFontHeader(e) {
    let n;
    for (; (n = this.getToken()) !== null; )
      if (n === "/")
        switch (n = this.getToken(), n) {
          case "FontMatrix":
            const i = this.readNumberArray();
            e.fontMatrix = i;
            break;
          case "Encoding":
            const s = this.getToken();
            let a;
            if (!/^\d+$/.test(s))
              a = I0(s);
            else {
              a = [];
              const o = parseInt(s, 10) | 0;
              this.getToken();
              for (let c = 0; c < o; c++) {
                for (n = this.getToken(); n !== "dup" && n !== "def"; )
                  if (n = this.getToken(), n === null)
                    return;
                if (n === "def")
                  break;
                const l = this.readInt();
                this.getToken();
                const h = this.getToken();
                a[l] = h, this.getToken();
              }
            }
            e.builtInEncoding = a;
            break;
          case "FontBBox":
            const r = this.readNumberArray();
            e.ascent = Math.max(r[3], r[1]), e.descent = Math.min(r[1], r[3]), e.ascentScaled = !0;
            break;
        }
  }
}
function ch(t, e, n) {
  const i = t.length, s = e.length, a = i - s;
  let r = n, o = !1;
  for (; r < a; ) {
    let c = 0;
    for (; c < s && t[r + c] === e[c]; )
      c++;
    if (c >= s) {
      for (r += c; r < i && Dn(t[r]); )
        r++;
      o = !0;
      break;
    }
    r++;
  }
  return {
    found: o,
    length: r
  };
}
function vx(t, e) {
  const n = [101, 101, 120, 101, 99], i = t.pos;
  let s, a, r;
  try {
    s = t.getBytes(e), a = s.length;
  } catch {
  }
  if (a === e && (r = ch(s, n, e - 2 * n.length), r.found && r.length === e))
    return {
      stream: new At(s),
      length: e
    };
  I('Invalid "Length1" property in Type1 font -- trying to recover.'), t.pos = i;
  const o = 2048;
  let c;
  for (; ; ) {
    const l = t.peekBytes(o);
    if (r = ch(l, n, 0), r.length === 0)
      break;
    if (t.pos += r.length, r.found) {
      c = t.pos - i;
      break;
    }
  }
  return t.pos = i, c ? {
    stream: new At(t.getBytes(c)),
    length: c
  } : (I('Unable to recover "Length1" property in Type1 font -- using as is.'), {
    stream: new At(t.getBytes(e)),
    length: e
  });
}
function Ix(t, e) {
  const n = t.getBytes();
  if (n.length === 0)
    throw new j("getEexecBlock - no font program found.");
  return {
    stream: new At(n),
    length: n.length
  };
}
class Tx {
  constructor(e, n, i) {
    let a = i.length1;
    i.length2;
    let r = n.peekBytes(6);
    const o = r[0] === 128 && r[1] === 1;
    o && (n.skip(6), a = r[5] << 24 | r[4] << 16 | r[3] << 8 | r[2]);
    const c = vx(n, a);
    new oh(c.stream, !1, da).extractFontHeader(i), o && (r = n.getBytes(6), r[5] << 24 | r[4] << 16 | r[3] << 8 | r[2]);
    const h = Ix(n), u = new oh(h.stream, !0, da).extractFontProgram(i);
    for (const m in u.properties)
      i[m] = u.properties[m];
    const d = u.charstrings, x = this.getType2Charstrings(d), g = this.getType2Subrs(u.subrs);
    this.charstrings = d, this.data = this.wrap(e, x, this.charstrings, g, i), this.seacs = this.getSeacs(u.charstrings);
  }
  get numGlyphs() {
    return this.charstrings.length + 1;
  }
  getCharset() {
    const e = [".notdef"];
    for (const {
      glyphName: n
    } of this.charstrings)
      e.push(n);
    return e;
  }
  getGlyphMapping(e) {
    const n = this.charstrings;
    if (e.composite) {
      const o = /* @__PURE__ */ Object.create(null);
      for (let c = 0, l = n.length; c < l; c++) {
        const h = e.cMap.charCodeOf(c);
        o[h] = c + 1;
      }
      return o;
    }
    const i = [".notdef"];
    let s, a;
    for (a = 0; a < n.length; a++)
      i.push(n[a].glyphName);
    const r = e.builtInEncoding;
    if (r) {
      s = /* @__PURE__ */ Object.create(null);
      for (const o in r)
        a = i.indexOf(r[o]), a >= 0 && (s[o] = a);
    }
    return zf(e, s, i);
  }
  hasGlyphId(e) {
    return e < 0 || e >= this.numGlyphs ? !1 : e === 0 ? !0 : this.charstrings[e - 1].charstring.length > 0;
  }
  getSeacs(e) {
    const n = [];
    for (let i = 0, s = e.length; i < s; i++) {
      const a = e[i];
      a.seac && (n[i + 1] = a.seac);
    }
    return n;
  }
  getType2Charstrings(e) {
    const n = [];
    for (const i of e)
      n.push(i.charstring);
    return n;
  }
  getType2Subrs(e) {
    let n = 0;
    const i = e.length;
    i < 1133 ? n = 107 : i < 33769 ? n = 1131 : n = 32768;
    const s = [];
    let a;
    for (a = 0; a < n; a++)
      s.push([11]);
    for (a = 0; a < i; a++)
      s.push(e[a]);
    return s;
  }
  wrap(e, n, i, s, a) {
    const r = new Wf();
    r.header = new Vf(1, 0, 4, 4), r.names = [e];
    const o = new T0();
    o.setByName("version", 391), o.setByName("Notice", 392), o.setByName("FullName", 393), o.setByName("FamilyName", 394), o.setByName("Weight", 395), o.setByName("Encoding", null), o.setByName("FontMatrix", a.fontMatrix), o.setByName("FontBBox", a.bbox), o.setByName("charset", null), o.setByName("CharStrings", null), o.setByName("Private", null), r.topDict = o;
    const c = new Kl();
    c.add("Version 0.11"), c.add("See original notice"), c.add(e), c.add(e), c.add("Medium"), r.strings = c, r.globalSubrIndex = new ss();
    const l = n.length, h = [".notdef"];
    let f, u;
    for (f = 0; f < l; f++) {
      const b = i[f].glyphName;
      Xr.indexOf(b) === -1 && c.add(b), h.push(b);
    }
    r.charset = new i0(!1, 0, h);
    const d = new ss();
    for (d.add([139, 14]), f = 0; f < l; f++)
      d.add(n[f]);
    r.charStrings = d;
    const x = new F0();
    x.setByName("Subrs", null);
    const g = ["BlueValues", "OtherBlues", "FamilyBlues", "FamilyOtherBlues", "StemSnapH", "StemSnapV", "BlueShift", "BlueFuzz", "BlueScale", "LanguageGroup", "ExpansionFactor", "ForceBold", "StdHW", "StdVW"];
    for (f = 0, u = g.length; f < u; f++) {
      const b = g[f];
      if (!(b in a.privateData))
        continue;
      const w = a.privateData[b];
      if (Array.isArray(w))
        for (let y = w.length - 1; y > 0; y--)
          w[y] -= w[y - 1];
      x.setByName(b, w);
    }
    r.topDict.privateDict = x;
    const m = new ss();
    for (f = 0, u = s.length; f < u; f++)
      m.add(s[f]);
    return x.subrsIndex = m, new sr(r).compile();
  }
}
const Ti = [[57344, 63743], [1048576, 1114109]], ps = 1e3, lh = ["ascent", "bbox", "black", "bold", "charProcOperatorList", "cssFontInfo", "data", "defaultVMetrics", "defaultWidth", "descent", "disableFontFace", "fallbackName", "fontExtraProperties", "fontMatrix", "isInvalidPDFjsFont", "isType3Font", "italic", "loadedName", "mimetype", "missingFile", "name", "remeasure", "systemFontInfo", "vertical"], Fx = ["cMap", "composite", "defaultEncoding", "differences", "isMonospace", "isSerifFont", "isSymbolicFont", "seacMap", "subtype", "toFontChar", "toUnicode", "type", "vmetrics", "widths"];
function hh(t) {
  if (!t.fontMatrix || t.fontMatrix[0] === Bs[0])
    return;
  const e = 1e-3 / t.fontMatrix[0], n = t.widths;
  for (const i in n)
    n[i] *= e;
  t.defaultWidth *= e;
}
function Bx(t, e, n) {
  if (t.isInternalFont || t.hasIncludedToUnicodeMap || t.hasEncoding || t.toUnicode instanceof Hn || !e || n.length === 0 || t.defaultEncoding === v0)
    return;
  for (const r of n)
    if (!Qf(r))
      return;
  const i = v0, s = [], a = bi();
  for (const r in i) {
    const o = i[r];
    if (o === "")
      continue;
    const c = a[o];
    c !== void 0 && (s[r] = String.fromCharCode(c));
  }
  s.length > 0 && t.toUnicode.amend(s);
}
function Ex(t, e) {
  if (t.isInternalFont || t.hasIncludedToUnicodeMap || e === t.defaultEncoding || t.toUnicode instanceof Hn)
    return;
  const n = [], i = bi();
  for (const s in e) {
    if (t.hasEncoding && (t.baseEncodingName || t.differences[s] !== void 0))
      continue;
    const a = e[s], r = Ta(a, i);
    r !== -1 && (n[s] = String.fromCharCode(r));
  }
  n.length > 0 && t.toUnicode.amend(n);
}
function fh(t) {
  if (!t.fallbackToUnicode || t.toUnicode instanceof Hn)
    return;
  const e = [];
  for (const n in t.fallbackToUnicode)
    t.toUnicode.has(n) || (e[n] = t.fallbackToUnicode[n]);
  e.length > 0 && t.toUnicode.amend(e);
}
class Rx {
  constructor(e, n, i, s, a, r, o, c, l) {
    this.originalCharCode = e, this.fontChar = n, this.unicode = i, this.accent = s, this.width = a, this.vmetric = r, this.operatorListId = o, this.isSpace = c, this.isInFont = l;
  }
  get category() {
    return Q(this, "category", q9(this.unicode), !0);
  }
}
function fs(t, e) {
  return (t << 8) + e;
}
function Ga(t, e, n) {
  t[e + 1] = n, t[e] = n >>> 8;
}
function Bn(t, e) {
  const n = (t << 8) + e;
  return n & 32768 ? n - 65536 : n;
}
function Mx(t, e, n) {
  t[e + 3] = n & 255, t[e + 2] = n >>> 8, t[e + 1] = n >>> 16, t[e] = n >>> 24;
}
function Dx(t, e, n, i) {
  return (t << 24) + (e << 16) + (n << 8) + i;
}
function at(t) {
  return String.fromCharCode(t >> 8 & 255, t & 255);
}
function us(t) {
  return t > 32767 ? t = 32767 : t < -32768 && (t = -32768), String.fromCharCode(t >> 8 & 255, t & 255);
}
function Px(t) {
  const e = t.peekBytes(4);
  return ht(e, 0) === 65536 || Cn(e) === "true";
}
function Jf(t) {
  const e = t.peekBytes(4);
  return Cn(e) === "ttcf";
}
function Nx(t) {
  const e = t.peekBytes(4);
  return Cn(e) === "OTTO";
}
function Ox(t) {
  const e = t.peekBytes(2);
  return e[0] === 37 && e[1] === 33 || e[0] === 128 && e[1] === 1;
}
function Lx(t) {
  const e = t.peekBytes(4);
  return e[0] >= 1 && e[3] >= 1 && e[3] <= 4;
}
function _x(t, {
  type: e,
  subtype: n,
  composite: i
}) {
  let s, a;
  return Px(t) || Jf(t) ? s = i ? "CIDFontType2" : "TrueType" : Nx(t) ? s = i ? "CIDFontType2" : "OpenType" : Ox(t) ? i ? s = "CIDFontType0" : s = e === "MMType1" ? "MMType1" : "Type1" : Lx(t) ? i ? (s = "CIDFontType0", a = "CIDFontType0C") : (s = e === "MMType1" ? "MMType1" : "Type1", a = "Type1C") : (I("getFontFileType: Unable to detect correct font file Type/Subtype."), s = e, a = n), [s, a];
}
function Mr(t, e) {
  for (const n in e)
    t[+n] = e[n];
}
function gc(t, e, n) {
  const i = [];
  let s;
  for (let a = 0, r = t.length; a < r; a++)
    s = Ta(t[a], e), s !== -1 && (i[a] = s);
  for (const a in n)
    s = Ta(n[a], e), s !== -1 && (i[+a] = s);
  return i;
}
function Ux(t) {
  return t.platform === 1 && t.encoding === 0 && t.language === 0;
}
function Qf(t) {
  return t.platform === 3 && t.encoding === 1 && t.language === 1033;
}
function pc(t, e, n = !1) {
  switch (e.length) {
    case 1:
      return e.charCodeAt(0);
    case 2:
      return e.charCodeAt(0) << 8 | e.charCodeAt(1);
  }
  const i = `Unsupported CID string (charCode ${t}): "${e}".`;
  if (n)
    throw new j(i);
  return I(i), e;
}
function uh(t, e, n, i) {
  const s = /* @__PURE__ */ Object.create(null), a = /* @__PURE__ */ new Map(), r = [], o = /* @__PURE__ */ new Set();
  let c = 0, h = Ti[c][0], f = Ti[c][1];
  const u = (x) => Ti[0][0] <= x && x <= Ti[0][1] || Ti[1][0] <= x && x <= Ti[1][1];
  let d = null;
  for (const x in t) {
    let g = t[x];
    if (!e(g))
      continue;
    if (h > f) {
      if (c++, c >= Ti.length) {
        I("Ran out of space in font private use area.");
        break;
      }
      h = Ti[c][0], f = Ti[c][1];
    }
    const m = h++;
    g === 0 && (g = n);
    let p = i.get(x);
    if (typeof p == "string")
      if (p.length === 1)
        p = p.codePointAt(0);
      else {
        if (!d) {
          d = /* @__PURE__ */ new Map();
          for (let b = 64256; b <= 64335; b++) {
            const w = String.fromCharCode(b).normalize("NFKD");
            w.length > 1 && d.set(w, b);
          }
        }
        p = d.get(p) || p.codePointAt(0);
      }
    p && !u(p) && !o.has(g) && (a.set(p, g), o.add(g)), s[m] = g, r[x] = m;
  }
  return {
    toFontChar: r,
    charCodeToGlyphId: s,
    toUnicodeExtraMap: a,
    nextAvailableFontCharCode: h
  };
}
function jx(t, e, n) {
  const i = [];
  for (const r in t)
    t[r] >= n || i.push({
      fontCharCode: r | 0,
      glyphId: t[r]
    });
  if (e)
    for (const [r, o] of e)
      o >= n || i.push({
        fontCharCode: r,
        glyphId: o
      });
  i.length === 0 && i.push({
    fontCharCode: 0,
    glyphId: 0
  }), i.sort((r, o) => r.fontCharCode - o.fontCharCode);
  const s = [], a = i.length;
  for (let r = 0; r < a; ) {
    const o = i[r].fontCharCode, c = [i[r].glyphId];
    ++r;
    let l = o;
    for (; r < a && l + 1 === i[r].fontCharCode && (c.push(i[r].glyphId), ++l, ++r, l !== 65535); )
      ;
    s.push([o, l, c]);
  }
  return s;
}
function dh(t, e, n) {
  const i = jx(t, e, n), s = i.at(-1)[1] > 65535 ? 2 : 1;
  let a = "\0\0" + at(s) + "\0\0" + Qt(4 + s * 8), r, o, c, l;
  for (r = i.length - 1; r >= 0 && !(i[r][0] <= 65535); --r)
    ;
  const h = r + 1;
  i[r][0] < 65535 && i[r][1] === 65535 && (i[r][1] = 65534);
  const f = i[r][1] < 65535 ? 1 : 0, u = h + f, d = E0.getSearchParams(u, 2);
  let x = "", g = "", m = "", p = "", b = "", w = 0, y, k, S, C;
  for (r = 0, o = h; r < o; r++) {
    y = i[r], k = y[0], S = y[1], x += at(k), g += at(S), C = y[2];
    let D = !0;
    for (c = 1, l = C.length; c < l; ++c)
      if (C[c] !== C[c - 1] + 1) {
        D = !1;
        break;
      }
    if (D) {
      const M = C[0];
      m += at(M - k & 65535), p += at(0);
    } else {
      const M = (u - r) * 2 + w * 2;
      for (w += S - k + 1, m += at(0), p += at(M), c = 0, l = C.length; c < l; ++c)
        b += at(C[c]);
    }
  }
  f > 0 && (g += "ÿÿ", x += "ÿÿ", m += "\0", p += "\0\0");
  const T = "\0\0" + at(2 * u) + at(d.range) + at(d.entry) + at(d.rangeShift) + g + "\0\0" + x + m + p + b;
  let F = "", R = "";
  if (s > 1) {
    for (a += `\0\0
` + Qt(4 + s * 8 + 4 + T.length), F = "", r = 0, o = i.length; r < o; r++) {
      y = i[r], k = y[0], C = y[2];
      let D = C[0];
      for (c = 1, l = C.length; c < l; ++c)
        C[c] !== C[c - 1] + 1 && (S = y[0] + c - 1, F += Qt(k) + Qt(S) + Qt(D), k = S + 1, D = C[c]);
      F += Qt(k) + Qt(y[1]) + Qt(D);
    }
    R = "\0\f\0\0" + Qt(F.length + 16) + "\0\0\0\0" + Qt(F.length / 12);
  }
  return a + "\0" + at(T.length + 4) + T + R + F;
}
function qx(t, e) {
  e.pos = (e.start || 0) + t.offset;
  const n = e.getUint16();
  e.skip(60);
  const i = e.getUint16();
  if (n < 4 && i & 768)
    return !1;
  const s = e.getUint16(), a = e.getUint16();
  return s > a || (e.skip(6), e.getUint16() === 0) ? !1 : (t.data[8] = t.data[9] = 0, !0);
}
function xh(t, e, n) {
  n || (n = {
    unitsPerEm: 0,
    yMax: 0,
    yMin: 0,
    ascent: 0,
    descent: 0
  });
  let i = 0, s = 0, a = 0, r = 0, o = null, c = 0, l = -1;
  if (e) {
    for (let p in e)
      if (p |= 0, (o > p || !o) && (o = p), c < p && (c = p), l = U9(p, l), l < 32)
        i |= 1 << l;
      else if (l < 64)
        s |= 1 << l - 32;
      else if (l < 96)
        a |= 1 << l - 64;
      else if (l < 123)
        r |= 1 << l - 96;
      else
        throw new j("Unicode ranges Bits > 123 are reserved for internal usage");
    c > 65535 && (c = 65535);
  } else
    o = 0, c = 255;
  const h = t.bbox || [0, 0, 0, 0], f = n.unitsPerEm || (t.fontMatrix ? 1 / Math.max(...t.fontMatrix.slice(0, 4).map(Math.abs)) : 1e3), u = t.ascentScaled ? 1 : f / ps, d = n.ascent || Math.round(u * (t.ascent || h[3]));
  let x = n.descent || Math.round(u * (t.descent || h[1]));
  x > 0 && t.descent > 0 && h[1] < 0 && (x = -x);
  const g = n.yMax || d, m = -n.yMin || -x;
  return "\0$ô\0\0\0»\0\0\0»\0\0ß\x001\0\0\0\0" + String.fromCharCode(t.fixedPitch ? 9 : 0) + "\0\0\0\0\0\0" + Qt(i) + Qt(s) + Qt(a) + Qt(r) + "*21*" + at(t.italicAngle ? 1 : 0) + at(o || t.firstChar) + at(c || t.lastChar) + at(d) + at(x) + "\0d" + at(g) + at(m) + "\0\0\0\0\0\0\0\0" + at(t.xHeight) + at(t.capHeight) + at(0) + at(o || t.firstChar) + "\0";
}
function gh(t) {
  const e = Math.floor(t.italicAngle * 65536);
  return "\0\0\0" + Qt(e) + "\0\0\0\0" + Qt(t.fixedPitch ? 1 : 0) + "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
}
function Hx(t) {
  return t.replaceAll(/[^\x21-\x7E]|[[\](){}<>/%]/g, "").slice(0, 63);
}
function mc(t, e) {
  e || (e = [[], []]);
  const n = [e[0][0] || "Original licence", e[0][1] || t, e[0][2] || "Unknown", e[0][3] || "uniqueID", e[0][4] || t, e[0][5] || "Version 0.11", e[0][6] || Hx(t), e[0][7] || "Unknown", e[0][8] || "Unknown", e[0][9] || "Unknown"], i = [];
  let s, a, r, o, c;
  for (s = 0, a = n.length; s < a; s++) {
    c = e[1][s] || n[s];
    const m = [];
    for (r = 0, o = c.length; r < o; r++)
      m.push(at(c.charCodeAt(r)));
    i.push(m.join(""));
  }
  const l = [n, i], h = ["\0", "\0"], f = ["\0\0", "\0"], u = ["\0\0", "	"], d = n.length * h.length;
  let x = "\0\0" + at(d) + at(d * 12 + 6), g = 0;
  for (s = 0, a = h.length; s < a; s++) {
    const m = l[s];
    for (r = 0, o = m.length; r < o; r++) {
      c = m[r];
      const p = h[s] + f[s] + u[s] + at(r) + at(c.length) + at(g);
      x += p, g += c.length;
    }
  }
  return x += n.join("") + i.join(""), x;
}
class ph {
  constructor(e, n, i, s) {
    var h;
    this.name = e, this.psName = null, this.mimetype = null, this.disableFontFace = s.disableFontFace, this.fontExtraProperties = s.fontExtraProperties, this.loadedName = i.loadedName, this.isType3Font = i.isType3Font, this.missingFile = !1, this.cssFontInfo = i.cssFontInfo, this._charsCache = /* @__PURE__ */ Object.create(null), this._glyphCache = /* @__PURE__ */ Object.create(null);
    let a = !!(i.flags & Qn.Serif);
    if (!a && !i.isSimulatedFlags) {
      const f = e.replaceAll(/[,_]/g, "-").split("-", 1)[0], u = Yl();
      for (const d of f.split("+"))
        if (u[d]) {
          a = !0;
          break;
        }
    }
    this.isSerifFont = a, this.isSymbolicFont = !!(i.flags & Qn.Symbolic), this.isMonospace = !!(i.flags & Qn.FixedPitch);
    let {
      type: r,
      subtype: o
    } = i;
    this.type = r, this.subtype = o, this.systemFontInfo = i.systemFontInfo;
    const c = e.match(/^InvalidPDFjsFont_(.*)_\d+$/);
    if (this.isInvalidPDFjsFont = !!c, this.isInvalidPDFjsFont ? this.fallbackName = c[1] : this.isMonospace ? this.fallbackName = "monospace" : this.isSerifFont ? this.fallbackName = "serif" : this.fallbackName = "sans-serif", (h = this.systemFontInfo) != null && h.guessFallback && (this.systemFontInfo.guessFallback = !1, this.systemFontInfo.css += `,${this.fallbackName}`), this.differences = i.differences, this.widths = i.widths, this.defaultWidth = i.defaultWidth, this.composite = i.composite, this.cMap = i.cMap, this.capHeight = i.capHeight / ps, this.ascent = i.ascent / ps, this.descent = i.descent / ps, this.lineHeight = this.ascent - this.descent, this.fontMatrix = i.fontMatrix, this.bbox = i.bbox, this.defaultEncoding = i.defaultEncoding, this.toUnicode = i.toUnicode, this.toFontChar = [], i.type === "Type3") {
      for (let f = 0; f < 256; f++)
        this.toFontChar[f] = this.differences[f] || i.defaultEncoding[f];
      return;
    }
    if (this.cidEncoding = i.cidEncoding || "", this.vertical = !!i.vertical, this.vertical && (this.vmetrics = i.vmetrics, this.defaultVMetrics = i.defaultVMetrics), !n || n.isEmpty) {
      n && I('Font file is empty in "' + e + '" (' + this.loadedName + ")"), this.fallbackToSystemFont(i);
      return;
    }
    [r, o] = _x(n, i), (r !== this.type || o !== this.subtype) && Ge(`Inconsistent font file Type/SubType, expected: ${this.type}/${this.subtype} but found: ${r}/${o}.`);
    let l;
    try {
      switch (r) {
        case "MMType1":
          Ge("MMType1 font (" + e + "), falling back to Type1.");
        case "Type1":
        case "CIDFontType0":
          this.mimetype = "font/opentype";
          const f = o === "Type1C" || o === "CIDFontType0C" ? new uc(n, i) : new Tx(e, n, i);
          hh(i), l = this.convert(e, f, i);
          break;
        case "OpenType":
        case "TrueType":
        case "CIDFontType2":
          this.mimetype = "font/opentype", l = this.checkAndRepair(e, n, i), hh(i), this.isOpenType && (r = "OpenType");
          break;
        default:
          throw new j(`Font ${r} is not supported`);
      }
    } catch (f) {
      I(f), this.fallbackToSystemFont(i);
      return;
    }
    fh(i), this.data = l, this.type = r, this.subtype = o, this.fontMatrix = i.fontMatrix, this.widths = i.widths, this.defaultWidth = i.defaultWidth, this.toUnicode = i.toUnicode, this.seacMap = i.seacMap;
  }
  get renderer() {
    const e = lx.create(this, da);
    return Q(this, "renderer", e);
  }
  exportData() {
    const e = this.fontExtraProperties ? [...lh, ...Fx] : lh, n = /* @__PURE__ */ Object.create(null);
    for (const i of e) {
      const s = this[i];
      s !== void 0 && (n[i] = s);
    }
    return n;
  }
  fallbackToSystemFont(e) {
    this.missingFile = !0;
    const {
      name: n,
      type: i
    } = this;
    let s = ir(n);
    const a = qo(), r = Kf(), o = !!a[s], c = !!(r[s] && a[r[s]]);
    s = a[s] || r[s] || s;
    const h = fx()[s];
    h && (isNaN(this.ascent) && (this.ascent = h.ascent / ps), isNaN(this.descent) && (this.descent = h.descent / ps), isNaN(this.capHeight) && (this.capHeight = h.capHeight / ps)), this.bold = /bold/gi.test(s), this.italic = /oblique|italic/gi.test(s), this.black = /Black/g.test(n);
    const f = /Narrow/g.test(n);
    if (this.remeasure = (!o || f) && Object.keys(this.widths).length > 0, (o || c) && i === "CIDFontType2" && this.cidEncoding.startsWith("Identity-")) {
      const u = e.cidToGidMap, d = [];
      if (Mr(d, Z1()), /Arial-?Black/i.test(n) ? Mr(d, tx()) : /Calibri/i.test(n) && Mr(d, nx()), u) {
        for (const x in d) {
          const g = d[x];
          u[g] !== void 0 && (d[+x] = u[g]);
        }
        u.length !== this.toUnicode.length && e.hasIncludedToUnicodeMap && this.toUnicode instanceof Hn && this.toUnicode.forEach(function(x, g) {
          const m = d[x];
          u[m] === void 0 && (d[+x] = g);
        });
      }
      this.toUnicode instanceof Hn || this.toUnicode.forEach(function(x, g) {
        d[+x] = g;
      }), this.toFontChar = d, this.toUnicode = new s0(d);
    } else if (/Symbol/i.test(s))
      this.toFontChar = gc(Wl, bi(), this.differences);
    else if (/Dingbats/i.test(s))
      this.toFontChar = gc(Vl, O9(), this.differences);
    else if (o || c) {
      const u = gc(this.defaultEncoding, bi(), this.differences);
      i === "CIDFontType2" && !this.cidEncoding.startsWith("Identity-") && !(this.toUnicode instanceof Hn) && this.toUnicode.forEach(function(d, x) {
        u[+d] = x;
      }), this.toFontChar = u;
    } else {
      const u = bi(), d = [];
      this.toUnicode.forEach((x, g) => {
        if (!this.composite) {
          const m = this.differences[x] || this.defaultEncoding[x], p = Ta(m, u);
          p !== -1 && (g = p);
        }
        d[+x] = g;
      }), this.composite && this.toUnicode instanceof Hn && /Tahoma|Verdana/i.test(n) && Mr(d, Z1()), this.toFontChar = d;
    }
    fh(e), this.loadedName = s.split("-", 1)[0];
  }
  checkAndRepair(e, n, i) {
    var Ae, Ve, pe;
    const s = ["OS/2", "cmap", "head", "hhea", "hmtx", "maxp", "name", "post", "loca", "glyf", "fpgm", "prep", "cvt ", "CFF "];
    function a(B, P) {
      const G = /* @__PURE__ */ Object.create(null);
      G["OS/2"] = null, G.cmap = null, G.head = null, G.hhea = null, G.hmtx = null, G.maxp = null, G.name = null, G.post = null;
      for (let z = 0; z < P; z++) {
        const ae = r(B);
        s.includes(ae.tag) && ae.length !== 0 && (G[ae.tag] = ae);
      }
      return G;
    }
    function r(B) {
      const P = B.getString(4), G = B.getInt32() >>> 0, z = B.getInt32() >>> 0, ae = B.getInt32() >>> 0, ue = B.pos;
      B.pos = B.start || 0, B.skip(z);
      const oe = B.getBytes(ae);
      return B.pos = ue, P === "head" && (oe[8] = oe[9] = oe[10] = oe[11] = 0, oe[17] |= 32), {
        tag: P,
        checksum: G,
        length: ae,
        offset: z,
        data: oe
      };
    }
    function o(B) {
      return {
        version: B.getString(4),
        numTables: B.getUint16(),
        searchRange: B.getUint16(),
        entrySelector: B.getUint16(),
        rangeShift: B.getUint16()
      };
    }
    function c(B) {
      const P = B.getString(4);
      zt(P === "ttcf", "Must be a TrueType Collection font.");
      const G = B.getUint16(), z = B.getUint16(), ae = B.getInt32() >>> 0, ue = [];
      for (let Y = 0; Y < ae; Y++)
        ue.push(B.getInt32() >>> 0);
      const oe = {
        ttcTag: P,
        majorVersion: G,
        minorVersion: z,
        numFonts: ae,
        offsetTable: ue
      };
      switch (G) {
        case 1:
          return oe;
        case 2:
          return oe.dsigTag = B.getInt32() >>> 0, oe.dsigLength = B.getInt32() >>> 0, oe.dsigOffset = B.getInt32() >>> 0, oe;
      }
      throw new j(`Invalid TrueType Collection majorVersion: ${G}.`);
    }
    function l(B, P) {
      var oe;
      const {
        numFonts: G,
        offsetTable: z
      } = c(B), ae = P.split("+");
      let ue;
      for (let Y = 0; Y < G; Y++) {
        B.pos = (B.start || 0) + z[Y];
        const Pe = o(B), fe = a(B, Pe.numTables);
        if (!fe.name)
          throw new j('TrueType Collection font must contain a "name" table.');
        const [be] = m(fe.name);
        for (let te = 0, we = be.length; te < we; te++)
          for (let Se = 0, ke = be[te].length; Se < ke; Se++) {
            const Oe = (oe = be[te][Se]) == null ? void 0 : oe.replaceAll(/\s/g, "");
            if (Oe) {
              if (Oe === P)
                return {
                  header: Pe,
                  tables: fe
                };
              if (!(ae.length < 2))
                for (const de of ae)
                  Oe === de && (ue = {
                    name: de,
                    header: Pe,
                    tables: fe
                  });
            }
          }
      }
      if (ue)
        return I(`TrueType Collection does not contain "${P}" font, falling back to "${ue.name}" font instead.`), {
          header: ue.header,
          tables: ue.tables
        };
      throw new j(`TrueType Collection does not contain "${P}" font.`);
    }
    function h(B, P, G, z) {
      if (!B)
        return I("No cmap table available."), {
          platformId: -1,
          encodingId: -1,
          mappings: [],
          hasShortCmap: !1
        };
      let ae, ue = (P.start || 0) + B.offset;
      P.pos = ue, P.skip(2);
      const oe = P.getUint16();
      let Y, Pe = !1;
      for (let de = 0; de < oe; de++) {
        const ie = P.getUint16(), ye = P.getUint16(), ze = P.getInt32() >>> 0;
        let xe = !1;
        if (!((Y == null ? void 0 : Y.platformId) === ie && (Y == null ? void 0 : Y.encodingId) === ye)) {
          if (ie === 0 && (ye === 0 || ye === 1 || ye === 3))
            xe = !0;
          else if (ie === 1 && ye === 0)
            xe = !0;
          else if (ie === 3 && ye === 1 && (z || !Y))
            xe = !0, G || (Pe = !0);
          else if (G && ie === 3 && ye === 0) {
            xe = !0;
            let Re = !0;
            if (de < oe - 1) {
              const _e = P.peekBytes(2);
              fs(_e[0], _e[1]) < ie && (Re = !1);
            }
            Re && (Pe = !0);
          }
          if (xe && (Y = {
            platformId: ie,
            encodingId: ye,
            offset: ze
          }), Pe)
            break;
        }
      }
      if (Y && (P.pos = ue + Y.offset), !Y || P.peekByte() === -1)
        return I("Could not find a preferred cmap table."), {
          platformId: -1,
          encodingId: -1,
          mappings: [],
          hasShortCmap: !1
        };
      const fe = P.getUint16();
      let be = !1;
      const te = [];
      let we, Se;
      if (fe === 0) {
        for (P.skip(4), we = 0; we < 256; we++) {
          const de = P.getByte();
          de && te.push({
            charCode: we,
            glyphId: de
          });
        }
        be = !0;
      } else if (fe === 2) {
        P.skip(4);
        const de = [];
        let ie = 0;
        for (let ze = 0; ze < 256; ze++) {
          const xe = P.getUint16() >> 3;
          de.push(xe), ie = Math.max(xe, ie);
        }
        const ye = [];
        for (let ze = 0; ze <= ie; ze++)
          ye.push({
            firstCode: P.getUint16(),
            entryCount: P.getUint16(),
            idDelta: Bn(P.getByte(), P.getByte()),
            idRangePos: P.pos + P.getUint16()
          });
        for (let ze = 0; ze < 256; ze++)
          if (de[ze] === 0)
            P.pos = ye[0].idRangePos + 2 * ze, Se = P.getUint16(), te.push({
              charCode: ze,
              glyphId: Se
            });
          else {
            const xe = ye[de[ze]];
            for (we = 0; we < xe.entryCount; we++) {
              const Re = (ze << 8) + we + xe.firstCode;
              P.pos = xe.idRangePos + 2 * we, Se = P.getUint16(), Se !== 0 && (Se = (Se + xe.idDelta) % 65536), te.push({
                charCode: Re,
                glyphId: Se
              });
            }
          }
      } else if (fe === 4) {
        P.skip(4);
        const de = P.getUint16() >> 1;
        P.skip(6);
        const ie = [];
        let ye;
        for (ye = 0; ye < de; ye++)
          ie.push({
            end: P.getUint16()
          });
        for (P.skip(2), ye = 0; ye < de; ye++)
          ie[ye].start = P.getUint16();
        for (ye = 0; ye < de; ye++)
          ie[ye].delta = P.getUint16();
        let ze = 0, xe;
        for (ye = 0; ye < de; ye++) {
          ae = ie[ye];
          const _e = P.getUint16();
          if (!_e) {
            ae.offsetIndex = -1;
            continue;
          }
          xe = (_e >> 1) - (de - ye), ae.offsetIndex = xe, ze = Math.max(ze, xe + ae.end - ae.start + 1);
        }
        const Re = [];
        for (we = 0; we < ze; we++)
          Re.push(P.getUint16());
        for (ye = 0; ye < de; ye++) {
          ae = ie[ye], ue = ae.start;
          const _e = ae.end, it = ae.delta;
          for (xe = ae.offsetIndex, we = ue; we <= _e; we++)
            we !== 65535 && (Se = xe < 0 ? we : Re[xe + we - ue], Se = Se + it & 65535, te.push({
              charCode: we,
              glyphId: Se
            }));
        }
      } else if (fe === 6) {
        P.skip(4);
        const de = P.getUint16(), ie = P.getUint16();
        for (we = 0; we < ie; we++) {
          Se = P.getUint16();
          const ye = de + we;
          te.push({
            charCode: ye,
            glyphId: Se
          });
        }
      } else if (fe === 12) {
        P.skip(10);
        const de = P.getInt32() >>> 0;
        for (we = 0; we < de; we++) {
          const ie = P.getInt32() >>> 0, ye = P.getInt32() >>> 0;
          let ze = P.getInt32() >>> 0;
          for (let xe = ie; xe <= ye; xe++)
            te.push({
              charCode: xe,
              glyphId: ze++
            });
        }
      } else
        return I("cmap table has unsupported format: " + fe), {
          platformId: -1,
          encodingId: -1,
          mappings: [],
          hasShortCmap: !1
        };
      te.sort((de, ie) => de.charCode - ie.charCode);
      const ke = [], Oe = /* @__PURE__ */ new Set();
      for (const de of te) {
        const {
          charCode: ie
        } = de;
        Oe.has(ie) || (Oe.add(ie), ke.push(de));
      }
      return {
        platformId: Y.platformId,
        encodingId: Y.encodingId,
        mappings: ke,
        hasShortCmap: be
      };
    }
    function f(B, P, G, z, ae, ue) {
      if (!P) {
        G && (G.data = null);
        return;
      }
      B.pos = (B.start || 0) + P.offset, B.pos += 4, B.pos += 2, B.pos += 2, B.pos += 2, B.pos += 2, B.pos += 2, B.pos += 2, B.pos += 2, B.pos += 2, B.pos += 2;
      const oe = B.getUint16();
      B.pos += 8, B.pos += 2;
      let Y = B.getUint16();
      oe !== 0 && (fs(z.data[44], z.data[45]) & 2 || (P.data[22] = 0, P.data[23] = 0)), Y > ae && (Ge(`The numOfMetrics (${Y}) should not be greater than the numGlyphs (${ae}).`), Y = ae, P.data[34] = (Y & 65280) >> 8, P.data[35] = Y & 255);
      const fe = ae - Y - (G.length - Y * 4 >> 1);
      if (fe > 0) {
        const be = new Uint8Array(G.length + fe * 2);
        be.set(G.data), ue && (be[G.length] = G.data[2], be[G.length + 1] = G.data[3]), G.data = be;
      }
    }
    function u(B, P, G, z, ae, ue) {
      const oe = {
        length: 0,
        sizeOfInstructions: 0
      };
      if (P < 0 || P >= B.length || G > B.length || G - P <= 12)
        return oe;
      const Y = B.subarray(P, G), Pe = Bn(Y[2], Y[3]), fe = Bn(Y[4], Y[5]), be = Bn(Y[6], Y[7]), te = Bn(Y[8], Y[9]);
      Pe > be && (Ga(Y, 2, be), Ga(Y, 6, Pe)), fe > te && (Ga(Y, 4, te), Ga(Y, 8, fe));
      const we = Bn(Y[0], Y[1]);
      if (we < 0)
        return we < -1 || (z.set(Y, ae), oe.length = Y.length), oe;
      let Se, ke = 10, Oe = 0;
      for (Se = 0; Se < we; Se++)
        Oe = (Y[ke] << 8 | Y[ke + 1]) + 1, ke += 2;
      const de = ke, ie = Y[ke] << 8 | Y[ke + 1];
      oe.sizeOfInstructions = ie, ke += 2 + ie;
      const ye = ke;
      let ze = 0;
      for (Se = 0; Se < Oe; Se++) {
        const Re = Y[ke++];
        Re & 192 && (Y[ke - 1] = Re & 63);
        let _e = 2;
        Re & 2 ? _e = 1 : Re & 16 && (_e = 0);
        let it = 2;
        Re & 4 ? it = 1 : Re & 32 && (it = 0);
        const Ue = _e + it;
        if (ze += Ue, Re & 8) {
          const Nt = Y[ke++];
          Nt === 0 && (Y[ke - 1] ^= 8), Se += Nt, ze += Nt * Ue;
        }
      }
      if (ze === 0)
        return oe;
      let xe = ke + ze;
      return xe > Y.length ? oe : !ue && ie > 0 ? (z.set(Y.subarray(0, de), ae), z.set([0, 0], ae + de), z.set(Y.subarray(ye, xe), ae + de + 2), xe -= ie, Y.length - xe > 3 && (xe = xe + 3 & -4), oe.length = xe, oe) : Y.length - xe > 3 ? (xe = xe + 3 & -4, z.set(Y.subarray(0, xe), ae), oe.length = xe, oe) : (z.set(Y, ae), oe.length = Y.length, oe);
    }
    function d(B, P, G) {
      const z = B.data, ae = Dx(z[0], z[1], z[2], z[3]);
      ae >> 16 !== 1 && (Ge("Attempting to fix invalid version in head table: " + ae), z[0] = 0, z[1] = 1, z[2] = 0, z[3] = 0);
      const ue = fs(z[50], z[51]);
      if (ue < 0 || ue > 1) {
        Ge("Attempting to fix invalid indexToLocFormat in head table: " + ue);
        const oe = P + 1;
        if (G === oe << 1)
          z[50] = 0, z[51] = 0;
        else if (G === oe << 2)
          z[50] = 0, z[51] = 1;
        else
          throw new j("Could not fix indexToLocFormat: " + ue);
      }
    }
    function x(B, P, G, z, ae, ue, oe) {
      let Y, Pe, fe;
      z ? (Y = 4, Pe = function(it, Ue) {
        return it[Ue] << 24 | it[Ue + 1] << 16 | it[Ue + 2] << 8 | it[Ue + 3];
      }, fe = function(it, Ue, Nt) {
        it[Ue] = Nt >>> 24 & 255, it[Ue + 1] = Nt >> 16 & 255, it[Ue + 2] = Nt >> 8 & 255, it[Ue + 3] = Nt & 255;
      }) : (Y = 2, Pe = function(it, Ue) {
        return it[Ue] << 9 | it[Ue + 1] << 1;
      }, fe = function(it, Ue, Nt) {
        it[Ue] = Nt >> 9 & 255, it[Ue + 1] = Nt >> 1 & 255;
      });
      const be = ue ? G + 1 : G, te = Y * (1 + be), we = new Uint8Array(te);
      we.set(B.data.subarray(0, te)), B.data = we;
      const Se = P.data, ke = Se.length, Oe = new Uint8Array(ke);
      let de, ie;
      const ye = [];
      for (de = 0, ie = 0; de < G + 1; de++, ie += Y) {
        let _e = Pe(we, ie);
        _e > ke && (_e = ke), ye.push({
          index: de,
          offset: _e,
          endOffset: 0
        });
      }
      for (ye.sort((_e, it) => _e.offset - it.offset), de = 0; de < G; de++)
        ye[de].endOffset = ye[de + 1].offset;
      for (ye.sort((_e, it) => _e.index - it.index), de = 0; de < G; de++) {
        const {
          offset: _e,
          endOffset: it
        } = ye[de];
        if (_e !== 0 || it !== 0)
          break;
        const Ue = ye[de + 1].offset;
        if (Ue !== 0) {
          ye[de].endOffset = Ue;
          break;
        }
      }
      const ze = ye.at(-2);
      ze.offset !== 0 && ze.endOffset === 0 && (ze.endOffset = ke);
      const xe = /* @__PURE__ */ Object.create(null);
      let Re = 0;
      for (fe(we, 0, Re), de = 0, ie = Y; de < G; de++, ie += Y) {
        const _e = u(Se, ye[de].offset, ye[de].endOffset, Oe, Re, ae), it = _e.length;
        it === 0 && (xe[de] = !0), _e.sizeOfInstructions > oe && (oe = _e.sizeOfInstructions), Re += it, fe(we, ie, Re);
      }
      if (Re === 0) {
        const _e = new Uint8Array([0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0]);
        for (de = 0, ie = Y; de < be; de++, ie += Y)
          fe(we, ie, _e.length);
        P.data = _e;
      } else if (ue) {
        const _e = Pe(we, Y);
        Oe.length > _e + Re ? P.data = Oe.subarray(0, _e + Re) : (P.data = new Uint8Array(_e + Re), P.data.set(Oe.subarray(0, Re))), P.data.set(Oe.subarray(0, _e), Re), fe(B.data, we.length - Y, Re + _e);
      } else
        P.data = Oe.subarray(0, Re);
      return {
        missingGlyphs: xe,
        maxSizeOfInstructions: oe
      };
    }
    function g(B, P, G) {
      const z = (n.start || 0) + B.offset;
      n.pos = z;
      const ae = B.length, ue = z + ae, oe = n.getInt32();
      n.skip(28);
      let Y, Pe = !0, fe;
      switch (oe) {
        case 65536:
          Y = X1;
          break;
        case 131072:
          const be = n.getUint16();
          if (be !== G) {
            Pe = !1;
            break;
          }
          const te = [];
          for (fe = 0; fe < be; ++fe) {
            const ke = n.getUint16();
            if (ke >= 32768) {
              Pe = !1;
              break;
            }
            te.push(ke);
          }
          if (!Pe)
            break;
          const we = [], Se = [];
          for (; n.pos < ue; ) {
            const ke = n.getByte();
            for (Se.length = ke, fe = 0; fe < ke; ++fe)
              Se[fe] = String.fromCharCode(n.getByte());
            we.push(Se.join(""));
          }
          for (Y = [], fe = 0; fe < be; ++fe) {
            const ke = te[fe];
            if (ke < 258) {
              Y.push(X1[ke]);
              continue;
            }
            Y.push(we[ke - 258]);
          }
          break;
        case 196608:
          break;
        default:
          I("Unknown/unsupported post table version " + oe), Pe = !1, P.defaultEncoding && (Y = P.defaultEncoding);
          break;
      }
      return P.glyphNames = Y, Pe;
    }
    function m(B) {
      const P = (n.start || 0) + B.offset;
      n.pos = P;
      const G = [[], []], z = [], ae = B.length, ue = P + ae;
      if (n.getUint16() !== 0 || ae < 6)
        return [G, z];
      const Pe = n.getUint16(), fe = n.getUint16(), be = 12;
      let te, we;
      for (te = 0; te < Pe && n.pos + be <= ue; te++) {
        const Se = {
          platform: n.getUint16(),
          encoding: n.getUint16(),
          language: n.getUint16(),
          name: n.getUint16(),
          length: n.getUint16(),
          offset: n.getUint16()
        };
        (Ux(Se) || Qf(Se)) && z.push(Se);
      }
      for (te = 0, we = z.length; te < we; te++) {
        const Se = z[te];
        if (Se.length <= 0)
          continue;
        const ke = P + fe + Se.offset;
        if (ke + Se.length > ue)
          continue;
        n.pos = ke;
        const Oe = Se.name;
        if (Se.encoding) {
          let de = "";
          for (let ie = 0, ye = Se.length; ie < ye; ie += 2)
            de += String.fromCharCode(n.getUint16());
          G[1][Oe] = de;
        } else
          G[0][Oe] = n.getString(Se.length);
      }
      return [G, z];
    }
    const p = [0, 0, 0, 0, 0, 0, 0, 0, -2, -2, -2, -2, 0, 0, -2, -5, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, -1, -1, 1, -1, -999, 0, 1, 0, -1, -2, 0, -1, -2, -1, -1, 0, -1, -1, 0, 0, -999, -999, -1, -1, -1, -1, -2, -999, -2, -2, -999, 0, -2, -2, 0, 0, -2, 0, -2, 0, 0, 0, -2, -1, -1, 1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, 0, -999, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -999, -999, -999, -999, -999, -1, -1, -2, -2, 0, 0, 0, 0, -1, -1, -999, -2, -2, 0, 0, -1, -2, -2, 0, 0, 0, -1, -1, -1, -2];
    function b(B, P) {
      let G = B.data, z = 0, ae, ue, oe, Y, Pe, fe = 0, be = 0;
      const te = [], we = [], Se = [];
      let ke = P.tooComplexToFollowFunctions, Oe = !1, de = 0, ie = 0;
      for (let ze = G.length; z < ze; ) {
        const xe = G[z++];
        if (xe === 64)
          if (ue = G[z++], Oe || ie)
            z += ue;
          else
            for (ae = 0; ae < ue; ae++)
              te.push(G[z++]);
        else if (xe === 65)
          if (ue = G[z++], Oe || ie)
            z += ue * 2;
          else
            for (ae = 0; ae < ue; ae++)
              oe = G[z++], te.push(oe << 8 | G[z++]);
        else if ((xe & 248) === 176)
          if (ue = xe - 176 + 1, Oe || ie)
            z += ue;
          else
            for (ae = 0; ae < ue; ae++)
              te.push(G[z++]);
        else if ((xe & 248) === 184)
          if (ue = xe - 184 + 1, Oe || ie)
            z += ue * 2;
          else
            for (ae = 0; ae < ue; ae++)
              oe = G[z++], te.push(Bn(oe, G[z++]));
        else if (xe === 43 && !ke) {
          if (!Oe && !ie) {
            if (Y = te.at(-1), isNaN(Y))
              Ge("TT: CALL empty stack (or invalid entry).");
            else if (P.functionsUsed[Y] = !0, Y in P.functionsStackDeltas) {
              const Re = te.length + P.functionsStackDeltas[Y];
              if (Re < 0) {
                I("TT: CALL invalid functions stack delta."), P.hintsValid = !1;
                return;
              }
              te.length = Re;
            } else if (Y in P.functionsDefined && !Se.includes(Y)) {
              if (we.push({
                data: G,
                i: z,
                stackTop: te.length - 1
              }), Se.push(Y), Pe = P.functionsDefined[Y], !Pe) {
                I("TT: CALL non-existent function"), P.hintsValid = !1;
                return;
              }
              G = Pe.data, z = Pe.i;
            }
          }
        } else if (xe === 44 && !ke)
          (Oe || ie) && (I("TT: nested FDEFs not allowed"), ke = !0), Oe = !0, be = z, Y = te.pop(), P.functionsDefined[Y] = {
            data: G,
            i: z
          };
        else if (xe === 45)
          if (Oe)
            Oe = !1, fe = z;
          else {
            if (Pe = we.pop(), !Pe) {
              I("TT: ENDF bad stack"), P.hintsValid = !1;
              return;
            }
            Y = Se.pop(), G = Pe.data, z = Pe.i, P.functionsStackDeltas[Y] = te.length - Pe.stackTop;
          }
        else if (xe === 137)
          (Oe || ie) && (I("TT: nested IDEFs not allowed"), ke = !0), Oe = !0, be = z;
        else if (xe === 88)
          ++de;
        else if (xe === 27)
          ie = de;
        else if (xe === 89)
          ie === de && (ie = 0), --de;
        else if (xe === 28 && !Oe && !ie) {
          const Re = te.at(-1);
          Re > 0 && (z += Re - 1);
        }
        if (!Oe && !ie) {
          let Re = 0;
          for (xe <= 142 ? Re = p[xe] : xe >= 192 && xe <= 223 ? Re = -1 : xe >= 224 && (Re = -2), xe >= 113 && xe <= 117 && (ue = te.pop(), isNaN(ue) || (Re = -ue * 2)); Re < 0 && te.length > 0; )
            te.pop(), Re++;
          for (; Re > 0; )
            te.push(NaN), Re--;
        }
      }
      P.tooComplexToFollowFunctions = ke;
      const ye = [G];
      z > G.length && ye.push(new Uint8Array(z - G.length)), be > fe && (I("TT: complementing a missing function tail"), ye.push(new Uint8Array([34, 45]))), y(B, ye);
    }
    function w(B, P) {
      if (!B.tooComplexToFollowFunctions) {
        if (B.functionsDefined.length > P) {
          I("TT: more functions defined than expected"), B.hintsValid = !1;
          return;
        }
        for (let G = 0, z = B.functionsUsed.length; G < z; G++) {
          if (G > P) {
            I("TT: invalid function id: " + G), B.hintsValid = !1;
            return;
          }
          if (B.functionsUsed[G] && !B.functionsDefined[G]) {
            I("TT: undefined function: " + G), B.hintsValid = !1;
            return;
          }
        }
      }
    }
    function y(B, P) {
      if (P.length > 1) {
        let G = 0, z, ae;
        for (z = 0, ae = P.length; z < ae; z++)
          G += P[z].length;
        G = G + 3 & -4;
        const ue = new Uint8Array(G);
        let oe = 0;
        for (z = 0, ae = P.length; z < ae; z++)
          ue.set(P[z], oe), oe += P[z].length;
        B.data = ue, B.length = G;
      }
    }
    function k(B, P, G, z) {
      const ae = {
        functionsDefined: [],
        functionsUsed: [],
        functionsStackDeltas: [],
        tooComplexToFollowFunctions: !1,
        hintsValid: !0
      };
      if (B && b(B, ae), P && b(P, ae), B && w(ae, z), G && G.length & 1) {
        const ue = new Uint8Array(G.length + 1);
        ue.set(G.data), G.data = ue;
      }
      return ae.hintsValid;
    }
    n = new At(new Uint8Array(n.getBytes()));
    let S, C;
    if (Jf(n)) {
      const B = l(n, this.name);
      S = B.header, C = B.tables;
    } else
      S = o(n), C = a(n, S.numTables);
    let T, F;
    const R = !C["CFF "];
    if (R) {
      if (!C.loca)
        throw new j('Required "loca" table is not found');
      C.glyf || (I('Required "glyf" table is not found -- trying to recover.'), C.glyf = {
        tag: "glyf",
        data: new Uint8Array(0)
      }), this.isOpenType = !1;
    } else {
      const B = i.composite && (((Ae = i.cidToGidMap) == null ? void 0 : Ae.length) > 0 || !(i.cMap instanceof ua));
      if (S.version === "OTTO" && !B || !C.head || !C.hhea || !C.maxp || !C.post)
        return F = new At(C["CFF "].data), T = new uc(F, i), this.convert(e, T, i);
      delete C.glyf, delete C.loca, delete C.fpgm, delete C.prep, delete C["cvt "], this.isOpenType = !0;
    }
    if (!C.maxp)
      throw new j('Required "maxp" table is not found');
    n.pos = (n.start || 0) + C.maxp.offset;
    let D = n.getInt32();
    const M = n.getUint16();
    if (D !== 65536 && D !== 20480) {
      if (C.maxp.length === 6)
        D = 20480;
      else if (C.maxp.length >= 32)
        D = 65536;
      else
        throw new j('"maxp" table has a wrong version number');
      Mx(C.maxp.data, 0, D);
    }
    if (((Ve = i.scaleFactors) == null ? void 0 : Ve.length) === M && R) {
      const {
        scaleFactors: B
      } = i, P = fs(C.head.data[50], C.head.data[51]), G = new bx({
        glyfTable: C.glyf.data,
        isGlyphLocationsLong: P,
        locaTable: C.loca.data,
        numGlyphs: M
      });
      G.scale(B);
      const {
        glyf: z,
        loca: ae,
        isLocationLong: ue
      } = G.write();
      C.glyf.data = z, C.loca.data = ae, ue !== !!P && (C.head.data[50] = 0, C.head.data[51] = ue ? 1 : 0);
      const oe = C.hmtx.data;
      for (let Y = 0; Y < M; Y++) {
        const Pe = 4 * Y, fe = Math.round(B[Y] * fs(oe[Pe], oe[Pe + 1]));
        oe[Pe] = fe >> 8 & 255, oe[Pe + 1] = fe & 255;
        const be = Math.round(B[Y] * Bn(oe[Pe + 2], oe[Pe + 3]));
        Ga(oe, Pe + 2, be);
      }
    }
    let _ = M + 1, K = !0;
    _ > 65535 && (K = !1, _ = M, I("Not enough space in glyfs to duplicate first glyph."));
    let se = 0, H = 0;
    D >= 65536 && C.maxp.length >= 32 && (n.pos += 8, n.getUint16() > 2 && (C.maxp.data[14] = 0, C.maxp.data[15] = 2), n.pos += 4, se = n.getUint16(), n.pos += 4, H = n.getUint16()), C.maxp.data[4] = _ >> 8, C.maxp.data[5] = _ & 255;
    const W = k(C.fpgm, C.prep, C["cvt "], se);
    if (W || (delete C.fpgm, delete C.prep, delete C["cvt "]), f(n, C.hhea, C.hmtx, C.head, _, K), !C.head)
      throw new j('Required "head" table is not found');
    d(C.head, M, R ? C.loca.length : 0);
    let le = /* @__PURE__ */ Object.create(null);
    if (R) {
      const B = fs(C.head.data[50], C.head.data[51]), P = x(C.loca, C.glyf, M, B, W, K, H);
      le = P.missingGlyphs, D >= 65536 && C.maxp.length >= 32 && (C.maxp.data[26] = P.maxSizeOfInstructions >> 8, C.maxp.data[27] = P.maxSizeOfInstructions & 255);
    }
    if (!C.hhea)
      throw new j('Required "hhea" table is not found');
    C.hhea.data[10] === 0 && C.hhea.data[11] === 0 && (C.hhea.data[10] = 255, C.hhea.data[11] = 255);
    const q = {
      unitsPerEm: fs(C.head.data[18], C.head.data[19]),
      yMax: Bn(C.head.data[42], C.head.data[43]),
      yMin: Bn(C.head.data[38], C.head.data[39]),
      ascent: Bn(C.hhea.data[4], C.hhea.data[5]),
      descent: Bn(C.hhea.data[6], C.hhea.data[7]),
      lineGap: Bn(C.hhea.data[8], C.hhea.data[9])
    };
    this.ascent = q.ascent / q.unitsPerEm, this.descent = q.descent / q.unitsPerEm, this.lineGap = q.lineGap / q.unitsPerEm, (pe = this.cssFontInfo) != null && pe.lineHeight ? (this.lineHeight = this.cssFontInfo.metrics.lineHeight, this.lineGap = this.cssFontInfo.metrics.lineGap) : this.lineHeight = this.ascent - this.descent + this.lineGap, C.post && g(C.post, i, M), C.post = {
      tag: "post",
      data: gh(i)
    };
    const L = /* @__PURE__ */ Object.create(null);
    function Fe(B) {
      return !le[B];
    }
    if (i.composite) {
      const B = i.cidToGidMap || [], P = B.length === 0;
      i.cMap.forEach(function(G, z) {
        if (typeof z == "string" && (z = pc(G, z, !0)), z > 65535)
          throw new j("Max size of CID is 65,535");
        let ae = -1;
        P ? ae = z : B[z] !== void 0 && (ae = B[z]), ae >= 0 && ae < M && Fe(ae) && (L[G] = ae);
      });
    } else {
      const B = h(C.cmap, n, this.isSymbolicFont, i.hasEncoding), P = B.platformId, G = B.encodingId, z = B.mappings;
      let ae = [], ue = !1;
      if (i.hasEncoding && (i.baseEncodingName === "MacRomanEncoding" || i.baseEncodingName === "WinAnsiEncoding") && (ae = I0(i.baseEncodingName)), i.hasEncoding && !this.isSymbolicFont && (P === 3 && G === 1 || P === 1 && G === 0)) {
        const oe = bi();
        for (let Y = 0; Y < 256; Y++) {
          let Pe;
          if (this.differences[Y] !== void 0 ? Pe = this.differences[Y] : ae.length && ae[Y] !== "" ? Pe = ae[Y] : Pe = Oi[Y], !Pe)
            continue;
          const fe = $f(Pe, oe);
          let be;
          if (P === 3 && G === 1 ? be = oe[fe] : P === 1 && G === 0 && (be = zl.indexOf(fe)), be === void 0) {
            if (!i.glyphNames && i.hasIncludedToUnicodeMap && !(this.toUnicode instanceof Hn)) {
              const te = this.toUnicode.get(Y);
              te && (be = te.codePointAt(0));
            }
            if (be === void 0)
              continue;
          }
          for (const te of z)
            if (te.charCode === be) {
              L[Y] = te.glyphId;
              break;
            }
        }
      } else if (P === 0) {
        for (const oe of z)
          L[oe.charCode] = oe.glyphId;
        ue = !0;
      } else if (P === 3 && G === 0)
        for (const oe of z) {
          let Y = oe.charCode;
          Y >= 61440 && Y <= 61695 && (Y &= 255), L[Y] = oe.glyphId;
        }
      else
        for (const oe of z)
          L[oe.charCode] = oe.glyphId;
      if (i.glyphNames && (ae.length || this.differences.length))
        for (let oe = 0; oe < 256; ++oe) {
          if (!ue && L[oe] !== void 0)
            continue;
          const Y = this.differences[oe] || ae[oe];
          if (!Y)
            continue;
          const Pe = i.glyphNames.indexOf(Y);
          Pe > 0 && Fe(Pe) && (L[oe] = Pe);
        }
    }
    L.length === 0 && (L[0] = 0);
    let ve = _ - 1;
    if (K || (ve = 0), !i.cssFontInfo) {
      const B = uh(L, Fe, ve, this.toUnicode);
      this.toFontChar = B.toFontChar, C.cmap = {
        tag: "cmap",
        data: dh(B.charCodeToGlyphId, B.toUnicodeExtraMap, _)
      }, (!C["OS/2"] || !qx(C["OS/2"], n)) && (C["OS/2"] = {
        tag: "OS/2",
        data: xh(i, B.charCodeToGlyphId, q)
      });
    }
    if (!R)
      try {
        F = new At(C["CFF "].data), T = new Xl(F, i, da).parse(), T.duplicateFirstGlyph();
        const P = new sr(T);
        C["CFF "].data = P.compile();
      } catch {
        I("Failed to compile font " + i.loadedName);
      }
    if (!C.name)
      C.name = {
        tag: "name",
        data: mc(this.name)
      };
    else {
      const [B, P] = m(C.name);
      C.name.data = mc(e, B), this.psName = B[0][6] || null, i.composite || Bx(i, this.isSymbolicFont, P);
    }
    const Be = new E0(S.version);
    for (const B in C)
      Be.addTable(B, C[B].data);
    return Be.toArray();
  }
  convert(e, n, i) {
    i.fixedPitch = !1, i.builtInEncoding && Ex(i, i.builtInEncoding);
    let s = 1;
    n instanceof uc && (s = n.numGlyphs - 1);
    const a = n.getGlyphMapping(i);
    let r = null, o = a, c = null;
    i.cssFontInfo || (r = uh(a, n.hasGlyphId.bind(n), s, this.toUnicode), this.toFontChar = r.toFontChar, o = r.charCodeToGlyphId, c = r.toUnicodeExtraMap);
    const l = n.numGlyphs;
    function h(g, m) {
      let p = null;
      for (const b in g)
        m === g[b] && (p || (p = [])).push(b | 0);
      return p;
    }
    function f(g, m) {
      for (const p in g)
        if (m === g[p])
          return p | 0;
      return r.charCodeToGlyphId[r.nextAvailableFontCharCode] = m, r.nextAvailableFontCharCode++;
    }
    const u = n.seacs;
    if (r && da && (u != null && u.length)) {
      const g = i.fontMatrix || Bs, m = n.getCharset(), p = /* @__PURE__ */ Object.create(null);
      for (let b in u) {
        b |= 0;
        const w = u[b], y = Oi[w[2]], k = Oi[w[3]], S = m.indexOf(y), C = m.indexOf(k);
        if (S < 0 || C < 0)
          continue;
        const T = {
          x: w[0] * g[0] + w[1] * g[2] + g[4],
          y: w[0] * g[1] + w[1] * g[3] + g[5]
        }, F = h(a, b);
        if (F)
          for (const R of F) {
            const D = r.charCodeToGlyphId, M = f(D, S), _ = f(D, C);
            p[R] = {
              baseFontCharCode: M,
              accentFontCharCode: _,
              accentOffset: T
            };
          }
      }
      i.seacMap = p;
    }
    const d = i.fontMatrix ? 1 / Math.max(...i.fontMatrix.slice(0, 4).map(Math.abs)) : 1e3, x = new E0("OTTO");
    return x.addTable("CFF ", n.data), x.addTable("OS/2", xh(i, o)), x.addTable("cmap", dh(o, c, l)), x.addTable("head", "\0\0\0\0\0\0\0\0\0\0_<õ\0\0" + us(d) + "\0\0\0\0\v~'\0\0\0\0\v~'\0\0" + us(i.descent) + "ÿ" + us(i.ascent) + at(i.italicAngle ? 2 : 0) + "\0\0\0\0\0\0\0"), x.addTable("hhea", "\0\0\0" + us(i.ascent) + us(i.descent) + "\0\0ÿÿ\0\0\0\0\0\0" + us(i.capHeight) + us(Math.tan(i.italicAngle) * i.xHeight) + "\0\0\0\0\0\0\0\0\0\0\0\0" + at(l)), x.addTable("hmtx", function() {
      const m = n.charstrings, p = n.cff ? n.cff.widths : null;
      let b = "\0\0\0\0";
      for (let w = 1, y = l; w < y; w++) {
        let k = 0;
        if (m) {
          const S = m[w - 1];
          k = "width" in S ? S.width : 0;
        } else p && (k = Math.ceil(p[w] || 0));
        b += at(k) + at(0);
      }
      return b;
    }()), x.addTable("maxp", "\0\0P\0" + at(l)), x.addTable("name", mc(e)), x.addTable("post", gh(i)), x.toArray();
  }
  get _spaceWidth() {
    const e = ["space", "minus", "one", "i", "I"];
    let n;
    for (const i of e) {
      if (i in this.widths) {
        n = this.widths[i];
        break;
      }
      const a = bi()[i];
      let r = 0;
      if (this.composite && this.cMap.contains(a) && (r = this.cMap.lookup(a), typeof r == "string" && (r = pc(a, r))), !r && this.toUnicode && (r = this.toUnicode.charCodeOf(a)), r <= 0 && (r = a), n = this.widths[r], n)
        break;
    }
    return Q(this, "_spaceWidth", n || this.defaultWidth);
  }
  _charToGlyph(e, n = !1) {
    var d, x, g;
    let i = this._glyphCache[e];
    if ((i == null ? void 0 : i.isSpace) === n)
      return i;
    let s, a, r, o = e;
    (d = this.cMap) != null && d.contains(e) && (o = this.cMap.lookup(e), typeof o == "string" && (o = pc(e, o))), a = this.widths[o], typeof a != "number" && (a = this.defaultWidth);
    const c = (x = this.vmetrics) == null ? void 0 : x[o];
    let l = this.toUnicode.get(e) || e;
    typeof l == "number" && (l = String.fromCharCode(l));
    let h = this.toFontChar[e] !== void 0;
    if (s = this.toFontChar[e] || e, this.missingFile) {
      const m = this.differences[e] || this.defaultEncoding[e];
      (m === ".notdef" || m === "") && this.type === "Type1" && (s = 32, m === "" && (a || (a = this._spaceWidth), l = String.fromCharCode(s))), s = _9(s);
    }
    this.isType3Font && (r = s);
    let f = null;
    if ((g = this.seacMap) != null && g[e]) {
      h = !0;
      const m = this.seacMap[e];
      s = m.baseFontCharCode, f = {
        fontChar: String.fromCodePoint(m.accentFontCharCode),
        offset: m.accentOffset
      };
    }
    let u = "";
    if (typeof s == "number" && (s <= 1114111 ? u = String.fromCodePoint(s) : I(`charToGlyph - invalid fontCharCode: ${s}`)), this.missingFile && this.vertical && u.length === 1) {
      const m = G9()[u.charCodeAt(0)];
      m && (u = l = String.fromCharCode(m));
    }
    return i = new Rx(e, u, l, f, a, c, r, n, h), this._glyphCache[e] = i;
  }
  charsToGlyphs(e) {
    let n = this._charsCache[e];
    if (n)
      return n;
    if (n = [], this.cMap) {
      const i = /* @__PURE__ */ Object.create(null), s = e.length;
      let a = 0;
      for (; a < s; ) {
        this.cMap.readCharCode(e, a, i);
        const {
          charcode: r,
          length: o
        } = i;
        a += o;
        const c = this._charToGlyph(r, o === 1 && e.charCodeAt(a - 1) === 32);
        n.push(c);
      }
    } else
      for (let i = 0, s = e.length; i < s; ++i) {
        const a = e.charCodeAt(i), r = this._charToGlyph(a, a === 32);
        n.push(r);
      }
    return this._charsCache[e] = n;
  }
  getCharPositions(e) {
    const n = [];
    if (this.cMap) {
      const i = /* @__PURE__ */ Object.create(null);
      let s = 0;
      for (; s < e.length; ) {
        this.cMap.readCharCode(e, s, i);
        const a = i.length;
        n.push([s, s + a]), s += a;
      }
    } else
      for (let i = 0, s = e.length; i < s; ++i)
        n.push([i, i + 1]);
    return n;
  }
  get glyphCacheValues() {
    return Object.values(this._glyphCache);
  }
  encodeString(e) {
    const n = [], i = [], s = () => n.length % 2 === 1, a = this.toUnicode instanceof Hn ? (r) => this.toUnicode.charCodeOf(r) : (r) => this.toUnicode.charCodeOf(String.fromCodePoint(r));
    for (let r = 0, o = e.length; r < o; r++) {
      const c = e.codePointAt(r);
      if (c > 55295 && (c < 57344 || c > 65533) && r++, this.toUnicode) {
        const l = a(c);
        if (l !== -1) {
          s() && (n.push(i.join("")), i.length = 0);
          const h = this.cMap ? this.cMap.getCharCodeLength(l) : 1;
          for (let f = h - 1; f >= 0; f--)
            i.push(String.fromCharCode(l >> 8 * f & 255));
          continue;
        }
      }
      s() || (n.push(i.join("")), i.length = 0), i.push(String.fromCodePoint(c));
    }
    return n.push(i.join("")), n;
  }
}
class mh {
  constructor(e) {
    this.error = e, this.loadedName = "g_font_error", this.missingFile = !0;
  }
  charsToGlyphs() {
    return [];
  }
  encodeString(e) {
    return [e];
  }
  exportData() {
    return {
      error: this.error
    };
  }
}
const dn = {
  FUNCTION_BASED: 1,
  AXIAL: 2,
  RADIAL: 3,
  FREE_FORM_MESH: 4,
  LATTICE_FORM_MESH: 5,
  COONS_PATCH_MESH: 6,
  TENSOR_PATCH_MESH: 7
};
class Gx {
  constructor() {
    Ke("Cannot initialize Pattern.");
  }
  static parseShading(e, n, i, s, a, r) {
    const o = e instanceof je ? e.dict : e, c = o.get("ShadingType");
    try {
      switch (c) {
        case dn.AXIAL:
        case dn.RADIAL:
          return new $x(o, n, i, s, a, r);
        case dn.FREE_FORM_MESH:
        case dn.LATTICE_FORM_MESH:
        case dn.COONS_PATCH_MESH:
        case dn.TENSOR_PATCH_MESH:
          return new ol(e, n, i, s, a, r);
        default:
          throw new j("Unsupported ShadingType: " + c);
      }
    } catch (l) {
      if (l instanceof mt)
        throw l;
      return I(l), new Xx();
    }
  }
}
class xa {
  getIR() {
    Ke("Abstract method `getIR` called.");
  }
}
Ye(xa, "SMALL_NUMBER", 1e-6);
class $x extends xa {
  constructor(e, n, i, s, a, r) {
    super(), this.shadingType = e.get("ShadingType");
    let o = 0;
    if (this.shadingType === dn.AXIAL ? o = 4 : this.shadingType === dn.RADIAL && (o = 6), this.coordsArr = e.getArray("Coords"), !xn(this.coordsArr, o))
      throw new j("RadialAxialShading: Invalid /Coords array.");
    const c = Qe.parse({
      cs: e.getRaw("CS") || e.getRaw("ColorSpace"),
      xref: n,
      resources: i,
      pdfFunctionFactory: s,
      globalColorSpaceCache: a,
      localColorSpaceCache: r
    });
    this.bbox = qi(e.getArray("BBox"), null);
    let l = 0, h = 1;
    const f = e.getArray("Domain");
    xn(f, 2) && ([l, h] = f);
    let u = !1, d = !1;
    const x = e.getArray("Extend");
    if (Qd(x, 2) && ([u, d] = x), this.shadingType === dn.RADIAL && (!u || !d)) {
      const [ve, Be, Ae, Ve, pe, B] = this.coordsArr, P = Math.hypot(ve - Ve, Be - pe);
      Ae <= B + P && B <= Ae + P && I("Unsupported radial gradient.");
    }
    this.extendStart = u, this.extendEnd = d;
    const g = e.getRaw("Function"), m = s.create(g, !0), p = 840, b = (h - l) / p, w = this.colorStops = [];
    if (l >= h || b <= 0) {
      Ge("Bad shading domain.");
      return;
    }
    const y = new Float32Array(c.numComps), k = new Float32Array(1);
    let S = 0;
    k[0] = l, m(k, 0, y, 0);
    const C = new Uint8ClampedArray(3);
    c.getRgb(y, 0, C);
    let [T, F, R] = C;
    w.push([0, tt.makeHexColor(T, F, R)]);
    let D = 1;
    k[0] = l + b, m(k, 0, y, 0), c.getRgb(y, 0, C);
    let [M, _, K] = C, se = M - T + 1, H = _ - F + 1, W = K - R + 1, le = M - T - 1, q = _ - F - 1, L = K - R - 1;
    for (let ve = 2; ve < p; ve++) {
      k[0] = l + ve * b, m(k, 0, y, 0), c.getRgb(y, 0, C);
      const [Be, Ae, Ve] = C, pe = ve - S;
      if (se = Math.min(se, (Be - T + 1) / pe), H = Math.min(H, (Ae - F + 1) / pe), W = Math.min(W, (Ve - R + 1) / pe), le = Math.max(le, (Be - T - 1) / pe), q = Math.max(q, (Ae - F - 1) / pe), L = Math.max(L, (Ve - R - 1) / pe), !(le <= se && q <= H && L <= W)) {
        const P = tt.makeHexColor(M, _, K);
        w.push([D / p, P]), se = Be - M + 1, H = Ae - _ + 1, W = Ve - K + 1, le = Be - M - 1, q = Ae - _ - 1, L = Ve - K - 1, S = D, T = M, F = _, R = K;
      }
      D = ve, M = Be, _ = Ae, K = Ve;
    }
    w.push([1, tt.makeHexColor(M, _, K)]);
    let Fe = "transparent";
    e.has("Background") && (Fe = c.getRgbHex(e.get("Background"), 0)), u || (w.unshift([0, Fe]), w[1][0] += xa.SMALL_NUMBER), d || (w.at(-1)[0] -= xa.SMALL_NUMBER, w.push([1, Fe])), this.colorStops = w;
  }
  getIR() {
    const {
      coordsArr: e,
      shadingType: n
    } = this;
    let i, s, a, r, o;
    return n === dn.AXIAL ? (s = [e[0], e[1]], a = [e[2], e[3]], r = null, o = null, i = "axial") : n === dn.RADIAL ? (s = [e[0], e[1]], a = [e[3], e[4]], r = e[2], o = e[5], i = "radial") : Ke(`getPattern type unknown: ${n}`), ["RadialAxial", i, this.bbox, this.colorStops, s, a, r, o];
  }
}
class zx {
  constructor(e, n) {
    this.stream = e, this.context = n, this.buffer = 0, this.bufferLength = 0;
    const i = n.numComps;
    this.tmpCompsBuf = new Float32Array(i);
    const s = n.colorSpace.numComps;
    this.tmpCsCompsBuf = n.colorFn ? new Float32Array(s) : this.tmpCompsBuf;
  }
  get hasData() {
    if (this.stream.end)
      return this.stream.pos < this.stream.end;
    if (this.bufferLength > 0)
      return !0;
    const e = this.stream.getByte();
    return e < 0 ? !1 : (this.buffer = e, this.bufferLength = 8, !0);
  }
  readBits(e) {
    const {
      stream: n
    } = this;
    let {
      buffer: i,
      bufferLength: s
    } = this;
    if (e === 32) {
      if (s === 0)
        return n.getInt32() >>> 0;
      i = i << 24 | n.getByte() << 16 | n.getByte() << 8 | n.getByte();
      const a = n.getByte();
      return this.buffer = a & (1 << s) - 1, (i << 8 - s | (a & 255) >> s) >>> 0;
    }
    if (e === 8 && s === 0)
      return n.getByte();
    for (; s < e; )
      i = i << 8 | n.getByte(), s += 8;
    return s -= e, this.bufferLength = s, this.buffer = i & (1 << s) - 1, i >> s;
  }
  align() {
    this.buffer = 0, this.bufferLength = 0;
  }
  readFlag() {
    return this.readBits(this.context.bitsPerFlag);
  }
  readCoordinate() {
    const {
      bitsPerCoordinate: e,
      decode: n
    } = this.context, i = this.readBits(e), s = this.readBits(e), a = e < 32 ? 1 / ((1 << e) - 1) : 23283064365386963e-26;
    return [i * a * (n[1] - n[0]) + n[0], s * a * (n[3] - n[2]) + n[2]];
  }
  readComponents() {
    const {
      bitsPerComponent: e,
      colorFn: n,
      colorSpace: i,
      decode: s,
      numComps: a
    } = this.context, r = e < 32 ? 1 / ((1 << e) - 1) : 23283064365386963e-26, o = this.tmpCompsBuf;
    for (let l = 0, h = 4; l < a; l++, h += 2) {
      const f = this.readBits(e);
      o[l] = f * r * (s[h + 1] - s[h]) + s[h];
    }
    const c = this.tmpCsCompsBuf;
    return n == null || n(o, 0, c, 0), i.getRgb(c, 0);
  }
}
let Kr = /* @__PURE__ */ Object.create(null);
function Wx(t) {
  const e = [];
  for (let n = 0; n <= t; n++) {
    const i = n / t, s = 1 - i;
    e.push(new Float32Array([s ** 3, 3 * i * s ** 2, 3 * i ** 2 * s, i ** 3]));
  }
  return e;
}
function bh(t) {
  return Kr[t] || (Kr[t] = Wx(t));
}
function Vx() {
  Kr = /* @__PURE__ */ Object.create(null);
}
const Yn = class Yn extends xa {
  constructor(e, n, i, s, a, r) {
    if (super(), !(e instanceof je))
      throw new j("Mesh data is not a stream");
    const o = e.dict;
    this.shadingType = o.get("ShadingType"), this.bbox = qi(o.getArray("BBox"), null);
    const c = Qe.parse({
      cs: o.getRaw("CS") || o.getRaw("ColorSpace"),
      xref: n,
      resources: i,
      pdfFunctionFactory: s,
      globalColorSpaceCache: a,
      localColorSpaceCache: r
    });
    this.background = o.has("Background") ? c.getRgb(o.get("Background"), 0) : null;
    const l = o.getRaw("Function"), h = l ? s.create(l, !0) : null;
    this.coords = [], this.colors = [], this.figures = [];
    const f = {
      bitsPerCoordinate: o.get("BitsPerCoordinate"),
      bitsPerComponent: o.get("BitsPerComponent"),
      bitsPerFlag: o.get("BitsPerFlag"),
      decode: o.getArray("Decode"),
      colorFn: h,
      colorSpace: c,
      numComps: h ? 1 : c.numComps
    }, u = new zx(e, f);
    let d = !1;
    switch (this.shadingType) {
      case dn.FREE_FORM_MESH:
        this._decodeType4Shading(u);
        break;
      case dn.LATTICE_FORM_MESH:
        const x = o.get("VerticesPerRow") | 0;
        if (x < 2)
          throw new j("Invalid VerticesPerRow");
        this._decodeType5Shading(u, x);
        break;
      case dn.COONS_PATCH_MESH:
        this._decodeType6Shading(u), d = !0;
        break;
      case dn.TENSOR_PATCH_MESH:
        this._decodeType7Shading(u), d = !0;
        break;
      default:
        Ke("Unsupported mesh type.");
        break;
    }
    if (d) {
      this._updateBounds();
      for (let x = 0, g = this.figures.length; x < g; x++)
        this._buildFigureFromPatch(x);
    }
    this._updateBounds(), this._packData();
  }
  _decodeType4Shading(e) {
    const n = this.coords, i = this.colors, s = [];
    let a = 0;
    for (; e.hasData; ) {
      const r = e.readFlag(), o = e.readCoordinate(), c = e.readComponents();
      if (a === 0) {
        if (!(0 <= r && r <= 2))
          throw new j("Unknown type4 flag");
        switch (r) {
          case 0:
            a = 3;
            break;
          case 1:
            s.push(s.at(-2), s.at(-1)), a = 1;
            break;
          case 2:
            s.push(s.at(-3), s.at(-1)), a = 1;
            break;
        }
      }
      s.push(n.length), n.push(o), i.push(c), a--, e.align();
    }
    this.figures.push({
      type: "triangles",
      coords: new Int32Array(s),
      colors: new Int32Array(s)
    });
  }
  _decodeType5Shading(e, n) {
    const i = this.coords, s = this.colors, a = [];
    for (; e.hasData; ) {
      const r = e.readCoordinate(), o = e.readComponents();
      a.push(i.length), i.push(r), s.push(o);
    }
    this.figures.push({
      type: "lattice",
      coords: new Int32Array(a),
      colors: new Int32Array(a),
      verticesPerRow: n
    });
  }
  _decodeType6Shading(e) {
    const n = this.coords, i = this.colors, s = new Int32Array(16), a = new Int32Array(4);
    for (; e.hasData; ) {
      const r = e.readFlag();
      if (!(0 <= r && r <= 3))
        throw new j("Unknown type6 flag");
      const o = n.length;
      for (let d = 0, x = r !== 0 ? 8 : 12; d < x; d++)
        n.push(e.readCoordinate());
      const c = i.length;
      for (let d = 0, x = r !== 0 ? 2 : 4; d < x; d++)
        i.push(e.readComponents());
      let l, h, f, u;
      switch (r) {
        case 0:
          s[12] = o + 3, s[13] = o + 4, s[14] = o + 5, s[15] = o + 6, s[8] = o + 2, s[11] = o + 7, s[4] = o + 1, s[7] = o + 8, s[0] = o, s[1] = o + 11, s[2] = o + 10, s[3] = o + 9, a[2] = c + 1, a[3] = c + 2, a[0] = c, a[1] = c + 3;
          break;
        case 1:
          l = s[12], h = s[13], f = s[14], u = s[15], s[12] = u, s[13] = o + 0, s[14] = o + 1, s[15] = o + 2, s[8] = f, s[11] = o + 3, s[4] = h, s[7] = o + 4, s[0] = l, s[1] = o + 7, s[2] = o + 6, s[3] = o + 5, l = a[2], h = a[3], a[2] = h, a[3] = c, a[0] = l, a[1] = c + 1;
          break;
        case 2:
          l = s[15], h = s[11], s[12] = s[3], s[13] = o + 0, s[14] = o + 1, s[15] = o + 2, s[8] = s[7], s[11] = o + 3, s[4] = h, s[7] = o + 4, s[0] = l, s[1] = o + 7, s[2] = o + 6, s[3] = o + 5, l = a[3], a[2] = a[1], a[3] = c, a[0] = l, a[1] = c + 1;
          break;
        case 3:
          s[12] = s[0], s[13] = o + 0, s[14] = o + 1, s[15] = o + 2, s[8] = s[1], s[11] = o + 3, s[4] = s[2], s[7] = o + 4, s[0] = s[3], s[1] = o + 7, s[2] = o + 6, s[3] = o + 5, a[2] = a[0], a[3] = c, a[0] = a[1], a[1] = c + 1;
          break;
      }
      s[5] = n.length, n.push([(-4 * n[s[0]][0] - n[s[15]][0] + 6 * (n[s[4]][0] + n[s[1]][0]) - 2 * (n[s[12]][0] + n[s[3]][0]) + 3 * (n[s[13]][0] + n[s[7]][0])) / 9, (-4 * n[s[0]][1] - n[s[15]][1] + 6 * (n[s[4]][1] + n[s[1]][1]) - 2 * (n[s[12]][1] + n[s[3]][1]) + 3 * (n[s[13]][1] + n[s[7]][1])) / 9]), s[6] = n.length, n.push([(-4 * n[s[3]][0] - n[s[12]][0] + 6 * (n[s[2]][0] + n[s[7]][0]) - 2 * (n[s[0]][0] + n[s[15]][0]) + 3 * (n[s[4]][0] + n[s[14]][0])) / 9, (-4 * n[s[3]][1] - n[s[12]][1] + 6 * (n[s[2]][1] + n[s[7]][1]) - 2 * (n[s[0]][1] + n[s[15]][1]) + 3 * (n[s[4]][1] + n[s[14]][1])) / 9]), s[9] = n.length, n.push([(-4 * n[s[12]][0] - n[s[3]][0] + 6 * (n[s[8]][0] + n[s[13]][0]) - 2 * (n[s[0]][0] + n[s[15]][0]) + 3 * (n[s[11]][0] + n[s[1]][0])) / 9, (-4 * n[s[12]][1] - n[s[3]][1] + 6 * (n[s[8]][1] + n[s[13]][1]) - 2 * (n[s[0]][1] + n[s[15]][1]) + 3 * (n[s[11]][1] + n[s[1]][1])) / 9]), s[10] = n.length, n.push([(-4 * n[s[15]][0] - n[s[0]][0] + 6 * (n[s[11]][0] + n[s[14]][0]) - 2 * (n[s[12]][0] + n[s[3]][0]) + 3 * (n[s[2]][0] + n[s[8]][0])) / 9, (-4 * n[s[15]][1] - n[s[0]][1] + 6 * (n[s[11]][1] + n[s[14]][1]) - 2 * (n[s[12]][1] + n[s[3]][1]) + 3 * (n[s[2]][1] + n[s[8]][1])) / 9]), this.figures.push({
        type: "patch",
        coords: new Int32Array(s),
        colors: new Int32Array(a)
      });
    }
  }
  _decodeType7Shading(e) {
    const n = this.coords, i = this.colors, s = new Int32Array(16), a = new Int32Array(4);
    for (; e.hasData; ) {
      const r = e.readFlag();
      if (!(0 <= r && r <= 3))
        throw new j("Unknown type7 flag");
      const o = n.length;
      for (let d = 0, x = r !== 0 ? 12 : 16; d < x; d++)
        n.push(e.readCoordinate());
      const c = i.length;
      for (let d = 0, x = r !== 0 ? 2 : 4; d < x; d++)
        i.push(e.readComponents());
      let l, h, f, u;
      switch (r) {
        case 0:
          s[12] = o + 3, s[13] = o + 4, s[14] = o + 5, s[15] = o + 6, s[8] = o + 2, s[9] = o + 13, s[10] = o + 14, s[11] = o + 7, s[4] = o + 1, s[5] = o + 12, s[6] = o + 15, s[7] = o + 8, s[0] = o, s[1] = o + 11, s[2] = o + 10, s[3] = o + 9, a[2] = c + 1, a[3] = c + 2, a[0] = c, a[1] = c + 3;
          break;
        case 1:
          l = s[12], h = s[13], f = s[14], u = s[15], s[12] = u, s[13] = o + 0, s[14] = o + 1, s[15] = o + 2, s[8] = f, s[9] = o + 9, s[10] = o + 10, s[11] = o + 3, s[4] = h, s[5] = o + 8, s[6] = o + 11, s[7] = o + 4, s[0] = l, s[1] = o + 7, s[2] = o + 6, s[3] = o + 5, l = a[2], h = a[3], a[2] = h, a[3] = c, a[0] = l, a[1] = c + 1;
          break;
        case 2:
          l = s[15], h = s[11], s[12] = s[3], s[13] = o + 0, s[14] = o + 1, s[15] = o + 2, s[8] = s[7], s[9] = o + 9, s[10] = o + 10, s[11] = o + 3, s[4] = h, s[5] = o + 8, s[6] = o + 11, s[7] = o + 4, s[0] = l, s[1] = o + 7, s[2] = o + 6, s[3] = o + 5, l = a[3], a[2] = a[1], a[3] = c, a[0] = l, a[1] = c + 1;
          break;
        case 3:
          s[12] = s[0], s[13] = o + 0, s[14] = o + 1, s[15] = o + 2, s[8] = s[1], s[9] = o + 9, s[10] = o + 10, s[11] = o + 3, s[4] = s[2], s[5] = o + 8, s[6] = o + 11, s[7] = o + 4, s[0] = s[3], s[1] = o + 7, s[2] = o + 6, s[3] = o + 5, a[2] = a[0], a[3] = c, a[0] = a[1], a[1] = c + 1;
          break;
      }
      this.figures.push({
        type: "patch",
        coords: new Int32Array(s),
        colors: new Int32Array(a)
      });
    }
  }
  _buildFigureFromPatch(e) {
    const n = this.figures[e];
    zt(n.type === "patch", "Unexpected patch mesh figure");
    const i = this.coords, s = this.colors, a = n.coords, r = n.colors, o = Math.min(i[a[0]][0], i[a[3]][0], i[a[12]][0], i[a[15]][0]), c = Math.min(i[a[0]][1], i[a[3]][1], i[a[12]][1], i[a[15]][1]), l = Math.max(i[a[0]][0], i[a[3]][0], i[a[12]][0], i[a[15]][0]), h = Math.max(i[a[0]][1], i[a[3]][1], i[a[12]][1], i[a[15]][1]);
    let f = Math.ceil((l - o) * Yn.TRIANGLE_DENSITY / (this.bounds[2] - this.bounds[0]));
    f = Wt(f, Yn.MIN_SPLIT_PATCH_CHUNKS_AMOUNT, Yn.MAX_SPLIT_PATCH_CHUNKS_AMOUNT);
    let u = Math.ceil((h - c) * Yn.TRIANGLE_DENSITY / (this.bounds[3] - this.bounds[1]));
    u = Wt(u, Yn.MIN_SPLIT_PATCH_CHUNKS_AMOUNT, Yn.MAX_SPLIT_PATCH_CHUNKS_AMOUNT);
    const d = f + 1, x = new Int32Array((u + 1) * d), g = new Int32Array((u + 1) * d);
    let m = 0;
    const p = new Uint8Array(3), b = new Uint8Array(3), w = s[r[0]], y = s[r[1]], k = s[r[2]], S = s[r[3]], C = bh(u), T = bh(f);
    for (let F = 0; F <= u; F++) {
      p[0] = (w[0] * (u - F) + k[0] * F) / u | 0, p[1] = (w[1] * (u - F) + k[1] * F) / u | 0, p[2] = (w[2] * (u - F) + k[2] * F) / u | 0, b[0] = (y[0] * (u - F) + S[0] * F) / u | 0, b[1] = (y[1] * (u - F) + S[1] * F) / u | 0, b[2] = (y[2] * (u - F) + S[2] * F) / u | 0;
      for (let R = 0; R <= f; R++, m++) {
        if ((F === 0 || F === u) && (R === 0 || R === f))
          continue;
        let D = 0, M = 0, _ = 0;
        for (let se = 0; se <= 3; se++)
          for (let H = 0; H <= 3; H++, _++) {
            const W = C[F][se] * T[R][H];
            D += i[a[_]][0] * W, M += i[a[_]][1] * W;
          }
        x[m] = i.length, i.push([D, M]), g[m] = s.length;
        const K = new Uint8Array(3);
        K[0] = (p[0] * (f - R) + b[0] * R) / f | 0, K[1] = (p[1] * (f - R) + b[1] * R) / f | 0, K[2] = (p[2] * (f - R) + b[2] * R) / f | 0, s.push(K);
      }
    }
    x[0] = a[0], g[0] = r[0], x[f] = a[3], g[f] = r[1], x[d * u] = a[12], g[d * u] = r[2], x[d * u + f] = a[15], g[d * u + f] = r[3], this.figures[e] = {
      type: "lattice",
      coords: x,
      colors: g,
      verticesPerRow: d
    };
  }
  _updateBounds() {
    let e = this.coords[0][0], n = this.coords[0][1], i = e, s = n;
    for (let a = 1, r = this.coords.length; a < r; a++) {
      const o = this.coords[a][0], c = this.coords[a][1];
      e = e > o ? o : e, n = n > c ? c : n, i = i < o ? o : i, s = s < c ? c : s;
    }
    this.bounds = [e, n, i, s];
  }
  _packData() {
    let e, n, i, s;
    const a = this.coords, r = new Float32Array(a.length * 2);
    for (e = 0, i = 0, n = a.length; e < n; e++) {
      const h = a[e];
      r[i++] = h[0], r[i++] = h[1];
    }
    this.coords = r;
    const o = this.colors, c = new Uint8Array(o.length * 3);
    for (e = 0, i = 0, n = o.length; e < n; e++) {
      const h = o[e];
      c[i++] = h[0], c[i++] = h[1], c[i++] = h[2];
    }
    this.colors = c;
    const l = this.figures;
    for (e = 0, n = l.length; e < n; e++) {
      const h = l[e], f = h.coords, u = h.colors;
      for (i = 0, s = f.length; i < s; i++)
        f[i] *= 2, u[i] *= 3;
    }
  }
  getIR() {
    const {
      bounds: e
    } = this;
    if (e[2] - e[0] === 0 || e[3] - e[1] === 0)
      throw new j(`Invalid MeshShading bounds: [${e}].`);
    return ["Mesh", this.shadingType, this.coords, this.colors, this.figures, e, this.bbox, this.background];
  }
};
Ye(Yn, "MIN_SPLIT_PATCH_CHUNKS_AMOUNT", 3), Ye(Yn, "MAX_SPLIT_PATCH_CHUNKS_AMOUNT", 20), Ye(Yn, "TRIANGLE_DENSITY", 20);
let ol = Yn;
class Xx extends xa {
  getIR() {
    return ["Dummy"];
  }
}
function wh(t, e, n) {
  const i = ts(e.getArray("Matrix"), ai), s = qi(e.getArray("BBox"), null);
  if (!s || s[2] - s[0] === 0 || s[3] - s[1] === 0)
    throw new j("Invalid getTilingPatternIR /BBox array.");
  const a = e.get("XStep");
  if (typeof a != "number")
    throw new j("Invalid getTilingPatternIR /XStep value.");
  const r = e.get("YStep");
  if (typeof r != "number")
    throw new j("Invalid getTilingPatternIR /YStep value.");
  const o = e.get("PaintType");
  if (!Number.isInteger(o))
    throw new j("Invalid getTilingPatternIR /PaintType value.");
  const c = e.get("TilingType");
  if (!Number.isInteger(c))
    throw new j("Invalid getTilingPatternIR /TilingType value.");
  return ["TilingPattern", n, t, i, s, a, r, o, c];
}
const Kx = [1.3877, 1, 1, 1, 0.97801, 0.92482, 0.89552, 0.91133, 0.81988, 0.97566, 0.98152, 0.93548, 0.93548, 1.2798, 0.85284, 0.92794, 1, 0.96134, 1.54657, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.82845, 0.82845, 0.85284, 0.85284, 0.85284, 0.75859, 0.92138, 0.83908, 0.7762, 0.73293, 0.87289, 0.73133, 0.7514, 0.81921, 0.87356, 0.95958, 0.59526, 0.75727, 0.69225, 1.04924, 0.9121, 0.86943, 0.79795, 0.88198, 0.77958, 0.70864, 0.81055, 0.90399, 0.88653, 0.96017, 0.82577, 0.77892, 0.78257, 0.97507, 1.54657, 0.97507, 0.85284, 0.89552, 0.90176, 0.88762, 0.8785, 0.75241, 0.8785, 0.90518, 0.95015, 0.77618, 0.8785, 0.88401, 0.91916, 0.86304, 0.88401, 0.91488, 0.8785, 0.8801, 0.8785, 0.8785, 0.91343, 0.7173, 1.04106, 0.8785, 0.85075, 0.95794, 0.82616, 0.85162, 0.79492, 0.88331, 1.69808, 0.88331, 0.85284, 0.97801, 0.89552, 0.91133, 0.89552, 0.91133, 1.7801, 0.89552, 1.24487, 1.13254, 1.12401, 0.96839, 0.85284, 0.68787, 0.70645, 0.85592, 0.90747, 1.01466, 1.0088, 0.90323, 1, 1.07463, 1, 0.91056, 0.75806, 1.19118, 0.96839, 0.78864, 0.82845, 0.84133, 0.75859, 0.83908, 0.83908, 0.83908, 0.83908, 0.83908, 0.83908, 0.77539, 0.73293, 0.73133, 0.73133, 0.73133, 0.73133, 0.95958, 0.95958, 0.95958, 0.95958, 0.88506, 0.9121, 0.86943, 0.86943, 0.86943, 0.86943, 0.86943, 0.85284, 0.87508, 0.90399, 0.90399, 0.90399, 0.90399, 0.77892, 0.79795, 0.90807, 0.88762, 0.88762, 0.88762, 0.88762, 0.88762, 0.88762, 0.8715, 0.75241, 0.90518, 0.90518, 0.90518, 0.90518, 0.88401, 0.88401, 0.88401, 0.88401, 0.8785, 0.8785, 0.8801, 0.8801, 0.8801, 0.8801, 0.8801, 0.90747, 0.89049, 0.8785, 0.8785, 0.8785, 0.8785, 0.85162, 0.8785, 0.85162, 0.83908, 0.88762, 0.83908, 0.88762, 0.83908, 0.88762, 0.73293, 0.75241, 0.73293, 0.75241, 0.73293, 0.75241, 0.73293, 0.75241, 0.87289, 0.83016, 0.88506, 0.93125, 0.73133, 0.90518, 0.73133, 0.90518, 0.73133, 0.90518, 0.73133, 0.90518, 0.73133, 0.90518, 0.81921, 0.77618, 0.81921, 0.77618, 0.81921, 0.77618, 1, 1, 0.87356, 0.8785, 0.91075, 0.89608, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.76229, 0.90167, 0.59526, 0.91916, 1, 1, 0.86304, 0.69225, 0.88401, 1, 1, 0.70424, 0.79468, 0.91926, 0.88175, 0.70823, 0.94903, 0.9121, 0.8785, 1, 1, 0.9121, 0.8785, 0.87802, 0.88656, 0.8785, 0.86943, 0.8801, 0.86943, 0.8801, 0.86943, 0.8801, 0.87402, 0.89291, 0.77958, 0.91343, 1, 1, 0.77958, 0.91343, 0.70864, 0.7173, 0.70864, 0.7173, 0.70864, 0.7173, 0.70864, 0.7173, 1, 1, 0.81055, 0.75841, 0.81055, 1.06452, 0.90399, 0.8785, 0.90399, 0.8785, 0.90399, 0.8785, 0.90399, 0.8785, 0.90399, 0.8785, 0.90399, 0.8785, 0.96017, 0.95794, 0.77892, 0.85162, 0.77892, 0.78257, 0.79492, 0.78257, 0.79492, 0.78257, 0.79492, 0.9297, 0.56892, 0.83908, 0.88762, 0.77539, 0.8715, 0.87508, 0.89049, 1, 1, 0.81055, 1.04106, 1.20528, 1.20528, 1, 1.15543, 0.70674, 0.98387, 0.94721, 1.33431, 1.45894, 0.95161, 1.06303, 0.83908, 0.80352, 0.57184, 0.6965, 0.56289, 0.82001, 0.56029, 0.81235, 1.02988, 0.83908, 0.7762, 0.68156, 0.80367, 0.73133, 0.78257, 0.87356, 0.86943, 0.95958, 0.75727, 0.89019, 1.04924, 0.9121, 0.7648, 0.86943, 0.87356, 0.79795, 0.78275, 0.81055, 0.77892, 0.9762, 0.82577, 0.99819, 0.84896, 0.95958, 0.77892, 0.96108, 1.01407, 0.89049, 1.02988, 0.94211, 0.96108, 0.8936, 0.84021, 0.87842, 0.96399, 0.79109, 0.89049, 1.00813, 1.02988, 0.86077, 0.87445, 0.92099, 0.84723, 0.86513, 0.8801, 0.75638, 0.85714, 0.78216, 0.79586, 0.87965, 0.94211, 0.97747, 0.78287, 0.97926, 0.84971, 1.02988, 0.94211, 0.8801, 0.94211, 0.84971, 0.73133, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90264, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90518, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90548, 1, 1, 1, 1, 1, 1, 0.96017, 0.95794, 0.96017, 0.95794, 0.96017, 0.95794, 0.77892, 0.85162, 1, 1, 0.89552, 0.90527, 1, 0.90363, 0.92794, 0.92794, 0.92794, 0.92794, 0.87012, 0.87012, 0.87012, 0.89552, 0.89552, 1.42259, 0.71143, 1.06152, 1, 1, 1.03372, 1.03372, 0.97171, 1.4956, 2.2807, 0.93835, 0.83406, 0.91133, 0.84107, 0.91133, 1, 1, 1, 0.72021, 1, 1.23108, 0.83489, 0.88525, 0.88525, 0.81499, 0.90527, 1.81055, 0.90527, 1.81055, 1.31006, 1.53711, 0.94434, 1.08696, 1, 0.95018, 0.77192, 0.85284, 0.90747, 1.17534, 0.69825, 0.9716, 1.37077, 0.90747, 0.90747, 0.85356, 0.90747, 0.90747, 1.44947, 0.85284, 0.8941, 0.8941, 0.70572, 0.8, 0.70572, 0.70572, 0.70572, 0.70572, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.99862, 0.99862, 1, 1, 1, 1, 1, 1.08004, 0.91027, 1, 1, 1, 0.99862, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90727, 0.90727, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], Yx = {
  lineHeight: 1.2207,
  lineGap: 0.2207
}, Zx = [1.3877, 1, 1, 1, 0.97801, 0.92482, 0.89552, 0.91133, 0.81988, 0.97566, 0.98152, 0.93548, 0.93548, 1.2798, 0.85284, 0.92794, 1, 0.96134, 1.56239, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.82845, 0.82845, 0.85284, 0.85284, 0.85284, 0.75859, 0.92138, 0.83908, 0.7762, 0.71805, 0.87289, 0.73133, 0.7514, 0.81921, 0.87356, 0.95958, 0.59526, 0.75727, 0.69225, 1.04924, 0.90872, 0.85938, 0.79795, 0.87068, 0.77958, 0.69766, 0.81055, 0.90399, 0.88653, 0.96068, 0.82577, 0.77892, 0.78257, 0.97507, 1.529, 0.97507, 0.85284, 0.89552, 0.90176, 0.94908, 0.86411, 0.74012, 0.86411, 0.88323, 0.95015, 0.86411, 0.86331, 0.88401, 0.91916, 0.86304, 0.88401, 0.9039, 0.86331, 0.86331, 0.86411, 0.86411, 0.90464, 0.70852, 1.04106, 0.86331, 0.84372, 0.95794, 0.82616, 0.84548, 0.79492, 0.88331, 1.69808, 0.88331, 0.85284, 0.97801, 0.89552, 0.91133, 0.89552, 0.91133, 1.7801, 0.89552, 1.24487, 1.13254, 1.19129, 0.96839, 0.85284, 0.68787, 0.70645, 0.85592, 0.90747, 1.01466, 1.0088, 0.90323, 1, 1.07463, 1, 0.91056, 0.75806, 1.19118, 0.96839, 0.78864, 0.82845, 0.84133, 0.75859, 0.83908, 0.83908, 0.83908, 0.83908, 0.83908, 0.83908, 0.77539, 0.71805, 0.73133, 0.73133, 0.73133, 0.73133, 0.95958, 0.95958, 0.95958, 0.95958, 0.88506, 0.90872, 0.85938, 0.85938, 0.85938, 0.85938, 0.85938, 0.85284, 0.87068, 0.90399, 0.90399, 0.90399, 0.90399, 0.77892, 0.79795, 0.90807, 0.94908, 0.94908, 0.94908, 0.94908, 0.94908, 0.94908, 0.85887, 0.74012, 0.88323, 0.88323, 0.88323, 0.88323, 0.88401, 0.88401, 0.88401, 0.88401, 0.8785, 0.86331, 0.86331, 0.86331, 0.86331, 0.86331, 0.86331, 0.90747, 0.89049, 0.86331, 0.86331, 0.86331, 0.86331, 0.84548, 0.86411, 0.84548, 0.83908, 0.94908, 0.83908, 0.94908, 0.83908, 0.94908, 0.71805, 0.74012, 0.71805, 0.74012, 0.71805, 0.74012, 0.71805, 0.74012, 0.87289, 0.79538, 0.88506, 0.92726, 0.73133, 0.88323, 0.73133, 0.88323, 0.73133, 0.88323, 0.73133, 0.88323, 0.73133, 0.88323, 0.81921, 0.86411, 0.81921, 0.86411, 0.81921, 0.86411, 1, 1, 0.87356, 0.86331, 0.91075, 0.8777, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.76467, 0.90167, 0.59526, 0.91916, 1, 1, 0.86304, 0.69225, 0.88401, 1, 1, 0.70424, 0.77312, 0.91926, 0.88175, 0.70823, 0.94903, 0.90872, 0.86331, 1, 1, 0.90872, 0.86331, 0.86906, 0.88116, 0.86331, 0.85938, 0.86331, 0.85938, 0.86331, 0.85938, 0.86331, 0.87402, 0.86549, 0.77958, 0.90464, 1, 1, 0.77958, 0.90464, 0.69766, 0.70852, 0.69766, 0.70852, 0.69766, 0.70852, 0.69766, 0.70852, 1, 1, 0.81055, 0.75841, 0.81055, 1.06452, 0.90399, 0.86331, 0.90399, 0.86331, 0.90399, 0.86331, 0.90399, 0.86331, 0.90399, 0.86331, 0.90399, 0.86331, 0.96068, 0.95794, 0.77892, 0.84548, 0.77892, 0.78257, 0.79492, 0.78257, 0.79492, 0.78257, 0.79492, 0.9297, 0.56892, 0.83908, 0.94908, 0.77539, 0.85887, 0.87068, 0.89049, 1, 1, 0.81055, 1.04106, 1.20528, 1.20528, 1, 1.15543, 0.70088, 0.98387, 0.94721, 1.33431, 1.45894, 0.95161, 1.48387, 0.83908, 0.80352, 0.57118, 0.6965, 0.56347, 0.79179, 0.55853, 0.80346, 1.02988, 0.83908, 0.7762, 0.67174, 0.86036, 0.73133, 0.78257, 0.87356, 0.86441, 0.95958, 0.75727, 0.89019, 1.04924, 0.90872, 0.74889, 0.85938, 0.87891, 0.79795, 0.7957, 0.81055, 0.77892, 0.97447, 0.82577, 0.97466, 0.87179, 0.95958, 0.77892, 0.94252, 0.95612, 0.8753, 1.02988, 0.92733, 0.94252, 0.87411, 0.84021, 0.8728, 0.95612, 0.74081, 0.8753, 1.02189, 1.02988, 0.84814, 0.87445, 0.91822, 0.84723, 0.85668, 0.86331, 0.81344, 0.87581, 0.76422, 0.82046, 0.96057, 0.92733, 0.99375, 0.78022, 0.95452, 0.86015, 1.02988, 0.92733, 0.86331, 0.92733, 0.86015, 0.73133, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90631, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.88323, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.85174, 1, 1, 1, 1, 1, 1, 0.96068, 0.95794, 0.96068, 0.95794, 0.96068, 0.95794, 0.77892, 0.84548, 1, 1, 0.89552, 0.90527, 1, 0.90363, 0.92794, 0.92794, 0.92794, 0.89807, 0.87012, 0.87012, 0.87012, 0.89552, 0.89552, 1.42259, 0.71094, 1.06152, 1, 1, 1.03372, 1.03372, 0.97171, 1.4956, 2.2807, 0.92972, 0.83406, 0.91133, 0.83326, 0.91133, 1, 1, 1, 0.72021, 1, 1.23108, 0.83489, 0.88525, 0.88525, 0.81499, 0.90616, 1.81055, 0.90527, 1.81055, 1.3107, 1.53711, 0.94434, 1.08696, 1, 0.95018, 0.77192, 0.85284, 0.90747, 1.17534, 0.69825, 0.9716, 1.37077, 0.90747, 0.90747, 0.85356, 0.90747, 0.90747, 1.44947, 0.85284, 0.8941, 0.8941, 0.70572, 0.8, 0.70572, 0.70572, 0.70572, 0.70572, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.99862, 0.99862, 1, 1, 1, 1, 1, 1.08004, 0.91027, 1, 1, 1, 0.99862, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90727, 0.90727, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], Jx = {
  lineHeight: 1.2207,
  lineGap: 0.2207
}, Qx = [1.3877, 1, 1, 1, 1.17223, 1.1293, 0.89552, 0.91133, 0.80395, 1.02269, 1.15601, 0.91056, 0.91056, 1.2798, 0.85284, 0.89807, 1, 0.90861, 1.39543, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.96309, 0.96309, 0.85284, 0.85284, 0.85284, 0.83319, 0.88071, 0.8675, 0.81552, 0.72346, 0.85193, 0.73206, 0.7522, 0.81105, 0.86275, 0.90685, 0.6377, 0.77892, 0.75593, 1.02638, 0.89249, 0.84118, 0.77452, 0.85374, 0.75186, 0.67789, 0.79776, 0.88844, 0.85066, 0.94309, 0.77818, 0.7306, 0.76659, 1.10369, 1.38313, 1.10369, 1.06139, 0.89552, 0.8739, 0.9245, 0.9245, 0.83203, 0.9245, 0.85865, 1.09842, 0.9245, 0.9245, 1.03297, 1.07692, 0.90918, 1.03297, 0.94959, 0.9245, 0.92274, 0.9245, 0.9245, 1.02933, 0.77832, 1.20562, 0.9245, 0.8916, 0.98986, 0.86621, 0.89453, 0.79004, 0.94152, 1.77256, 0.94152, 0.85284, 0.97801, 0.89552, 0.91133, 0.89552, 0.91133, 1.91729, 0.89552, 1.17889, 1.13254, 1.16359, 0.92098, 0.85284, 0.68787, 0.71353, 0.84737, 0.90747, 1.0088, 1.0044, 0.87683, 1, 1.09091, 1, 0.92229, 0.739, 1.15642, 0.92098, 0.76288, 0.80504, 0.80972, 0.75859, 0.8675, 0.8675, 0.8675, 0.8675, 0.8675, 0.8675, 0.76318, 0.72346, 0.73206, 0.73206, 0.73206, 0.73206, 0.90685, 0.90685, 0.90685, 0.90685, 0.86477, 0.89249, 0.84118, 0.84118, 0.84118, 0.84118, 0.84118, 0.85284, 0.84557, 0.88844, 0.88844, 0.88844, 0.88844, 0.7306, 0.77452, 0.86331, 0.9245, 0.9245, 0.9245, 0.9245, 0.9245, 0.9245, 0.84843, 0.83203, 0.85865, 0.85865, 0.85865, 0.85865, 0.82601, 0.82601, 0.82601, 0.82601, 0.94469, 0.9245, 0.92274, 0.92274, 0.92274, 0.92274, 0.92274, 0.90747, 0.86651, 0.9245, 0.9245, 0.9245, 0.9245, 0.89453, 0.9245, 0.89453, 0.8675, 0.9245, 0.8675, 0.9245, 0.8675, 0.9245, 0.72346, 0.83203, 0.72346, 0.83203, 0.72346, 0.83203, 0.72346, 0.83203, 0.85193, 0.8875, 0.86477, 0.99034, 0.73206, 0.85865, 0.73206, 0.85865, 0.73206, 0.85865, 0.73206, 0.85865, 0.73206, 0.85865, 0.81105, 0.9245, 0.81105, 0.9245, 0.81105, 0.9245, 1, 1, 0.86275, 0.9245, 0.90872, 0.93591, 0.90685, 0.82601, 0.90685, 0.82601, 0.90685, 0.82601, 0.90685, 1.03297, 0.90685, 0.82601, 0.77896, 1.05611, 0.6377, 1.07692, 1, 1, 0.90918, 0.75593, 1.03297, 1, 1, 0.76032, 0.9375, 0.98156, 0.93407, 0.77261, 1.11429, 0.89249, 0.9245, 1, 1, 0.89249, 0.9245, 0.92534, 0.86698, 0.9245, 0.84118, 0.92274, 0.84118, 0.92274, 0.84118, 0.92274, 0.8667, 0.86291, 0.75186, 1.02933, 1, 1, 0.75186, 1.02933, 0.67789, 0.77832, 0.67789, 0.77832, 0.67789, 0.77832, 0.67789, 0.77832, 1, 1, 0.79776, 0.97655, 0.79776, 1.23023, 0.88844, 0.9245, 0.88844, 0.9245, 0.88844, 0.9245, 0.88844, 0.9245, 0.88844, 0.9245, 0.88844, 0.9245, 0.94309, 0.98986, 0.7306, 0.89453, 0.7306, 0.76659, 0.79004, 0.76659, 0.79004, 0.76659, 0.79004, 1.09231, 0.54873, 0.8675, 0.9245, 0.76318, 0.84843, 0.84557, 0.86651, 1, 1, 0.79776, 1.20562, 1.18622, 1.18622, 1, 1.1437, 0.67009, 0.96334, 0.93695, 1.35191, 1.40909, 0.95161, 1.48387, 0.8675, 0.90861, 0.6192, 0.7363, 0.64824, 0.82411, 0.56321, 0.85696, 1.23516, 0.8675, 0.81552, 0.7286, 0.84134, 0.73206, 0.76659, 0.86275, 0.84369, 0.90685, 0.77892, 0.85871, 1.02638, 0.89249, 0.75828, 0.84118, 0.85984, 0.77452, 0.76466, 0.79776, 0.7306, 0.90782, 0.77818, 0.903, 0.87291, 0.90685, 0.7306, 0.99058, 1.03667, 0.94635, 1.23516, 0.9849, 0.99058, 0.92393, 0.8916, 0.942, 1.03667, 0.75026, 0.94635, 1.0297, 1.23516, 0.90918, 0.94048, 0.98217, 0.89746, 0.84153, 0.92274, 0.82507, 0.88832, 0.84438, 0.88178, 1.03525, 0.9849, 1.00225, 0.78086, 0.97248, 0.89404, 1.23516, 0.9849, 0.92274, 0.9849, 0.89404, 0.73206, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.89693, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.85865, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90933, 1, 1, 1, 1, 1, 1, 0.94309, 0.98986, 0.94309, 0.98986, 0.94309, 0.98986, 0.7306, 0.89453, 1, 1, 0.89552, 0.90527, 1, 0.90186, 1.12308, 1.12308, 1.12308, 1.12308, 1.2566, 1.2566, 1.2566, 0.89552, 0.89552, 1.42259, 0.68994, 1.03809, 1, 1, 1.0176, 1.0176, 1.11523, 1.4956, 2.01462, 0.97858, 0.82616, 0.91133, 0.83437, 0.91133, 1, 1, 1, 0.70508, 1, 1.23108, 0.79801, 0.84426, 0.84426, 0.774, 0.90572, 1.81055, 0.90749, 1.81055, 1.28809, 1.55469, 0.94434, 1.07806, 1, 0.97094, 0.7589, 0.85284, 0.90747, 1.19658, 0.69825, 0.97622, 1.33512, 0.90747, 0.90747, 0.85284, 0.90747, 0.90747, 1.44947, 0.85284, 0.8941, 0.8941, 0.70572, 0.8, 0.70572, 0.70572, 0.70572, 0.70572, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.99862, 0.99862, 1, 1, 1, 1, 1, 1.0336, 0.91027, 1, 1, 1, 0.99862, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.05859, 1.05859, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], eg = {
  lineHeight: 1.2207,
  lineGap: 0.2207
}, tg = [1.3877, 1, 1, 1, 1.17223, 1.1293, 0.89552, 0.91133, 0.80395, 1.02269, 1.15601, 0.91056, 0.91056, 1.2798, 0.85284, 0.89807, 1, 0.90861, 1.39016, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.96309, 0.96309, 0.85284, 0.85284, 0.85284, 0.83319, 0.88071, 0.8675, 0.81552, 0.73834, 0.85193, 0.73206, 0.7522, 0.81105, 0.86275, 0.90685, 0.6377, 0.77892, 0.75593, 1.02638, 0.89385, 0.85122, 0.77452, 0.86503, 0.75186, 0.68887, 0.79776, 0.88844, 0.85066, 0.94258, 0.77818, 0.7306, 0.76659, 1.10369, 1.39016, 1.10369, 1.06139, 0.89552, 0.8739, 0.86128, 0.94469, 0.8457, 0.94469, 0.89464, 1.09842, 0.84636, 0.94469, 1.03297, 1.07692, 0.90918, 1.03297, 0.95897, 0.94469, 0.9482, 0.94469, 0.94469, 1.04692, 0.78223, 1.20562, 0.94469, 0.90332, 0.98986, 0.86621, 0.90527, 0.79004, 0.94152, 1.77256, 0.94152, 0.85284, 0.97801, 0.89552, 0.91133, 0.89552, 0.91133, 1.91729, 0.89552, 1.17889, 1.13254, 1.08707, 0.92098, 0.85284, 0.68787, 0.71353, 0.84737, 0.90747, 1.0088, 1.0044, 0.87683, 1, 1.09091, 1, 0.92229, 0.739, 1.15642, 0.92098, 0.76288, 0.80504, 0.80972, 0.75859, 0.8675, 0.8675, 0.8675, 0.8675, 0.8675, 0.8675, 0.76318, 0.73834, 0.73206, 0.73206, 0.73206, 0.73206, 0.90685, 0.90685, 0.90685, 0.90685, 0.86477, 0.89385, 0.85122, 0.85122, 0.85122, 0.85122, 0.85122, 0.85284, 0.85311, 0.88844, 0.88844, 0.88844, 0.88844, 0.7306, 0.77452, 0.86331, 0.86128, 0.86128, 0.86128, 0.86128, 0.86128, 0.86128, 0.8693, 0.8457, 0.89464, 0.89464, 0.89464, 0.89464, 0.82601, 0.82601, 0.82601, 0.82601, 0.94469, 0.94469, 0.9482, 0.9482, 0.9482, 0.9482, 0.9482, 0.90747, 0.86651, 0.94469, 0.94469, 0.94469, 0.94469, 0.90527, 0.94469, 0.90527, 0.8675, 0.86128, 0.8675, 0.86128, 0.8675, 0.86128, 0.73834, 0.8457, 0.73834, 0.8457, 0.73834, 0.8457, 0.73834, 0.8457, 0.85193, 0.92454, 0.86477, 0.9921, 0.73206, 0.89464, 0.73206, 0.89464, 0.73206, 0.89464, 0.73206, 0.89464, 0.73206, 0.89464, 0.81105, 0.84636, 0.81105, 0.84636, 0.81105, 0.84636, 1, 1, 0.86275, 0.94469, 0.90872, 0.95786, 0.90685, 0.82601, 0.90685, 0.82601, 0.90685, 0.82601, 0.90685, 1.03297, 0.90685, 0.82601, 0.77741, 1.05611, 0.6377, 1.07692, 1, 1, 0.90918, 0.75593, 1.03297, 1, 1, 0.76032, 0.90452, 0.98156, 1.11842, 0.77261, 1.11429, 0.89385, 0.94469, 1, 1, 0.89385, 0.94469, 0.95877, 0.86901, 0.94469, 0.85122, 0.9482, 0.85122, 0.9482, 0.85122, 0.9482, 0.8667, 0.90016, 0.75186, 1.04692, 1, 1, 0.75186, 1.04692, 0.68887, 0.78223, 0.68887, 0.78223, 0.68887, 0.78223, 0.68887, 0.78223, 1, 1, 0.79776, 0.92188, 0.79776, 1.23023, 0.88844, 0.94469, 0.88844, 0.94469, 0.88844, 0.94469, 0.88844, 0.94469, 0.88844, 0.94469, 0.88844, 0.94469, 0.94258, 0.98986, 0.7306, 0.90527, 0.7306, 0.76659, 0.79004, 0.76659, 0.79004, 0.76659, 0.79004, 1.09231, 0.54873, 0.8675, 0.86128, 0.76318, 0.8693, 0.85311, 0.86651, 1, 1, 0.79776, 1.20562, 1.18622, 1.18622, 1, 1.1437, 0.67742, 0.96334, 0.93695, 1.35191, 1.40909, 0.95161, 1.48387, 0.86686, 0.90861, 0.62267, 0.74359, 0.65649, 0.85498, 0.56963, 0.88254, 1.23516, 0.8675, 0.81552, 0.75443, 0.84503, 0.73206, 0.76659, 0.86275, 0.85122, 0.90685, 0.77892, 0.85746, 1.02638, 0.89385, 0.75657, 0.85122, 0.86275, 0.77452, 0.74171, 0.79776, 0.7306, 0.95165, 0.77818, 0.89772, 0.88831, 0.90685, 0.7306, 0.98142, 1.02191, 0.96576, 1.23516, 0.99018, 0.98142, 0.9236, 0.89258, 0.94035, 1.02191, 0.78848, 0.96576, 0.9561, 1.23516, 0.90918, 0.92578, 0.95424, 0.89746, 0.83969, 0.9482, 0.80113, 0.89442, 0.85208, 0.86155, 0.98022, 0.99018, 1.00452, 0.81209, 0.99247, 0.89181, 1.23516, 0.99018, 0.9482, 0.99018, 0.89181, 0.73206, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.88844, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.89464, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.96766, 1, 1, 1, 1, 1, 1, 0.94258, 0.98986, 0.94258, 0.98986, 0.94258, 0.98986, 0.7306, 0.90527, 1, 1, 0.89552, 0.90527, 1, 0.90186, 1.12308, 1.12308, 1.12308, 1.12308, 1.2566, 1.2566, 1.2566, 0.89552, 0.89552, 1.42259, 0.69043, 1.03809, 1, 1, 1.0176, 1.0176, 1.11523, 1.4956, 2.01462, 0.99331, 0.82616, 0.91133, 0.84286, 0.91133, 1, 1, 1, 0.70508, 1, 1.23108, 0.79801, 0.84426, 0.84426, 0.774, 0.90527, 1.81055, 0.90527, 1.81055, 1.28809, 1.55469, 0.94434, 1.07806, 1, 0.97094, 0.7589, 0.85284, 0.90747, 1.19658, 0.69825, 0.97622, 1.33512, 0.90747, 0.90747, 0.85356, 0.90747, 0.90747, 1.44947, 0.85284, 0.8941, 0.8941, 0.70572, 0.8, 0.70572, 0.70572, 0.70572, 0.70572, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.99862, 0.99862, 1, 1, 1, 1, 1, 1.0336, 0.91027, 1, 1, 1, 0.99862, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.05859, 1.05859, 1, 1, 1, 1.07185, 0.99413, 0.96334, 1.08065, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ng = {
  lineHeight: 1.2207,
  lineGap: 0.2207
}, ig = [0.76116, 1, 1, 1.0006, 0.99998, 0.99974, 0.99973, 0.99973, 0.99982, 0.99977, 1.00087, 0.99998, 0.99998, 0.99959, 1.00003, 1.0006, 0.99998, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99998, 1, 1.00003, 1.00003, 1.00003, 1.00026, 0.9999, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00026, 1.00022, 0.99977, 1.0006, 0.99973, 0.99977, 1.00026, 0.99999, 0.99977, 1.00022, 1.00001, 1.00022, 0.99977, 1.00001, 1.00026, 0.99977, 1.00001, 1.00016, 1.00001, 1.00001, 1.00026, 0.99998, 1.0006, 0.99998, 1.00003, 0.99973, 0.99998, 0.99973, 1.00026, 0.99973, 1.00026, 0.99973, 0.99998, 1.00026, 1.00026, 1.0006, 1.0006, 0.99973, 1.0006, 0.99982, 1.00026, 1.00026, 1.00026, 1.00026, 0.99959, 0.99973, 0.99998, 1.00026, 0.99973, 1.00022, 0.99973, 0.99973, 1, 0.99959, 1.00077, 0.99959, 1.00003, 0.99998, 0.99973, 0.99973, 0.99973, 0.99973, 1.00077, 0.99973, 0.99998, 1.00025, 0.99968, 0.99973, 1.00003, 1.00025, 0.60299, 1.00024, 1.06409, 1, 1, 0.99998, 1, 0.99973, 1.0006, 0.99998, 1, 0.99936, 0.99973, 1.00002, 1.00002, 1.00002, 1.00026, 0.99977, 0.99977, 0.99977, 0.99977, 0.99977, 0.99977, 1, 0.99977, 1.00001, 1.00001, 1.00001, 1.00001, 1.0006, 1.0006, 1.0006, 1.0006, 0.99977, 0.99977, 1.00022, 1.00022, 1.00022, 1.00022, 1.00022, 1.00003, 1.00022, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00001, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99982, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.06409, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 0.99973, 1.00026, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 1.03374, 0.99977, 1.00026, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.00042, 0.99973, 0.99973, 1.0006, 0.99977, 0.99973, 0.99973, 1.00026, 1.0006, 1.00026, 1.0006, 1.00026, 1.03828, 1.00026, 0.99999, 1.00026, 1.0006, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.9993, 0.9998, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1, 1.00016, 0.99977, 0.99959, 0.99977, 0.99959, 0.99977, 0.99959, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00026, 0.99998, 1.00026, 0.8121, 1.00026, 0.99998, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 1.00016, 1.00022, 1.00001, 0.99973, 1.00001, 1.00026, 1, 1.00026, 1, 1.00026, 1, 1.0006, 0.99973, 0.99977, 0.99973, 1, 0.99982, 1.00022, 1.00026, 1.00001, 0.99973, 1.00026, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 1.00034, 0.99977, 1, 0.99997, 1.00026, 1.00078, 1.00036, 0.99973, 1.00013, 1.0006, 0.99977, 0.99977, 0.99988, 0.85148, 1.00001, 1.00026, 0.99977, 1.00022, 1.0006, 0.99977, 1.00001, 0.99999, 0.99977, 1.00069, 1.00022, 0.99977, 1.00001, 0.99984, 1.00026, 1.00001, 1.00024, 1.00001, 0.9999, 1, 1.0006, 1.00001, 1.00041, 0.99962, 1.00026, 1.0006, 0.99995, 1.00041, 0.99942, 0.99973, 0.99927, 1.00082, 0.99902, 1.00026, 1.00087, 1.0006, 1.00069, 0.99973, 0.99867, 0.99973, 0.9993, 1.00026, 1.00049, 1.00056, 1, 0.99988, 0.99935, 0.99995, 0.99954, 1.00055, 0.99945, 1.00032, 1.0006, 0.99995, 1.00026, 0.99995, 1.00032, 1.00001, 1.00008, 0.99971, 1.00019, 0.9994, 1.00001, 1.0006, 1.00044, 0.99973, 1.00023, 1.00047, 1, 0.99942, 0.99561, 0.99989, 1.00035, 0.99977, 1.00035, 0.99977, 1.00019, 0.99944, 1.00001, 1.00021, 0.99926, 1.00035, 1.00035, 0.99942, 1.00048, 0.99999, 0.99977, 1.00022, 1.00035, 1.00001, 0.99977, 1.00026, 0.99989, 1.00057, 1.00001, 0.99936, 1.00052, 1.00012, 0.99996, 1.00043, 1, 1.00035, 0.9994, 0.99976, 1.00035, 0.99973, 1.00052, 1.00041, 1.00119, 1.00037, 0.99973, 1.00002, 0.99986, 1.00041, 1.00041, 0.99902, 0.9996, 1.00034, 0.99999, 1.00026, 0.99999, 1.00026, 0.99973, 1.00052, 0.99973, 1, 0.99973, 1.00041, 1.00075, 0.9994, 1.0003, 0.99999, 1, 1.00041, 0.99955, 1, 0.99915, 0.99973, 0.99973, 1.00026, 1.00119, 0.99955, 0.99973, 1.0006, 0.99911, 1.0006, 1.00026, 0.99972, 1.00026, 0.99902, 1.00041, 0.99973, 0.99999, 1, 1, 1.00038, 1.0005, 1.00016, 1.00022, 1.00016, 1.00022, 1.00016, 1.00022, 1.00001, 0.99973, 1, 1, 0.99973, 1, 1, 0.99955, 1.0006, 1.0006, 1.0006, 1.0006, 1, 1, 1, 0.99973, 0.99973, 0.99972, 1, 1, 1.00106, 0.99999, 0.99998, 0.99998, 0.99999, 0.99998, 1.66475, 1, 0.99973, 0.99973, 1.00023, 0.99973, 0.99971, 1.00047, 1.00023, 1, 0.99991, 0.99984, 1.00002, 1.00002, 1.00002, 1.00002, 1, 1, 1, 1, 1, 1, 1, 0.99972, 1, 1.20985, 1.39713, 1.00003, 1.00031, 1.00015, 1, 0.99561, 1.00027, 1.00031, 1.00031, 0.99915, 1.00031, 1.00031, 0.99999, 1.00003, 0.99999, 0.99999, 1.41144, 1.6, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.40579, 1.40579, 1.36625, 0.99999, 1, 0.99861, 0.99861, 1, 1.00026, 1.00026, 1.00026, 1.00026, 0.99972, 0.99999, 0.99999, 0.99999, 0.99999, 1.40483, 1, 0.99977, 1.00054, 1, 1, 0.99953, 0.99962, 1.00042, 0.9995, 1, 1, 1, 1, 1, 1, 1, 1, 0.99998, 0.99998, 0.99998, 0.99998, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], sg = {
  lineHeight: 1.2,
  lineGap: 0.2
}, ag = [0.76116, 1, 1, 1.0006, 0.99998, 0.99974, 0.99973, 0.99973, 0.99982, 0.99977, 1.00087, 0.99998, 0.99998, 0.99959, 1.00003, 1.0006, 0.99998, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99998, 1, 1.00003, 1.00003, 1.00003, 1.00026, 0.9999, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00026, 1.00022, 0.99977, 1.0006, 0.99973, 0.99977, 1.00026, 0.99999, 0.99977, 1.00022, 1.00001, 1.00022, 0.99977, 1.00001, 1.00026, 0.99977, 1.00001, 1.00016, 1.00001, 1.00001, 1.00026, 0.99998, 1.0006, 0.99998, 1.00003, 0.99973, 0.99998, 0.99973, 1.00026, 0.99973, 1.00026, 0.99973, 0.99998, 1.00026, 1.00026, 1.0006, 1.0006, 0.99973, 1.0006, 0.99982, 1.00026, 1.00026, 1.00026, 1.00026, 0.99959, 0.99973, 0.99998, 1.00026, 0.99973, 1.00022, 0.99973, 0.99973, 1, 0.99959, 1.00077, 0.99959, 1.00003, 0.99998, 0.99973, 0.99973, 0.99973, 0.99973, 1.00077, 0.99973, 0.99998, 1.00025, 0.99968, 0.99973, 1.00003, 1.00025, 0.60299, 1.00024, 1.06409, 1, 1, 0.99998, 1, 0.99973, 1.0006, 0.99998, 1, 0.99936, 0.99973, 1.00002, 1.00002, 1.00002, 1.00026, 0.99977, 0.99977, 0.99977, 0.99977, 0.99977, 0.99977, 1, 0.99977, 1.00001, 1.00001, 1.00001, 1.00001, 1.0006, 1.0006, 1.0006, 1.0006, 0.99977, 0.99977, 1.00022, 1.00022, 1.00022, 1.00022, 1.00022, 1.00003, 1.00022, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00001, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99982, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.06409, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 0.99973, 1.00026, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 1.0044, 0.99977, 1.00026, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 0.99971, 0.99973, 0.99973, 1.0006, 0.99977, 0.99973, 0.99973, 1.00026, 1.0006, 1.00026, 1.0006, 1.00026, 1.01011, 1.00026, 0.99999, 1.00026, 1.0006, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.9993, 0.9998, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1, 1.00016, 0.99977, 0.99959, 0.99977, 0.99959, 0.99977, 0.99959, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00026, 0.99998, 1.00026, 0.8121, 1.00026, 0.99998, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 1.00016, 1.00022, 1.00001, 0.99973, 1.00001, 1.00026, 1, 1.00026, 1, 1.00026, 1, 1.0006, 0.99973, 0.99977, 0.99973, 1, 0.99982, 1.00022, 1.00026, 1.00001, 0.99973, 1.00026, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99977, 1, 1, 1.00026, 0.99969, 0.99972, 0.99981, 0.9998, 1.0006, 0.99977, 0.99977, 1.00022, 0.91155, 1.00001, 1.00026, 0.99977, 1.00022, 1.0006, 0.99977, 1.00001, 0.99999, 0.99977, 0.99966, 1.00022, 1.00032, 1.00001, 0.99944, 1.00026, 1.00001, 0.99968, 1.00001, 1.00047, 1, 1.0006, 1.00001, 0.99981, 1.00101, 1.00026, 1.0006, 0.99948, 0.99981, 1.00064, 0.99973, 0.99942, 1.00101, 1.00061, 1.00026, 1.00069, 1.0006, 1.00014, 0.99973, 1.01322, 0.99973, 1.00065, 1.00026, 1.00012, 0.99923, 1, 1.00064, 1.00076, 0.99948, 1.00055, 1.00063, 1.00007, 0.99943, 1.0006, 0.99948, 1.00026, 0.99948, 0.99943, 1.00001, 1.00001, 1.00029, 1.00038, 1.00035, 1.00001, 1.0006, 1.0006, 0.99973, 0.99978, 1.00001, 1.00057, 0.99989, 0.99967, 0.99964, 0.99967, 0.99977, 0.99999, 0.99977, 1.00038, 0.99977, 1.00001, 0.99973, 1.00066, 0.99967, 0.99967, 1.00041, 0.99998, 0.99999, 0.99977, 1.00022, 0.99967, 1.00001, 0.99977, 1.00026, 0.99964, 1.00031, 1.00001, 0.99999, 0.99999, 1, 1.00023, 1, 1, 0.99999, 1.00035, 1.00001, 0.99999, 0.99973, 0.99977, 0.99999, 1.00058, 0.99973, 0.99973, 0.99955, 0.9995, 1.00026, 1.00026, 1.00032, 0.99989, 1.00034, 0.99999, 1.00026, 1.00026, 1.00026, 0.99973, 0.45998, 0.99973, 1.00026, 0.99973, 1.00001, 0.99999, 0.99982, 0.99994, 0.99996, 1, 1.00042, 1.00044, 1.00029, 1.00023, 0.99973, 0.99973, 1.00026, 0.99949, 1.00002, 0.99973, 1.0006, 1.0006, 1.0006, 0.99975, 1.00026, 1.00026, 1.00032, 0.98685, 0.99973, 1.00026, 1, 1, 0.99966, 1.00044, 1.00016, 1.00022, 1.00016, 1.00022, 1.00016, 1.00022, 1.00001, 0.99973, 1, 1, 0.99973, 1, 1, 0.99955, 1.0006, 1.0006, 1.0006, 1.0006, 1, 1, 1, 0.99973, 0.99973, 0.99972, 1, 1, 1.00106, 0.99999, 0.99998, 0.99998, 0.99999, 0.99998, 1.66475, 1, 0.99973, 0.99973, 1, 0.99973, 0.99971, 0.99978, 1, 1, 0.99991, 0.99984, 1.00002, 1.00002, 1.00002, 1.00002, 1.00098, 1, 1, 1, 1.00049, 1, 1, 0.99972, 1, 1.20985, 1.39713, 1.00003, 1.00031, 1.00015, 1, 0.99561, 1.00027, 1.00031, 1.00031, 0.99915, 1.00031, 1.00031, 0.99999, 1.00003, 0.99999, 0.99999, 1.41144, 1.6, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.40579, 1.40579, 1.36625, 0.99999, 1, 0.99861, 0.99861, 1, 1.00026, 1.00026, 1.00026, 1.00026, 0.99972, 0.99999, 0.99999, 0.99999, 0.99999, 1.40483, 1, 0.99977, 1.00054, 1, 1, 0.99953, 0.99962, 1.00042, 0.9995, 1, 1, 1, 1, 1, 1, 1, 1, 0.99998, 0.99998, 0.99998, 0.99998, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], rg = {
  lineHeight: 1.35,
  lineGap: 0.2
}, og = [0.76116, 1, 1, 1.0006, 1.0006, 1.00006, 0.99973, 0.99973, 0.99982, 1.00001, 1.00043, 0.99998, 0.99998, 0.99959, 1.00003, 1.0006, 0.99998, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1, 1.00003, 1.00003, 1.00003, 0.99973, 0.99987, 1.00001, 1.00001, 0.99977, 0.99977, 1.00001, 1.00026, 1.00022, 0.99977, 1.0006, 1, 1.00001, 0.99973, 0.99999, 0.99977, 1.00022, 1.00001, 1.00022, 0.99977, 1.00001, 1.00026, 0.99977, 1.00001, 1.00016, 1.00001, 1.00001, 1.00026, 1.0006, 1.0006, 1.0006, 0.99949, 0.99973, 0.99998, 0.99973, 0.99973, 1, 0.99973, 0.99973, 1.0006, 0.99973, 0.99973, 0.99924, 0.99924, 1, 0.99924, 0.99999, 0.99973, 0.99973, 0.99973, 0.99973, 0.99998, 1, 1.0006, 0.99973, 1, 0.99977, 1, 1, 1, 1.00005, 1.0009, 1.00005, 1.00003, 0.99998, 0.99973, 0.99973, 0.99973, 0.99973, 1.0009, 0.99973, 0.99998, 1.00025, 0.99968, 0.99973, 1.00003, 1.00025, 0.60299, 1.00024, 1.06409, 1, 1, 0.99998, 1, 0.9998, 1.0006, 0.99998, 1, 0.99936, 0.99973, 1.00002, 1.00002, 1.00002, 1.00026, 1.00001, 1.00001, 1.00001, 1.00001, 1.00001, 1.00001, 1, 0.99977, 1.00001, 1.00001, 1.00001, 1.00001, 1.0006, 1.0006, 1.0006, 1.0006, 0.99977, 0.99977, 1.00022, 1.00022, 1.00022, 1.00022, 1.00022, 1.00003, 1.00022, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00001, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99982, 1, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.06409, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 1, 0.99973, 1, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 0.99977, 1, 0.99977, 1, 0.99977, 1, 0.99977, 1, 0.99977, 1.0288, 0.99977, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 0.99924, 1.0006, 1.0006, 0.99946, 1.00034, 1, 0.99924, 1.00001, 1, 1, 0.99973, 0.99924, 0.99973, 0.99924, 0.99973, 1.06311, 0.99973, 1.00024, 0.99973, 0.99924, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 1.00041, 0.9998, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1, 1.00016, 0.99977, 0.99998, 0.99977, 0.99998, 0.99977, 0.99998, 1.00001, 1, 1.00001, 1, 1.00001, 1, 1.00001, 1, 1.00026, 1.0006, 1.00026, 0.89547, 1.00026, 1.0006, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 1.00016, 0.99977, 1.00001, 1, 1.00001, 1.00026, 1, 1.00026, 1, 1.00026, 1, 0.99924, 0.99973, 1.00001, 0.99973, 1, 0.99982, 1.00022, 1.00026, 1.00001, 1, 1.00026, 1.0006, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 1.00001, 1, 1.00054, 0.99977, 1.00084, 1.00007, 0.99973, 1.00013, 0.99924, 1.00001, 1.00001, 0.99945, 0.91221, 1.00001, 1.00026, 0.99977, 1.00022, 1.0006, 1.00001, 1.00001, 0.99999, 0.99977, 0.99933, 1.00022, 1.00054, 1.00001, 1.00065, 1.00026, 1.00001, 1.0001, 1.00001, 1.00052, 1, 1.0006, 1.00001, 0.99945, 0.99897, 0.99968, 0.99924, 1.00036, 0.99945, 0.99949, 1, 1.0006, 0.99897, 0.99918, 0.99968, 0.99911, 0.99924, 1, 0.99962, 1.01487, 1, 1.0005, 0.99973, 1.00012, 1.00043, 1, 0.99995, 0.99994, 1.00036, 0.99947, 1.00019, 1.00063, 1.00025, 0.99924, 1.00036, 0.99973, 1.00036, 1.00025, 1.00001, 1.00001, 1.00027, 1.0001, 1.00068, 1.00001, 1.0006, 1.0006, 1, 1.00008, 0.99957, 0.99972, 0.9994, 0.99954, 0.99975, 1.00051, 1.00001, 1.00019, 1.00001, 1.0001, 0.99986, 1.00001, 1.00001, 1.00038, 0.99954, 0.99954, 0.9994, 1.00066, 0.99999, 0.99977, 1.00022, 1.00054, 1.00001, 0.99977, 1.00026, 0.99975, 1.0001, 1.00001, 0.99993, 0.9995, 0.99955, 1.00016, 0.99978, 0.99974, 1.00019, 1.00022, 0.99955, 1.00053, 0.99973, 1.00089, 1.00005, 0.99967, 1.00048, 0.99973, 1.00002, 1.00034, 0.99973, 0.99973, 0.99964, 1.00006, 1.00066, 0.99947, 0.99973, 0.98894, 0.99973, 1, 0.44898, 1, 0.99946, 1, 1.00039, 1.00082, 0.99991, 0.99991, 0.99985, 1.00022, 1.00023, 1.00061, 1.00006, 0.99966, 0.99973, 0.99973, 0.99973, 1.00019, 1.0008, 1, 0.99924, 0.99924, 0.99924, 0.99983, 1.00044, 0.99973, 0.99964, 0.98332, 1, 0.99973, 1, 1, 0.99962, 0.99895, 1.00016, 0.99977, 1.00016, 0.99977, 1.00016, 0.99977, 1.00001, 1, 1, 1, 0.99973, 1, 1, 0.99955, 0.99924, 0.99924, 0.99924, 0.99924, 0.99998, 0.99998, 0.99998, 0.99973, 0.99973, 0.99972, 1, 1, 1.00267, 0.99999, 0.99998, 0.99998, 1, 0.99998, 1.66475, 1, 0.99973, 0.99973, 1.00023, 0.99973, 1.00423, 0.99925, 0.99999, 1, 0.99991, 0.99984, 1.00002, 1.00002, 1.00002, 1.00002, 1.00049, 1, 1.00245, 1, 1, 1, 1, 0.96329, 1, 1.20985, 1.39713, 1.00003, 0.8254, 1.00015, 1, 1.00035, 1.00027, 1.00031, 1.00031, 1.00003, 1.00031, 1.00031, 0.99999, 1.00003, 0.99999, 0.99999, 1.41144, 1.6, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.40579, 1.40579, 1.36625, 0.99999, 1, 0.99861, 0.99861, 1, 1.00026, 1.00026, 1.00026, 1.00026, 0.95317, 0.99999, 0.99999, 0.99999, 0.99999, 1.40483, 1, 0.99977, 1.00054, 1, 1, 0.99953, 0.99962, 1.00042, 0.9995, 1, 1, 1, 1, 1, 1, 1, 1, 0.99998, 0.99998, 0.99998, 0.99998, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], cg = {
  lineHeight: 1.35,
  lineGap: 0.2
}, lg = [0.76116, 1, 1, 1.0006, 1.0006, 1.00006, 0.99973, 0.99973, 0.99982, 1.00001, 1.00043, 0.99998, 0.99998, 0.99959, 1.00003, 1.0006, 0.99998, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1, 1.00003, 1.00003, 1.00003, 0.99973, 0.99987, 1.00001, 1.00001, 0.99977, 0.99977, 1.00001, 1.00026, 1.00022, 0.99977, 1.0006, 1, 1.00001, 0.99973, 0.99999, 0.99977, 1.00022, 1.00001, 1.00022, 0.99977, 1.00001, 1.00026, 0.99977, 1.00001, 1.00016, 1.00001, 1.00001, 1.00026, 1.0006, 1.0006, 1.0006, 0.99949, 0.99973, 0.99998, 0.99973, 0.99973, 1, 0.99973, 0.99973, 1.0006, 0.99973, 0.99973, 0.99924, 0.99924, 1, 0.99924, 0.99999, 0.99973, 0.99973, 0.99973, 0.99973, 0.99998, 1, 1.0006, 0.99973, 1, 0.99977, 1, 1, 1, 1.00005, 1.0009, 1.00005, 1.00003, 0.99998, 0.99973, 0.99973, 0.99973, 0.99973, 1.0009, 0.99973, 0.99998, 1.00025, 0.99968, 0.99973, 1.00003, 1.00025, 0.60299, 1.00024, 1.06409, 1, 1, 0.99998, 1, 0.9998, 1.0006, 0.99998, 1, 0.99936, 0.99973, 1.00002, 1.00002, 1.00002, 1.00026, 1.00001, 1.00001, 1.00001, 1.00001, 1.00001, 1.00001, 1, 0.99977, 1.00001, 1.00001, 1.00001, 1.00001, 1.0006, 1.0006, 1.0006, 1.0006, 0.99977, 0.99977, 1.00022, 1.00022, 1.00022, 1.00022, 1.00022, 1.00003, 1.00022, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00001, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99982, 1, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.06409, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 1, 0.99973, 1, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 0.99977, 1, 0.99977, 1, 0.99977, 1, 0.99977, 1, 0.99977, 1.04596, 0.99977, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 0.99924, 1.0006, 1.0006, 1.00019, 1.00034, 1, 0.99924, 1.00001, 1, 1, 0.99973, 0.99924, 0.99973, 0.99924, 0.99973, 1.02572, 0.99973, 1.00005, 0.99973, 0.99924, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99999, 0.9998, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1, 1.00016, 0.99977, 0.99998, 0.99977, 0.99998, 0.99977, 0.99998, 1.00001, 1, 1.00001, 1, 1.00001, 1, 1.00001, 1, 1.00026, 1.0006, 1.00026, 0.84533, 1.00026, 1.0006, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 1.00016, 0.99977, 1.00001, 1, 1.00001, 1.00026, 1, 1.00026, 1, 1.00026, 1, 0.99924, 0.99973, 1.00001, 0.99973, 1, 0.99982, 1.00022, 1.00026, 1.00001, 1, 1.00026, 1.0006, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99928, 1, 0.99977, 1.00013, 1.00055, 0.99947, 0.99945, 0.99941, 0.99924, 1.00001, 1.00001, 1.0004, 0.91621, 1.00001, 1.00026, 0.99977, 1.00022, 1.0006, 1.00001, 1.00005, 0.99999, 0.99977, 1.00015, 1.00022, 0.99977, 1.00001, 0.99973, 1.00026, 1.00001, 1.00019, 1.00001, 0.99946, 1, 1.0006, 1.00001, 0.99978, 1.00045, 0.99973, 0.99924, 1.00023, 0.99978, 0.99966, 1, 1.00065, 1.00045, 1.00019, 0.99973, 0.99973, 0.99924, 1, 1, 0.96499, 1, 1.00055, 0.99973, 1.00008, 1.00027, 1, 0.9997, 0.99995, 1.00023, 0.99933, 1.00019, 1.00015, 1.00031, 0.99924, 1.00023, 0.99973, 1.00023, 1.00031, 1.00001, 0.99928, 1.00029, 1.00092, 1.00035, 1.00001, 1.0006, 1.0006, 1, 0.99988, 0.99975, 1, 1.00082, 0.99561, 0.9996, 1.00035, 1.00001, 0.99962, 1.00001, 1.00092, 0.99964, 1.00001, 0.99963, 0.99999, 1.00035, 1.00035, 1.00082, 0.99962, 0.99999, 0.99977, 1.00022, 1.00035, 1.00001, 0.99977, 1.00026, 0.9996, 0.99967, 1.00001, 1.00034, 1.00074, 1.00054, 1.00053, 1.00063, 0.99971, 0.99962, 1.00035, 0.99975, 0.99977, 0.99973, 1.00043, 0.99953, 1.0007, 0.99915, 0.99973, 1.00008, 0.99892, 1.00073, 1.00073, 1.00114, 0.99915, 1.00073, 0.99955, 0.99973, 1.00092, 0.99973, 1, 0.99998, 1, 1.0003, 1, 1.00043, 1.00001, 0.99969, 1.0003, 1, 1.00035, 1.00001, 0.9995, 1, 1.00092, 0.99973, 0.99973, 0.99973, 1.0007, 0.9995, 1, 0.99924, 1.0006, 0.99924, 0.99972, 1.00062, 0.99973, 1.00114, 1.00073, 1, 0.99955, 1, 1, 1.00047, 0.99968, 1.00016, 0.99977, 1.00016, 0.99977, 1.00016, 0.99977, 1.00001, 1, 1, 1, 0.99973, 1, 1, 0.99955, 0.99924, 0.99924, 0.99924, 0.99924, 0.99998, 0.99998, 0.99998, 0.99973, 0.99973, 0.99972, 1, 1, 1.00267, 0.99999, 0.99998, 0.99998, 1, 0.99998, 1.66475, 1, 0.99973, 0.99973, 1.00023, 0.99973, 0.99971, 0.99925, 1.00023, 1, 0.99991, 0.99984, 1.00002, 1.00002, 1.00002, 1.00002, 1, 1, 1, 1, 1, 1, 1, 0.96329, 1, 1.20985, 1.39713, 1.00003, 0.8254, 1.00015, 1, 1.00035, 1.00027, 1.00031, 1.00031, 0.99915, 1.00031, 1.00031, 0.99999, 1.00003, 0.99999, 0.99999, 1.41144, 1.6, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.40579, 1.40579, 1.36625, 0.99999, 1, 0.99861, 0.99861, 1, 1.00026, 1.00026, 1.00026, 1.00026, 0.95317, 0.99999, 0.99999, 0.99999, 0.99999, 1.40483, 1, 0.99977, 1.00054, 1, 1, 0.99953, 0.99962, 1.00042, 0.9995, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], hg = {
  lineHeight: 1.2,
  lineGap: 0.2
}, $a = [365, 0, 333, 278, 333, 474, 556, 556, 889, 722, 238, 333, 333, 389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 333, 333, 584, 584, 584, 611, 975, 722, 722, 722, 722, 667, 611, 778, 722, 278, 556, 722, 611, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 333, 278, 333, 584, 556, 333, 556, 611, 556, 611, 556, 333, 611, 611, 278, 278, 556, 278, 889, 611, 611, 611, 611, 389, 556, 333, 611, 556, 778, 556, 556, 500, 389, 280, 389, 584, 333, 556, 556, 556, 556, 280, 556, 333, 737, 370, 556, 584, 737, 552, 400, 549, 333, 333, 333, 576, 556, 278, 333, 333, 365, 556, 834, 834, 834, 611, 722, 722, 722, 722, 722, 722, 1e3, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 556, 556, 556, 556, 556, 278, 278, 278, 278, 611, 611, 611, 611, 611, 611, 611, 549, 611, 611, 611, 611, 611, 556, 611, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 719, 722, 611, 667, 556, 667, 556, 667, 556, 667, 556, 667, 556, 778, 611, 778, 611, 778, 611, 778, 611, 722, 611, 722, 611, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 785, 556, 556, 278, 722, 556, 556, 611, 278, 611, 278, 611, 385, 611, 479, 611, 278, 722, 611, 722, 611, 722, 611, 708, 723, 611, 778, 611, 778, 611, 778, 611, 1e3, 944, 722, 389, 722, 389, 722, 389, 667, 556, 667, 556, 667, 556, 667, 556, 611, 333, 611, 479, 611, 333, 722, 611, 722, 611, 722, 611, 722, 611, 722, 611, 722, 611, 944, 778, 667, 556, 667, 611, 500, 611, 500, 611, 500, 278, 556, 722, 556, 1e3, 889, 778, 611, 667, 556, 611, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 465, 722, 333, 853, 906, 474, 825, 927, 838, 278, 722, 722, 601, 719, 667, 611, 722, 778, 278, 722, 667, 833, 722, 644, 778, 722, 667, 600, 611, 667, 821, 667, 809, 802, 278, 667, 615, 451, 611, 278, 582, 615, 610, 556, 606, 475, 460, 611, 541, 278, 558, 556, 612, 556, 445, 611, 766, 619, 520, 684, 446, 582, 715, 576, 753, 845, 278, 582, 611, 582, 845, 667, 669, 885, 567, 711, 667, 278, 276, 556, 1094, 1062, 875, 610, 722, 622, 719, 722, 719, 722, 567, 712, 667, 904, 626, 719, 719, 610, 702, 833, 722, 778, 719, 667, 722, 611, 622, 854, 667, 730, 703, 1005, 1019, 870, 979, 719, 711, 1031, 719, 556, 618, 615, 417, 635, 556, 709, 497, 615, 615, 500, 635, 740, 604, 611, 604, 611, 556, 490, 556, 875, 556, 615, 581, 833, 844, 729, 854, 615, 552, 854, 583, 556, 556, 611, 417, 552, 556, 278, 281, 278, 969, 906, 611, 500, 615, 556, 604, 778, 611, 487, 447, 944, 778, 944, 778, 944, 778, 667, 556, 333, 333, 556, 1e3, 1e3, 552, 278, 278, 278, 278, 500, 500, 500, 556, 556, 350, 1e3, 1e3, 240, 479, 333, 333, 604, 333, 167, 396, 556, 556, 1094, 556, 885, 489, 1115, 1e3, 768, 600, 834, 834, 834, 834, 1e3, 500, 1e3, 500, 1e3, 500, 500, 494, 612, 823, 713, 584, 549, 713, 979, 722, 274, 549, 549, 583, 549, 549, 604, 584, 604, 604, 708, 625, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 729, 604, 604, 354, 354, 1e3, 990, 990, 990, 990, 494, 604, 604, 604, 604, 354, 1021, 1052, 917, 750, 750, 531, 656, 594, 510, 500, 750, 750, 611, 611, 333, 333, 333, 333, 333, 333, 333, 333, 222, 222, 333, 333, 333, 333, 333, 333, 333, 333], za = [-1, -1, -1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 402, 506, 507, 508, 509, 510, 511, 536, 537, 538, 539, 710, 711, 713, 728, 729, 730, 731, 732, 733, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1138, 1139, 1168, 1169, 7808, 7809, 7810, 7811, 7812, 7813, 7922, 7923, 8208, 8209, 8211, 8212, 8213, 8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8224, 8225, 8226, 8230, 8240, 8242, 8243, 8249, 8250, 8252, 8254, 8260, 8319, 8355, 8356, 8359, 8364, 8453, 8467, 8470, 8482, 8486, 8494, 8539, 8540, 8541, 8542, 8592, 8593, 8594, 8595, 8596, 8597, 8616, 8706, 8710, 8719, 8721, 8722, 8730, 8734, 8735, 8745, 8747, 8776, 8800, 8801, 8804, 8805, 8962, 8976, 8992, 8993, 9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508, 9516, 9524, 9532, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567, 9568, 9569, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578, 9579, 9580, 9600, 9604, 9608, 9612, 9616, 9617, 9618, 9619, 9632, 9633, 9642, 9643, 9644, 9650, 9658, 9660, 9668, 9674, 9675, 9679, 9688, 9689, 9702, 9786, 9787, 9788, 9792, 9794, 9824, 9827, 9829, 9830, 9834, 9835, 9836, 61441, 61442, 61445, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], Wa = [365, 0, 333, 278, 333, 474, 556, 556, 889, 722, 238, 333, 333, 389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 333, 333, 584, 584, 584, 611, 975, 722, 722, 722, 722, 667, 611, 778, 722, 278, 556, 722, 611, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 333, 278, 333, 584, 556, 333, 556, 611, 556, 611, 556, 333, 611, 611, 278, 278, 556, 278, 889, 611, 611, 611, 611, 389, 556, 333, 611, 556, 778, 556, 556, 500, 389, 280, 389, 584, 333, 556, 556, 556, 556, 280, 556, 333, 737, 370, 556, 584, 737, 552, 400, 549, 333, 333, 333, 576, 556, 278, 333, 333, 365, 556, 834, 834, 834, 611, 722, 722, 722, 722, 722, 722, 1e3, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 556, 556, 556, 556, 556, 278, 278, 278, 278, 611, 611, 611, 611, 611, 611, 611, 549, 611, 611, 611, 611, 611, 556, 611, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 740, 722, 611, 667, 556, 667, 556, 667, 556, 667, 556, 667, 556, 778, 611, 778, 611, 778, 611, 778, 611, 722, 611, 722, 611, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 782, 556, 556, 278, 722, 556, 556, 611, 278, 611, 278, 611, 396, 611, 479, 611, 278, 722, 611, 722, 611, 722, 611, 708, 723, 611, 778, 611, 778, 611, 778, 611, 1e3, 944, 722, 389, 722, 389, 722, 389, 667, 556, 667, 556, 667, 556, 667, 556, 611, 333, 611, 479, 611, 333, 722, 611, 722, 611, 722, 611, 722, 611, 722, 611, 722, 611, 944, 778, 667, 556, 667, 611, 500, 611, 500, 611, 500, 278, 556, 722, 556, 1e3, 889, 778, 611, 667, 556, 611, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 722, 333, 854, 906, 473, 844, 930, 847, 278, 722, 722, 610, 671, 667, 611, 722, 778, 278, 722, 667, 833, 722, 657, 778, 718, 667, 590, 611, 667, 822, 667, 829, 781, 278, 667, 620, 479, 611, 278, 591, 620, 621, 556, 610, 479, 492, 611, 558, 278, 566, 556, 603, 556, 450, 611, 712, 605, 532, 664, 409, 591, 704, 578, 773, 834, 278, 591, 611, 591, 834, 667, 667, 886, 614, 719, 667, 278, 278, 556, 1094, 1042, 854, 622, 719, 677, 719, 722, 708, 722, 614, 722, 667, 927, 643, 719, 719, 615, 687, 833, 722, 778, 719, 667, 722, 611, 677, 781, 667, 729, 708, 979, 989, 854, 1e3, 708, 719, 1042, 729, 556, 619, 604, 534, 618, 556, 736, 510, 611, 611, 507, 622, 740, 604, 611, 611, 611, 556, 889, 556, 885, 556, 646, 583, 889, 935, 707, 854, 594, 552, 865, 589, 556, 556, 611, 469, 563, 556, 278, 278, 278, 969, 906, 611, 507, 619, 556, 611, 778, 611, 575, 467, 944, 778, 944, 778, 944, 778, 667, 556, 333, 333, 556, 1e3, 1e3, 552, 278, 278, 278, 278, 500, 500, 500, 556, 556, 350, 1e3, 1e3, 240, 479, 333, 333, 604, 333, 167, 396, 556, 556, 1104, 556, 885, 516, 1146, 1e3, 768, 600, 834, 834, 834, 834, 999, 500, 1e3, 500, 1e3, 500, 500, 494, 612, 823, 713, 584, 549, 713, 979, 722, 274, 549, 549, 583, 549, 549, 604, 584, 604, 604, 708, 625, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 729, 604, 604, 354, 354, 1e3, 990, 990, 990, 990, 494, 604, 604, 604, 604, 354, 1021, 1052, 917, 750, 750, 531, 656, 594, 510, 500, 750, 750, 611, 611, 333, 333, 333, 333, 333, 333, 333, 333, 222, 222, 333, 333, 333, 333, 333, 333, 333, 333], Va = [-1, -1, -1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 402, 506, 507, 508, 509, 510, 511, 536, 537, 538, 539, 710, 711, 713, 728, 729, 730, 731, 732, 733, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1138, 1139, 1168, 1169, 7808, 7809, 7810, 7811, 7812, 7813, 7922, 7923, 8208, 8209, 8211, 8212, 8213, 8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8224, 8225, 8226, 8230, 8240, 8242, 8243, 8249, 8250, 8252, 8254, 8260, 8319, 8355, 8356, 8359, 8364, 8453, 8467, 8470, 8482, 8486, 8494, 8539, 8540, 8541, 8542, 8592, 8593, 8594, 8595, 8596, 8597, 8616, 8706, 8710, 8719, 8721, 8722, 8730, 8734, 8735, 8745, 8747, 8776, 8800, 8801, 8804, 8805, 8962, 8976, 8992, 8993, 9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508, 9516, 9524, 9532, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567, 9568, 9569, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578, 9579, 9580, 9600, 9604, 9608, 9612, 9616, 9617, 9618, 9619, 9632, 9633, 9642, 9643, 9644, 9650, 9658, 9660, 9668, 9674, 9675, 9679, 9688, 9689, 9702, 9786, 9787, 9788, 9792, 9794, 9824, 9827, 9829, 9830, 9834, 9835, 9836, 61441, 61442, 61445, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], Xa = [365, 0, 333, 278, 278, 355, 556, 556, 889, 667, 191, 333, 333, 389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 278, 278, 584, 584, 584, 556, 1015, 667, 667, 722, 722, 667, 611, 778, 722, 278, 500, 667, 556, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 278, 278, 278, 469, 556, 333, 556, 556, 500, 556, 556, 278, 556, 556, 222, 222, 500, 222, 833, 556, 556, 556, 556, 333, 500, 278, 556, 500, 722, 500, 500, 500, 334, 260, 334, 584, 333, 556, 556, 556, 556, 260, 556, 333, 737, 370, 556, 584, 737, 552, 400, 549, 333, 333, 333, 576, 537, 278, 333, 333, 365, 556, 834, 834, 834, 611, 667, 667, 667, 667, 667, 667, 1e3, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 500, 556, 556, 556, 556, 278, 278, 278, 278, 556, 556, 556, 556, 556, 556, 556, 549, 611, 556, 556, 556, 556, 500, 556, 500, 667, 556, 667, 556, 667, 556, 722, 500, 722, 500, 722, 500, 722, 500, 722, 625, 722, 556, 667, 556, 667, 556, 667, 556, 667, 556, 667, 556, 778, 556, 778, 556, 778, 556, 778, 556, 722, 556, 722, 556, 278, 278, 278, 278, 278, 278, 278, 222, 278, 278, 733, 444, 500, 222, 667, 500, 500, 556, 222, 556, 222, 556, 281, 556, 400, 556, 222, 722, 556, 722, 556, 722, 556, 615, 723, 556, 778, 556, 778, 556, 778, 556, 1e3, 944, 722, 333, 722, 333, 722, 333, 667, 500, 667, 500, 667, 500, 667, 500, 611, 278, 611, 354, 611, 278, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 944, 722, 667, 500, 667, 611, 500, 611, 500, 611, 500, 222, 556, 667, 556, 1e3, 889, 778, 611, 667, 500, 611, 278, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 667, 278, 789, 846, 389, 794, 865, 775, 222, 667, 667, 570, 671, 667, 611, 722, 778, 278, 667, 667, 833, 722, 648, 778, 725, 667, 600, 611, 667, 837, 667, 831, 761, 278, 667, 570, 439, 555, 222, 550, 570, 571, 500, 556, 439, 463, 555, 542, 222, 500, 492, 548, 500, 447, 556, 670, 573, 486, 603, 374, 550, 652, 546, 728, 779, 222, 550, 556, 550, 779, 667, 667, 843, 544, 708, 667, 278, 278, 500, 1066, 982, 844, 589, 715, 639, 724, 667, 651, 667, 544, 704, 667, 917, 614, 715, 715, 589, 686, 833, 722, 778, 725, 667, 722, 611, 639, 795, 667, 727, 673, 920, 923, 805, 886, 651, 694, 1022, 682, 556, 562, 522, 493, 553, 556, 688, 465, 556, 556, 472, 564, 686, 550, 556, 556, 556, 500, 833, 500, 835, 500, 572, 518, 830, 851, 621, 736, 526, 492, 752, 534, 556, 556, 556, 378, 496, 500, 222, 222, 222, 910, 828, 556, 472, 565, 500, 556, 778, 556, 492, 339, 944, 722, 944, 722, 944, 722, 667, 500, 333, 333, 556, 1e3, 1e3, 552, 222, 222, 222, 222, 333, 333, 333, 556, 556, 350, 1e3, 1e3, 188, 354, 333, 333, 500, 333, 167, 365, 556, 556, 1094, 556, 885, 323, 1083, 1e3, 768, 600, 834, 834, 834, 834, 1e3, 500, 998, 500, 1e3, 500, 500, 494, 612, 823, 713, 584, 549, 713, 979, 719, 274, 549, 549, 584, 549, 549, 604, 584, 604, 604, 708, 625, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 729, 604, 604, 354, 354, 1e3, 990, 990, 990, 990, 494, 604, 604, 604, 604, 354, 1021, 1052, 917, 750, 750, 531, 656, 594, 510, 500, 750, 750, 500, 500, 333, 333, 333, 333, 333, 333, 333, 333, 222, 222, 294, 294, 324, 324, 316, 328, 398, 285], Ka = [-1, -1, -1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 402, 506, 507, 508, 509, 510, 511, 536, 537, 538, 539, 710, 711, 713, 728, 729, 730, 731, 732, 733, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1138, 1139, 1168, 1169, 7808, 7809, 7810, 7811, 7812, 7813, 7922, 7923, 8208, 8209, 8211, 8212, 8213, 8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8224, 8225, 8226, 8230, 8240, 8242, 8243, 8249, 8250, 8252, 8254, 8260, 8319, 8355, 8356, 8359, 8364, 8453, 8467, 8470, 8482, 8486, 8494, 8539, 8540, 8541, 8542, 8592, 8593, 8594, 8595, 8596, 8597, 8616, 8706, 8710, 8719, 8721, 8722, 8730, 8734, 8735, 8745, 8747, 8776, 8800, 8801, 8804, 8805, 8962, 8976, 8992, 8993, 9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508, 9516, 9524, 9532, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567, 9568, 9569, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578, 9579, 9580, 9600, 9604, 9608, 9612, 9616, 9617, 9618, 9619, 9632, 9633, 9642, 9643, 9644, 9650, 9658, 9660, 9668, 9674, 9675, 9679, 9688, 9689, 9702, 9786, 9787, 9788, 9792, 9794, 9824, 9827, 9829, 9830, 9834, 9835, 9836, 61441, 61442, 61445, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], Ya = [365, 0, 333, 278, 278, 355, 556, 556, 889, 667, 191, 333, 333, 389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 278, 278, 584, 584, 584, 556, 1015, 667, 667, 722, 722, 667, 611, 778, 722, 278, 500, 667, 556, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 278, 278, 278, 469, 556, 333, 556, 556, 500, 556, 556, 278, 556, 556, 222, 222, 500, 222, 833, 556, 556, 556, 556, 333, 500, 278, 556, 500, 722, 500, 500, 500, 334, 260, 334, 584, 333, 556, 556, 556, 556, 260, 556, 333, 737, 370, 556, 584, 737, 552, 400, 549, 333, 333, 333, 576, 537, 278, 333, 333, 365, 556, 834, 834, 834, 611, 667, 667, 667, 667, 667, 667, 1e3, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 500, 556, 556, 556, 556, 278, 278, 278, 278, 556, 556, 556, 556, 556, 556, 556, 549, 611, 556, 556, 556, 556, 500, 556, 500, 667, 556, 667, 556, 667, 556, 722, 500, 722, 500, 722, 500, 722, 500, 722, 615, 722, 556, 667, 556, 667, 556, 667, 556, 667, 556, 667, 556, 778, 556, 778, 556, 778, 556, 778, 556, 722, 556, 722, 556, 278, 278, 278, 278, 278, 278, 278, 222, 278, 278, 735, 444, 500, 222, 667, 500, 500, 556, 222, 556, 222, 556, 292, 556, 334, 556, 222, 722, 556, 722, 556, 722, 556, 604, 723, 556, 778, 556, 778, 556, 778, 556, 1e3, 944, 722, 333, 722, 333, 722, 333, 667, 500, 667, 500, 667, 500, 667, 500, 611, 278, 611, 375, 611, 278, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 944, 722, 667, 500, 667, 611, 500, 611, 500, 611, 500, 222, 556, 667, 556, 1e3, 889, 778, 611, 667, 500, 611, 278, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 667, 278, 784, 838, 384, 774, 855, 752, 222, 667, 667, 551, 668, 667, 611, 722, 778, 278, 667, 668, 833, 722, 650, 778, 722, 667, 618, 611, 667, 798, 667, 835, 748, 278, 667, 578, 446, 556, 222, 547, 578, 575, 500, 557, 446, 441, 556, 556, 222, 500, 500, 576, 500, 448, 556, 690, 569, 482, 617, 395, 547, 648, 525, 713, 781, 222, 547, 556, 547, 781, 667, 667, 865, 542, 719, 667, 278, 278, 500, 1057, 1010, 854, 583, 722, 635, 719, 667, 656, 667, 542, 677, 667, 923, 604, 719, 719, 583, 656, 833, 722, 778, 719, 667, 722, 611, 635, 760, 667, 740, 667, 917, 938, 792, 885, 656, 719, 1010, 722, 556, 573, 531, 365, 583, 556, 669, 458, 559, 559, 438, 583, 688, 552, 556, 542, 556, 500, 458, 500, 823, 500, 573, 521, 802, 823, 625, 719, 521, 510, 750, 542, 556, 556, 556, 365, 510, 500, 222, 278, 222, 906, 812, 556, 438, 559, 500, 552, 778, 556, 489, 411, 944, 722, 944, 722, 944, 722, 667, 500, 333, 333, 556, 1e3, 1e3, 552, 222, 222, 222, 222, 333, 333, 333, 556, 556, 350, 1e3, 1e3, 188, 354, 333, 333, 500, 333, 167, 365, 556, 556, 1094, 556, 885, 323, 1073, 1e3, 768, 600, 834, 834, 834, 834, 1e3, 500, 1e3, 500, 1e3, 500, 500, 494, 612, 823, 713, 584, 549, 713, 979, 719, 274, 549, 549, 583, 549, 549, 604, 584, 604, 604, 708, 625, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 729, 604, 604, 354, 354, 1e3, 990, 990, 990, 990, 494, 604, 604, 604, 604, 354, 1021, 1052, 917, 750, 750, 531, 656, 594, 510, 500, 750, 750, 500, 500, 333, 333, 333, 333, 333, 333, 333, 333, 222, 222, 294, 294, 324, 324, 316, 328, 398, 285], Za = [-1, -1, -1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 402, 506, 507, 508, 509, 510, 511, 536, 537, 538, 539, 710, 711, 713, 728, 729, 730, 731, 732, 733, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1138, 1139, 1168, 1169, 7808, 7809, 7810, 7811, 7812, 7813, 7922, 7923, 8208, 8209, 8211, 8212, 8213, 8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8224, 8225, 8226, 8230, 8240, 8242, 8243, 8249, 8250, 8252, 8254, 8260, 8319, 8355, 8356, 8359, 8364, 8453, 8467, 8470, 8482, 8486, 8494, 8539, 8540, 8541, 8542, 8592, 8593, 8594, 8595, 8596, 8597, 8616, 8706, 8710, 8719, 8721, 8722, 8730, 8734, 8735, 8745, 8747, 8776, 8800, 8801, 8804, 8805, 8962, 8976, 8992, 8993, 9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508, 9516, 9524, 9532, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567, 9568, 9569, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578, 9579, 9580, 9600, 9604, 9608, 9612, 9616, 9617, 9618, 9619, 9632, 9633, 9642, 9643, 9644, 9650, 9658, 9660, 9668, 9674, 9675, 9679, 9688, 9689, 9702, 9786, 9787, 9788, 9792, 9794, 9824, 9827, 9829, 9830, 9834, 9835, 9836, 61441, 61442, 61445, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], fg = [1.36898, 1, 1, 0.72706, 0.80479, 0.83734, 0.98894, 0.99793, 0.9897, 0.93884, 0.86209, 0.94292, 0.94292, 1.16661, 1.02058, 0.93582, 0.96694, 0.93582, 1.19137, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.78076, 0.78076, 1.02058, 1.02058, 1.02058, 0.72851, 0.78966, 0.90838, 0.83637, 0.82391, 0.96376, 0.80061, 0.86275, 0.8768, 0.95407, 1.0258, 0.73901, 0.85022, 0.83655, 1.0156, 0.95546, 0.92179, 0.87107, 0.92179, 0.82114, 0.8096, 0.89713, 0.94438, 0.95353, 0.94083, 0.91905, 0.90406, 0.9446, 0.94292, 1.18777, 0.94292, 1.02058, 0.89903, 0.90088, 0.94938, 0.97898, 0.81093, 0.97571, 0.94938, 1.024, 0.9577, 0.95933, 0.98621, 1.0474, 0.97455, 0.98981, 0.9672, 0.95933, 0.9446, 0.97898, 0.97407, 0.97646, 0.78036, 1.10208, 0.95442, 0.95298, 0.97579, 0.9332, 0.94039, 0.938, 0.80687, 1.01149, 0.80687, 1.02058, 0.80479, 0.99793, 0.99793, 0.99793, 0.99793, 1.01149, 1.00872, 0.90088, 0.91882, 1.0213, 0.8361, 1.02058, 0.62295, 0.54324, 0.89022, 1.08595, 1, 1, 0.90088, 1, 0.97455, 0.93582, 0.90088, 1, 1.05686, 0.8361, 0.99642, 0.99642, 0.99642, 0.72851, 0.90838, 0.90838, 0.90838, 0.90838, 0.90838, 0.90838, 0.868, 0.82391, 0.80061, 0.80061, 0.80061, 0.80061, 1.0258, 1.0258, 1.0258, 1.0258, 0.97484, 0.95546, 0.92179, 0.92179, 0.92179, 0.92179, 0.92179, 1.02058, 0.92179, 0.94438, 0.94438, 0.94438, 0.94438, 0.90406, 0.86958, 0.98225, 0.94938, 0.94938, 0.94938, 0.94938, 0.94938, 0.94938, 0.9031, 0.81093, 0.94938, 0.94938, 0.94938, 0.94938, 0.98621, 0.98621, 0.98621, 0.98621, 0.93969, 0.95933, 0.9446, 0.9446, 0.9446, 0.9446, 0.9446, 1.08595, 0.9446, 0.95442, 0.95442, 0.95442, 0.95442, 0.94039, 0.97898, 0.94039, 0.90838, 0.94938, 0.90838, 0.94938, 0.90838, 0.94938, 0.82391, 0.81093, 0.82391, 0.81093, 0.82391, 0.81093, 0.82391, 0.81093, 0.96376, 0.84313, 0.97484, 0.97571, 0.80061, 0.94938, 0.80061, 0.94938, 0.80061, 0.94938, 0.80061, 0.94938, 0.80061, 0.94938, 0.8768, 0.9577, 0.8768, 0.9577, 0.8768, 0.9577, 1, 1, 0.95407, 0.95933, 0.97069, 0.95933, 1.0258, 0.98621, 1.0258, 0.98621, 1.0258, 0.98621, 1.0258, 0.98621, 1.0258, 0.98621, 0.887, 1.01591, 0.73901, 1.0474, 1, 1, 0.97455, 0.83655, 0.98981, 1, 1, 0.83655, 0.73977, 0.83655, 0.73903, 0.84638, 1.033, 0.95546, 0.95933, 1, 1, 0.95546, 0.95933, 0.8271, 0.95417, 0.95933, 0.92179, 0.9446, 0.92179, 0.9446, 0.92179, 0.9446, 0.936, 0.91964, 0.82114, 0.97646, 1, 1, 0.82114, 0.97646, 0.8096, 0.78036, 0.8096, 0.78036, 1, 1, 0.8096, 0.78036, 1, 1, 0.89713, 0.77452, 0.89713, 1.10208, 0.94438, 0.95442, 0.94438, 0.95442, 0.94438, 0.95442, 0.94438, 0.95442, 0.94438, 0.95442, 0.94438, 0.95442, 0.94083, 0.97579, 0.90406, 0.94039, 0.90406, 0.9446, 0.938, 0.9446, 0.938, 0.9446, 0.938, 1, 0.99793, 0.90838, 0.94938, 0.868, 0.9031, 0.92179, 0.9446, 1, 1, 0.89713, 1.10208, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90989, 0.9358, 0.91945, 0.83181, 0.75261, 0.87992, 0.82976, 0.96034, 0.83689, 0.97268, 1.0078, 0.90838, 0.83637, 0.8019, 0.90157, 0.80061, 0.9446, 0.95407, 0.92436, 1.0258, 0.85022, 0.97153, 1.0156, 0.95546, 0.89192, 0.92179, 0.92361, 0.87107, 0.96318, 0.89713, 0.93704, 0.95638, 0.91905, 0.91709, 0.92796, 1.0258, 0.93704, 0.94836, 1.0373, 0.95933, 1.0078, 0.95871, 0.94836, 0.96174, 0.92601, 0.9498, 0.98607, 0.95776, 0.95933, 1.05453, 1.0078, 0.98275, 0.9314, 0.95617, 0.91701, 1.05993, 0.9446, 0.78367, 0.9553, 1, 0.86832, 1.0128, 0.95871, 0.99394, 0.87548, 0.96361, 0.86774, 1.0078, 0.95871, 0.9446, 0.95871, 0.86774, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.94083, 0.97579, 0.94083, 0.97579, 0.94083, 0.97579, 0.90406, 0.94039, 0.96694, 1, 0.89903, 1, 1, 1, 0.93582, 0.93582, 0.93582, 1, 0.908, 0.908, 0.918, 0.94219, 0.94219, 0.96544, 1, 1.285, 1, 1, 0.81079, 0.81079, 1, 1, 0.74854, 1, 1, 1, 1, 0.99793, 1, 1, 1, 0.65, 1, 1.36145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.17173, 1, 0.80535, 0.76169, 1.02058, 1.0732, 1.05486, 1, 1, 1.30692, 1.08595, 1.08595, 1, 1.08595, 1.08595, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.16161, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ug = {
  lineHeight: 1.2,
  lineGap: 0.2
}, dg = [1.36898, 1, 1, 0.66227, 0.80779, 0.81625, 0.97276, 0.97276, 0.97733, 0.92222, 0.83266, 0.94292, 0.94292, 1.16148, 1.02058, 0.93582, 0.96694, 0.93582, 1.17337, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.78076, 0.78076, 1.02058, 1.02058, 1.02058, 0.71541, 0.76813, 0.85576, 0.80591, 0.80729, 0.94299, 0.77512, 0.83655, 0.86523, 0.92222, 0.98621, 0.71743, 0.81698, 0.79726, 0.98558, 0.92222, 0.90637, 0.83809, 0.90637, 0.80729, 0.76463, 0.86275, 0.90699, 0.91605, 0.9154, 0.85308, 0.85458, 0.90531, 0.94292, 1.21296, 0.94292, 1.02058, 0.89903, 1.18616, 0.99613, 0.91677, 0.78216, 0.91677, 0.90083, 0.98796, 0.9135, 0.92168, 0.95381, 0.98981, 0.95298, 0.95381, 0.93459, 0.92168, 0.91513, 0.92004, 0.91677, 0.95077, 0.748, 1.04502, 0.91677, 0.92061, 0.94236, 0.89544, 0.89364, 0.9, 0.80687, 0.8578, 0.80687, 1.02058, 0.80779, 0.97276, 0.97276, 0.97276, 0.97276, 0.8578, 0.99973, 1.18616, 0.91339, 1.08074, 0.82891, 1.02058, 0.55509, 0.71526, 0.89022, 1.08595, 1, 1, 1.18616, 1, 0.96736, 0.93582, 1.18616, 1, 1.04864, 0.82711, 0.99043, 0.99043, 0.99043, 0.71541, 0.85576, 0.85576, 0.85576, 0.85576, 0.85576, 0.85576, 0.845, 0.80729, 0.77512, 0.77512, 0.77512, 0.77512, 0.98621, 0.98621, 0.98621, 0.98621, 0.95961, 0.92222, 0.90637, 0.90637, 0.90637, 0.90637, 0.90637, 1.02058, 0.90251, 0.90699, 0.90699, 0.90699, 0.90699, 0.85458, 0.83659, 0.94951, 0.99613, 0.99613, 0.99613, 0.99613, 0.99613, 0.99613, 0.85811, 0.78216, 0.90083, 0.90083, 0.90083, 0.90083, 0.95381, 0.95381, 0.95381, 0.95381, 0.9135, 0.92168, 0.91513, 0.91513, 0.91513, 0.91513, 0.91513, 1.08595, 0.91677, 0.91677, 0.91677, 0.91677, 0.91677, 0.89364, 0.92332, 0.89364, 0.85576, 0.99613, 0.85576, 0.99613, 0.85576, 0.99613, 0.80729, 0.78216, 0.80729, 0.78216, 0.80729, 0.78216, 0.80729, 0.78216, 0.94299, 0.76783, 0.95961, 0.91677, 0.77512, 0.90083, 0.77512, 0.90083, 0.77512, 0.90083, 0.77512, 0.90083, 0.77512, 0.90083, 0.86523, 0.9135, 0.86523, 0.9135, 0.86523, 0.9135, 1, 1, 0.92222, 0.92168, 0.92222, 0.92168, 0.98621, 0.95381, 0.98621, 0.95381, 0.98621, 0.95381, 0.98621, 0.95381, 0.98621, 0.95381, 0.86036, 0.97096, 0.71743, 0.98981, 1, 1, 0.95298, 0.79726, 0.95381, 1, 1, 0.79726, 0.6894, 0.79726, 0.74321, 0.81691, 1.0006, 0.92222, 0.92168, 1, 1, 0.92222, 0.92168, 0.79464, 0.92098, 0.92168, 0.90637, 0.91513, 0.90637, 0.91513, 0.90637, 0.91513, 0.909, 0.87514, 0.80729, 0.95077, 1, 1, 0.80729, 0.95077, 0.76463, 0.748, 0.76463, 0.748, 1, 1, 0.76463, 0.748, 1, 1, 0.86275, 0.72651, 0.86275, 1.04502, 0.90699, 0.91677, 0.90699, 0.91677, 0.90699, 0.91677, 0.90699, 0.91677, 0.90699, 0.91677, 0.90699, 0.91677, 0.9154, 0.94236, 0.85458, 0.89364, 0.85458, 0.90531, 0.9, 0.90531, 0.9, 0.90531, 0.9, 1, 0.97276, 0.85576, 0.99613, 0.845, 0.85811, 0.90251, 0.91677, 1, 1, 0.86275, 1.04502, 1.18616, 1.18616, 1.18616, 1.18616, 1.18616, 1.18616, 1.18616, 1.18616, 1.18616, 1.00899, 1.30628, 0.85576, 0.80178, 0.66862, 0.7927, 0.69323, 0.88127, 0.72459, 0.89711, 0.95381, 0.85576, 0.80591, 0.7805, 0.94729, 0.77512, 0.90531, 0.92222, 0.90637, 0.98621, 0.81698, 0.92655, 0.98558, 0.92222, 0.85359, 0.90637, 0.90976, 0.83809, 0.94523, 0.86275, 0.83509, 0.93157, 0.85308, 0.83392, 0.92346, 0.98621, 0.83509, 0.92886, 0.91324, 0.92168, 0.95381, 0.90646, 0.92886, 0.90557, 0.86847, 0.90276, 0.91324, 0.86842, 0.92168, 0.99531, 0.95381, 0.9224, 0.85408, 0.92699, 0.86847, 1.0051, 0.91513, 0.80487, 0.93481, 1, 0.88159, 1.05214, 0.90646, 0.97355, 0.81539, 0.89398, 0.85923, 0.95381, 0.90646, 0.91513, 0.90646, 0.85923, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.9154, 0.94236, 0.9154, 0.94236, 0.9154, 0.94236, 0.85458, 0.89364, 0.96694, 1, 0.89903, 1, 1, 1, 0.91782, 0.91782, 0.91782, 1, 0.896, 0.896, 0.896, 0.9332, 0.9332, 0.95973, 1, 1.26, 1, 1, 0.80479, 0.80178, 1, 1, 0.85633, 1, 1, 1, 1, 0.97276, 1, 1, 1, 0.698, 1, 1.36145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.14542, 1, 0.79199, 0.78694, 1.02058, 1.03493, 1.05486, 1, 1, 1.23026, 1.08595, 1.08595, 1, 1.08595, 1.08595, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.20006, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], xg = {
  lineHeight: 1.2,
  lineGap: 0.2
}, gg = [1.36898, 1, 1, 0.65507, 0.84943, 0.85639, 0.88465, 0.88465, 0.86936, 0.88307, 0.86948, 0.85283, 0.85283, 1.06383, 1.02058, 0.75945, 0.9219, 0.75945, 1.17337, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.75945, 0.75945, 1.02058, 1.02058, 1.02058, 0.69046, 0.70926, 0.85158, 0.77812, 0.76852, 0.89591, 0.70466, 0.76125, 0.80094, 0.86822, 0.83864, 0.728, 0.77212, 0.79475, 0.93637, 0.87514, 0.8588, 0.76013, 0.8588, 0.72421, 0.69866, 0.77598, 0.85991, 0.80811, 0.87832, 0.78112, 0.77512, 0.8562, 1.0222, 1.18417, 1.0222, 1.27014, 0.89903, 1.15012, 0.93859, 0.94399, 0.846, 0.94399, 0.81453, 1.0186, 0.94219, 0.96017, 1.03075, 1.02175, 0.912, 1.03075, 0.96998, 0.96017, 0.93859, 0.94399, 0.94399, 0.95493, 0.746, 1.12658, 0.94578, 0.91, 0.979, 0.882, 0.882, 0.83, 0.85034, 0.83537, 0.85034, 1.02058, 0.70869, 0.88465, 0.88465, 0.88465, 0.88465, 0.83537, 0.90083, 1.15012, 0.9161, 0.94565, 0.73541, 1.02058, 0.53609, 0.69353, 0.79519, 1.08595, 1, 1, 1.15012, 1, 0.91974, 0.75945, 1.15012, 1, 0.9446, 0.73361, 0.9005, 0.9005, 0.9005, 0.62864, 0.85158, 0.85158, 0.85158, 0.85158, 0.85158, 0.85158, 0.773, 0.76852, 0.70466, 0.70466, 0.70466, 0.70466, 0.83864, 0.83864, 0.83864, 0.83864, 0.90561, 0.87514, 0.8588, 0.8588, 0.8588, 0.8588, 0.8588, 1.02058, 0.85751, 0.85991, 0.85991, 0.85991, 0.85991, 0.77512, 0.76013, 0.88075, 0.93859, 0.93859, 0.93859, 0.93859, 0.93859, 0.93859, 0.8075, 0.846, 0.81453, 0.81453, 0.81453, 0.81453, 0.82424, 0.82424, 0.82424, 0.82424, 0.9278, 0.96017, 0.93859, 0.93859, 0.93859, 0.93859, 0.93859, 1.08595, 0.8562, 0.94578, 0.94578, 0.94578, 0.94578, 0.882, 0.94578, 0.882, 0.85158, 0.93859, 0.85158, 0.93859, 0.85158, 0.93859, 0.76852, 0.846, 0.76852, 0.846, 0.76852, 0.846, 0.76852, 0.846, 0.89591, 0.8544, 0.90561, 0.94399, 0.70466, 0.81453, 0.70466, 0.81453, 0.70466, 0.81453, 0.70466, 0.81453, 0.70466, 0.81453, 0.80094, 0.94219, 0.80094, 0.94219, 0.80094, 0.94219, 1, 1, 0.86822, 0.96017, 0.86822, 0.96017, 0.83864, 0.82424, 0.83864, 0.82424, 0.83864, 0.82424, 0.83864, 1.03075, 0.83864, 0.82424, 0.81402, 1.02738, 0.728, 1.02175, 1, 1, 0.912, 0.79475, 1.03075, 1, 1, 0.79475, 0.83911, 0.79475, 0.66266, 0.80553, 1.06676, 0.87514, 0.96017, 1, 1, 0.87514, 0.96017, 0.86865, 0.87396, 0.96017, 0.8588, 0.93859, 0.8588, 0.93859, 0.8588, 0.93859, 0.867, 0.84759, 0.72421, 0.95493, 1, 1, 0.72421, 0.95493, 0.69866, 0.746, 0.69866, 0.746, 1, 1, 0.69866, 0.746, 1, 1, 0.77598, 0.88417, 0.77598, 1.12658, 0.85991, 0.94578, 0.85991, 0.94578, 0.85991, 0.94578, 0.85991, 0.94578, 0.85991, 0.94578, 0.85991, 0.94578, 0.87832, 0.979, 0.77512, 0.882, 0.77512, 0.8562, 0.83, 0.8562, 0.83, 0.8562, 0.83, 1, 0.88465, 0.85158, 0.93859, 0.773, 0.8075, 0.85751, 0.8562, 1, 1, 0.77598, 1.12658, 1.15012, 1.15012, 1.15012, 1.15012, 1.15012, 1.15313, 1.15012, 1.15012, 1.15012, 1.08106, 1.03901, 0.85158, 0.77025, 0.62264, 0.7646, 0.65351, 0.86026, 0.69461, 0.89947, 1.03075, 0.85158, 0.77812, 0.76449, 0.88836, 0.70466, 0.8562, 0.86822, 0.8588, 0.83864, 0.77212, 0.85308, 0.93637, 0.87514, 0.82352, 0.8588, 0.85701, 0.76013, 0.89058, 0.77598, 0.8156, 0.82565, 0.78112, 0.77899, 0.89386, 0.83864, 0.8156, 0.9486, 0.92388, 0.96186, 1.03075, 0.91123, 0.9486, 0.93298, 0.878, 0.93942, 0.92388, 0.84596, 0.96186, 0.95119, 1.03075, 0.922, 0.88787, 0.95829, 0.88, 0.93559, 0.93859, 0.78815, 0.93758, 1, 0.89217, 1.03737, 0.91123, 0.93969, 0.77487, 0.85769, 0.86799, 1.03075, 0.91123, 0.93859, 0.91123, 0.86799, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.87832, 0.979, 0.87832, 0.979, 0.87832, 0.979, 0.77512, 0.882, 0.9219, 1, 0.89903, 1, 1, 1, 0.87321, 0.87321, 0.87321, 1, 1.027, 1.027, 1.027, 0.86847, 0.86847, 0.79121, 1, 1.124, 1, 1, 0.73572, 0.73572, 1, 1, 0.85034, 1, 1, 1, 1, 0.88465, 1, 1, 1, 0.669, 1, 1.36145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.04828, 1, 0.74948, 0.75187, 1.02058, 0.98391, 1.02119, 1, 1, 1.06233, 1.08595, 1.08595, 1, 1.08595, 1.08595, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.05233, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], pg = {
  lineHeight: 1.2,
  lineGap: 0.2
}, mg = [1.36898, 1, 1, 0.76305, 0.82784, 0.94935, 0.89364, 0.92241, 0.89073, 0.90706, 0.98472, 0.85283, 0.85283, 1.0664, 1.02058, 0.74505, 0.9219, 0.74505, 1.23456, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.74505, 0.74505, 1.02058, 1.02058, 1.02058, 0.73002, 0.72601, 0.91755, 0.8126, 0.80314, 0.92222, 0.73764, 0.79726, 0.83051, 0.90284, 0.86023, 0.74, 0.8126, 0.84869, 0.96518, 0.91115, 0.8858, 0.79761, 0.8858, 0.74498, 0.73914, 0.81363, 0.89591, 0.83659, 0.89633, 0.85608, 0.8111, 0.90531, 1.0222, 1.22736, 1.0222, 1.27014, 0.89903, 0.90088, 0.86667, 1.0231, 0.896, 1.01411, 0.90083, 1.05099, 1.00512, 0.99793, 1.05326, 1.09377, 0.938, 1.06226, 1.00119, 0.99793, 0.98714, 1.0231, 1.01231, 0.98196, 0.792, 1.19137, 0.99074, 0.962, 1.01915, 0.926, 0.942, 0.856, 0.85034, 0.92006, 0.85034, 1.02058, 0.69067, 0.92241, 0.92241, 0.92241, 0.92241, 0.92006, 0.9332, 0.90088, 0.91882, 0.93484, 0.75339, 1.02058, 0.56866, 0.54324, 0.79519, 1.08595, 1, 1, 0.90088, 1, 0.95325, 0.74505, 0.90088, 1, 0.97198, 0.75339, 0.91009, 0.91009, 0.91009, 0.66466, 0.91755, 0.91755, 0.91755, 0.91755, 0.91755, 0.91755, 0.788, 0.80314, 0.73764, 0.73764, 0.73764, 0.73764, 0.86023, 0.86023, 0.86023, 0.86023, 0.92915, 0.91115, 0.8858, 0.8858, 0.8858, 0.8858, 0.8858, 1.02058, 0.8858, 0.89591, 0.89591, 0.89591, 0.89591, 0.8111, 0.79611, 0.89713, 0.86667, 0.86667, 0.86667, 0.86667, 0.86667, 0.86667, 0.86936, 0.896, 0.90083, 0.90083, 0.90083, 0.90083, 0.84224, 0.84224, 0.84224, 0.84224, 0.97276, 0.99793, 0.98714, 0.98714, 0.98714, 0.98714, 0.98714, 1.08595, 0.89876, 0.99074, 0.99074, 0.99074, 0.99074, 0.942, 1.0231, 0.942, 0.91755, 0.86667, 0.91755, 0.86667, 0.91755, 0.86667, 0.80314, 0.896, 0.80314, 0.896, 0.80314, 0.896, 0.80314, 0.896, 0.92222, 0.93372, 0.92915, 1.01411, 0.73764, 0.90083, 0.73764, 0.90083, 0.73764, 0.90083, 0.73764, 0.90083, 0.73764, 0.90083, 0.83051, 1.00512, 0.83051, 1.00512, 0.83051, 1.00512, 1, 1, 0.90284, 0.99793, 0.90976, 0.99793, 0.86023, 0.84224, 0.86023, 0.84224, 0.86023, 0.84224, 0.86023, 1.05326, 0.86023, 0.84224, 0.82873, 1.07469, 0.74, 1.09377, 1, 1, 0.938, 0.84869, 1.06226, 1, 1, 0.84869, 0.83704, 0.84869, 0.81441, 0.85588, 1.08927, 0.91115, 0.99793, 1, 1, 0.91115, 0.99793, 0.91887, 0.90991, 0.99793, 0.8858, 0.98714, 0.8858, 0.98714, 0.8858, 0.98714, 0.894, 0.91434, 0.74498, 0.98196, 1, 1, 0.74498, 0.98196, 0.73914, 0.792, 0.73914, 0.792, 1, 1, 0.73914, 0.792, 1, 1, 0.81363, 0.904, 0.81363, 1.19137, 0.89591, 0.99074, 0.89591, 0.99074, 0.89591, 0.99074, 0.89591, 0.99074, 0.89591, 0.99074, 0.89591, 0.99074, 0.89633, 1.01915, 0.8111, 0.942, 0.8111, 0.90531, 0.856, 0.90531, 0.856, 0.90531, 0.856, 1, 0.92241, 0.91755, 0.86667, 0.788, 0.86936, 0.8858, 0.89876, 1, 1, 0.81363, 1.19137, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90388, 1.03901, 0.92138, 0.78105, 0.7154, 0.86169, 0.80513, 0.94007, 0.82528, 0.98612, 1.06226, 0.91755, 0.8126, 0.81884, 0.92819, 0.73764, 0.90531, 0.90284, 0.8858, 0.86023, 0.8126, 0.91172, 0.96518, 0.91115, 0.83089, 0.8858, 0.87791, 0.79761, 0.89297, 0.81363, 0.88157, 0.89992, 0.85608, 0.81992, 0.94307, 0.86023, 0.88157, 0.95308, 0.98699, 0.99793, 1.06226, 0.95817, 0.95308, 0.97358, 0.928, 0.98088, 0.98699, 0.92761, 0.99793, 0.96017, 1.06226, 0.986, 0.944, 0.95978, 0.938, 0.96705, 0.98714, 0.80442, 0.98972, 1, 0.89762, 1.04552, 0.95817, 0.99007, 0.87064, 0.91879, 0.88888, 1.06226, 0.95817, 0.98714, 0.95817, 0.88888, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.89633, 1.01915, 0.89633, 1.01915, 0.89633, 1.01915, 0.8111, 0.942, 0.9219, 1, 0.89903, 1, 1, 1, 0.93173, 0.93173, 0.93173, 1, 1.06304, 1.06304, 1.06904, 0.89903, 0.89903, 0.80549, 1, 1.156, 1, 1, 0.76575, 0.76575, 1, 1, 0.72458, 1, 1, 1, 1, 0.92241, 1, 1, 1, 0.619, 1, 1.36145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.07257, 1, 0.74705, 0.71119, 1.02058, 1.024, 1.02119, 1, 1, 1.1536, 1.08595, 1.08595, 1, 1.08595, 1.08595, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.05638, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], bg = {
  lineHeight: 1.2,
  lineGap: 0.2
}, wg = [1.76738, 1, 1, 0.99297, 0.9824, 1.04016, 1.06497, 1.03424, 0.97529, 1.17647, 1.23203, 1.1085, 1.1085, 1.16939, 1.2107, 0.9754, 1.21408, 0.9754, 1.59578, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 0.81378, 0.81378, 1.2107, 1.2107, 1.2107, 0.71703, 0.97847, 0.97363, 0.88776, 0.8641, 1.02096, 0.79795, 0.85132, 0.914, 1.06085, 1.1406, 0.8007, 0.89858, 0.83693, 1.14889, 1.09398, 0.97489, 0.92094, 0.97489, 0.90399, 0.84041, 0.95923, 1.00135, 1, 1.06467, 0.98243, 0.90996, 0.99361, 1.1085, 1.56942, 1.1085, 1.2107, 0.74627, 0.94282, 0.96752, 1.01519, 0.86304, 1.01359, 0.97278, 1.15103, 1.01359, 0.98561, 1.02285, 1.02285, 1.00527, 1.02285, 1.0302, 0.99041, 1.0008, 1.01519, 1.01359, 1.02258, 0.79104, 1.16862, 0.99041, 0.97454, 1.02511, 0.99298, 0.96752, 0.95801, 0.94856, 1.16579, 0.94856, 1.2107, 0.9824, 1.03424, 1.03424, 1, 1.03424, 1.16579, 0.8727, 1.3871, 1.18622, 1.10818, 1.04478, 1.2107, 1.18622, 0.75155, 0.94994, 1.28826, 1.21408, 1.21408, 0.91056, 1, 0.91572, 0.9754, 0.64663, 1.18328, 1.24866, 1.04478, 1.14169, 1.15749, 1.17389, 0.71703, 0.97363, 0.97363, 0.97363, 0.97363, 0.97363, 0.97363, 0.93506, 0.8641, 0.79795, 0.79795, 0.79795, 0.79795, 1.1406, 1.1406, 1.1406, 1.1406, 1.02096, 1.09398, 0.97426, 0.97426, 0.97426, 0.97426, 0.97426, 1.2107, 0.97489, 1.00135, 1.00135, 1.00135, 1.00135, 0.90996, 0.92094, 1.02798, 0.96752, 0.96752, 0.96752, 0.96752, 0.96752, 0.96752, 0.93136, 0.86304, 0.97278, 0.97278, 0.97278, 0.97278, 1.02285, 1.02285, 1.02285, 1.02285, 0.97122, 0.99041, 1, 1, 1, 1, 1, 1.28826, 1.0008, 0.99041, 0.99041, 0.99041, 0.99041, 0.96752, 1.01519, 0.96752, 0.97363, 0.96752, 0.97363, 0.96752, 0.97363, 0.96752, 0.8641, 0.86304, 0.8641, 0.86304, 0.8641, 0.86304, 0.8641, 0.86304, 1.02096, 1.03057, 1.02096, 1.03517, 0.79795, 0.97278, 0.79795, 0.97278, 0.79795, 0.97278, 0.79795, 0.97278, 0.79795, 0.97278, 0.914, 1.01359, 0.914, 1.01359, 0.914, 1.01359, 1, 1, 1.06085, 0.98561, 1.06085, 1.00879, 1.1406, 1.02285, 1.1406, 1.02285, 1.1406, 1.02285, 1.1406, 1.02285, 1.1406, 1.02285, 0.97138, 1.08692, 0.8007, 1.02285, 1, 1, 1.00527, 0.83693, 1.02285, 1, 1, 0.83693, 0.9455, 0.83693, 0.90418, 0.83693, 1.13005, 1.09398, 0.99041, 1, 1, 1.09398, 0.99041, 0.96692, 1.09251, 0.99041, 0.97489, 1.0008, 0.97489, 1.0008, 0.97489, 1.0008, 0.93994, 0.97931, 0.90399, 1.02258, 1, 1, 0.90399, 1.02258, 0.84041, 0.79104, 0.84041, 0.79104, 0.84041, 0.79104, 0.84041, 0.79104, 1, 1, 0.95923, 1.07034, 0.95923, 1.16862, 1.00135, 0.99041, 1.00135, 0.99041, 1.00135, 0.99041, 1.00135, 0.99041, 1.00135, 0.99041, 1.00135, 0.99041, 1.06467, 1.02511, 0.90996, 0.96752, 0.90996, 0.99361, 0.95801, 0.99361, 0.95801, 0.99361, 0.95801, 1.07733, 1.03424, 0.97363, 0.96752, 0.93506, 0.93136, 0.97489, 1.0008, 1, 1, 0.95923, 1.16862, 1.15103, 1.15103, 1.01173, 1.03959, 0.75953, 0.81378, 0.79912, 1.15103, 1.21994, 0.95161, 0.87815, 1.01149, 0.81525, 0.7676, 0.98167, 1.01134, 1.02546, 0.84097, 1.03089, 1.18102, 0.97363, 0.88776, 0.85134, 0.97826, 0.79795, 0.99361, 1.06085, 0.97489, 1.1406, 0.89858, 1.0388, 1.14889, 1.09398, 0.86039, 0.97489, 1.0595, 0.92094, 0.94793, 0.95923, 0.90996, 0.99346, 0.98243, 1.02112, 0.95493, 1.1406, 0.90996, 1.03574, 1.02597, 1.0008, 1.18102, 1.06628, 1.03574, 1.0192, 1.01932, 1.00886, 0.97531, 1.0106, 1.0008, 1.13189, 1.18102, 1.02277, 0.98683, 1.0016, 0.99561, 1.07237, 1.0008, 0.90434, 0.99921, 0.93803, 0.8965, 1.23085, 1.06628, 1.04983, 0.96268, 1.0499, 0.98439, 1.18102, 1.06628, 1.0008, 1.06628, 0.98439, 0.79795, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.09466, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.97278, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.02065, 1, 1, 1, 1, 1, 1, 1.06467, 1.02511, 1.06467, 1.02511, 1.06467, 1.02511, 0.90996, 0.96752, 1, 1.21408, 0.89903, 1, 1, 0.75155, 1.04394, 1.04394, 1.04394, 1.04394, 0.98633, 0.98633, 0.98633, 0.73047, 0.73047, 1.20642, 0.91211, 1.25635, 1.222, 1.02956, 1.03372, 1.03372, 0.96039, 1.24633, 1, 1.12454, 0.93503, 1.03424, 1.19687, 1.03424, 1, 1, 1, 0.771, 1, 1, 1.15749, 1.15749, 1.15749, 1.10948, 0.86279, 0.94434, 0.86279, 0.94434, 0.86182, 1, 1, 1.16897, 1, 0.96085, 0.90137, 1.2107, 1.18416, 1.13973, 0.69825, 0.9716, 2.10339, 1.29004, 1.29004, 1.21172, 1.29004, 1.29004, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.42603, 1, 0.99862, 0.99862, 1, 0.87025, 0.87025, 0.87025, 0.87025, 1.18874, 1.42603, 1, 1.42603, 1.42603, 0.99862, 1, 1, 1, 1, 1, 1.2886, 1.04315, 1.15296, 1.34163, 1, 1, 1, 1.09193, 1.09193, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], yg = {
  lineHeight: 1.33008,
  lineGap: 0
}, kg = [1.76738, 1, 1, 0.98946, 1.03959, 1.04016, 1.02809, 1.036, 0.97639, 1.10953, 1.23203, 1.11144, 1.11144, 1.16939, 1.21237, 0.9754, 1.21261, 0.9754, 1.59754, 1.036, 1.036, 1.036, 1.036, 1.036, 1.036, 1.036, 1.036, 1.036, 1.036, 0.81378, 0.81378, 1.21237, 1.21237, 1.21237, 0.73541, 0.97847, 0.97363, 0.89723, 0.87897, 1.0426, 0.79429, 0.85292, 0.91149, 1.05815, 1.1406, 0.79631, 0.90128, 0.83853, 1.04396, 1.10615, 0.97552, 0.94436, 0.97552, 0.88641, 0.80527, 0.96083, 1.00135, 1, 1.06777, 0.9817, 0.91142, 0.99361, 1.11144, 1.57293, 1.11144, 1.21237, 0.74627, 1.31818, 1.06585, 0.97042, 0.83055, 0.97042, 0.93503, 1.1261, 0.97042, 0.97922, 1.14236, 0.94552, 1.01054, 1.14236, 1.02471, 0.97922, 0.94165, 0.97042, 0.97042, 1.0276, 0.78929, 1.1261, 0.97922, 0.95874, 1.02197, 0.98507, 0.96752, 0.97168, 0.95107, 1.16579, 0.95107, 1.21237, 1.03959, 1.036, 1.036, 1, 1.036, 1.16579, 0.87357, 1.31818, 1.18754, 1.26781, 1.05356, 1.21237, 1.18622, 0.79487, 0.94994, 1.29004, 1.24047, 1.24047, 1.31818, 1, 0.91484, 0.9754, 1.31818, 1.1349, 1.24866, 1.05356, 1.13934, 1.15574, 1.17389, 0.73541, 0.97363, 0.97363, 0.97363, 0.97363, 0.97363, 0.97363, 0.94385, 0.87897, 0.79429, 0.79429, 0.79429, 0.79429, 1.1406, 1.1406, 1.1406, 1.1406, 1.0426, 1.10615, 0.97552, 0.97552, 0.97552, 0.97552, 0.97552, 1.21237, 0.97552, 1.00135, 1.00135, 1.00135, 1.00135, 0.91142, 0.94436, 0.98721, 1.06585, 1.06585, 1.06585, 1.06585, 1.06585, 1.06585, 0.96705, 0.83055, 0.93503, 0.93503, 0.93503, 0.93503, 1.14236, 1.14236, 1.14236, 1.14236, 0.93125, 0.97922, 0.94165, 0.94165, 0.94165, 0.94165, 0.94165, 1.29004, 0.94165, 0.97922, 0.97922, 0.97922, 0.97922, 0.96752, 0.97042, 0.96752, 0.97363, 1.06585, 0.97363, 1.06585, 0.97363, 1.06585, 0.87897, 0.83055, 0.87897, 0.83055, 0.87897, 0.83055, 0.87897, 0.83055, 1.0426, 1.0033, 1.0426, 0.97042, 0.79429, 0.93503, 0.79429, 0.93503, 0.79429, 0.93503, 0.79429, 0.93503, 0.79429, 0.93503, 0.91149, 0.97042, 0.91149, 0.97042, 0.91149, 0.97042, 1, 1, 1.05815, 0.97922, 1.05815, 0.97922, 1.1406, 1.14236, 1.1406, 1.14236, 1.1406, 1.14236, 1.1406, 1.14236, 1.1406, 1.14236, 0.97441, 1.04302, 0.79631, 1.01582, 1, 1, 1.01054, 0.83853, 1.14236, 1, 1, 0.83853, 1.09125, 0.83853, 0.90418, 0.83853, 1.19508, 1.10615, 0.97922, 1, 1, 1.10615, 0.97922, 1.01034, 1.10466, 0.97922, 0.97552, 0.94165, 0.97552, 0.94165, 0.97552, 0.94165, 0.91602, 0.91981, 0.88641, 1.0276, 1, 1, 0.88641, 1.0276, 0.80527, 0.78929, 0.80527, 0.78929, 0.80527, 0.78929, 0.80527, 0.78929, 1, 1, 0.96083, 1.05403, 0.95923, 1.16862, 1.00135, 0.97922, 1.00135, 0.97922, 1.00135, 0.97922, 1.00135, 0.97922, 1.00135, 0.97922, 1.00135, 0.97922, 1.06777, 1.02197, 0.91142, 0.96752, 0.91142, 0.99361, 0.97168, 0.99361, 0.97168, 0.99361, 0.97168, 1.23199, 1.036, 0.97363, 1.06585, 0.94385, 0.96705, 0.97552, 0.94165, 1, 1, 0.96083, 1.1261, 1.31818, 1.31818, 1.31818, 1.31818, 1.31818, 1.31818, 1.31818, 1.31818, 1.31818, 0.95161, 1.27126, 1.00811, 0.83284, 0.77702, 0.99137, 0.95253, 1.0347, 0.86142, 1.07205, 1.14236, 0.97363, 0.89723, 0.86869, 1.09818, 0.79429, 0.99361, 1.05815, 0.97552, 1.1406, 0.90128, 1.06662, 1.04396, 1.10615, 0.84918, 0.97552, 1.04694, 0.94436, 0.98015, 0.96083, 0.91142, 1.00356, 0.9817, 1.01945, 0.98999, 1.1406, 0.91142, 1.04961, 0.9898, 1.00639, 1.14236, 1.07514, 1.04961, 0.99607, 1.02897, 1.008, 0.9898, 0.95134, 1.00639, 1.11121, 1.14236, 1.00518, 0.97981, 1.02186, 1, 1.08578, 0.94165, 0.99314, 0.98387, 0.93028, 0.93377, 1.35125, 1.07514, 1.10687, 0.93491, 1.04232, 1.00351, 1.14236, 1.07514, 0.94165, 1.07514, 1.00351, 0.79429, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.09097, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.93503, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.96609, 1, 1, 1, 1, 1, 1, 1.06777, 1.02197, 1.06777, 1.02197, 1.06777, 1.02197, 0.91142, 0.96752, 1, 1.21261, 0.89903, 1, 1, 0.75155, 1.04745, 1.04745, 1.04745, 1.04394, 0.98633, 0.98633, 0.98633, 0.72959, 0.72959, 1.20502, 0.91406, 1.26514, 1.222, 1.02956, 1.03372, 1.03372, 0.96039, 1.24633, 1, 1.09125, 0.93327, 1.03336, 1.16541, 1.036, 1, 1, 1, 0.771, 1, 1, 1.15574, 1.15574, 1.15574, 1.15574, 0.86364, 0.94434, 0.86279, 0.94434, 0.86224, 1, 1, 1.16798, 1, 0.96085, 0.90068, 1.21237, 1.18416, 1.13904, 0.69825, 0.9716, 2.10339, 1.29004, 1.29004, 1.21339, 1.29004, 1.29004, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.42603, 1, 0.99862, 0.99862, 1, 0.87025, 0.87025, 0.87025, 0.87025, 1.18775, 1.42603, 1, 1.42603, 1.42603, 0.99862, 1, 1, 1, 1, 1, 1.2886, 1.04315, 1.15296, 1.34163, 1, 1, 1, 1.13269, 1.13269, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], Sg = {
  lineHeight: 1.33008,
  lineGap: 0
}, Cg = [1.76738, 1, 1, 0.98946, 1.14763, 1.05365, 1.06234, 0.96927, 0.92586, 1.15373, 1.18414, 0.91349, 0.91349, 1.07403, 1.17308, 0.78383, 1.20088, 0.78383, 1.42531, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.78383, 0.78383, 1.17308, 1.17308, 1.17308, 0.77349, 0.94565, 0.94729, 0.85944, 0.88506, 0.9858, 0.74817, 0.80016, 0.88449, 0.98039, 0.95782, 0.69238, 0.89898, 0.83231, 0.98183, 1.03989, 0.96924, 0.86237, 0.96924, 0.80595, 0.74524, 0.86091, 0.95402, 0.94143, 0.98448, 0.8858, 0.83089, 0.93285, 1.0949, 1.39016, 1.0949, 1.45994, 0.74627, 1.04839, 0.97454, 0.97454, 0.87207, 0.97454, 0.87533, 1.06151, 0.97454, 1.00176, 1.16484, 1.08132, 0.98047, 1.16484, 1.02989, 1.01054, 0.96225, 0.97454, 0.97454, 1.06598, 0.79004, 1.16344, 1.00351, 0.94629, 0.9973, 0.91016, 0.96777, 0.9043, 0.91082, 0.92481, 0.91082, 1.17308, 0.95748, 0.96927, 0.96927, 1, 0.96927, 0.92481, 0.80597, 1.04839, 1.23393, 1.1781, 0.9245, 1.17308, 1.20808, 0.63218, 0.94261, 1.24822, 1.09971, 1.09971, 1.04839, 1, 0.85273, 0.78032, 1.04839, 1.09971, 1.22326, 0.9245, 1.09836, 1.13525, 1.15222, 0.70424, 0.94729, 0.94729, 0.94729, 0.94729, 0.94729, 0.94729, 0.85498, 0.88506, 0.74817, 0.74817, 0.74817, 0.74817, 0.95782, 0.95782, 0.95782, 0.95782, 0.9858, 1.03989, 0.96924, 0.96924, 0.96924, 0.96924, 0.96924, 1.17308, 0.96924, 0.95402, 0.95402, 0.95402, 0.95402, 0.83089, 0.86237, 0.88409, 0.97454, 0.97454, 0.97454, 0.97454, 0.97454, 0.97454, 0.92916, 0.87207, 0.87533, 0.87533, 0.87533, 0.87533, 0.93146, 0.93146, 0.93146, 0.93146, 0.93854, 1.01054, 0.96225, 0.96225, 0.96225, 0.96225, 0.96225, 1.24822, 0.8761, 1.00351, 1.00351, 1.00351, 1.00351, 0.96777, 0.97454, 0.96777, 0.94729, 0.97454, 0.94729, 0.97454, 0.94729, 0.97454, 0.88506, 0.87207, 0.88506, 0.87207, 0.88506, 0.87207, 0.88506, 0.87207, 0.9858, 0.95391, 0.9858, 0.97454, 0.74817, 0.87533, 0.74817, 0.87533, 0.74817, 0.87533, 0.74817, 0.87533, 0.74817, 0.87533, 0.88449, 0.97454, 0.88449, 0.97454, 0.88449, 0.97454, 1, 1, 0.98039, 1.00176, 0.98039, 1.00176, 0.95782, 0.93146, 0.95782, 0.93146, 0.95782, 0.93146, 0.95782, 1.16484, 0.95782, 0.93146, 0.84421, 1.12761, 0.69238, 1.08132, 1, 1, 0.98047, 0.83231, 1.16484, 1, 1, 0.84723, 1.04861, 0.84723, 0.78755, 0.83231, 1.23736, 1.03989, 1.01054, 1, 1, 1.03989, 1.01054, 0.9857, 1.03849, 1.01054, 0.96924, 0.96225, 0.96924, 0.96225, 0.96924, 0.96225, 0.92383, 0.90171, 0.80595, 1.06598, 1, 1, 0.80595, 1.06598, 0.74524, 0.79004, 0.74524, 0.79004, 0.74524, 0.79004, 0.74524, 0.79004, 1, 1, 0.86091, 1.02759, 0.85771, 1.16344, 0.95402, 1.00351, 0.95402, 1.00351, 0.95402, 1.00351, 0.95402, 1.00351, 0.95402, 1.00351, 0.95402, 1.00351, 0.98448, 0.9973, 0.83089, 0.96777, 0.83089, 0.93285, 0.9043, 0.93285, 0.9043, 0.93285, 0.9043, 1.31868, 0.96927, 0.94729, 0.97454, 0.85498, 0.92916, 0.96924, 0.8761, 1, 1, 0.86091, 1.16344, 1.04839, 1.04839, 1.04839, 1.04839, 1.04839, 1.04839, 1.04839, 1.04839, 1.04839, 0.81965, 0.81965, 0.94729, 0.78032, 0.71022, 0.90883, 0.84171, 0.99877, 0.77596, 1.05734, 1.2, 0.94729, 0.85944, 0.82791, 0.9607, 0.74817, 0.93285, 0.98039, 0.96924, 0.95782, 0.89898, 0.98316, 0.98183, 1.03989, 0.78614, 0.96924, 0.97642, 0.86237, 0.86075, 0.86091, 0.83089, 0.90082, 0.8858, 0.97296, 1.01284, 0.95782, 0.83089, 1.0976, 1.04, 1.03342, 1.2, 1.0675, 1.0976, 0.98205, 1.03809, 1.05097, 1.04, 0.95364, 1.03342, 1.05401, 1.2, 1.02148, 1.0119, 1.04724, 1.0127, 1.02732, 0.96225, 0.8965, 0.97783, 0.93574, 0.94818, 1.30679, 1.0675, 1.11826, 0.99821, 1.0557, 1.0326, 1.2, 1.0675, 0.96225, 1.0675, 1.0326, 0.74817, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.03754, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.87533, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.98705, 1, 1, 1, 1, 1, 1, 0.98448, 0.9973, 0.98448, 0.9973, 0.98448, 0.9973, 0.83089, 0.96777, 1, 1.20088, 0.89903, 1, 1, 0.75155, 0.94945, 0.94945, 0.94945, 0.94945, 1.12317, 1.12317, 1.12317, 0.67603, 0.67603, 1.15621, 0.73584, 1.21191, 1.22135, 1.06483, 0.94868, 0.94868, 0.95996, 1.24633, 1, 1.07497, 0.87709, 0.96927, 1.01473, 0.96927, 1, 1, 1, 0.77295, 1, 1, 1.09836, 1.09836, 1.09836, 1.01522, 0.86321, 0.94434, 0.8649, 0.94434, 0.86182, 1, 1, 1.083, 1, 0.91578, 0.86438, 1.17308, 1.18416, 1.14589, 0.69825, 0.97622, 1.96791, 1.24822, 1.24822, 1.17308, 1.24822, 1.24822, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.42603, 1, 0.99862, 0.99862, 1, 0.87025, 0.87025, 0.87025, 0.87025, 1.17984, 1.42603, 1, 1.42603, 1.42603, 0.99862, 1, 1, 1, 1, 1, 1.2886, 1.04315, 1.15296, 1.34163, 1, 1, 1, 1.10742, 1.10742, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], Ag = {
  lineHeight: 1.33008,
  lineGap: 0
}, vg = [1.76738, 1, 1, 0.98594, 1.02285, 1.10454, 1.06234, 0.96927, 0.92037, 1.19985, 1.2046, 0.90616, 0.90616, 1.07152, 1.1714, 0.78032, 1.20088, 0.78032, 1.40246, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.78032, 0.78032, 1.1714, 1.1714, 1.1714, 0.80597, 0.94084, 0.96706, 0.85944, 0.85734, 0.97093, 0.75842, 0.79936, 0.88198, 0.9831, 0.95782, 0.71387, 0.86969, 0.84636, 1.07796, 1.03584, 0.96924, 0.83968, 0.96924, 0.82826, 0.79649, 0.85771, 0.95132, 0.93119, 0.98965, 0.88433, 0.8287, 0.93365, 1.08612, 1.3638, 1.08612, 1.45786, 0.74627, 0.80499, 0.91484, 1.05707, 0.92383, 1.05882, 0.9403, 1.12654, 1.05882, 1.01756, 1.09011, 1.09011, 0.99414, 1.09011, 1.034, 1.01756, 1.05356, 1.05707, 1.05882, 1.04399, 0.84863, 1.21968, 1.01756, 0.95801, 1.00068, 0.91797, 0.96777, 0.9043, 0.90351, 0.92105, 0.90351, 1.1714, 0.85337, 0.96927, 0.96927, 0.99912, 0.96927, 0.92105, 0.80597, 1.2434, 1.20808, 1.05937, 0.90957, 1.1714, 1.20808, 0.75155, 0.94261, 1.24644, 1.09971, 1.09971, 0.84751, 1, 0.85273, 0.78032, 0.61584, 1.05425, 1.17914, 0.90957, 1.08665, 1.11593, 1.14169, 0.73381, 0.96706, 0.96706, 0.96706, 0.96706, 0.96706, 0.96706, 0.86035, 0.85734, 0.75842, 0.75842, 0.75842, 0.75842, 0.95782, 0.95782, 0.95782, 0.95782, 0.97093, 1.03584, 0.96924, 0.96924, 0.96924, 0.96924, 0.96924, 1.1714, 0.96924, 0.95132, 0.95132, 0.95132, 0.95132, 0.8287, 0.83968, 0.89049, 0.91484, 0.91484, 0.91484, 0.91484, 0.91484, 0.91484, 0.93575, 0.92383, 0.9403, 0.9403, 0.9403, 0.9403, 0.8717, 0.8717, 0.8717, 0.8717, 1.00527, 1.01756, 1.05356, 1.05356, 1.05356, 1.05356, 1.05356, 1.24644, 0.95923, 1.01756, 1.01756, 1.01756, 1.01756, 0.96777, 1.05707, 0.96777, 0.96706, 0.91484, 0.96706, 0.91484, 0.96706, 0.91484, 0.85734, 0.92383, 0.85734, 0.92383, 0.85734, 0.92383, 0.85734, 0.92383, 0.97093, 1.0969, 0.97093, 1.05882, 0.75842, 0.9403, 0.75842, 0.9403, 0.75842, 0.9403, 0.75842, 0.9403, 0.75842, 0.9403, 0.88198, 1.05882, 0.88198, 1.05882, 0.88198, 1.05882, 1, 1, 0.9831, 1.01756, 0.9831, 1.01756, 0.95782, 0.8717, 0.95782, 0.8717, 0.95782, 0.8717, 0.95782, 1.09011, 0.95782, 0.8717, 0.84784, 1.11551, 0.71387, 1.09011, 1, 1, 0.99414, 0.84636, 1.09011, 1, 1, 0.84636, 1.0536, 0.84636, 0.94298, 0.84636, 1.23297, 1.03584, 1.01756, 1, 1, 1.03584, 1.01756, 1.00323, 1.03444, 1.01756, 0.96924, 1.05356, 0.96924, 1.05356, 0.96924, 1.05356, 0.93066, 0.98293, 0.82826, 1.04399, 1, 1, 0.82826, 1.04399, 0.79649, 0.84863, 0.79649, 0.84863, 0.79649, 0.84863, 0.79649, 0.84863, 1, 1, 0.85771, 1.17318, 0.85771, 1.21968, 0.95132, 1.01756, 0.95132, 1.01756, 0.95132, 1.01756, 0.95132, 1.01756, 0.95132, 1.01756, 0.95132, 1.01756, 0.98965, 1.00068, 0.8287, 0.96777, 0.8287, 0.93365, 0.9043, 0.93365, 0.9043, 0.93365, 0.9043, 1.08571, 0.96927, 0.96706, 0.91484, 0.86035, 0.93575, 0.96924, 0.95923, 1, 1, 0.85771, 1.21968, 1.11437, 1.11437, 0.93109, 0.91202, 0.60411, 0.84164, 0.55572, 1.01173, 0.97361, 0.81818, 0.81818, 0.96635, 0.78032, 0.72727, 0.92366, 0.98601, 1.03405, 0.77968, 1.09799, 1.2, 0.96706, 0.85944, 0.85638, 0.96491, 0.75842, 0.93365, 0.9831, 0.96924, 0.95782, 0.86969, 0.94152, 1.07796, 1.03584, 0.78437, 0.96924, 0.98715, 0.83968, 0.83491, 0.85771, 0.8287, 0.94492, 0.88433, 0.9287, 1.0098, 0.95782, 0.8287, 1.0625, 0.98248, 1.03424, 1.2, 1.01071, 1.0625, 0.95246, 1.03809, 1.04912, 0.98248, 1.00221, 1.03424, 1.05443, 1.2, 1.04785, 0.99609, 1.00169, 1.05176, 0.99346, 1.05356, 0.9087, 1.03004, 0.95542, 0.93117, 1.23362, 1.01071, 1.07831, 1.02512, 1.05205, 1.03502, 1.2, 1.01071, 1.05356, 1.01071, 1.03502, 0.75842, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.03719, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.9403, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.04021, 1, 1, 1, 1, 1, 1, 0.98965, 1.00068, 0.98965, 1.00068, 0.98965, 1.00068, 0.8287, 0.96777, 1, 1.20088, 0.89903, 1, 1, 0.75155, 1.03077, 1.03077, 1.03077, 1.03077, 1.13196, 1.13196, 1.13196, 0.67428, 0.67428, 1.16039, 0.73291, 1.20996, 1.22135, 1.06483, 0.94868, 0.94868, 0.95996, 1.24633, 1, 1.07497, 0.87796, 0.96927, 1.01518, 0.96927, 1, 1, 1, 0.77295, 1, 1, 1.10539, 1.10539, 1.11358, 1.06967, 0.86279, 0.94434, 0.86279, 0.94434, 0.86182, 1, 1, 1.083, 1, 0.91578, 0.86507, 1.1714, 1.18416, 1.14589, 0.69825, 0.97622, 1.9697, 1.24822, 1.24822, 1.17238, 1.24822, 1.24822, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.42603, 1, 0.99862, 0.99862, 1, 0.87025, 0.87025, 0.87025, 0.87025, 1.18083, 1.42603, 1, 1.42603, 1.42603, 0.99862, 1, 1, 1, 1, 1, 1.2886, 1.04315, 1.15296, 1.34163, 1, 1, 1, 1.10938, 1.10938, 1, 1, 1, 1.05425, 1.09971, 1.09971, 1.09971, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], Ig = {
  lineHeight: 1.33008,
  lineGap: 0
}, Tg = wt(function(t) {
  t["MyriadPro-Regular"] = t["PdfJS-Fallback-Regular"] = {
    name: "LiberationSans-Regular",
    factors: mg,
    baseWidths: Ya,
    baseMapping: Za,
    metrics: bg
  }, t["MyriadPro-Bold"] = t["PdfJS-Fallback-Bold"] = {
    name: "LiberationSans-Bold",
    factors: fg,
    baseWidths: $a,
    baseMapping: za,
    metrics: ug
  }, t["MyriadPro-It"] = t["MyriadPro-Italic"] = t["PdfJS-Fallback-Italic"] = {
    name: "LiberationSans-Italic",
    factors: gg,
    baseWidths: Xa,
    baseMapping: Ka,
    metrics: pg
  }, t["MyriadPro-BoldIt"] = t["MyriadPro-BoldItalic"] = t["PdfJS-Fallback-BoldItalic"] = {
    name: "LiberationSans-BoldItalic",
    factors: dg,
    baseWidths: Wa,
    baseMapping: Va,
    metrics: xg
  }, t.ArialMT = t.Arial = t["Arial-Regular"] = {
    name: "LiberationSans-Regular",
    baseWidths: Ya,
    baseMapping: Za
  }, t["Arial-BoldMT"] = t["Arial-Bold"] = {
    name: "LiberationSans-Bold",
    baseWidths: $a,
    baseMapping: za
  }, t["Arial-ItalicMT"] = t["Arial-Italic"] = {
    name: "LiberationSans-Italic",
    baseWidths: Xa,
    baseMapping: Ka
  }, t["Arial-BoldItalicMT"] = t["Arial-BoldItalic"] = {
    name: "LiberationSans-BoldItalic",
    baseWidths: Wa,
    baseMapping: Va
  }, t["Calibri-Regular"] = {
    name: "LiberationSans-Regular",
    factors: tg,
    baseWidths: Ya,
    baseMapping: Za,
    metrics: ng
  }, t["Calibri-Bold"] = {
    name: "LiberationSans-Bold",
    factors: Kx,
    baseWidths: $a,
    baseMapping: za,
    metrics: Yx
  }, t["Calibri-Italic"] = {
    name: "LiberationSans-Italic",
    factors: Qx,
    baseWidths: Xa,
    baseMapping: Ka,
    metrics: eg
  }, t["Calibri-BoldItalic"] = {
    name: "LiberationSans-BoldItalic",
    factors: Zx,
    baseWidths: Wa,
    baseMapping: Va,
    metrics: Jx
  }, t["Segoeui-Regular"] = {
    name: "LiberationSans-Regular",
    factors: vg,
    baseWidths: Ya,
    baseMapping: Za,
    metrics: Ig
  }, t["Segoeui-Bold"] = {
    name: "LiberationSans-Bold",
    factors: wg,
    baseWidths: $a,
    baseMapping: za,
    metrics: yg
  }, t["Segoeui-Italic"] = {
    name: "LiberationSans-Italic",
    factors: Cg,
    baseWidths: Xa,
    baseMapping: Ka,
    metrics: Ag
  }, t["Segoeui-BoldItalic"] = {
    name: "LiberationSans-BoldItalic",
    factors: kg,
    baseWidths: Wa,
    baseMapping: Va,
    metrics: Sg
  }, t["Helvetica-Regular"] = t.Helvetica = {
    name: "LiberationSans-Regular",
    factors: lg,
    baseWidths: Ya,
    baseMapping: Za,
    metrics: hg
  }, t["Helvetica-Bold"] = {
    name: "LiberationSans-Bold",
    factors: ig,
    baseWidths: $a,
    baseMapping: za,
    metrics: sg
  }, t["Helvetica-Italic"] = {
    name: "LiberationSans-Italic",
    factors: og,
    baseWidths: Xa,
    baseMapping: Ka,
    metrics: cg
  }, t["Helvetica-BoldItalic"] = {
    name: "LiberationSans-BoldItalic",
    factors: ag,
    baseWidths: Wa,
    baseMapping: Va,
    metrics: rg
  };
});
function e1(t) {
  const e = ir(t);
  return Tg()[e];
}
function Fg(t) {
  const e = e1(t);
  if (!e)
    return null;
  const {
    baseWidths: n,
    baseMapping: i,
    factors: s
  } = e, a = s ? n.map((l, h) => l * s[h]) : n;
  let r = -2, o;
  const c = [];
  for (const [l, h] of i.map((f, u) => [f, u]).sort(([f], [u]) => f - u))
    l !== -1 && (l === r + 1 ? (o.push(a[h]), r += 1) : (r = l, o = [a[h]], c.push(l, o)));
  return c;
}
function eu(t) {
  const e = Fg(t), n = new E(null);
  n.set("BaseFont", O.get(t)), n.set("Type", O.get("Font")), n.set("Subtype", O.get("CIDFontType2")), n.set("Encoding", O.get("Identity-H")), n.set("CIDToGIDMap", O.get("Identity")), n.set("W", e), n.set("FirstChar", e[0]), n.set("LastChar", e.at(-2) + e.at(-1).length - 1);
  const i = new E(null);
  n.set("FontDescriptor", i);
  const s = new E(null);
  return s.set("Ordering", "Identity"), s.set("Registry", "Adobe"), s.set("Supplement", 0), n.set("CIDSystemInfo", s), n;
}
class Bg {
  constructor(e) {
    this.lexer = e, this.operators = [], this.token = null, this.prev = null;
  }
  nextToken() {
    this.prev = this.token, this.token = this.lexer.getToken();
  }
  accept(e) {
    return this.token.type === e ? (this.nextToken(), !0) : !1;
  }
  expect(e) {
    if (this.accept(e))
      return !0;
    throw new j(`Unexpected symbol: found ${this.token.type} expected ${e}.`);
  }
  parse() {
    return this.nextToken(), this.expect(rn.LBRACE), this.parseBlock(), this.expect(rn.RBRACE), this.operators;
  }
  parseBlock() {
    for (; ; )
      if (this.accept(rn.NUMBER))
        this.operators.push(this.prev.value);
      else if (this.accept(rn.OPERATOR))
        this.operators.push(this.prev.value);
      else if (this.accept(rn.LBRACE))
        this.parseCondition();
      else
        return;
  }
  parseCondition() {
    const e = this.operators.length;
    if (this.operators.push(null, null), this.parseBlock(), this.expect(rn.RBRACE), this.accept(rn.IF))
      this.operators[e] = this.operators.length, this.operators[e + 1] = "jz";
    else if (this.accept(rn.LBRACE)) {
      const n = this.operators.length;
      this.operators.push(null, null);
      const i = this.operators.length;
      this.parseBlock(), this.expect(rn.RBRACE), this.expect(rn.IFELSE), this.operators[n] = this.operators.length, this.operators[n + 1] = "j", this.operators[e] = i, this.operators[e + 1] = "jz";
    } else
      throw new j("PS Function: error parsing conditional.");
  }
}
const rn = {
  LBRACE: 0,
  RBRACE: 1,
  NUMBER: 2,
  OPERATOR: 3,
  IF: 4,
  IFELSE: 5
};
class Rn {
  static get opCache() {
    return Q(this, "opCache", /* @__PURE__ */ Object.create(null));
  }
  constructor(e, n) {
    this.type = e, this.value = n;
  }
  static getOperator(e) {
    var n;
    return (n = Rn.opCache)[e] || (n[e] = new Rn(rn.OPERATOR, e));
  }
  static get LBRACE() {
    return Q(this, "LBRACE", new Rn(rn.LBRACE, "{"));
  }
  static get RBRACE() {
    return Q(this, "RBRACE", new Rn(rn.RBRACE, "}"));
  }
  static get IF() {
    return Q(this, "IF", new Rn(rn.IF, "IF"));
  }
  static get IFELSE() {
    return Q(this, "IFELSE", new Rn(rn.IFELSE, "IFELSE"));
  }
}
class Eg {
  constructor(e) {
    this.stream = e, this.nextChar(), this.strBuf = [];
  }
  nextChar() {
    return this.currentChar = this.stream.getByte();
  }
  getToken() {
    let e = !1, n = this.currentChar;
    for (; ; ) {
      if (n < 0)
        return $t;
      if (e)
        (n === 10 || n === 13) && (e = !1);
      else if (n === 37)
        e = !0;
      else if (!Dn(n))
        break;
      n = this.nextChar();
    }
    switch (n | 0) {
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 43:
      case 45:
      case 46:
        return new Rn(rn.NUMBER, this.getNumber());
      case 123:
        return this.nextChar(), Rn.LBRACE;
      case 125:
        return this.nextChar(), Rn.RBRACE;
    }
    const i = this.strBuf;
    for (i.length = 0, i[0] = String.fromCharCode(n); (n = this.nextChar()) >= 0 && (n >= 65 && n <= 90 || n >= 97 && n <= 122); )
      i.push(String.fromCharCode(n));
    const s = i.join("");
    switch (s.toLowerCase()) {
      case "if":
        return Rn.IF;
      case "ifelse":
        return Rn.IFELSE;
      default:
        return Rn.getOperator(s);
    }
  }
  getNumber() {
    let e = this.currentChar;
    const n = this.strBuf;
    for (n.length = 0, n[0] = String.fromCharCode(e); (e = this.nextChar()) >= 0 && (e >= 48 && e <= 57 || e === 45 || e === 46); )
      n.push(String.fromCharCode(e));
    const i = parseFloat(n.join(""));
    if (isNaN(i))
      throw new j(`Invalid floating point number: ${i}`);
    return i;
  }
}
class qs {
  constructor(e) {
    this._onlyRefs = (e == null ? void 0 : e.onlyRefs) === !0, this._onlyRefs || (this._nameRefMap = /* @__PURE__ */ new Map(), this._imageMap = /* @__PURE__ */ new Map()), this._imageCache = new kn();
  }
  getByName(e) {
    this._onlyRefs && Ke("Should not call `getByName` method.");
    const n = this._nameRefMap.get(e);
    return n ? this.getByRef(n) : this._imageMap.get(e) || null;
  }
  getByRef(e) {
    return this._imageCache.get(e) || null;
  }
  set(e, n, i) {
    Ke("Abstract method `set` called.");
  }
}
class yh extends qs {
  set(e, n = null, i) {
    if (typeof e != "string")
      throw new Error('LocalImageCache.set - expected "name" argument.');
    if (n) {
      if (this._imageCache.has(n))
        return;
      this._nameRefMap.set(e, n), this._imageCache.put(n, i);
      return;
    }
    this._imageMap.has(e) || this._imageMap.set(e, i);
  }
}
class tu extends qs {
  set(e = null, n = null, i) {
    if (typeof e != "string" && !n)
      throw new Error('LocalColorSpaceCache.set - expected "name" and/or "ref" argument.');
    if (n) {
      if (this._imageCache.has(n))
        return;
      e !== null && this._nameRefMap.set(e, n), this._imageCache.put(n, i);
      return;
    }
    this._imageMap.has(e) || this._imageMap.set(e, i);
  }
}
class Rg extends qs {
  constructor(e) {
    super({
      onlyRefs: !0
    });
  }
  set(e = null, n, i) {
    if (!n)
      throw new Error('LocalFunctionCache.set - expected "ref" argument.');
    this._imageCache.has(n) || this._imageCache.put(n, i);
  }
}
class kh extends qs {
  set(e, n = null, i) {
    if (typeof e != "string")
      throw new Error('LocalGStateCache.set - expected "name" argument.');
    if (n) {
      if (this._imageCache.has(n))
        return;
      this._nameRefMap.set(e, n), this._imageCache.put(n, i);
      return;
    }
    this._imageMap.has(e) || this._imageMap.set(e, i);
  }
}
class Mg extends qs {
  constructor(e) {
    super({
      onlyRefs: !0
    });
  }
  set(e = null, n, i) {
    if (!n)
      throw new Error('LocalTilingPatternCache.set - expected "ref" argument.');
    this._imageCache.has(n) || this._imageCache.put(n, i);
  }
}
class Dg extends qs {
  constructor(e) {
    super({
      onlyRefs: !0
    });
  }
  set(e = null, n, i) {
    if (!n)
      throw new Error('RegionalImageCache.set - expected "ref" argument.');
    this._imageCache.has(n) || this._imageCache.put(n, i);
  }
}
class Pg extends qs {
  constructor(e) {
    super({
      onlyRefs: !0
    });
  }
  set(e = null, n, i) {
    if (!n)
      throw new Error('GlobalColorSpaceCache.set - expected "ref" argument.');
    this._imageCache.has(n) || this._imageCache.put(n, i);
  }
  clear() {
    this._imageCache.clear();
  }
}
var Sa, js, nu, ll;
const Ei = class Ei {
  constructor() {
    Ee(this, js);
    Ee(this, Sa, new Dt());
    this._refCache = new kn(), this._imageCache = new kn();
  }
  shouldCache(e, n) {
    let i = this._refCache.get(e);
    return i || (i = /* @__PURE__ */ new Set(), this._refCache.put(e, i)), i.add(n), !(i.size < Ei.NUM_PAGES_THRESHOLD || !this._imageCache.has(e) && ce(this, js, ll));
  }
  addDecodeFailed(e) {
    ce(this, Sa).put(e);
  }
  hasDecodeFailed(e) {
    return ce(this, Sa).has(e);
  }
  addByteSize(e, n) {
    const i = this._imageCache.get(e);
    i && (i.byteSize || (i.byteSize = n));
  }
  getData(e, n) {
    const i = this._refCache.get(e);
    if (!i || i.size < Ei.NUM_PAGES_THRESHOLD)
      return null;
    const s = this._imageCache.get(e);
    return s ? (i.add(n), s) : null;
  }
  setData(e, n) {
    if (!this._refCache.has(e))
      throw new Error('GlobalImageCache.setData - expected "shouldCache" to have been called.');
    if (!this._imageCache.has(e)) {
      if (ce(this, js, ll)) {
        I("GlobalImageCache.setData - cache limit reached.");
        return;
      }
      this._imageCache.put(e, n);
    }
  }
  clear(e = !1) {
    e || (ce(this, Sa).clear(), this._refCache.clear()), this._imageCache.clear();
  }
};
Sa = new WeakMap(), js = new WeakSet(), nu = function() {
  let e = 0;
  for (const n of this._imageCache)
    e += n.byteSize;
  return e;
}, ll = function() {
  return !(this._imageCache.size < Ei.MIN_IMAGES_TO_CACHE || ce(this, js, nu) < Ei.MAX_BYTE_SIZE);
}, Ye(Ei, "NUM_PAGES_THRESHOLD", 2), Ye(Ei, "MIN_IMAGES_TO_CACHE", 10), Ye(Ei, "MAX_BYTE_SIZE", 5e7);
let cl = Ei;
class iu {
  constructor({
    xref: e,
    isEvalSupported: n = !0
  }) {
    this.xref = e, this.isEvalSupported = n !== !1;
  }
  create(e, n = !1) {
    var r;
    let i, s;
    if (e instanceof he ? i = e : e instanceof E ? i = e.objId : e instanceof je && (i = (r = e.dict) == null ? void 0 : r.objId), i) {
      const o = this._localFunctionCache.getByRef(i);
      if (o)
        return o;
    }
    const a = this.xref.fetchIfRef(e);
    if (Array.isArray(a)) {
      if (!n)
        throw new Error('PDFFunctionFactory.create - expected "parseArray" argument.');
      s = Sh.parseArray(this, a);
    } else
      s = Sh.parse(this, a);
    return i && this._localFunctionCache.set(null, i, s), s;
  }
  get _localFunctionCache() {
    return Q(this, "_localFunctionCache", new Rg());
  }
}
function On(t) {
  return Array.isArray(t) ? xn(t, null) ? t : t.map((e) => +e) : null;
}
class Sh {
  static getSampleArray(e, n, i, s) {
    let a, r, o = 1;
    for (a = 0, r = e.length; a < r; a++)
      o *= e[a];
    o *= n;
    const c = new Array(o);
    let l = 0, h = 0;
    const f = 1 / (2 ** i - 1), u = s.getBytes((o * i + 7) / 8);
    let d = 0;
    for (a = 0; a < o; a++) {
      for (; l < i; )
        h <<= 8, h |= u[d++], l += 8;
      l -= i, c[a] = (h >> l) * f, h &= (1 << l) - 1;
    }
    return c;
  }
  static parse(e, n) {
    const i = n.dict || n;
    switch (i.get("FunctionType")) {
      case 0:
        return this.constructSampled(e, n, i);
      case 1:
        break;
      case 2:
        return this.constructInterpolated(e, i);
      case 3:
        return this.constructStiched(e, i);
      case 4:
        return this.constructPostScript(e, n, i);
    }
    throw new j("Unknown type of function");
  }
  static parseArray(e, n) {
    const {
      xref: i
    } = e, s = [];
    for (const a of n)
      s.push(this.parse(e, i.fetchIfRef(a)));
    return function(a, r, o, c) {
      for (let l = 0, h = s.length; l < h; l++)
        s[l](a, r, o, c + l);
    };
  }
  static constructSampled(e, n, i) {
    function s(m) {
      const p = m.length, b = [];
      let w = 0;
      for (let y = 0; y < p; y += 2)
        b[w++] = [m[y], m[y + 1]];
      return b;
    }
    function a(m, p, b, w, y) {
      return w + (m - p) * ((y - w) / (b - p));
    }
    let r = On(i.getArray("Domain")), o = On(i.getArray("Range"));
    if (!r || !o)
      throw new j("No domain or range");
    const c = r.length / 2, l = o.length / 2;
    r = s(r), o = s(o);
    const h = On(i.getArray("Size")), f = i.get("BitsPerSample"), u = i.get("Order") || 1;
    u !== 1 && Ge("No support for cubic spline interpolation: " + u);
    let d = On(i.getArray("Encode"));
    if (d)
      d = s(d);
    else {
      d = [];
      for (let m = 0; m < c; ++m)
        d.push([0, h[m] - 1]);
    }
    let x = On(i.getArray("Decode"));
    x = x ? s(x) : o;
    const g = this.getSampleArray(h, l, f, n);
    return function(p, b, w, y) {
      const k = 1 << c, S = new Float64Array(k).fill(1), C = new Uint32Array(k);
      let T, F, R = l, D = 1;
      for (T = 0; T < c; ++T) {
        const M = r[T][0], _ = r[T][1], K = Wt(p[b + T], M, _);
        let se = a(K, M, _, d[T][0], d[T][1]);
        const H = h[T];
        se = Wt(se, 0, H - 1);
        const W = se < H - 1 ? Math.floor(se) : se - 1, le = W + 1 - se, q = se - W, L = W * R, Fe = L + R;
        for (F = 0; F < k; F++)
          F & D ? (S[F] *= q, C[F] += Fe) : (S[F] *= le, C[F] += L);
        R *= H, D <<= 1;
      }
      for (F = 0; F < l; ++F) {
        let M = 0;
        for (T = 0; T < k; T++)
          M += g[C[T] + F] * S[T];
        M = a(M, 0, 1, x[F][0], x[F][1]), w[y + F] = Wt(M, o[F][0], o[F][1]);
      }
    };
  }
  static constructInterpolated(e, n) {
    const i = On(n.getArray("C0")) || [0], s = On(n.getArray("C1")) || [1], a = n.get("N"), r = [];
    for (let c = 0, l = i.length; c < l; ++c)
      r.push(s[c] - i[c]);
    const o = r.length;
    return function(l, h, f, u) {
      const d = a === 1 ? l[h] : l[h] ** a;
      for (let x = 0; x < o; ++x)
        f[u + x] = i[x] + d * r[x];
    };
  }
  static constructStiched(e, n) {
    const i = On(n.getArray("Domain"));
    if (!i)
      throw new j("No domain");
    if (i.length / 2 !== 1)
      throw new j("Bad domain for stiched function");
    const {
      xref: a
    } = e, r = [];
    for (const h of n.get("Functions"))
      r.push(this.parse(e, a.fetchIfRef(h)));
    const o = On(n.getArray("Bounds")), c = On(n.getArray("Encode")), l = new Float32Array(1);
    return function(f, u, d, x) {
      const g = Wt(f[u], i[0], i[1]), m = o.length;
      let p;
      for (p = 0; p < m && !(g < o[p]); ++p)
        ;
      let b = i[0];
      p > 0 && (b = o[p - 1]);
      let w = i[1];
      p < o.length && (w = o[p]);
      const y = c[2 * p], k = c[2 * p + 1];
      l[0] = b === w ? y : y + (g - b) * (k - y) / (w - b), r[p](l, 0, d, x);
    };
  }
  static constructPostScript(e, n, i) {
    const s = On(i.getArray("Domain")), a = On(i.getArray("Range"));
    if (!s)
      throw new j("No domain.");
    if (!a)
      throw new j("No range.");
    const r = new Eg(n), c = new Bg(r).parse();
    if (e.isEvalSupported && An.isEvalSupported) {
      const m = new Hg().compile(c, s, a);
      if (m)
        return new Function("src", "srcOffset", "dest", "destOffset", m);
    }
    Ge("Unable to compile PS function");
    const l = a.length >> 1, h = s.length >> 1, f = new Ng(c), u = /* @__PURE__ */ Object.create(null);
    let x = 2048 * 4;
    const g = new Float32Array(h);
    return function(p, b, w, y) {
      let k, S, C = "";
      const T = g;
      for (k = 0; k < h; k++)
        S = p[b + k], T[k] = S, C += S + "_";
      const F = u[C];
      if (F !== void 0) {
        w.set(F, y);
        return;
      }
      const R = new Float32Array(l), D = f.execute(T), M = D.length - l;
      for (k = 0; k < l; k++) {
        S = D[M + k];
        let _ = a[k * 2];
        S < _ ? S = _ : (_ = a[k * 2 + 1], S > _ && (S = _)), R[k] = S;
      }
      x > 0 && (x--, u[C] = R), w.set(R, y);
    };
  }
}
function bc(t) {
  let e;
  if (t instanceof E)
    e = t;
  else if (t instanceof je)
    e = t.dict;
  else
    return !1;
  return e.has("FunctionType");
}
const m0 = class m0 {
  constructor(e) {
    this.stack = e ? Array.from(e) : [];
  }
  push(e) {
    if (this.stack.length >= m0.MAX_STACK_SIZE)
      throw new Error("PostScript function stack overflow.");
    this.stack.push(e);
  }
  pop() {
    if (this.stack.length <= 0)
      throw new Error("PostScript function stack underflow.");
    return this.stack.pop();
  }
  copy(e) {
    if (this.stack.length + e >= m0.MAX_STACK_SIZE)
      throw new Error("PostScript function stack overflow.");
    const n = this.stack;
    for (let i = n.length - e, s = e - 1; s >= 0; s--, i++)
      n.push(n[i]);
  }
  index(e) {
    this.push(this.stack[this.stack.length - e - 1]);
  }
  roll(e, n) {
    const i = this.stack, s = i.length - e, a = i.length - 1, r = s + (n - Math.floor(n / e) * e);
    for (let o = s, c = a; o < c; o++, c--) {
      const l = i[o];
      i[o] = i[c], i[c] = l;
    }
    for (let o = s, c = r - 1; o < c; o++, c--) {
      const l = i[o];
      i[o] = i[c], i[c] = l;
    }
    for (let o = r, c = a; o < c; o++, c--) {
      const l = i[o];
      i[o] = i[c], i[c] = l;
    }
  }
};
Ye(m0, "MAX_STACK_SIZE", 100);
let hl = m0;
class Ng {
  constructor(e) {
    this.operators = e;
  }
  execute(e) {
    const n = new hl(e);
    let i = 0;
    const s = this.operators, a = s.length;
    let r, o, c;
    for (; i < a; ) {
      if (r = s[i++], typeof r == "number") {
        n.push(r);
        continue;
      }
      switch (r) {
        case "jz":
          c = n.pop(), o = n.pop(), o || (i = c);
          break;
        case "j":
          o = n.pop(), i = o;
          break;
        case "abs":
          o = n.pop(), n.push(Math.abs(o));
          break;
        case "add":
          c = n.pop(), o = n.pop(), n.push(o + c);
          break;
        case "and":
          c = n.pop(), o = n.pop(), typeof o == "boolean" && typeof c == "boolean" ? n.push(o && c) : n.push(o & c);
          break;
        case "atan":
          c = n.pop(), o = n.pop(), o = Math.atan2(o, c) / Math.PI * 180, o < 0 && (o += 360), n.push(o);
          break;
        case "bitshift":
          c = n.pop(), o = n.pop(), o > 0 ? n.push(o << c) : n.push(o >> c);
          break;
        case "ceiling":
          o = n.pop(), n.push(Math.ceil(o));
          break;
        case "copy":
          o = n.pop(), n.copy(o);
          break;
        case "cos":
          o = n.pop(), n.push(Math.cos(o % 360 / 180 * Math.PI));
          break;
        case "cvi":
          o = n.pop() | 0, n.push(o);
          break;
        case "cvr":
          break;
        case "div":
          c = n.pop(), o = n.pop(), n.push(o / c);
          break;
        case "dup":
          n.copy(1);
          break;
        case "eq":
          c = n.pop(), o = n.pop(), n.push(o === c);
          break;
        case "exch":
          n.roll(2, 1);
          break;
        case "exp":
          c = n.pop(), o = n.pop(), n.push(o ** c);
          break;
        case "false":
          n.push(!1);
          break;
        case "floor":
          o = n.pop(), n.push(Math.floor(o));
          break;
        case "ge":
          c = n.pop(), o = n.pop(), n.push(o >= c);
          break;
        case "gt":
          c = n.pop(), o = n.pop(), n.push(o > c);
          break;
        case "idiv":
          c = n.pop(), o = n.pop(), n.push(o / c | 0);
          break;
        case "index":
          o = n.pop(), n.index(o);
          break;
        case "le":
          c = n.pop(), o = n.pop(), n.push(o <= c);
          break;
        case "ln":
          o = n.pop(), n.push(Math.log(o));
          break;
        case "log":
          o = n.pop(), n.push(Math.log10(o));
          break;
        case "lt":
          c = n.pop(), o = n.pop(), n.push(o < c);
          break;
        case "mod":
          c = n.pop(), o = n.pop(), n.push(o % c);
          break;
        case "mul":
          c = n.pop(), o = n.pop(), n.push(o * c);
          break;
        case "ne":
          c = n.pop(), o = n.pop(), n.push(o !== c);
          break;
        case "neg":
          o = n.pop(), n.push(-o);
          break;
        case "not":
          o = n.pop(), typeof o == "boolean" ? n.push(!o) : n.push(~o);
          break;
        case "or":
          c = n.pop(), o = n.pop(), typeof o == "boolean" && typeof c == "boolean" ? n.push(o || c) : n.push(o | c);
          break;
        case "pop":
          n.pop();
          break;
        case "roll":
          c = n.pop(), o = n.pop(), n.roll(o, c);
          break;
        case "round":
          o = n.pop(), n.push(Math.round(o));
          break;
        case "sin":
          o = n.pop(), n.push(Math.sin(o % 360 / 180 * Math.PI));
          break;
        case "sqrt":
          o = n.pop(), n.push(Math.sqrt(o));
          break;
        case "sub":
          c = n.pop(), o = n.pop(), n.push(o - c);
          break;
        case "true":
          n.push(!0);
          break;
        case "truncate":
          o = n.pop(), o = o < 0 ? Math.ceil(o) : Math.floor(o), n.push(o);
          break;
        case "xor":
          c = n.pop(), o = n.pop(), typeof o == "boolean" && typeof c == "boolean" ? n.push(o !== c) : n.push(o ^ c);
          break;
        default:
          throw new j(`Unknown operator ${r}`);
      }
    }
    return n.stack;
  }
}
class Oa {
  constructor(e) {
    this.type = e;
  }
  visit(e) {
    Ke("abstract method");
  }
}
class Og extends Oa {
  constructor(e, n, i) {
    super("args"), this.index = e, this.min = n, this.max = i;
  }
  visit(e) {
    e.visitArgument(this);
  }
}
class Es extends Oa {
  constructor(e) {
    super("literal"), this.number = e, this.min = e, this.max = e;
  }
  visit(e) {
    e.visitLiteral(this);
  }
}
class t1 extends Oa {
  constructor(e, n, i, s, a) {
    super("binary"), this.op = e, this.arg1 = n, this.arg2 = i, this.min = s, this.max = a;
  }
  visit(e) {
    e.visitBinaryOperation(this);
  }
}
class Lg extends Oa {
  constructor(e, n) {
    super("max"), this.arg = e, this.min = e.min, this.max = n;
  }
  visit(e) {
    e.visitMin(this);
  }
}
class Ch extends Oa {
  constructor(e, n, i) {
    super("var"), this.index = e, this.min = n, this.max = i;
  }
  visit(e) {
    e.visitVariable(this);
  }
}
class Ah extends Oa {
  constructor(e, n) {
    super("definition"), this.variable = e, this.arg = n;
  }
  visit(e) {
    e.visitVariableDefinition(this);
  }
}
class vh {
  constructor() {
    this.parts = [];
  }
  visitArgument(e) {
    this.parts.push("Math.max(", e.min, ", Math.min(", e.max, ", src[srcOffset + ", e.index, "]))");
  }
  visitVariable(e) {
    this.parts.push("v", e.index);
  }
  visitLiteral(e) {
    this.parts.push(e.number);
  }
  visitBinaryOperation(e) {
    this.parts.push("("), e.arg1.visit(this), this.parts.push(" ", e.op, " "), e.arg2.visit(this), this.parts.push(")");
  }
  visitVariableDefinition(e) {
    this.parts.push("var "), e.variable.visit(this), this.parts.push(" = "), e.arg.visit(this), this.parts.push(";");
  }
  visitMin(e) {
    this.parts.push("Math.min("), e.arg.visit(this), this.parts.push(", ", e.max, ")");
  }
  toString() {
    return this.parts.join("");
  }
}
function _g(t, e) {
  return e.type === "literal" && e.number === 0 ? t : t.type === "literal" && t.number === 0 ? e : e.type === "literal" && t.type === "literal" ? new Es(t.number + e.number) : new t1("+", t, e, t.min + e.min, t.max + e.max);
}
function Ug(t, e) {
  if (e.type === "literal") {
    if (e.number === 0)
      return new Es(0);
    if (e.number === 1)
      return t;
    if (t.type === "literal")
      return new Es(t.number * e.number);
  }
  if (t.type === "literal") {
    if (t.number === 0)
      return new Es(0);
    if (t.number === 1)
      return e;
  }
  const n = Math.min(t.min * e.min, t.min * e.max, t.max * e.min, t.max * e.max), i = Math.max(t.min * e.min, t.min * e.max, t.max * e.min, t.max * e.max);
  return new t1("*", t, e, n, i);
}
function jg(t, e) {
  if (e.type === "literal") {
    if (e.number === 0)
      return t;
    if (t.type === "literal")
      return new Es(t.number - e.number);
  }
  return e.type === "binary" && e.op === "-" && t.type === "literal" && t.number === 1 && e.arg1.type === "literal" && e.arg1.number === 1 ? e.arg2 : new t1("-", t, e, t.min - e.max, t.max - e.min);
}
function qg(t, e) {
  return t.min >= e ? new Es(e) : t.max <= e ? t : new Lg(t, e);
}
class Hg {
  compile(e, n, i) {
    const s = [], a = [], r = n.length >> 1, o = i.length >> 1;
    let c = 0, l, h, f, u, d, x, g, m;
    for (let b = 0; b < r; b++)
      s.push(new Og(b, n[b * 2], n[b * 2 + 1]));
    for (let b = 0, w = e.length; b < w; b++) {
      if (m = e[b], typeof m == "number") {
        s.push(new Es(m));
        continue;
      }
      switch (m) {
        case "add":
          if (s.length < 2)
            return null;
          u = s.pop(), f = s.pop(), s.push(_g(f, u));
          break;
        case "cvr":
          if (s.length < 1)
            return null;
          break;
        case "mul":
          if (s.length < 2)
            return null;
          u = s.pop(), f = s.pop(), s.push(Ug(f, u));
          break;
        case "sub":
          if (s.length < 2)
            return null;
          u = s.pop(), f = s.pop(), s.push(jg(f, u));
          break;
        case "exch":
          if (s.length < 2)
            return null;
          d = s.pop(), x = s.pop(), s.push(d, x);
          break;
        case "pop":
          if (s.length < 1)
            return null;
          s.pop();
          break;
        case "index":
          if (s.length < 1 || (f = s.pop(), f.type !== "literal") || (l = f.number, l < 0 || !Number.isInteger(l) || s.length < l))
            return null;
          if (d = s[s.length - l - 1], d.type === "literal" || d.type === "var") {
            s.push(d);
            break;
          }
          g = new Ch(c++, d.min, d.max), s[s.length - l - 1] = g, s.push(g), a.push(new Ah(g, d));
          break;
        case "dup":
          if (s.length < 1)
            return null;
          if (typeof e[b + 1] == "number" && e[b + 2] === "gt" && e[b + 3] === b + 7 && e[b + 4] === "jz" && e[b + 5] === "pop" && e[b + 6] === e[b + 1]) {
            f = s.pop(), s.push(qg(f, e[b + 1])), b += 6;
            break;
          }
          if (d = s.at(-1), d.type === "literal" || d.type === "var") {
            s.push(d);
            break;
          }
          g = new Ch(c++, d.min, d.max), s[s.length - 1] = g, s.push(g), a.push(new Ah(g, d));
          break;
        case "roll":
          if (s.length < 2 || (u = s.pop(), f = s.pop(), u.type !== "literal" || f.type !== "literal") || (h = u.number, l = f.number, l <= 0 || !Number.isInteger(l) || !Number.isInteger(h) || s.length < l))
            return null;
          if (h = (h % l + l) % l, h === 0)
            break;
          s.push(...s.splice(s.length - l, l - h));
          break;
        default:
          return null;
      }
    }
    if (s.length !== o)
      return null;
    const p = [];
    for (const b of a) {
      const w = new vh();
      b.visit(w), p.push(w.toString());
    }
    for (let b = 0, w = s.length; b < w; b++) {
      const y = s[b], k = new vh();
      y.visit(k);
      const S = i[b * 2], C = i[b * 2 + 1], T = [k.toString()];
      S > y.min && (T.unshift("Math.max(", S, ", "), T.push(")")), C < y.max && (T.unshift("Math.min(", C, ", "), T.push(")")), T.unshift("dest[destOffset + ", b, "] = "), T.push(";"), p.push(T.join(""));
    }
    return p.join(`
`);
  }
}
const Gg = ["BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "S", "B", "S", "WS", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "B", "B", "B", "S", "WS", "ON", "ON", "ET", "ET", "ET", "ON", "ON", "ON", "ON", "ON", "ES", "CS", "ES", "CS", "CS", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "CS", "ON", "ON", "ON", "ON", "ON", "ON", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "ON", "ON", "ON", "ON", "ON", "ON", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "ON", "ON", "ON", "ON", "BN", "BN", "BN", "BN", "BN", "BN", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "CS", "ON", "ET", "ET", "ET", "ET", "ON", "ON", "ON", "ON", "L", "ON", "ON", "BN", "ON", "ON", "ET", "ET", "EN", "EN", "ON", "L", "ON", "ON", "ON", "EN", "L", "ON", "ON", "ON", "ON", "ON", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "ON", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "ON", "L", "L", "L", "L", "L", "L", "L", "L"], $g = ["AN", "AN", "AN", "AN", "AN", "AN", "ON", "ON", "AL", "ET", "ET", "AL", "CS", "AL", "ON", "ON", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "ET", "AN", "AN", "AL", "AL", "AL", "NSM", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AN", "ON", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "NSM", "NSM", "ON", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "AL", "AL", "AL", "AL", "AL", "AL"];
function Ih(t) {
  return (t & 1) !== 0;
}
function zg(t) {
  return (t & 1) === 0;
}
function Wg(t, e, n) {
  let i, s;
  for (i = e, s = t.length; i < s; ++i)
    if (t[i] !== n)
      return i;
  return i;
}
function Th(t, e, n) {
  for (let i = e, s = n - 1; i < s; ++i, --s) {
    const a = t[i];
    t[i] = t[s], t[s] = a;
  }
}
function wc(t, e, n = !1) {
  let i = "ltr";
  return n ? i = "ttb" : e || (i = "rtl"), {
    str: t,
    dir: i
  };
}
const Gi = [], nt = [];
function su(t, e = -1, n = !1) {
  let i = !0;
  const s = t.length;
  if (s === 0 || n)
    return wc(t, i, n);
  Gi.length = s, nt.length = s;
  let a = 0, r, o;
  for (r = 0; r < s; ++r) {
    Gi[r] = t.charAt(r);
    const p = t.charCodeAt(r);
    let b = "L";
    p <= 255 ? b = Gg[p] : 1424 <= p && p <= 1524 ? b = "R" : 1536 <= p && p <= 1791 ? (b = $g[p & 255], b || I("Bidi: invalid Unicode character " + p.toString(16))) : (1792 <= p && p <= 2220 || 64336 <= p && p <= 65023 || 65136 <= p && p <= 65279) && (b = "AL"), (b === "R" || b === "AL" || b === "AN") && a++, nt[r] = b;
  }
  if (a === 0)
    return i = !0, wc(t, i);
  e === -1 && (a / s < 0.3 && s > 4 ? (i = !0, e = 0) : (i = !1, e = 1));
  const c = [];
  for (r = 0; r < s; ++r)
    c[r] = e;
  const l = Ih(e) ? "R" : "L", h = l, f = h;
  let u = h;
  for (r = 0; r < s; ++r)
    nt[r] === "NSM" ? nt[r] = u : u = nt[r];
  u = h;
  let d;
  for (r = 0; r < s; ++r)
    d = nt[r], d === "EN" ? nt[r] = u === "AL" ? "AN" : "EN" : (d === "R" || d === "L" || d === "AL") && (u = d);
  for (r = 0; r < s; ++r)
    d = nt[r], d === "AL" && (nt[r] = "R");
  for (r = 1; r < s - 1; ++r)
    nt[r] === "ES" && nt[r - 1] === "EN" && nt[r + 1] === "EN" && (nt[r] = "EN"), nt[r] === "CS" && (nt[r - 1] === "EN" || nt[r - 1] === "AN") && nt[r + 1] === nt[r - 1] && (nt[r] = nt[r - 1]);
  for (r = 0; r < s; ++r)
    if (nt[r] === "EN") {
      for (let p = r - 1; p >= 0 && nt[p] === "ET"; --p)
        nt[p] = "EN";
      for (let p = r + 1; p < s && nt[p] === "ET"; ++p)
        nt[p] = "EN";
    }
  for (r = 0; r < s; ++r)
    d = nt[r], (d === "WS" || d === "ES" || d === "ET" || d === "CS") && (nt[r] = "ON");
  for (u = h, r = 0; r < s; ++r)
    d = nt[r], d === "EN" ? nt[r] = u === "L" ? "L" : "EN" : (d === "R" || d === "L") && (u = d);
  for (r = 0; r < s; ++r)
    if (nt[r] === "ON") {
      const p = Wg(nt, r + 1, "ON");
      let b = h;
      r > 0 && (b = nt[r - 1]);
      let w = f;
      p + 1 < s && (w = nt[p + 1]), b !== "L" && (b = "R"), w !== "L" && (w = "R"), b === w && nt.fill(b, r, p), r = p - 1;
    }
  for (r = 0; r < s; ++r)
    nt[r] === "ON" && (nt[r] = l);
  for (r = 0; r < s; ++r)
    d = nt[r], zg(c[r]) ? d === "R" ? c[r] += 1 : (d === "AN" || d === "EN") && (c[r] += 2) : (d === "L" || d === "AN" || d === "EN") && (c[r] += 1);
  let x = -1, g = 99, m;
  for (r = 0, o = c.length; r < o; ++r)
    m = c[r], x < m && (x = m), g > m && Ih(m) && (g = m);
  for (m = x; m >= g; --m) {
    let p = -1;
    for (r = 0, o = c.length; r < o; ++r)
      c[r] < m ? p >= 0 && (Th(Gi, p, r), p = -1) : p < 0 && (p = r);
    p >= 0 && Th(Gi, p, c.length);
  }
  for (r = 0, o = Gi.length; r < o; ++r) {
    const p = Gi[r];
    (p === "<" || p === ">") && (Gi[r] = "");
  }
  return wc(Gi.join(""), i);
}
const ms = {
  style: "normal",
  weight: "normal"
}, ws = {
  style: "normal",
  weight: "bold"
}, ys = {
  style: "italic",
  weight: "normal"
}, ks = {
  style: "italic",
  weight: "bold"
}, l0 = /* @__PURE__ */ new Map([["Times-Roman", {
  local: ["Times New Roman", "Times-Roman", "Times", "Liberation Serif", "Nimbus Roman", "Nimbus Roman L", "Tinos", "Thorndale", "TeX Gyre Termes", "FreeSerif", "Linux Libertine O", "Libertinus Serif", "DejaVu Serif", "Bitstream Vera Serif", "Ubuntu"],
  style: ms,
  ultimate: "serif"
}], ["Times-Bold", {
  alias: "Times-Roman",
  style: ws,
  ultimate: "serif"
}], ["Times-Italic", {
  alias: "Times-Roman",
  style: ys,
  ultimate: "serif"
}], ["Times-BoldItalic", {
  alias: "Times-Roman",
  style: ks,
  ultimate: "serif"
}], ["Helvetica", {
  local: ["Helvetica", "Helvetica Neue", "Arial", "Arial Nova", "Liberation Sans", "Arimo", "Nimbus Sans", "Nimbus Sans L", "A030", "TeX Gyre Heros", "FreeSans", "DejaVu Sans", "Albany", "Bitstream Vera Sans", "Arial Unicode MS", "Microsoft Sans Serif", "Apple Symbols", "Cantarell"],
  path: "LiberationSans-Regular.ttf",
  style: ms,
  ultimate: "sans-serif"
}], ["Helvetica-Bold", {
  alias: "Helvetica",
  path: "LiberationSans-Bold.ttf",
  style: ws,
  ultimate: "sans-serif"
}], ["Helvetica-Oblique", {
  alias: "Helvetica",
  path: "LiberationSans-Italic.ttf",
  style: ys,
  ultimate: "sans-serif"
}], ["Helvetica-BoldOblique", {
  alias: "Helvetica",
  path: "LiberationSans-BoldItalic.ttf",
  style: ks,
  ultimate: "sans-serif"
}], ["Courier", {
  local: ["Courier", "Courier New", "Liberation Mono", "Nimbus Mono", "Nimbus Mono L", "Cousine", "Cumberland", "TeX Gyre Cursor", "FreeMono", "Linux Libertine Mono O", "Libertinus Mono"],
  style: ms,
  ultimate: "monospace"
}], ["Courier-Bold", {
  alias: "Courier",
  style: ws,
  ultimate: "monospace"
}], ["Courier-Oblique", {
  alias: "Courier",
  style: ys,
  ultimate: "monospace"
}], ["Courier-BoldOblique", {
  alias: "Courier",
  style: ks,
  ultimate: "monospace"
}], ["ArialBlack", {
  local: ["Arial Black"],
  style: {
    style: "normal",
    weight: "900"
  },
  fallback: "Helvetica-Bold"
}], ["ArialBlack-Bold", {
  alias: "ArialBlack"
}], ["ArialBlack-Italic", {
  alias: "ArialBlack",
  style: {
    style: "italic",
    weight: "900"
  },
  fallback: "Helvetica-BoldOblique"
}], ["ArialBlack-BoldItalic", {
  alias: "ArialBlack-Italic"
}], ["ArialNarrow", {
  local: ["Arial Narrow", "Liberation Sans Narrow", "Helvetica Condensed", "Nimbus Sans Narrow", "TeX Gyre Heros Cn"],
  style: ms,
  fallback: "Helvetica"
}], ["ArialNarrow-Bold", {
  alias: "ArialNarrow",
  style: ws,
  fallback: "Helvetica-Bold"
}], ["ArialNarrow-Italic", {
  alias: "ArialNarrow",
  style: ys,
  fallback: "Helvetica-Oblique"
}], ["ArialNarrow-BoldItalic", {
  alias: "ArialNarrow",
  style: ks,
  fallback: "Helvetica-BoldOblique"
}], ["Calibri", {
  local: ["Calibri", "Carlito"],
  style: ms,
  fallback: "Helvetica"
}], ["Calibri-Bold", {
  alias: "Calibri",
  style: ws,
  fallback: "Helvetica-Bold"
}], ["Calibri-Italic", {
  alias: "Calibri",
  style: ys,
  fallback: "Helvetica-Oblique"
}], ["Calibri-BoldItalic", {
  alias: "Calibri",
  style: ks,
  fallback: "Helvetica-BoldOblique"
}], ["Wingdings", {
  local: ["Wingdings", "URW Dingbats"],
  style: ms
}], ["Wingdings-Regular", {
  alias: "Wingdings"
}], ["Wingdings-Bold", {
  alias: "Wingdings"
}]]), Vg = /* @__PURE__ */ new Map([["Arial-Black", "ArialBlack"]]);
function Xg(t) {
  switch (t) {
    case ws:
      return "Bold";
    case ys:
      return "Italic";
    case ks:
      return "Bold Italic";
    default:
      if ((t == null ? void 0 : t.weight) === "bold")
        return "Bold";
      if ((t == null ? void 0 : t.style) === "italic")
        return "Italic";
  }
  return "";
}
function Fh(t) {
  const e = /* @__PURE__ */ new Set(["thin", "extralight", "ultralight", "demilight", "semilight", "light", "book", "regular", "normal", "medium", "demibold", "semibold", "bold", "extrabold", "ultrabold", "black", "heavy", "extrablack", "ultrablack", "roman", "italic", "oblique", "ultracondensed", "extracondensed", "condensed", "semicondensed", "normal", "semiexpanded", "expanded", "extraexpanded", "ultraexpanded", "bolditalic"]);
  return t.split(/[- ,+]+/g).filter((n) => !e.has(n.toLowerCase())).join(" ");
}
function fl({
  alias: t,
  local: e,
  path: n,
  fallback: i,
  style: s,
  ultimate: a
}, r, o, c = !0, l = !0, h = "") {
  const f = {
    style: null,
    ultimate: null
  };
  if (e) {
    const u = h ? ` ${h}` : "";
    for (const d of e)
      r.push(`local(${d}${u})`);
  }
  if (t) {
    const u = l0.get(t), d = h || Xg(s);
    Object.assign(f, fl(u, r, o, c && !i, l && !n, d));
  }
  if (s && (f.style = s), a && (f.ultimate = a), c && i) {
    const u = l0.get(i), {
      ultimate: d
    } = fl(u, r, o, c, l && !n, h);
    f.ultimate || (f.ultimate = d);
  }
  return l && n && o && r.push(`url(${o}${n})`), f;
}
function Bh(t, e, n, i, s, a) {
  if (i.startsWith("InvalidPDFjsFont_"))
    return null;
  (a === "TrueType" || a === "Type1") && /^[A-Z]{6}\+/.test(i) && (i = i.slice(7)), i = ir(i);
  const r = i;
  let o = t.get(r);
  if (o)
    return o;
  let c = l0.get(i);
  if (!c) {
    for (const [m, p] of Vg)
      if (i.startsWith(m)) {
        i = `${p}${i.substring(m.length)}`, c = l0.get(i);
        break;
      }
  }
  let l = !1;
  c || (c = l0.get(s), l = !0);
  const h = `${e.getDocId()}_s${e.createFontId()}`;
  if (!c) {
    if (!qc(i))
      return I(`Cannot substitute the font because of its name: ${i}`), t.set(r, null), null;
    const m = /bold/gi.test(i), p = /oblique|italic/gi.test(i), b = m && p && ks || m && ws || p && ys || ms;
    return o = {
      css: `"${Fh(i)}",${h}`,
      guessFallback: !0,
      loadedName: h,
      baseFontName: i,
      src: `local(${i})`,
      style: b
    }, t.set(r, o), o;
  }
  const f = [];
  l && qc(i) && f.push(`local(${i})`);
  const {
    style: u,
    ultimate: d
  } = fl(c, f, n), x = d === null, g = x ? "" : `,${d}`;
  return o = {
    css: `"${Fh(i)}",${h}${g}`,
    guessFallback: x,
    loadedName: h,
    baseFontName: i,
    src: f.join(","),
    style: u
  }, t.set(r, o), o;
}
const Eh = 3285377520, Ln = 4294901760, ui = 65535;
class Kg {
  constructor(e) {
    this.h1 = e ? e & 4294967295 : Eh, this.h2 = e ? e & 4294967295 : Eh;
  }
  update(e) {
    let n, i;
    if (typeof e == "string") {
      n = new Uint8Array(e.length * 2), i = 0;
      for (let g = 0, m = e.length; g < m; g++) {
        const p = e.charCodeAt(g);
        p <= 255 ? n[i++] = p : (n[i++] = p >>> 8, n[i++] = p & 255);
      }
    } else if (ArrayBuffer.isView(e))
      n = e.slice(), i = n.byteLength;
    else
      throw new Error("Invalid data format, must be a string or TypedArray.");
    const s = i >> 2, a = i - s * 4, r = new Uint32Array(n.buffer, 0, s);
    let o = 0, c = 0, l = this.h1, h = this.h2;
    const f = 3432918353, u = 461845907, d = f & ui, x = u & ui;
    for (let g = 0; g < s; g++)
      g & 1 ? (o = r[g], o = o * f & Ln | o * d & ui, o = o << 15 | o >>> 17, o = o * u & Ln | o * x & ui, l ^= o, l = l << 13 | l >>> 19, l = l * 5 + 3864292196) : (c = r[g], c = c * f & Ln | c * d & ui, c = c << 15 | c >>> 17, c = c * u & Ln | c * x & ui, h ^= c, h = h << 13 | h >>> 19, h = h * 5 + 3864292196);
    switch (o = 0, a) {
      case 3:
        o ^= n[s * 4 + 2] << 16;
      case 2:
        o ^= n[s * 4 + 1] << 8;
      case 1:
        o ^= n[s * 4], o = o * f & Ln | o * d & ui, o = o << 15 | o >>> 17, o = o * u & Ln | o * x & ui, s & 1 ? l ^= o : h ^= o;
    }
    this.h1 = l, this.h2 = h;
  }
  hexdigest() {
    let e = this.h1, n = this.h2;
    return e ^= n >>> 1, e = e * 3981806797 & Ln | e * 36045 & ui, n = n * 4283543511 & Ln | ((n << 16 | e >>> 16) * 2950163797 & Ln) >>> 16, e ^= n >>> 1, e = e * 444984403 & Ln | e * 60499 & ui, n = n * 3301882366 & Ln | ((n << 16 | e >>> 16) * 3120437893 & Ln) >>> 16, e ^= n >>> 1, (e >>> 0).toString(16).padStart(8, "0") + (n >>> 0).toString(16).padStart(8, "0");
  }
}
function Rh(t, e, n, i, s, a) {
  const r = s * a;
  let o;
  e <= 8 ? o = new Uint8Array(r) : e <= 16 ? o = new Uint16Array(r) : o = new Uint32Array(r);
  const c = n / s, l = i / a;
  let h, f, u, d = 0, x;
  const g = new Uint16Array(s), m = n;
  for (h = 0; h < s; h++)
    g[h] = Math.floor(h * c);
  for (h = 0; h < a; h++)
    for (u = Math.floor(h * l) * m, f = 0; f < s; f++)
      x = u + g[f], o[d++] = t[x];
  return o;
}
var Y0, ul;
const aa = class aa {
  constructor({
    xref: e,
    res: n,
    image: i,
    isInline: s = !1,
    smask: a = null,
    mask: r = null,
    isMask: o = !1,
    pdfFunctionFactory: c,
    globalColorSpaceCache: l,
    localColorSpaceCache: h
  }) {
    Ee(this, Y0);
    var p, b;
    this.image = i;
    const f = i.dict, u = f.get("F", "Filter");
    let d;
    if (u instanceof O)
      d = u.name;
    else if (Array.isArray(u)) {
      const w = e.fetchIfRef(u[0]);
      w instanceof O && (d = w.name);
    }
    switch (d) {
      case "JPXDecode":
        ({
          width: i.width,
          height: i.height,
          componentsCount: i.numComps,
          bitsPerComponent: i.bitsPerComponent
        } = Jn.parseImageProperties(i.stream)), i.stream.reset();
        const w = Zn.getReducePowerForJPX(i.width, i.height, i.numComps);
        if (this.jpxDecoderOptions = {
          numComponents: 0,
          isIndexedColormap: !1,
          smaskInData: f.has("SMaskInData"),
          reducePower: w
        }, w) {
          const y = 2 ** w;
          i.width = Math.ceil(i.width / y), i.height = Math.ceil(i.height / y);
        }
        break;
      case "JBIG2Decode":
        i.bitsPerComponent = 1, i.numComps = 1;
        break;
    }
    let x = f.get("W", "Width"), g = f.get("H", "Height");
    if (Number.isInteger(i.width) && i.width > 0 && Number.isInteger(i.height) && i.height > 0 && (i.width !== x || i.height !== g))
      I("PDFImage - using the Width/Height of the image data, rather than the image dictionary."), x = i.width, g = i.height;
    else {
      const w = typeof x == "number" && x > 0, y = typeof g == "number" && g > 0;
      if (!w || !y) {
        if (!i.fallbackDims)
          throw new j(`Invalid image width: ${x} or height: ${g}`);
        I("PDFImage - using the Width/Height of the parent image, for SMask/Mask data."), w || (x = i.fallbackDims.width), y || (g = i.fallbackDims.height);
      }
    }
    this.width = x, this.height = g, this.interpolate = f.get("I", "Interpolate"), this.imageMask = f.get("IM", "ImageMask") || !1, this.matte = f.get("Matte") || !1;
    let m = i.bitsPerComponent;
    if (!m && (m = f.get("BPC", "BitsPerComponent"), !m))
      if (this.imageMask)
        m = 1;
      else
        throw new j(`Bits per component missing in image: ${this.imageMask}`);
    if (this.bpc = m, !this.imageMask) {
      let w = f.getRaw("CS") || f.getRaw("ColorSpace");
      const y = !!w;
      if (y)
        (p = this.jpxDecoderOptions) != null && p.smaskInData && (w = O.get("DeviceRGBA"));
      else if (this.jpxDecoderOptions)
        w = O.get("DeviceRGBA");
      else
        switch (i.numComps) {
          case 1:
            w = O.get("DeviceGray");
            break;
          case 3:
            w = O.get("DeviceRGB");
            break;
          case 4:
            w = O.get("DeviceCMYK");
            break;
          default:
            throw new Error(`Images with ${i.numComps} color components not supported.`);
        }
      this.colorSpace = Qe.parse({
        cs: w,
        xref: e,
        resources: s ? n : null,
        pdfFunctionFactory: c,
        globalColorSpaceCache: l,
        localColorSpaceCache: h
      }), this.numComps = this.colorSpace.numComps, this.jpxDecoderOptions && (this.jpxDecoderOptions.numComponents = y ? this.numComps : 0, this.jpxDecoderOptions.isIndexedColormap = this.colorSpace.name === "Indexed");
    }
    if (this.decode = f.getArray("D", "Decode"), this.needsDecode = !1, this.decode && (this.colorSpace && !this.colorSpace.isDefaultDecode(this.decode, m) || o && !nn.isDefaultDecode(this.decode, 1))) {
      this.needsDecode = !0;
      const w = (1 << m) - 1;
      this.decodeCoefficients = [], this.decodeAddends = [];
      const y = ((b = this.colorSpace) == null ? void 0 : b.name) === "Indexed";
      for (let k = 0, S = 0; k < this.decode.length; k += 2, ++S) {
        const C = this.decode[k], T = this.decode[k + 1];
        this.decodeCoefficients[S] = y ? (T - C) / w : T - C, this.decodeAddends[S] = y ? C : w * C;
      }
    }
    a ? (a.fallbackDims ?? (a.fallbackDims = {
      width: x,
      height: g
    }), this.smask = new aa({
      xref: e,
      res: n,
      image: a,
      isInline: s,
      pdfFunctionFactory: c,
      globalColorSpaceCache: l,
      localColorSpaceCache: h
    })) : r && (r instanceof je ? r.dict.get("IM", "ImageMask") ? (r.fallbackDims ?? (r.fallbackDims = {
      width: x,
      height: g
    }), this.mask = new aa({
      xref: e,
      res: n,
      image: r,
      isInline: s,
      isMask: !0,
      pdfFunctionFactory: c,
      globalColorSpaceCache: l,
      localColorSpaceCache: h
    })) : I("Ignoring /Mask in image without /ImageMask.") : this.mask = r);
  }
  static async buildImage({
    xref: e,
    res: n,
    image: i,
    isInline: s = !1,
    pdfFunctionFactory: a,
    globalColorSpaceCache: r,
    localColorSpaceCache: o
  }) {
    const c = i;
    let l = null, h = null;
    const f = i.dict.get("SMask"), u = i.dict.get("Mask");
    return f ? f instanceof je ? l = f : I("Unsupported /SMask format.") : u && (u instanceof je || Array.isArray(u) ? h = u : I("Unsupported /Mask format.")), new aa({
      xref: e,
      res: n,
      image: c,
      isInline: s,
      smask: l,
      mask: h,
      pdfFunctionFactory: a,
      globalColorSpaceCache: r,
      localColorSpaceCache: o
    });
  }
  static async createMask({
    image: e,
    isOffscreenCanvasSupported: n = !1
  }) {
    const {
      dict: i
    } = e, s = i.get("W", "Width"), a = i.get("H", "Height"), r = i.get("I", "Interpolate"), o = i.getArray("D", "Decode"), c = (o == null ? void 0 : o[0]) > 0, l = (s + 7 >> 3) * a, h = e.getBytes(l), f = s === 1 && a === 1 && c === (h.length === 0 || !!(h[0] & 128));
    if (f)
      return {
        isSingleOpaquePixel: f
      };
    if (n) {
      if (Zn.needsToBeResized(s, a)) {
        const w = new Uint8ClampedArray(s * a * 4);
        return Xc({
          src: h,
          dest: w,
          width: s,
          height: a,
          nonBlackColor: 0,
          inverseDecode: c
        }), Zn.createImage({
          kind: Gt.RGBA_32BPP,
          data: w,
          width: s,
          height: a,
          interpolate: r
        });
      }
      const g = new OffscreenCanvas(s, a), m = g.getContext("2d"), p = m.createImageData(s, a);
      Xc({
        src: h,
        dest: p.data,
        width: s,
        height: a,
        nonBlackColor: 0,
        inverseDecode: c
      }), m.putImageData(p, 0, 0);
      const b = g.transferToImageBitmap();
      return {
        data: null,
        width: s,
        height: a,
        interpolate: r,
        bitmap: b
      };
    }
    const u = h.byteLength, d = l === u;
    let x;
    if (e instanceof mn && (!c || d) ? x = h : c ? (x = new Uint8Array(l), x.set(h), x.fill(255, u)) : x = new Uint8Array(h), c)
      for (let g = 0; g < u; g++)
        x[g] ^= 255;
    return {
      data: x,
      width: s,
      height: a,
      interpolate: r
    };
  }
  get drawWidth() {
    var e, n;
    return Math.max(this.width, ((e = this.smask) == null ? void 0 : e.width) || 0, ((n = this.mask) == null ? void 0 : n.width) || 0);
  }
  get drawHeight() {
    var e, n;
    return Math.max(this.height, ((e = this.smask) == null ? void 0 : e.height) || 0, ((n = this.mask) == null ? void 0 : n.height) || 0);
  }
  decodeBuffer(e) {
    const n = this.bpc, i = this.numComps, s = this.decodeAddends, a = this.decodeCoefficients, r = (1 << n) - 1;
    let o, c;
    if (n === 1) {
      for (o = 0, c = e.length; o < c; o++)
        e[o] = +!e[o];
      return;
    }
    let l = 0;
    for (o = 0, c = this.width * this.height; o < c; o++)
      for (let h = 0; h < i; h++)
        e[l] = Wt(s[h] + e[l] * a[h], 0, r), l++;
  }
  getComponents(e) {
    const n = this.bpc;
    if (n === 8)
      return e;
    const i = this.width, s = this.height, a = this.numComps, r = i * s * a;
    let o = 0, c;
    n <= 8 ? c = new Uint8Array(r) : n <= 16 ? c = new Uint16Array(r) : c = new Uint32Array(r);
    const l = i * a, h = (1 << n) - 1;
    let f = 0, u, d;
    if (n === 1) {
      let x, g, m;
      for (let p = 0; p < s; p++) {
        for (g = f + (l & -8), m = f + l; f < g; )
          d = e[o++], c[f] = d >> 7 & 1, c[f + 1] = d >> 6 & 1, c[f + 2] = d >> 5 & 1, c[f + 3] = d >> 4 & 1, c[f + 4] = d >> 3 & 1, c[f + 5] = d >> 2 & 1, c[f + 6] = d >> 1 & 1, c[f + 7] = d & 1, f += 8;
        if (f < m)
          for (d = e[o++], x = 128; f < m; )
            c[f++] = +!!(d & x), x >>= 1;
      }
    } else {
      let x = 0;
      for (d = 0, f = 0, u = r; f < u; ++f) {
        for (f % l === 0 && (d = 0, x = 0); x < n; )
          d = d << 8 | e[o++], x += 8;
        const g = x - n;
        let m = d >> g;
        m < 0 ? m = 0 : m > h && (m = h), c[f] = m, d &= (1 << g) - 1, x = g;
      }
    }
    return c;
  }
  async fillOpacity(e, n, i, s, a) {
    const r = this.smask, o = this.mask;
    let c, l, h, f, u, d;
    if (r)
      l = r.width, h = r.height, c = new Uint8ClampedArray(l * h), await r.fillGrayBuffer(c), (l !== n || h !== i) && (c = Rh(c, r.bpc, l, h, n, i));
    else if (o)
      if (o instanceof aa) {
        for (l = o.width, h = o.height, c = new Uint8ClampedArray(l * h), o.numComps = 1, await o.fillGrayBuffer(c), f = 0, u = l * h; f < u; ++f)
          c[f] = 255 - c[f];
        (l !== n || h !== i) && (c = Rh(c, o.bpc, l, h, n, i));
      } else if (Array.isArray(o)) {
        c = new Uint8ClampedArray(n * i);
        const x = this.numComps;
        for (f = 0, u = n * i; f < u; ++f) {
          let g = 0;
          const m = f * x;
          for (d = 0; d < x; ++d) {
            const p = a[m + d], b = d * 2;
            if (p < o[b] || p > o[b + 1]) {
              g = 255;
              break;
            }
          }
          c[f] = g;
        }
      } else
        throw new j("Unknown mask format.");
    if (c)
      for (f = 0, d = 3, u = n * s; f < u; ++f, d += 4)
        e[d] = c[f];
    else
      for (f = 0, d = 3, u = n * s; f < u; ++f, d += 4)
        e[d] = 255;
  }
  undoPreblend(e, n, i) {
    var h;
    const s = (h = this.smask) == null ? void 0 : h.matte;
    if (!s)
      return;
    const a = this.colorSpace.getRgb(s, 0), r = a[0], o = a[1], c = a[2], l = n * i * 4;
    for (let f = 0; f < l; f += 4) {
      const u = e[f + 3];
      if (u === 0) {
        e[f] = 255, e[f + 1] = 255, e[f + 2] = 255;
        continue;
      }
      const d = 255 / u;
      e[f] = (e[f] - r) * d + r, e[f + 1] = (e[f + 1] - o) * d + o, e[f + 2] = (e[f + 2] - c) * d + c;
    }
  }
  async createImageData(e = !1, n = !1) {
    const i = this.drawWidth, s = this.drawHeight, a = {
      width: i,
      height: s,
      interpolate: this.interpolate,
      kind: 0,
      data: null
    }, r = this.numComps, o = this.width, c = this.height, l = this.bpc, h = o * r * l + 7 >> 3, f = n && Zn.needsToBeResized(i, s);
    if (!this.smask && !this.mask && this.colorSpace.name === "DeviceRGBA") {
      a.kind = Gt.RGBA_32BPP;
      const k = a.data = await this.getImageBytes(c * o * 4, {});
      return n ? f ? Zn.createImage(a, !1) : this.createBitmap(Gt.RGBA_32BPP, i, s, k) : a;
    }
    if (!e) {
      let k;
      if (this.colorSpace.name === "DeviceGray" && l === 1 ? k = Gt.GRAYSCALE_1BPP : this.colorSpace.name === "DeviceRGB" && l === 8 && !this.needsDecode && (k = Gt.RGB_24BPP), k && !this.smask && !this.mask && i === o && s === c) {
        const S = await J(this, Y0, ul).call(this, o, c);
        if (S)
          return S;
        const C = await this.getImageBytes(c * h, {});
        if (n)
          return f ? Zn.createImage({
            data: C,
            kind: k,
            width: i,
            height: s,
            interpolate: this.interpolate
          }, this.needsDecode) : this.createBitmap(k, o, c, C);
        if (a.kind = k, a.data = C, this.needsDecode) {
          zt(k === Gt.GRAYSCALE_1BPP, "PDFImage.createImageData: The image must be grayscale.");
          const T = a.data;
          for (let F = 0, R = T.length; F < R; F++)
            T[F] ^= 255;
        }
        return a;
      }
      if (this.image instanceof Ia && !this.smask && !this.mask && !this.needsDecode) {
        let S = c * h;
        if (n && !f) {
          let C = !1;
          switch (this.colorSpace.name) {
            case "DeviceGray":
              S *= 4, C = !0;
              break;
            case "DeviceRGB":
              S = S / 3 * 4, C = !0;
              break;
            case "DeviceCMYK":
              C = !0;
              break;
          }
          if (C) {
            const T = await J(this, Y0, ul).call(this, i, s);
            if (T)
              return T;
            const F = await this.getImageBytes(S, {
              drawWidth: i,
              drawHeight: s,
              forceRGBA: !0
            });
            return this.createBitmap(Gt.RGBA_32BPP, i, s, F);
          }
        } else
          switch (this.colorSpace.name) {
            case "DeviceGray":
              S *= 3;
            case "DeviceRGB":
            case "DeviceCMYK":
              return a.kind = Gt.RGB_24BPP, a.data = await this.getImageBytes(S, {
                drawWidth: i,
                drawHeight: s,
                forceRGB: !0
              }), f ? Zn.createImage(a) : a;
          }
      }
    }
    const u = await this.getImageBytes(c * h, {
      internal: !0
    }), d = 0 | u.length / h * s / c, x = this.getComponents(u);
    let g, m, p, b, w, y;
    if (n && !f && (p = new OffscreenCanvas(i, s), b = p.getContext("2d"), w = b.createImageData(i, s), y = w.data), a.kind = Gt.RGBA_32BPP, !e && !this.smask && !this.mask ? (!n || f ? (a.kind = Gt.RGB_24BPP, y = new Uint8ClampedArray(i * s * 3), g = 0) : (new Uint32Array(y.buffer).fill(An.isLittleEndian ? 4278190080 : 255), g = 1), m = !1) : ((!n || f) && (y = new Uint8ClampedArray(i * s * 4)), g = 1, m = !0, await this.fillOpacity(y, i, s, d, x)), this.needsDecode && this.decodeBuffer(x), this.colorSpace.fillRgb(y, o, c, i, s, d, l, x, g), m && this.undoPreblend(y, i, d), n && !f) {
      b.putImageData(w, 0, 0);
      const k = p.transferToImageBitmap();
      return {
        data: null,
        width: i,
        height: s,
        bitmap: k,
        interpolate: this.interpolate
      };
    }
    return a.data = y, f ? Zn.createImage(a) : a;
  }
  async fillGrayBuffer(e) {
    const n = this.numComps;
    if (n !== 1)
      throw new j(`Reading gray scale from a color image: ${n}`);
    const i = this.width, s = this.height, a = this.bpc, r = i * n * a + 7 >> 3, o = await this.getImageBytes(s * r, {
      internal: !0
    }), c = this.getComponents(o);
    let l, h;
    if (a === 1) {
      if (h = i * s, this.needsDecode)
        for (l = 0; l < h; ++l)
          e[l] = c[l] - 1 & 255;
      else
        for (l = 0; l < h; ++l)
          e[l] = -c[l] & 255;
      return;
    }
    this.needsDecode && this.decodeBuffer(c), h = i * s;
    const f = 255 / ((1 << a) - 1);
    for (l = 0; l < h; ++l)
      e[l] = f * c[l];
  }
  createBitmap(e, n, i, s) {
    const a = new OffscreenCanvas(n, i), r = a.getContext("2d");
    let o;
    e === Gt.RGBA_32BPP ? o = new ImageData(s, n, i) : (o = r.createImageData(n, i), Ff({
      kind: e,
      src: s,
      dest: new Uint32Array(o.data.buffer),
      width: n,
      height: i,
      inverseDecode: this.needsDecode
    })), r.putImageData(o, 0, 0);
    const c = a.transferToImageBitmap();
    return {
      data: null,
      width: n,
      height: i,
      bitmap: c,
      interpolate: this.interpolate
    };
  }
  async getImageBytes(e, {
    drawWidth: n,
    drawHeight: i,
    forceRGBA: s = !1,
    forceRGB: a = !1,
    internal: r = !1
  }) {
    this.image.reset(), this.image.drawWidth = n || this.width, this.image.drawHeight = i || this.height, this.image.forceRGBA = !!s, this.image.forceRGB = !!a;
    const o = await this.image.getImageData(e, this.jpxDecoderOptions);
    return r || this.image instanceof mn ? o : (zt(o instanceof Uint8Array, 'PDFImage.getImageBytes: Unsupported "imageBytes" type.'), new Uint8Array(o));
  }
};
Y0 = new WeakSet(), ul = async function(e, n) {
  const i = await this.image.getTransferableImage();
  return i ? {
    data: null,
    width: e,
    height: n,
    bitmap: i,
    interpolate: this.interpolate
  } : null;
};
let h0 = aa;
const Yg = Object.freeze({
  maxImageSize: -1,
  disableFontFace: !1,
  ignoreErrors: !1,
  isEvalSupported: !0,
  isOffscreenCanvasSupported: !1,
  isImageDecoderSupported: !1,
  canvasMaxAreaInBytes: -1,
  fontExtraProperties: !1,
  useSystemFonts: !0,
  useWasm: !0,
  useWorkerFetch: !0,
  cMapUrl: null,
  iccUrl: null,
  standardFontDataUrl: null,
  wasmUrl: null
}), Mh = {
  TILING: 1,
  SHADING: 2
}, Zg = 10, Dh = Promise.resolve();
function au(t, e = !1) {
  if (Array.isArray(t)) {
    for (const n of t) {
      const i = au(n, !0);
      if (i)
        return i;
    }
    return I(`Unsupported blend mode Array: ${t}`), "source-over";
  }
  if (!(t instanceof O))
    return e ? null : "source-over";
  switch (t.name) {
    case "Normal":
    case "Compatible":
      return "source-over";
    case "Multiply":
      return "multiply";
    case "Screen":
      return "screen";
    case "Overlay":
      return "overlay";
    case "Darken":
      return "darken";
    case "Lighten":
      return "lighten";
    case "ColorDodge":
      return "color-dodge";
    case "ColorBurn":
      return "color-burn";
    case "HardLight":
      return "hard-light";
    case "SoftLight":
      return "soft-light";
    case "Difference":
      return "difference";
    case "Exclusion":
      return "exclusion";
    case "Hue":
      return "hue";
    case "Saturation":
      return "saturation";
    case "Color":
      return "color";
    case "Luminosity":
      return "luminosity";
  }
  return e ? null : (I(`Unsupported blend mode: ${t.name}`), "source-over");
}
function yc(t, {
  objId: e,
  fn: n,
  args: i,
  optionalContent: s,
  hasMask: a
}) {
  var r;
  e && t.addDependency(e), t.addImageOps(n, i, s, a), n === A.paintImageMaskXObject && ((r = i[0]) == null ? void 0 : r.count) > 0 && i[0].count++;
}
const ra = class ra {
  constructor() {
    this.reset();
  }
  check() {
    return ++this.checked < ra.CHECK_TIME_EVERY ? !1 : (this.checked = 0, this.endTime <= Date.now());
  }
  reset() {
    this.endTime = Date.now() + ra.TIME_SLOT_DURATION_MS, this.checked = 0;
  }
};
Ye(ra, "TIME_SLOT_DURATION_MS", 20), Ye(ra, "CHECK_TIME_EVERY", 100);
let lo = ra;
class Fa {
  constructor({
    xref: e,
    handler: n,
    pageIndex: i,
    idFactory: s,
    fontCache: a,
    builtInCMapCache: r,
    standardFontDataCache: o,
    globalColorSpaceCache: c,
    globalImageCache: l,
    systemFontCache: h,
    options: f = null
  }) {
    this.xref = e, this.handler = n, this.pageIndex = i, this.idFactory = s, this.fontCache = a, this.builtInCMapCache = r, this.standardFontDataCache = o, this.globalColorSpaceCache = c, this.globalImageCache = l, this.systemFontCache = h, this.options = f || Yg, this.type3FontRefs = null, this._regionalImageCache = new Dg(), this._fetchBuiltInCMapBound = this.fetchBuiltInCMap.bind(this);
  }
  get _pdfFunctionFactory() {
    const e = new iu({
      xref: this.xref,
      isEvalSupported: this.options.isEvalSupported
    });
    return Q(this, "_pdfFunctionFactory", e);
  }
  get parsingType3Font() {
    return !!this.type3FontRefs;
  }
  clone(e = null) {
    const n = Object.create(this);
    return n.options = Object.assign(/* @__PURE__ */ Object.create(null), this.options, e), n;
  }
  hasBlendModes(e, n) {
    if (!(e instanceof E) || e.objId && n.has(e.objId))
      return !1;
    const i = new Dt(n);
    e.objId && i.put(e.objId);
    const s = [e], a = this.xref;
    for (; s.length; ) {
      const r = s.shift(), o = r.get("ExtGState");
      if (o instanceof E)
        for (let l of o.getRawValues()) {
          if (l instanceof he) {
            if (i.has(l))
              continue;
            try {
              l = a.fetch(l);
            } catch (f) {
              i.put(l), Ge(`hasBlendModes - ignoring ExtGState: "${f}".`);
              continue;
            }
          }
          if (!(l instanceof E))
            continue;
          l.objId && i.put(l.objId);
          const h = l.get("BM");
          if (h instanceof O) {
            if (h.name !== "Normal")
              return !0;
            continue;
          }
          if (h !== void 0 && Array.isArray(h)) {
            for (const f of h)
              if (f instanceof O && f.name !== "Normal")
                return !0;
          }
        }
      const c = r.get("XObject");
      if (c instanceof E)
        for (let l of c.getRawValues()) {
          if (l instanceof he) {
            if (i.has(l))
              continue;
            try {
              l = a.fetch(l);
            } catch (f) {
              i.put(l), Ge(`hasBlendModes - ignoring XObject: "${f}".`);
              continue;
            }
          }
          if (!(l instanceof je))
            continue;
          l.dict.objId && i.put(l.dict.objId);
          const h = l.dict.get("Resources");
          h instanceof E && (h.objId && i.has(h.objId) || (s.push(h), h.objId && i.put(h.objId)));
        }
    }
    for (const r of i)
      n.put(r);
    return !1;
  }
  async fetchBuiltInCMap(e) {
    const n = this.builtInCMapCache.get(e);
    if (n)
      return n;
    let i;
    return this.options.useWorkerFetch ? i = {
      cMapData: await Uc(`${this.options.cMapUrl}${e}.bcmap`),
      isCompressed: !0
    } : i = await this.handler.sendWithPromise("FetchBinaryData", {
      type: "cMapReaderFactory",
      name: e
    }), this.builtInCMapCache.set(e, i), i;
  }
  async fetchStandardFontData(e) {
    const n = this.standardFontDataCache.get(e);
    if (n)
      return new At(n);
    if (this.options.useSystemFonts && e !== "Symbol" && e !== "ZapfDingbats")
      return null;
    const i = ex(), s = i[e];
    let a;
    try {
      this.options.useWorkerFetch ? a = await Uc(`${this.options.standardFontDataUrl}${s}`) : a = await this.handler.sendWithPromise("FetchBinaryData", {
        type: "standardFontDataFactory",
        filename: s
      });
    } catch (r) {
      return I(r), null;
    }
    return this.standardFontDataCache.set(e, a), new At(a);
  }
  async buildFormXObject(e, n, i, s, a, r, o, c) {
    const {
      dict: l
    } = n, h = ts(l.getArray("Matrix"), null), f = qi(l.getArray("BBox"), null);
    let u, d;
    l.has("OC") && (u = await this.parseMarkedContentProps(l.get("OC"), e)), u !== void 0 && s.addOp(A.beginMarkedContentProps, ["OC", u]);
    const x = l.get("Group");
    if (x) {
      d = {
        matrix: h,
        bbox: f,
        smask: i,
        isolated: !1,
        knockout: !1
      };
      const w = x.get("S");
      let y = null;
      if (Tt(w, "Transparency") && (d.isolated = x.get("I") || !1, d.knockout = x.get("K") || !1, x.has("CS"))) {
        const k = this._getColorSpace(x.getRaw("CS"), e, o);
        y = k instanceof nn ? k : await this._handleColorSpace(k);
      }
      i != null && i.backdrop && (y || (y = Qe.rgb), i.backdrop = y.getRgbHex(i.backdrop, 0)), s.addOp(A.beginGroup, [d]);
    }
    const g = h && new Float32Array(h), m = !x && f && new Float32Array(f) || null, p = [g, m];
    s.addOp(A.paintFormXObjectBegin, p);
    const b = l.get("Resources");
    await this.getOperatorList({
      stream: n,
      task: a,
      resources: b instanceof E ? b : e,
      operatorList: s,
      initialState: r,
      prevRefs: c
    }), s.addOp(A.paintFormXObjectEnd, []), x && s.addOp(A.endGroup, [d]), u !== void 0 && s.addOp(A.endMarkedContent, []);
  }
  _sendImgData(e, n, i = !1) {
    const s = n ? [n.bitmap || n.data.buffer] : null;
    return this.parsingType3Font || i ? this.handler.send("commonobj", [e, "Image", n], s) : this.handler.send("obj", [e, this.pageIndex, "Image", n], s);
  }
  async buildPaintImageXObject({
    resources: e,
    image: n,
    isInline: i = !1,
    operatorList: s,
    cacheKey: a,
    localImageCache: r,
    localColorSpaceCache: o
  }) {
    const {
      maxImageSize: c,
      ignoreErrors: l,
      isOffscreenCanvasSupported: h
    } = this.options, {
      dict: f
    } = n, u = f.objId, d = f.get("W", "Width"), x = f.get("H", "Height");
    if (!(d && typeof d == "number") || !(x && typeof x == "number")) {
      I("Image dimensions are missing, or not numbers.");
      return;
    }
    if (c !== -1 && d * x > c) {
      const F = "Image exceeded maximum allowed size and was removed.";
      if (!l)
        throw new Error(F);
      I(F);
      return;
    }
    let g;
    f.has("OC") && (g = await this.parseMarkedContentProps(f.get("OC"), e));
    const m = f.get("IM", "ImageMask") || !1;
    let p, b, w;
    if (m) {
      if (p = await h0.createMask({
        image: n,
        isOffscreenCanvasSupported: h && !this.parsingType3Font
      }), p.isSingleOpaquePixel) {
        if (b = A.paintSolidColorImageMask, w = [], s.addImageOps(b, w, g), a) {
          const R = {
            fn: b,
            args: w,
            optionalContent: g
          };
          r.set(a, u, R), u && this._regionalImageCache.set(null, u, R);
        }
        return;
      }
      if (this.parsingType3Font) {
        if (w = $9(p), w) {
          s.addImageOps(A.constructPath, w, g);
          return;
        }
        I("Cannot compile Type3 glyph."), s.addImageOps(A.paintImageMaskXObject, [p], g);
        return;
      }
      const F = `mask_${this.idFactory.createObjId()}`;
      if (s.addDependency(F), p.dataLen = p.bitmap ? p.width * p.height * 4 : p.data.length, this._sendImgData(F, p), b = A.paintImageMaskXObject, w = [{
        data: F,
        width: p.width,
        height: p.height,
        interpolate: p.interpolate,
        count: 1
      }], s.addImageOps(b, w, g), a) {
        const R = {
          objId: F,
          fn: b,
          args: w,
          optionalContent: g
        };
        r.set(a, u, R), u && this._regionalImageCache.set(null, u, R);
      }
      return;
    }
    const y = 200, k = f.has("SMask") || f.has("Mask");
    if (i && d + x < y && !k) {
      try {
        p = await new h0({
          xref: this.xref,
          res: e,
          image: n,
          isInline: i,
          pdfFunctionFactory: this._pdfFunctionFactory,
          globalColorSpaceCache: this.globalColorSpaceCache,
          localColorSpaceCache: o
        }).createImageData(!0, !1), s.addImageOps(A.paintInlineImageXObject, [p], g);
      } catch (F) {
        const R = `Unable to decode inline image: "${F}".`;
        if (!l)
          throw new Error(R);
        I(R);
      }
      return;
    }
    let S = `img_${this.idFactory.createObjId()}`, C = !1, T = null;
    if (this.parsingType3Font ? S = `${this.idFactory.getDocId()}_type3_${S}` : a && u && (C = this.globalImageCache.shouldCache(u, this.pageIndex), C && (zt(!i, "Cannot cache an inline image globally."), S = `${this.idFactory.getDocId()}_${S}`)), s.addDependency(S), b = A.paintImageXObject, w = [S, d, x], s.addImageOps(b, w, g, k), C) {
      if (T = {
        objId: S,
        fn: b,
        args: w,
        optionalContent: g,
        hasMask: k,
        byteSize: 0
      }, this.globalImageCache.hasDecodeFailed(u)) {
        this.globalImageCache.setData(u, T), this._sendImgData(S, null, C);
        return;
      }
      if (d * x > 25e4 || k) {
        const F = await this.handler.sendWithPromise("commonobj", [S, "CopyLocalImage", {
          imageRef: u
        }]);
        if (F) {
          this.globalImageCache.setData(u, T), this.globalImageCache.addByteSize(u, F);
          return;
        }
      }
    }
    if (h0.buildImage({
      xref: this.xref,
      res: e,
      image: n,
      isInline: i,
      pdfFunctionFactory: this._pdfFunctionFactory,
      globalColorSpaceCache: this.globalColorSpaceCache,
      localColorSpaceCache: o
    }).then(async (F) => (p = await F.createImageData(!1, h), p.dataLen = p.bitmap ? p.width * p.height * 4 : p.data.length, p.ref = u, C && this.globalImageCache.addByteSize(u, p.dataLen), this._sendImgData(S, p, C))).catch((F) => (I(`Unable to decode image "${S}": "${F}".`), u && this.globalImageCache.addDecodeFailed(u), this._sendImgData(S, null, C))), a) {
      const F = {
        objId: S,
        fn: b,
        args: w,
        optionalContent: g,
        hasMask: k
      };
      r.set(a, u, F), u && (this._regionalImageCache.set(null, u, F), C && (zt(T, "The global cache-data must be available."), this.globalImageCache.setData(u, T)));
    }
  }
  handleSMask(e, n, i, s, a, r, o) {
    const c = e.get("G"), l = {
      subtype: e.get("S").name,
      backdrop: e.get("BC")
    }, h = e.get("TR");
    if (bc(h)) {
      const f = this._pdfFunctionFactory.create(h), u = new Uint8Array(256), d = new Float32Array(1);
      for (let x = 0; x < 256; x++)
        d[0] = x / 255, f(d, 0, d, 0), u[x] = d[0] * 255 | 0;
      l.transferMap = u;
    }
    return this.buildFormXObject(n, c, l, i, s, a.state.clone({
      newPath: !0
    }), r, o);
  }
  handleTransferFunction(e) {
    let n;
    if (Array.isArray(e))
      n = e;
    else if (bc(e))
      n = [e];
    else
      return null;
    const i = [];
    let s = 0, a = 0;
    for (const r of n) {
      const o = this.xref.fetchIfRef(r);
      if (s++, Tt(o, "Identity")) {
        i.push(null);
        continue;
      } else if (!bc(o))
        return null;
      const c = this._pdfFunctionFactory.create(o), l = new Uint8Array(256), h = new Float32Array(1);
      for (let f = 0; f < 256; f++)
        h[0] = f / 255, c(h, 0, h, 0), l[f] = h[0] * 255 | 0;
      i.push(l), a++;
    }
    return !(s === 1 || s === 4) || a === 0 ? null : i;
  }
  handleTilingType(e, n, i, s, a, r, o, c) {
    const l = new on(), h = E.merge({
      xref: this.xref,
      dictArray: [a.get("Resources"), i]
    });
    return this.getOperatorList({
      stream: s,
      task: o,
      resources: h,
      operatorList: l
    }).then(function() {
      const f = l.getIR(), u = wh(f, a, n);
      r.addDependencies(l.dependencies), r.addOp(e, u), a.objId && c.set(null, a.objId, {
        operatorListIR: f,
        dict: a
      });
    }).catch((f) => {
      if (!(f instanceof Jt)) {
        if (this.options.ignoreErrors) {
          I(`handleTilingType - ignoring pattern: "${f}".`);
          return;
        }
        throw f;
      }
    });
  }
  async handleSetFont(e, n, i, s, a, r, o = null, c = null) {
    const l = (n == null ? void 0 : n[0]) instanceof O ? n[0].name : null, h = await this.loadFont(l, i, e, a, o, c);
    return h.font.isType3Font && s.addDependencies(h.type3Dependencies), r.font = h.font, h.send(this.handler), h.loadedName;
  }
  handleText(e, n) {
    const i = n.font, s = i.charsToGlyphs(e);
    return i.data && (n.textRenderingMode & cf.ADD_TO_PATH_FLAG || n.fillColorSpace.name === "Pattern" || i.disableFontFace) && Fa.buildFontPaths(i, s, this.handler, this.options), s;
  }
  ensureStateFont(e) {
    if (e.font)
      return;
    const n = new j("Missing setFont (Tf) operator before text rendering operator.");
    if (this.options.ignoreErrors) {
      I(`ensureStateFont: "${n}".`);
      return;
    }
    throw n;
  }
  async setGState({
    resources: e,
    gState: n,
    operatorList: i,
    cacheKey: s,
    task: a,
    stateManager: r,
    localGStateCache: o,
    localColorSpaceCache: c,
    seenRefs: l
  }) {
    const h = n.objId;
    let f = !0;
    const u = [];
    let d = Promise.resolve();
    for (const [x, g] of n)
      switch (x) {
        case "Type":
          break;
        case "LW":
          if (typeof g != "number") {
            I(`Invalid LW (line width): ${g}`);
            break;
          }
          u.push([x, Math.abs(g)]);
          break;
        case "LC":
        case "LJ":
        case "ML":
        case "D":
        case "RI":
        case "FL":
        case "CA":
        case "ca":
          u.push([x, g]);
          break;
        case "Font":
          f = !1, d = d.then(() => this.handleSetFont(e, null, g[0], i, a, r.state).then(function(p) {
            i.addDependency(p), u.push([x, [p, g[1]]]);
          }));
          break;
        case "BM":
          u.push([x, au(g)]);
          break;
        case "SMask":
          if (Tt(g, "None")) {
            u.push([x, !1]);
            break;
          }
          g instanceof E ? (f = !1, d = d.then(() => this.handleSMask(g, e, i, a, r, c, l)), u.push([x, !0])) : I("Unsupported SMask type");
          break;
        case "TR":
          const m = this.handleTransferFunction(g);
          u.push([x, m]);
          break;
        case "OP":
        case "op":
        case "OPM":
        case "BG":
        case "BG2":
        case "UCR":
        case "UCR2":
        case "TR2":
        case "HT":
        case "SM":
        case "SA":
        case "AIS":
        case "TK":
          Ge("graphic state operator " + x);
          break;
        default:
          Ge("Unknown graphic state operator " + x);
          break;
      }
    await d, u.length > 0 && i.addOp(A.setGState, [u]), f && o.set(s, h, u);
  }
  loadFont(e, n, i, s, a = null, r = null) {
    var m;
    const o = async () => new kc({
      loadedName: "g_font_error",
      font: new mh(`Font "${e}" is not available.`),
      dict: n
    });
    let c;
    if (n)
      n instanceof he && (c = n);
    else {
      const p = i.get("Font");
      p && (c = p.getRaw(e));
    }
    if (c) {
      if ((m = this.type3FontRefs) != null && m.has(c))
        return o();
      if (this.fontCache.has(c))
        return this.fontCache.get(c);
      try {
        n = this.xref.fetchIfRef(c);
      } catch (p) {
        I(`loadFont - lookup failed: "${p}".`);
      }
    }
    if (!(n instanceof E)) {
      if (!this.options.ignoreErrors && !this.parsingType3Font)
        return I(`Font "${e}" is not available.`), o();
      I(`Font "${e}" is not available -- attempting to fallback to a default font.`), n = a || Fa.fallbackFontDict;
    }
    if (n.cacheKey && this.fontCache.has(n.cacheKey))
      return this.fontCache.get(n.cacheKey);
    const {
      promise: l,
      resolve: h
    } = Promise.withResolvers();
    let f;
    try {
      f = this.preEvaluateFont(n), f.cssFontInfo = r;
    } catch (p) {
      return I(`loadFont - preEvaluateFont failed: "${p}".`), o();
    }
    const {
      descriptor: u,
      hash: d
    } = f, x = c instanceof he;
    let g;
    if (d && u instanceof E) {
      const p = u.fontAliases || (u.fontAliases = /* @__PURE__ */ Object.create(null));
      if (p[d]) {
        const b = p[d].aliasRef;
        if (x && b && this.fontCache.has(b))
          return this.fontCache.putAlias(c, b), this.fontCache.get(c);
      } else
        p[d] = {
          fontID: this.idFactory.createFontId()
        };
      x && (p[d].aliasRef = c), g = p[d].fontID;
    } else
      g = this.idFactory.createFontId();
    return zt(g == null ? void 0 : g.startsWith("f"), 'The "fontID" must be (correctly) defined.'), x ? this.fontCache.put(c, l) : (n.cacheKey = `cacheKey_${g}`, this.fontCache.put(n.cacheKey, l)), n.loadedName = `${this.idFactory.getDocId()}_${g}`, this.translateFont(f).then(async (p) => {
      const b = new kc({
        loadedName: n.loadedName,
        font: p,
        dict: n
      });
      if (p.isType3Font)
        try {
          await b.loadType3Data(this, i, s);
        } catch (w) {
          throw new Error(`Type3 font load error: ${w}`);
        }
      h(b);
    }).catch((p) => {
      I(`loadFont - translateFont failed: "${p}".`), h(new kc({
        loadedName: n.loadedName,
        font: new mh(p == null ? void 0 : p.message),
        dict: n
      }));
    }), l;
  }
  buildPath(e, n, i) {
    const {
      pathMinMax: s,
      pathBuffer: a
    } = i;
    switch (e | 0) {
      case A.rectangle: {
        const r = i.currentPointX = n[0], o = i.currentPointY = n[1], c = n[2], l = n[3], h = r + c, f = o + l;
        c === 0 || l === 0 ? a.push(Ut.moveTo, r, o, Ut.lineTo, h, f, Ut.closePath) : a.push(Ut.moveTo, r, o, Ut.lineTo, h, o, Ut.lineTo, h, f, Ut.lineTo, r, f, Ut.closePath), tt.rectBoundingBox(r, o, h, f, s);
        break;
      }
      case A.moveTo: {
        const r = i.currentPointX = n[0], o = i.currentPointY = n[1];
        a.push(Ut.moveTo, r, o), tt.pointBoundingBox(r, o, s);
        break;
      }
      case A.lineTo: {
        const r = i.currentPointX = n[0], o = i.currentPointY = n[1];
        a.push(Ut.lineTo, r, o), tt.pointBoundingBox(r, o, s);
        break;
      }
      case A.curveTo: {
        const r = i.currentPointX, o = i.currentPointY, [c, l, h, f, u, d] = n;
        i.currentPointX = u, i.currentPointY = d, a.push(Ut.curveTo, c, l, h, f, u, d), tt.bezierBoundingBox(r, o, c, l, h, f, u, d, s);
        break;
      }
      case A.curveTo2: {
        const r = i.currentPointX, o = i.currentPointY, [c, l, h, f] = n;
        i.currentPointX = h, i.currentPointY = f, a.push(Ut.curveTo, r, o, c, l, h, f), tt.bezierBoundingBox(r, o, r, o, c, l, h, f, s);
        break;
      }
      case A.curveTo3: {
        const r = i.currentPointX, o = i.currentPointY, [c, l, h, f] = n;
        i.currentPointX = h, i.currentPointY = f, a.push(Ut.curveTo, c, l, h, f, h, f), tt.bezierBoundingBox(r, o, c, l, h, f, h, f, s);
        break;
      }
      case A.closePath:
        a.push(Ut.closePath);
        break;
    }
  }
  _getColorSpace(e, n, i) {
    return Qe.parse({
      cs: e,
      xref: this.xref,
      resources: n,
      pdfFunctionFactory: this._pdfFunctionFactory,
      globalColorSpaceCache: this.globalColorSpaceCache,
      localColorSpaceCache: i,
      asyncIfNotCached: !0
    });
  }
  async _handleColorSpace(e) {
    try {
      return await e;
    } catch (n) {
      if (n instanceof Jt)
        return null;
      if (this.options.ignoreErrors)
        return I(`_handleColorSpace - ignoring ColorSpace: "${n}".`), null;
      throw n;
    }
  }
  parseShading({
    shading: e,
    resources: n,
    localColorSpaceCache: i,
    localShadingPatternCache: s
  }) {
    let a = s.get(e);
    if (a)
      return a;
    let r;
    try {
      r = Gx.parseShading(e, this.xref, n, this._pdfFunctionFactory, this.globalColorSpaceCache, i).getIR();
    } catch (o) {
      if (o instanceof Jt)
        return null;
      if (this.options.ignoreErrors)
        return I(`parseShading - ignoring shading: "${o}".`), s.set(e, null), null;
      throw o;
    }
    return a = `pattern_${this.idFactory.createObjId()}`, this.parsingType3Font && (a = `${this.idFactory.getDocId()}_type3_${a}`), s.set(e, a), this.parsingType3Font ? this.handler.send("commonobj", [a, "Pattern", r]) : this.handler.send("obj", [a, this.pageIndex, "Pattern", r]), a;
  }
  handleColorN(e, n, i, s, a, r, o, c, l, h) {
    const f = i.pop();
    if (f instanceof O) {
      const u = a.getRaw(f.name), d = u instanceof he && l.getByRef(u);
      if (d)
        try {
          const g = s.base ? s.base.getRgbHex(i, 0) : null, m = wh(d.operatorListIR, d.dict, g);
          e.addOp(n, m);
          return;
        } catch {
        }
      const x = this.xref.fetchIfRef(u);
      if (x) {
        const g = x instanceof je ? x.dict : x, m = g.get("PatternType");
        if (m === Mh.TILING) {
          const p = s.base ? s.base.getRgbHex(i, 0) : null;
          return this.handleTilingType(n, p, r, x, g, e, o, l);
        } else if (m === Mh.SHADING) {
          const p = g.get("Shading"), b = this.parseShading({
            shading: p,
            resources: r,
            localColorSpaceCache: c,
            localShadingPatternCache: h
          });
          if (b) {
            const w = ts(g.getArray("Matrix"), null);
            e.addOp(n, ["Shading", b, w]);
          }
          return;
        }
        throw new j(`Unknown PatternType: ${m}`);
      }
    }
    throw new j(`Unknown PatternName: ${f}`);
  }
  _parseVisibilityExpression(e, n, i) {
    if (++n > 10) {
      I("Visibility expression is too deeply nested");
      return;
    }
    const a = e.length, r = this.xref.fetchIfRef(e[0]);
    if (a < 2 || !(r instanceof O)) {
      I("Invalid visibility expression");
      return;
    }
    switch (r.name) {
      case "And":
      case "Or":
      case "Not":
        i.push(r.name);
        break;
      default:
        I(`Invalid operator ${r.name} in visibility expression`);
        return;
    }
    for (let o = 1; o < a; o++) {
      const c = e[o], l = this.xref.fetchIfRef(c);
      if (Array.isArray(l)) {
        const h = [];
        i.push(h), this._parseVisibilityExpression(l, n, h);
      } else c instanceof he && i.push(c.toString());
    }
  }
  async parseMarkedContentProps(e, n) {
    var a;
    let i;
    if (e instanceof O)
      i = n.get("Properties").get(e.name);
    else if (e instanceof E)
      i = e;
    else
      throw new j("Optional content properties malformed.");
    const s = (a = i.get("Type")) == null ? void 0 : a.name;
    if (s === "OCG")
      return {
        type: s,
        id: i.objId
      };
    if (s === "OCMD") {
      const r = i.get("VE");
      if (Array.isArray(r)) {
        const c = [];
        if (this._parseVisibilityExpression(r, 0, c), c.length > 0)
          return {
            type: "OCMD",
            expression: c
          };
      }
      const o = i.get("OCGs");
      if (Array.isArray(o) || o instanceof E) {
        const c = [];
        if (Array.isArray(o))
          for (const l of o)
            c.push(l.toString());
        else
          c.push(o.objId);
        return {
          type: s,
          ids: c,
          policy: i.get("P") instanceof O ? i.get("P").name : null,
          expression: null
        };
      } else if (o instanceof he)
        return {
          type: s,
          id: o.toString()
        };
    }
    return null;
  }
  getOperatorList({
    stream: e,
    task: n,
    resources: i,
    operatorList: s,
    initialState: a = null,
    fallbackFontDict: r = null,
    prevRefs: o = null
  }) {
    var C;
    const c = (C = e.dict) == null ? void 0 : C.objId, l = new Dt(o);
    if (c) {
      if (o != null && o.has(c))
        throw new Error(`getOperatorList - ignoring circular reference: ${c}`);
      l.put(c);
    }
    if (i || (i = E.empty), a || (a = new cu()), !s)
      throw new Error('getOperatorList: missing "operatorList" parameter');
    const h = this, f = this.xref, u = new yh(), d = new tu(), x = new kh(), g = new Mg(), m = /* @__PURE__ */ new Map(), p = i.get("XObject") || E.empty, b = i.get("Pattern") || E.empty, w = new Yr(a), y = new Ba(e, f, w), k = new lo();
    function S(T) {
      for (let F = 0, R = y.savedStatesDepth; F < R; F++)
        s.addOp(A.restore, []);
    }
    return new Promise(function T(F, R) {
      const D = function(q) {
        Promise.all([q, s.ready]).then(function() {
          try {
            T(F, R);
          } catch (L) {
            R(L);
          }
        }, R);
      };
      n.ensureNotTerminated(), k.reset();
      const M = {};
      let _, K, se, H, W, le;
      for (; !(_ = k.check()) && (M.args = null, !!y.read(M)); ) {
        let q = M.args, L = M.fn;
        switch (L | 0) {
          case A.paintXObject:
            if (le = q[0] instanceof O, W = q[0].name, le) {
              const B = u.getByName(W);
              if (B) {
                yc(s, B), q = null;
                continue;
              }
            }
            D(new Promise(function(B, P) {
              if (!le)
                throw new j("XObject must be referred to by name.");
              let G = p.getRaw(W);
              if (G instanceof he) {
                const ae = u.getByRef(G) || h._regionalImageCache.getByRef(G) || h.globalImageCache.getData(G, h.pageIndex);
                if (ae) {
                  yc(s, ae), B();
                  return;
                }
                G = f.fetch(G);
              }
              if (!(G instanceof je))
                throw new j("XObject should be a stream");
              const z = G.dict.get("Subtype");
              if (!(z instanceof O))
                throw new j("XObject should have a Name subtype");
              if (z.name === "Form") {
                w.save(), h.buildFormXObject(i, G, null, s, n, w.state.clone({
                  newPath: !0
                }), d, l).then(function() {
                  w.restore(), B();
                }, P);
                return;
              } else if (z.name === "Image") {
                h.buildPaintImageXObject({
                  resources: i,
                  image: G,
                  operatorList: s,
                  cacheKey: W,
                  localImageCache: u,
                  localColorSpaceCache: d
                }).then(B, P);
                return;
              } else if (z.name === "PS")
                Ge("Ignored XObject subtype PS");
              else
                throw new j(`Unhandled XObject subtype ${z.name}`);
              B();
            }).catch(function(B) {
              if (!(B instanceof Jt)) {
                if (h.options.ignoreErrors) {
                  I(`getOperatorList - ignoring XObject: "${B}".`);
                  return;
                }
                throw B;
              }
            }));
            return;
          case A.setFont:
            const Fe = q[1];
            D(h.handleSetFont(i, q, null, s, n, w.state, r).then(function(B) {
              s.addDependency(B), s.addOp(A.setFont, [B, Fe]);
            }));
            return;
          case A.endInlineImage:
            const ve = q[0].cacheKey;
            if (ve) {
              const B = u.getByName(ve);
              if (B) {
                yc(s, B), q = null;
                continue;
              }
            }
            D(h.buildPaintImageXObject({
              resources: i,
              image: q[0],
              isInline: !0,
              operatorList: s,
              cacheKey: ve,
              localImageCache: u,
              localColorSpaceCache: d
            }));
            return;
          case A.showText:
            if (!w.state.font) {
              h.ensureStateFont(w.state);
              continue;
            }
            q[0] = h.handleText(q[0], w.state);
            break;
          case A.showSpacedText:
            if (!w.state.font) {
              h.ensureStateFont(w.state);
              continue;
            }
            const Be = [], Ae = w.state;
            for (const B of q[0])
              typeof B == "string" ? Be.push(...h.handleText(B, Ae)) : typeof B == "number" && Be.push(B);
            q[0] = Be, L = A.showText;
            break;
          case A.nextLineShowText:
            if (!w.state.font) {
              h.ensureStateFont(w.state);
              continue;
            }
            s.addOp(A.nextLine), q[0] = h.handleText(q[0], w.state), L = A.showText;
            break;
          case A.nextLineSetSpacingShowText:
            if (!w.state.font) {
              h.ensureStateFont(w.state);
              continue;
            }
            s.addOp(A.nextLine), s.addOp(A.setWordSpacing, [q.shift()]), s.addOp(A.setCharSpacing, [q.shift()]), q[0] = h.handleText(q[0], w.state), L = A.showText;
            break;
          case A.setTextRenderingMode:
            w.state.textRenderingMode = q[0];
            break;
          case A.setFillColorSpace: {
            const B = h._getColorSpace(q[0], i, d);
            if (B instanceof nn) {
              w.state.fillColorSpace = B;
              continue;
            }
            D(h._handleColorSpace(B).then((P) => {
              w.state.fillColorSpace = P || Qe.gray;
            }));
            return;
          }
          case A.setStrokeColorSpace: {
            const B = h._getColorSpace(q[0], i, d);
            if (B instanceof nn) {
              w.state.strokeColorSpace = B;
              continue;
            }
            D(h._handleColorSpace(B).then((P) => {
              w.state.strokeColorSpace = P || Qe.gray;
            }));
            return;
          }
          case A.setFillColor:
            H = w.state.fillColorSpace, q = [H.getRgbHex(q, 0)], L = A.setFillRGBColor;
            break;
          case A.setStrokeColor:
            H = w.state.strokeColorSpace, q = [H.getRgbHex(q, 0)], L = A.setStrokeRGBColor;
            break;
          case A.setFillGray:
            w.state.fillColorSpace = Qe.gray, q = [Qe.gray.getRgbHex(q, 0)], L = A.setFillRGBColor;
            break;
          case A.setStrokeGray:
            w.state.strokeColorSpace = Qe.gray, q = [Qe.gray.getRgbHex(q, 0)], L = A.setStrokeRGBColor;
            break;
          case A.setFillCMYKColor:
            w.state.fillColorSpace = Qe.cmyk, q = [Qe.cmyk.getRgbHex(q, 0)], L = A.setFillRGBColor;
            break;
          case A.setStrokeCMYKColor:
            w.state.strokeColorSpace = Qe.cmyk, q = [Qe.cmyk.getRgbHex(q, 0)], L = A.setStrokeRGBColor;
            break;
          case A.setFillRGBColor:
            w.state.fillColorSpace = Qe.rgb, q = [Qe.rgb.getRgbHex(q, 0)];
            break;
          case A.setStrokeRGBColor:
            w.state.strokeColorSpace = Qe.rgb, q = [Qe.rgb.getRgbHex(q, 0)];
            break;
          case A.setFillColorN:
            if (H = w.state.patternFillColorSpace, !H) {
              if (xn(q, null)) {
                q = [Qe.gray.getRgbHex(q, 0)], L = A.setFillRGBColor;
                break;
              }
              q = [], L = A.setFillTransparent;
              break;
            }
            if (H.name === "Pattern") {
              D(h.handleColorN(s, A.setFillColorN, q, H, b, i, n, d, g, m));
              return;
            }
            q = [H.getRgbHex(q, 0)], L = A.setFillRGBColor;
            break;
          case A.setStrokeColorN:
            if (H = w.state.patternStrokeColorSpace, !H) {
              if (xn(q, null)) {
                q = [Qe.gray.getRgbHex(q, 0)], L = A.setStrokeRGBColor;
                break;
              }
              q = [], L = A.setStrokeTransparent;
              break;
            }
            if (H.name === "Pattern") {
              D(h.handleColorN(s, A.setStrokeColorN, q, H, b, i, n, d, g, m));
              return;
            }
            q = [H.getRgbHex(q, 0)], L = A.setStrokeRGBColor;
            break;
          case A.shadingFill:
            let Ve;
            try {
              const B = i.get("Shading");
              if (!B)
                throw new j("No shading resource found");
              if (Ve = B.get(q[0].name), !Ve)
                throw new j("No shading object found");
            } catch (B) {
              if (B instanceof Jt)
                continue;
              if (h.options.ignoreErrors) {
                I(`getOperatorList - ignoring Shading: "${B}".`);
                continue;
              }
              throw B;
            }
            const pe = h.parseShading({
              shading: Ve,
              resources: i,
              localColorSpaceCache: d,
              localShadingPatternCache: m
            });
            if (!pe)
              continue;
            q = [pe], L = A.shadingFill;
            break;
          case A.setGState:
            if (le = q[0] instanceof O, W = q[0].name, le) {
              const B = x.getByName(W);
              if (B) {
                B.length > 0 && s.addOp(A.setGState, [B]), q = null;
                continue;
              }
            }
            D(new Promise(function(B, P) {
              if (!le)
                throw new j("GState must be referred to by name.");
              const G = i.get("ExtGState");
              if (!(G instanceof E))
                throw new j("ExtGState should be a dictionary.");
              const z = G.get(W);
              if (!(z instanceof E))
                throw new j("GState should be a dictionary.");
              h.setGState({
                resources: i,
                gState: z,
                operatorList: s,
                cacheKey: W,
                task: n,
                stateManager: w,
                localGStateCache: x,
                localColorSpaceCache: d,
                seenRefs: l
              }).then(B, P);
            }).catch(function(B) {
              if (!(B instanceof Jt)) {
                if (h.options.ignoreErrors) {
                  I(`getOperatorList - ignoring ExtGState: "${B}".`);
                  return;
                }
                throw B;
              }
            }));
            return;
          case A.setLineWidth: {
            const [B] = q;
            if (typeof B != "number") {
              I(`Invalid setLineWidth: ${B}`);
              continue;
            }
            q[0] = Math.abs(B);
            break;
          }
          case A.moveTo:
          case A.lineTo:
          case A.curveTo:
          case A.curveTo2:
          case A.curveTo3:
          case A.closePath:
          case A.rectangle:
            h.buildPath(L, q, w.state);
            continue;
          case A.stroke:
          case A.closeStroke:
          case A.fill:
          case A.eoFill:
          case A.fillStroke:
          case A.eoFillStroke:
          case A.closeFillStroke:
          case A.closeEOFillStroke:
          case A.endPath: {
            const {
              state: {
                pathBuffer: B,
                pathMinMax: P
              }
            } = w;
            (L === A.closeStroke || L === A.closeFillStroke || L === A.closeEOFillStroke) && B.push(Ut.closePath), B.length === 0 ? s.addOp(A.constructPath, [L, [null], null]) : (s.addOp(A.constructPath, [L, [new Float32Array(B)], P.slice()]), B.length = 0, P.set([1 / 0, 1 / 0, -1 / 0, -1 / 0], 0));
            continue;
          }
          case A.setTextMatrix:
            s.addOp(L, [new Float32Array(q)]);
            continue;
          case A.markPoint:
          case A.markPointProps:
          case A.beginCompat:
          case A.endCompat:
            continue;
          case A.beginMarkedContentProps:
            if (!(q[0] instanceof O)) {
              I(`Expected name for beginMarkedContentProps arg0=${q[0]}`), s.addOp(A.beginMarkedContentProps, ["OC", null]);
              continue;
            }
            if (q[0].name === "OC") {
              D(h.parseMarkedContentProps(q[1], i).then((B) => {
                s.addOp(A.beginMarkedContentProps, ["OC", B]);
              }).catch((B) => {
                if (!(B instanceof Jt)) {
                  if (h.options.ignoreErrors) {
                    I(`getOperatorList - ignoring beginMarkedContentProps: "${B}".`), s.addOp(A.beginMarkedContentProps, ["OC", null]);
                    return;
                  }
                  throw B;
                }
              }));
              return;
            }
            q = [q[0].name, q[1] instanceof E ? q[1].get("MCID") : null];
            break;
          case A.beginMarkedContent:
          case A.endMarkedContent:
          default:
            if (q !== null) {
              for (K = 0, se = q.length; K < se && !(q[K] instanceof E); K++)
                ;
              if (K < se) {
                I("getOperatorList - ignoring operator: " + L);
                continue;
              }
            }
        }
        s.addOp(L, q);
      }
      if (_) {
        D(Dh);
        return;
      }
      S(), F();
    }).catch((T) => {
      if (!(T instanceof Jt)) {
        if (this.options.ignoreErrors) {
          I(`getOperatorList - ignoring errors during "${n.name}" task: "${T}".`), S();
          return;
        }
        throw T;
      }
    });
  }
  getTextContent({
    stream: e,
    task: n,
    resources: i,
    stateManager: s = null,
    includeMarkedContent: a = !1,
    sink: r,
    seenStyles: o = /* @__PURE__ */ new Set(),
    viewBox: c,
    lang: l = null,
    markedContentData: h = null,
    disableNormalization: f = !1,
    keepWhiteSpace: u = !1,
    prevRefs: d = null
  }) {
    var Pe;
    const x = (Pe = e.dict) == null ? void 0 : Pe.objId, g = new Dt(d);
    if (x) {
      if (d != null && d.has(x))
        throw new Error(`getTextContent - ignoring circular reference: ${x}`);
      g.put(x);
    }
    i || (i = E.empty), s || (s = new Yr(new Jg())), a && (h || (h = {
      level: 0
    }));
    const m = {
      items: [],
      styles: /* @__PURE__ */ Object.create(null),
      lang: l
    }, p = {
      initialized: !1,
      str: [],
      totalWidth: 0,
      totalHeight: 0,
      width: 0,
      height: 0,
      vertical: !1,
      prevTransform: null,
      textAdvanceScale: 0,
      spaceInFlowMin: 0,
      spaceInFlowMax: 0,
      trackingSpaceMin: 1 / 0,
      negativeSpaceMax: -1 / 0,
      notASpace: -1 / 0,
      transform: null,
      fontName: null,
      hasEOL: !1
    }, b = [" ", " "];
    let w = 0;
    function y(fe) {
      const be = (w + 1) % 2, te = b[w] !== " " && b[be] === " ";
      return b[w] = fe, w = be, !u && te;
    }
    function k() {
      return !u && b[w] !== " " && b[(w + 1) % 2] === " ";
    }
    function S() {
      b[0] = b[1] = " ", w = 0;
    }
    const C = 0.102, T = 0.03, F = -0.2, R = 0.102, D = 0.6, M = 0.25, _ = this, K = this.xref, se = [];
    let H = null;
    const W = new yh(), le = new kh(), q = new Ba(e, K, s);
    let L;
    function Fe({
      width: fe = 0,
      height: be = 0,
      transform: te = p.prevTransform,
      fontName: we = p.fontName
    }) {
      m.items.push({
        str: " ",
        dir: "ltr",
        width: fe,
        height: be,
        transform: te,
        fontName: we,
        hasEOL: !1
      });
    }
    function ve() {
      const fe = L.font, be = [L.fontSize * L.textHScale, 0, 0, L.fontSize, 0, L.textRise];
      if (fe.isType3Font && (L.fontSize <= 1 || fe.isCharBBox) && !S0(L.fontMatrix, Bs)) {
        const te = fe.bbox[3] - fe.bbox[1];
        te > 0 && (be[3] *= te * L.fontMatrix[3]);
      }
      return tt.transform(L.ctm, tt.transform(L.textMatrix, be));
    }
    function Be() {
      if (p.initialized)
        return p;
      const {
        font: fe,
        loadedName: be
      } = L;
      if (!o.has(be) && (o.add(be), m.styles[be] = {
        fontFamily: fe.fallbackName,
        ascent: fe.ascent,
        descent: fe.descent,
        vertical: fe.vertical
      }, _.options.fontExtraProperties && fe.systemFontInfo)) {
        const Oe = m.styles[be];
        Oe.fontSubstitution = fe.systemFontInfo.css, Oe.fontSubstitutionLoadedName = fe.systemFontInfo.loadedName;
      }
      p.fontName = be;
      const te = p.transform = ve();
      fe.vertical ? (p.width = p.totalWidth = Math.hypot(te[0], te[1]), p.height = p.totalHeight = 0, p.vertical = !0) : (p.width = p.totalWidth = 0, p.height = p.totalHeight = Math.hypot(te[2], te[3]), p.vertical = !1);
      const we = Math.hypot(L.textLineMatrix[0], L.textLineMatrix[1]), Se = Math.hypot(L.ctm[0], L.ctm[1]);
      p.textAdvanceScale = Se * we;
      const {
        fontSize: ke
      } = L;
      return p.trackingSpaceMin = ke * C, p.notASpace = ke * T, p.negativeSpaceMax = ke * F, p.spaceInFlowMin = ke * R, p.spaceInFlowMax = ke * D, p.hasEOL = !1, p.initialized = !0, p;
    }
    function Ae() {
      if (!p.initialized)
        return;
      const fe = Math.hypot(L.textLineMatrix[0], L.textLineMatrix[1]), te = Math.hypot(L.ctm[0], L.ctm[1]) * fe;
      te !== p.textAdvanceScale && (p.vertical ? (p.totalHeight += p.height * p.textAdvanceScale, p.height = 0) : (p.totalWidth += p.width * p.textAdvanceScale, p.width = 0), p.textAdvanceScale = te);
    }
    function Ve(fe) {
      let be = fe.str.join("");
      f || (be = $d(be));
      const te = su(be, -1, fe.vertical);
      return {
        str: te.str,
        dir: te.dir,
        width: Math.abs(fe.totalWidth),
        height: Math.abs(fe.totalHeight),
        transform: fe.transform,
        fontName: fe.fontName,
        hasEOL: fe.hasEOL
      };
    }
    async function pe(fe, be) {
      const te = await _.loadFont(fe, be, i, n);
      L.loadedName = te.loadedName, L.font = te.font, L.fontMatrix = te.font.fontMatrix || Bs;
    }
    function B(fe, be, te) {
      const we = Math.hypot(te[0], te[1]);
      return [(te[0] * fe + te[1] * be) / we, (te[2] * fe + te[3] * be) / we];
    }
    function P(fe) {
      var ze;
      const be = ve();
      let te = be[4], we = be[5];
      if ((ze = L.font) != null && ze.vertical) {
        if (te < c[0] || te > c[2] || we + fe < c[1] || we > c[3])
          return !1;
      } else if (te + fe < c[0] || te > c[2] || we < c[1] || we > c[3])
        return !1;
      if (!L.font || !p.prevTransform)
        return !0;
      let Se = p.prevTransform[4], ke = p.prevTransform[5];
      if (Se === te && ke === we)
        return !0;
      let Oe = -1;
      switch (be[0] && be[1] === 0 && be[2] === 0 ? Oe = be[0] > 0 ? 0 : 180 : be[1] && be[0] === 0 && be[3] === 0 && (Oe = be[1] > 0 ? 90 : 270), Oe) {
        case 0:
          break;
        case 90:
          [te, we] = [we, te], [Se, ke] = [ke, Se];
          break;
        case 180:
          [te, we, Se, ke] = [-te, -we, -Se, -ke];
          break;
        case 270:
          [te, we] = [-we, -te], [Se, ke] = [-ke, -Se];
          break;
        default:
          [te, we] = B(te, we, be), [Se, ke] = B(Se, ke, p.prevTransform);
      }
      if (L.font.vertical) {
        const xe = (ke - we) / p.textAdvanceScale, Re = te - Se, _e = Math.sign(p.height);
        return xe < _e * p.negativeSpaceMax ? Math.abs(Re) > 0.5 * p.width ? (z(), !0) : (S(), ue(), !0) : Math.abs(Re) > p.width ? (z(), !0) : (xe <= _e * p.notASpace && S(), xe <= _e * p.trackingSpaceMin ? k() ? (S(), ue(), Fe({
          height: Math.abs(xe)
        })) : p.height += xe : ae(xe, p.prevTransform, _e) || (p.str.length === 0 ? (S(), Fe({
          height: Math.abs(xe)
        })) : p.height += xe), Math.abs(Re) > p.width * M && ue(), !0);
      }
      const de = (te - Se) / p.textAdvanceScale, ie = we - ke, ye = Math.sign(p.width);
      return de < ye * p.negativeSpaceMax ? Math.abs(ie) > 0.5 * p.height ? (z(), !0) : (S(), ue(), !0) : Math.abs(ie) > p.height ? (z(), !0) : (de <= ye * p.notASpace && S(), de <= ye * p.trackingSpaceMin ? k() ? (S(), ue(), Fe({
        width: Math.abs(de)
      })) : p.width += de : ae(de, p.prevTransform, ye) || (p.str.length === 0 ? (S(), Fe({
        width: Math.abs(de)
      })) : p.width += de), Math.abs(ie) > p.height * M && ue(), !0);
    }
    function G({
      chars: fe,
      extraSpacing: be
    }) {
      const te = L.font;
      if (!fe) {
        const ke = L.charSpacing + be;
        ke && (te.vertical ? L.translateTextMatrix(0, -ke) : L.translateTextMatrix(ke * L.textHScale, 0)), u && P(0);
        return;
      }
      const we = te.charsToGlyphs(fe), Se = L.fontMatrix[0] * L.fontSize;
      for (let ke = 0, Oe = we.length; ke < Oe; ke++) {
        const de = we[ke], {
          category: ie
        } = de;
        if (ie.isInvisibleFormatMark)
          continue;
        let ye = L.charSpacing + (ke + 1 === Oe ? be : 0), ze = de.width;
        te.vertical && (ze = de.vmetric ? de.vmetric[0] : -ze);
        let xe = ze * Se;
        if (!u && ie.isWhitespace) {
          te.vertical ? (ye += -xe + L.wordSpacing, L.translateTextMatrix(0, -ye)) : (ye += xe + L.wordSpacing, L.translateTextMatrix(ye * L.textHScale, 0)), y(" ");
          continue;
        }
        if (!ie.isZeroWidthDiacritic && !P(xe)) {
          te.vertical ? L.translateTextMatrix(0, xe) : L.translateTextMatrix(xe * L.textHScale, 0);
          continue;
        }
        const Re = Be();
        ie.isZeroWidthDiacritic && (xe = 0), te.vertical ? (L.translateTextMatrix(0, xe), xe = Math.abs(xe), Re.height += xe) : (xe *= L.textHScale, L.translateTextMatrix(xe, 0), Re.width += xe), xe && (Re.prevTransform = ve());
        const _e = de.unicode;
        y(_e) && Re.str.push(" "), Re.str.push(_e), ye && (te.vertical ? L.translateTextMatrix(0, -ye) : L.translateTextMatrix(ye * L.textHScale, 0));
      }
    }
    function z() {
      S(), p.initialized ? (p.hasEOL = !0, ue()) : m.items.push({
        str: "",
        dir: "ltr",
        width: 0,
        height: 0,
        transform: ve(),
        fontName: L.loadedName,
        hasEOL: !0
      });
    }
    function ae(fe, be, te) {
      if (te * p.spaceInFlowMin <= fe && fe <= te * p.spaceInFlowMax)
        return p.initialized && (S(), p.str.push(" ")), !1;
      const we = p.fontName;
      let Se = 0;
      return p.vertical && (Se = fe, fe = 0), ue(), S(), Fe({
        width: Math.abs(fe),
        height: Math.abs(Se),
        transform: be || ve(),
        fontName: we
      }), !0;
    }
    function ue() {
      !p.initialized || !p.str || (p.vertical ? p.totalHeight += p.height * p.textAdvanceScale : p.totalWidth += p.width * p.textAdvanceScale, m.items.push(Ve(p)), p.initialized = !1, p.str.length = 0);
    }
    function oe(fe = !1) {
      const be = m.items.length;
      be !== 0 && (fe && be < Zg || (r.enqueue(m, be), m.items = [], m.styles = /* @__PURE__ */ Object.create(null)));
    }
    const Y = new lo();
    return new Promise(function fe(be, te) {
      const we = function(ye) {
        oe(!0), Promise.all([ye, r.ready]).then(function() {
          try {
            fe(be, te);
          } catch (ze) {
            te(ze);
          }
        }, te);
      };
      n.ensureNotTerminated(), Y.reset();
      const Se = {};
      let ke, Oe, de, ie = [];
      for (; !(ke = Y.check()) && (ie.length = 0, Se.args = ie, !!q.read(Se)); ) {
        const ye = L;
        L = s.state;
        const ze = Se.fn;
        switch (ie = Se.args, ze | 0) {
          case A.setFont:
            const xe = ie[0].name, Re = ie[1];
            if (L.font && xe === L.fontName && Re === L.fontSize)
              break;
            ue(), L.fontName = xe, L.fontSize = Re, we(pe(xe, null));
            return;
          case A.setTextRise:
            L.textRise = ie[0];
            break;
          case A.setHScale:
            L.textHScale = ie[0] / 100;
            break;
          case A.setLeading:
            L.leading = ie[0];
            break;
          case A.moveText:
            L.translateTextLineMatrix(ie[0], ie[1]), L.textMatrix = L.textLineMatrix.slice();
            break;
          case A.setLeadingMoveText:
            L.leading = -ie[1], L.translateTextLineMatrix(ie[0], ie[1]), L.textMatrix = L.textLineMatrix.slice();
            break;
          case A.nextLine:
            L.carriageReturn();
            break;
          case A.setTextMatrix:
            L.setTextMatrix(ie[0], ie[1], ie[2], ie[3], ie[4], ie[5]), L.setTextLineMatrix(ie[0], ie[1], ie[2], ie[3], ie[4], ie[5]), Ae();
            break;
          case A.setCharSpacing:
            L.charSpacing = ie[0];
            break;
          case A.setWordSpacing:
            L.wordSpacing = ie[0];
            break;
          case A.beginText:
            L.textMatrix = ai.slice(), L.textLineMatrix = ai.slice();
            break;
          case A.showSpacedText:
            if (!s.state.font) {
              _.ensureStateFont(s.state);
              continue;
            }
            const _e = (L.font.vertical ? 1 : -1) * L.fontSize / 1e3, it = ie[0];
            for (let Ue = 0, Nt = it.length; Ue < Nt; Ue++) {
              const Ot = it[Ue];
              if (typeof Ot == "string")
                se.push(Ot);
              else if (typeof Ot == "number" && Ot !== 0) {
                const Fn = se.join("");
                se.length = 0, G({
                  chars: Fn,
                  extraSpacing: Ot * _e
                });
              }
            }
            if (se.length > 0) {
              const Ue = se.join("");
              se.length = 0, G({
                chars: Ue,
                extraSpacing: 0
              });
            }
            break;
          case A.showText:
            if (!s.state.font) {
              _.ensureStateFont(s.state);
              continue;
            }
            G({
              chars: ie[0],
              extraSpacing: 0
            });
            break;
          case A.nextLineShowText:
            if (!s.state.font) {
              _.ensureStateFont(s.state);
              continue;
            }
            L.carriageReturn(), G({
              chars: ie[0],
              extraSpacing: 0
            });
            break;
          case A.nextLineSetSpacingShowText:
            if (!s.state.font) {
              _.ensureStateFont(s.state);
              continue;
            }
            L.wordSpacing = ie[0], L.charSpacing = ie[1], L.carriageReturn(), G({
              chars: ie[2],
              extraSpacing: 0
            });
            break;
          case A.paintXObject:
            if (ue(), H ?? (H = i.get("XObject") || E.empty), de = ie[0] instanceof O, Oe = ie[0].name, de && W.getByName(Oe))
              break;
            we(new Promise(function(Ue, Nt) {
              if (!de)
                throw new j("XObject must be referred to by name.");
              let Ot = H.getRaw(Oe);
              if (Ot instanceof he) {
                if (W.getByRef(Ot)) {
                  Ue();
                  return;
                }
                if (_.globalImageCache.getData(Ot, _.pageIndex)) {
                  Ue();
                  return;
                }
                Ot = K.fetch(Ot);
              }
              if (!(Ot instanceof je))
                throw new j("XObject should be a stream");
              const {
                dict: Fn
              } = Ot, Ai = Fn.get("Subtype");
              if (!(Ai instanceof O))
                throw new j("XObject should have a Name subtype");
              if (Ai.name !== "Form") {
                W.set(Oe, Fn.objId, !0), Ue();
                return;
              }
              const ec = s.state.clone(), fr = new Yr(ec), ur = ts(Fn.getArray("Matrix"), null);
              ur && fr.transform(ur);
              const dr = Fn.get("Resources");
              oe();
              const xr = {
                enqueueInvoked: !1,
                enqueue(gr, tc) {
                  this.enqueueInvoked = !0, r.enqueue(gr, tc);
                },
                get desiredSize() {
                  return r.desiredSize;
                },
                get ready() {
                  return r.ready;
                }
              };
              _.getTextContent({
                stream: Ot,
                task: n,
                resources: dr instanceof E ? dr : i,
                stateManager: fr,
                includeMarkedContent: a,
                sink: xr,
                seenStyles: o,
                viewBox: c,
                lang: l,
                markedContentData: h,
                disableNormalization: f,
                keepWhiteSpace: u,
                prevRefs: g
              }).then(function() {
                xr.enqueueInvoked || W.set(Oe, Fn.objId, !0), Ue();
              }, Nt);
            }).catch(function(Ue) {
              if (!(Ue instanceof Jt)) {
                if (_.options.ignoreErrors) {
                  I(`getTextContent - ignoring XObject: "${Ue}".`);
                  return;
                }
                throw Ue;
              }
            }));
            return;
          case A.setGState:
            if (de = ie[0] instanceof O, Oe = ie[0].name, de && le.getByName(Oe))
              break;
            we(new Promise(function(Ue, Nt) {
              if (!de)
                throw new j("GState must be referred to by name.");
              const Ot = i.get("ExtGState");
              if (!(Ot instanceof E))
                throw new j("ExtGState should be a dictionary.");
              const Fn = Ot.get(Oe);
              if (!(Fn instanceof E))
                throw new j("GState should be a dictionary.");
              const Ai = Fn.get("Font");
              if (!Ai) {
                le.set(Oe, Fn.objId, !0), Ue();
                return;
              }
              ue(), L.fontName = null, L.fontSize = Ai[1], pe(null, Ai[0]).then(Ue, Nt);
            }).catch(function(Ue) {
              if (!(Ue instanceof Jt)) {
                if (_.options.ignoreErrors) {
                  I(`getTextContent - ignoring ExtGState: "${Ue}".`);
                  return;
                }
                throw Ue;
              }
            }));
            return;
          case A.beginMarkedContent:
            ue(), a && (h.level++, m.items.push({
              type: "beginMarkedContent",
              tag: ie[0] instanceof O ? ie[0].name : null
            }));
            break;
          case A.beginMarkedContentProps:
            if (ue(), a) {
              h.level++;
              let Ue = null;
              ie[1] instanceof E && (Ue = ie[1].get("MCID")), m.items.push({
                type: "beginMarkedContentProps",
                id: Number.isInteger(Ue) ? `${_.idFactory.getPageObjId()}_mc${Ue}` : null,
                tag: ie[0] instanceof O ? ie[0].name : null
              });
            }
            break;
          case A.endMarkedContent:
            if (ue(), a) {
              if (h.level === 0)
                break;
              h.level--, m.items.push({
                type: "endMarkedContent"
              });
            }
            break;
          case A.restore:
            ye && (ye.font !== L.font || ye.fontSize !== L.fontSize || ye.fontName !== L.fontName) && ue();
            break;
        }
        if (m.items.length >= r.desiredSize) {
          ke = !0;
          break;
        }
      }
      if (ke) {
        we(Dh);
        return;
      }
      ue(), oe(), be();
    }).catch((fe) => {
      if (!(fe instanceof Jt)) {
        if (this.options.ignoreErrors) {
          I(`getTextContent - ignoring errors during "${n.name}" task: "${fe}".`), ue(), oe();
          return;
        }
        throw fe;
      }
    });
  }
  async extractDataStructures(e, n) {
    const i = this.xref;
    let s;
    const a = this.readToUnicode(n.toUnicode);
    if (n.composite) {
      const u = e.get("CIDSystemInfo");
      u instanceof E && (n.cidSystemInfo = {
        registry: Ze(u.get("Registry")),
        ordering: Ze(u.get("Ordering")),
        supplement: u.get("Supplement")
      });
      try {
        const d = e.get("CIDToGIDMap");
        d instanceof je && (s = d.getBytes());
      } catch (d) {
        if (!this.options.ignoreErrors)
          throw d;
        I(`extractDataStructures - ignoring CIDToGIDMap data: "${d}".`);
      }
    }
    const r = [];
    let o = null, c;
    if (e.has("Encoding")) {
      if (c = e.get("Encoding"), c instanceof E) {
        if (o = c.get("BaseEncoding"), o = o instanceof O ? o.name : null, c.has("Differences")) {
          const u = c.get("Differences");
          let d = 0;
          for (const x of u) {
            const g = i.fetchIfRef(x);
            if (typeof g == "number")
              d = g;
            else if (g instanceof O)
              r[d++] = g.name;
            else
              throw new j(`Invalid entry in 'Differences' array: ${g}`);
          }
        }
      } else if (c instanceof O)
        o = c.name;
      else {
        const u = "Encoding is not a Name nor a Dict";
        if (!this.options.ignoreErrors)
          throw new j(u);
        I(u);
      }
      o !== "MacRomanEncoding" && o !== "MacExpertEncoding" && o !== "WinAnsiEncoding" && (o = null);
    }
    const l = !n.file || n.isInternalFont, h = sl()[n.name];
    if (o && l && h && (o = null), o)
      n.defaultEncoding = I0(o);
    else {
      const u = !!(n.flags & Qn.Symbolic), d = !!(n.flags & Qn.Nonsymbolic);
      c = Oi, n.type === "TrueType" && !d && (c = v0), (u || h) && (c = zl, l && (/Symbol/i.test(n.name) ? c = Wl : /Dingbats/i.test(n.name) ? c = Vl : /Wingdings/i.test(n.name) && (c = v0))), n.defaultEncoding = c;
    }
    n.differences = r, n.baseEncodingName = o, n.hasEncoding = !!o || r.length > 0, n.dict = e, n.toUnicode = await a;
    const f = await this.buildToUnicode(n);
    return n.toUnicode = f, s && (n.cidToGidMap = this.readCidToGidMap(s, f)), n;
  }
  _simpleFontToUnicode(e, n = !1) {
    zt(!e.composite, "Must be a simple font.");
    const i = [], s = e.defaultEncoding.slice(), a = e.baseEncodingName, r = e.differences;
    for (const c in r) {
      const l = r[c];
      l !== ".notdef" && (s[c] = l);
    }
    const o = bi();
    for (const c in s) {
      let l = s[c];
      if (l === "")
        continue;
      let h = o[l];
      if (h !== void 0) {
        i[c] = String.fromCharCode(h);
        continue;
      }
      let f = 0;
      switch (l[0]) {
        case "G":
          l.length === 3 && (f = parseInt(l.substring(1), 16));
          break;
        case "g":
          l.length === 5 && (f = parseInt(l.substring(1), 16));
          break;
        case "C":
        case "c":
          if (l.length >= 3 && l.length <= 4) {
            const u = l.substring(1);
            if (n) {
              f = parseInt(u, 16);
              break;
            }
            if (f = +u, Number.isNaN(f) && Number.isInteger(parseInt(u, 16)))
              return this._simpleFontToUnicode(e, !0);
          }
          break;
        case "u":
          h = Ta(l, o), h !== -1 && (f = h);
          break;
        default:
          switch (l) {
            case "f_h":
            case "f_t":
            case "T_h":
              i[c] = l.replaceAll("_", "");
              continue;
          }
          break;
      }
      if (f > 0 && f <= 1114111 && Number.isInteger(f)) {
        if (a && f === +c) {
          const u = I0(a);
          if (u && (l = u[c])) {
            i[c] = String.fromCharCode(o[l]);
            continue;
          }
        }
        i[c] = String.fromCodePoint(f);
      }
    }
    return i;
  }
  async buildToUnicode(e) {
    var n, i;
    if (e.hasIncludedToUnicodeMap = ((n = e.toUnicode) == null ? void 0 : n.length) > 0, e.hasIncludedToUnicodeMap)
      return !e.composite && e.hasEncoding && (e.fallbackToUnicode = this._simpleFontToUnicode(e)), e.toUnicode;
    if (!e.composite)
      return new s0(this._simpleFontToUnicode(e));
    if (e.composite && (e.cMap.builtInCMap && !(e.cMap instanceof ua) || ((i = e.cidSystemInfo) == null ? void 0 : i.registry) === "Adobe" && (e.cidSystemInfo.ordering === "GB1" || e.cidSystemInfo.ordering === "CNS1" || e.cidSystemInfo.ordering === "Japan1" || e.cidSystemInfo.ordering === "Korea1"))) {
      const {
        registry: s,
        ordering: a
      } = e.cidSystemInfo, r = O.get(`${s}-${a}-UCS2`), o = await Ir.create({
        encoding: r,
        fetchBuiltInCMap: this._fetchBuiltInCMapBound,
        useCMap: null
      }), c = [], l = [];
      return e.cMap.forEach(function(h, f) {
        if (f > 65535)
          throw new j("Max size of CID is 65,535");
        const u = o.lookup(f);
        if (u) {
          l.length = 0;
          for (let d = 0, x = u.length; d < x; d += 2)
            l.push((u.charCodeAt(d) << 8) + u.charCodeAt(d + 1));
          c[h] = String.fromCharCode(...l);
        }
      }), new s0(c);
    }
    return new Hn(e.firstChar, e.lastChar);
  }
  async readToUnicode(e) {
    if (!e)
      return null;
    if (e instanceof O) {
      const n = await Ir.create({
        encoding: e,
        fetchBuiltInCMap: this._fetchBuiltInCMapBound,
        useCMap: null
      });
      return n instanceof ua ? new Hn(0, 65535) : new s0(n.getMap());
    }
    if (e instanceof je)
      try {
        const n = await Ir.create({
          encoding: e,
          fetchBuiltInCMap: this._fetchBuiltInCMapBound,
          useCMap: null
        });
        if (n instanceof ua)
          return new Hn(0, 65535);
        const i = new Array(n.length);
        return n.forEach(function(s, a) {
          if (typeof a == "number") {
            i[s] = String.fromCodePoint(a);
            return;
          }
          a.length % 2 !== 0 && (a = "\0" + a);
          const r = [];
          for (let o = 0; o < a.length; o += 2) {
            const c = a.charCodeAt(o) << 8 | a.charCodeAt(o + 1);
            if ((c & 63488) !== 55296) {
              r.push(c);
              continue;
            }
            o += 2;
            const l = a.charCodeAt(o) << 8 | a.charCodeAt(o + 1);
            r.push(((c & 1023) << 10) + (l & 1023) + 65536);
          }
          i[s] = String.fromCodePoint(...r);
        }), new s0(i);
      } catch (n) {
        if (n instanceof Jt)
          return null;
        if (this.options.ignoreErrors)
          return I(`readToUnicode - ignoring ToUnicode data: "${n}".`), null;
        throw n;
      }
    return null;
  }
  readCidToGidMap(e, n) {
    const i = [];
    for (let s = 0, a = e.length; s < a; s++) {
      const r = e[s++] << 8 | e[s], o = s >> 1;
      r === 0 && !n.has(o) || (i[o] = r);
    }
    return i;
  }
  extractWidths(e, n, i) {
    const s = this.xref;
    let a = [], r = 0;
    const o = [];
    let c;
    if (i.composite) {
      const f = e.get("DW");
      r = typeof f == "number" ? Math.ceil(f) : 1e3;
      const u = e.get("W");
      if (Array.isArray(u))
        for (let d = 0, x = u.length; d < x; d++) {
          let g = s.fetchIfRef(u[d++]);
          if (!Number.isInteger(g))
            break;
          const m = s.fetchIfRef(u[d]);
          if (Array.isArray(m))
            for (const p of m) {
              const b = s.fetchIfRef(p);
              typeof b == "number" && (a[g] = b), g++;
            }
          else if (Number.isInteger(m)) {
            const p = s.fetchIfRef(u[++d]);
            if (typeof p != "number")
              continue;
            for (let b = g; b <= m; b++)
              a[b] = p;
          } else
            break;
        }
      if (i.vertical) {
        const d = e.getArray("DW2");
        let x = xn(d, 2) ? d : [880, -1e3];
        if (c = [x[1], r * 0.5, x[0]], x = e.get("W2"), Array.isArray(x))
          for (let g = 0, m = x.length; g < m; g++) {
            let p = s.fetchIfRef(x[g++]);
            if (!Number.isInteger(p))
              break;
            const b = s.fetchIfRef(x[g]);
            if (Array.isArray(b))
              for (let w = 0, y = b.length; w < y; w++) {
                const k = [s.fetchIfRef(b[w++]), s.fetchIfRef(b[w++]), s.fetchIfRef(b[w])];
                xn(k, null) && (o[p] = k), p++;
              }
            else if (Number.isInteger(b)) {
              const w = [s.fetchIfRef(x[++g]), s.fetchIfRef(x[++g]), s.fetchIfRef(x[++g])];
              if (!xn(w, null))
                continue;
              for (let y = p; y <= b; y++)
                o[y] = w;
            } else
              break;
          }
      }
    } else {
      const f = e.get("Widths");
      if (Array.isArray(f)) {
        let u = i.firstChar;
        for (const x of f) {
          const g = s.fetchIfRef(x);
          typeof g == "number" && (a[u] = g), u++;
        }
        const d = n.get("MissingWidth");
        r = typeof d == "number" ? d : 0;
      } else {
        const u = e.get("BaseFont");
        if (u instanceof O) {
          const d = this.getBaseFontMetrics(u.name);
          a = this.buildCharCodeToWidth(d.widths, i), r = d.defaultWidth;
        }
      }
    }
    let l = !0, h = r;
    for (const f in a) {
      const u = a[f];
      if (u) {
        if (!h) {
          h = u;
          continue;
        }
        if (h !== u) {
          l = !1;
          break;
        }
      }
    }
    l ? i.flags |= Qn.FixedPitch : i.flags &= -2, i.defaultWidth = r, i.widths = a, i.defaultVMetrics = c, i.vmetrics = o;
  }
  isSerifFont(e) {
    const n = e.split("-", 1)[0];
    return n in Yl() || /serif/gi.test(n);
  }
  getBaseFontMetrics(e) {
    let n = 0, i = /* @__PURE__ */ Object.create(null), s = !1, r = qo()[e] || e;
    const o = hx();
    r in o || (r = this.isSerifFont(e) ? "Times-Roman" : "Helvetica");
    const c = o[r];
    return typeof c == "number" ? (n = c, s = !0) : i = c(), {
      defaultWidth: n,
      monospace: s,
      widths: i
    };
  }
  buildCharCodeToWidth(e, n) {
    const i = /* @__PURE__ */ Object.create(null), s = n.differences, a = n.defaultEncoding;
    for (let r = 0; r < 256; r++) {
      if (r in s && e[s[r]]) {
        i[r] = e[s[r]];
        continue;
      }
      if (r in a && e[a[r]]) {
        i[r] = e[a[r]];
        continue;
      }
    }
    return i;
  }
  preEvaluateFont(e) {
    const n = e;
    let i = e.get("Subtype");
    if (!(i instanceof O))
      throw new j("invalid font Subtype");
    let s = !1, a;
    if (i.name === "Type0") {
      const h = e.get("DescendantFonts");
      if (!h)
        throw new j("Descendant fonts are not specified");
      if (e = Array.isArray(h) ? this.xref.fetchIfRef(h[0]) : h, !(e instanceof E))
        throw new j("Descendant font is not a dictionary.");
      if (i = e.get("Subtype"), !(i instanceof O))
        throw new j("invalid font Subtype");
      s = !0;
    }
    let r = e.get("FirstChar");
    Number.isInteger(r) || (r = 0);
    let o = e.get("LastChar");
    Number.isInteger(o) || (o = s ? 65535 : 255);
    const c = e.get("FontDescriptor"), l = e.get("ToUnicode") || n.get("ToUnicode");
    if (c) {
      a = new Kg();
      const h = n.getRaw("Encoding");
      if (h instanceof O)
        a.update(h.name);
      else if (h instanceof he)
        a.update(h.toString());
      else if (h instanceof E) {
        for (const u of h.getRawValues())
          if (u instanceof O)
            a.update(u.name);
          else if (u instanceof he)
            a.update(u.toString());
          else if (Array.isArray(u)) {
            const d = u.length, x = new Array(d);
            for (let g = 0; g < d; g++) {
              const m = u[g];
              m instanceof O ? x[g] = m.name : (typeof m == "number" || m instanceof he) && (x[g] = m.toString());
            }
            a.update(x.join());
          }
      }
      if (a.update(`${r}-${o}`), l instanceof je) {
        const u = l.str || l, d = u.buffer ? new Uint8Array(u.buffer.buffer, 0, u.bufferLength) : new Uint8Array(u.bytes.buffer, u.start, u.end - u.start);
        a.update(d);
      } else l instanceof O && a.update(l.name);
      const f = e.get("Widths") || n.get("Widths");
      if (Array.isArray(f)) {
        const u = [];
        for (const d of f)
          (typeof d == "number" || d instanceof he) && u.push(d.toString());
        a.update(u.join());
      }
      if (s) {
        a.update("compositeFont");
        const u = e.get("W") || n.get("W");
        if (Array.isArray(u)) {
          const x = [];
          for (const g of u)
            if (typeof g == "number" || g instanceof he)
              x.push(g.toString());
            else if (Array.isArray(g)) {
              const m = [];
              for (const p of g)
                (typeof p == "number" || p instanceof he) && m.push(p.toString());
              x.push(`[${m.join()}]`);
            }
          a.update(x.join());
        }
        const d = e.getRaw("CIDToGIDMap") || n.getRaw("CIDToGIDMap");
        d instanceof O ? a.update(d.name) : d instanceof he ? a.update(d.toString()) : d instanceof je && a.update(d.peekBytes());
      }
    }
    return {
      descriptor: c,
      dict: e,
      baseDict: n,
      composite: s,
      type: i.name,
      firstChar: r,
      lastChar: o,
      toUnicode: l,
      hash: a ? a.hexdigest() : ""
    };
  }
  async translateFont({
    descriptor: e,
    dict: n,
    baseDict: i,
    composite: s,
    type: a,
    firstChar: r,
    lastChar: o,
    toUnicode: c,
    cssFontInfo: l
  }) {
    const h = a === "Type3";
    if (!e)
      if (h)
        e = E.empty;
      else {
        let W = n.get("BaseFont");
        if (!(W instanceof O))
          throw new j("Base font is not specified");
        W = W.name.replaceAll(/[,_]/g, "-");
        const le = this.getBaseFontMetrics(W), q = W.split("-", 1)[0], L = (this.isSerifFont(q) ? Qn.Serif : 0) | (le.monospace ? Qn.FixedPitch : 0) | (sl()[q] ? Qn.Symbolic : Qn.Nonsymbolic), Fe = {
          type: a,
          name: W,
          loadedName: i.loadedName,
          systemFontInfo: null,
          widths: le.widths,
          defaultWidth: le.defaultWidth,
          isSimulatedFlags: !0,
          flags: L,
          firstChar: r,
          lastChar: o,
          toUnicode: c,
          xHeight: 0,
          capHeight: 0,
          italicAngle: 0,
          isType3Font: h
        }, ve = n.get("Widths"), Be = J1(W);
        let Ae = null;
        Be && (Ae = await this.fetchStandardFontData(Be), Fe.isInternalFont = !!Ae), !Fe.isInternalFont && this.options.useSystemFonts && (Fe.systemFontInfo = Bh(this.systemFontCache, this.idFactory, this.options.standardFontDataUrl, W, Be, a));
        const Ve = await this.extractDataStructures(n, Fe);
        if (Array.isArray(ve)) {
          const pe = [];
          let B = r;
          for (const P of ve) {
            const G = this.xref.fetchIfRef(P);
            typeof G == "number" && (pe[B] = G), B++;
          }
          Ve.widths = pe;
        } else
          Ve.widths = this.buildCharCodeToWidth(le.widths, Ve);
        return new ph(W, Ae, Ve, this.options);
      }
    let f = e.get("FontName"), u = n.get("BaseFont");
    typeof f == "string" && (f = O.get(f)), typeof u == "string" && (u = O.get(u));
    const d = f == null ? void 0 : f.name, x = u == null ? void 0 : u.name;
    if (h ? d || (f = O.get(a)) : d !== x && (Ge(`The FontDescriptor's FontName is "${d}" but should be the same as the Font's BaseFont "${x}".`), d && x && (x.startsWith(d) || !Q1(d) && Q1(x)) && (f = null), f || (f = u)), !(f instanceof O))
      throw new j("invalid font name");
    let g, m, p, b, w;
    try {
      if (g = e.get("FontFile", "FontFile2", "FontFile3"), g)
        if (g instanceof je) {
          if (g.isEmpty)
            throw new j("FontFile is empty");
        } else throw new j("FontFile should be a stream");
    } catch (W) {
      if (!this.options.ignoreErrors)
        throw W;
      I(`translateFont - fetching "${f.name}" font file: "${W}".`), g = null;
    }
    let y = !1, k = null, S = null;
    if (g) {
      if (g.dict) {
        const W = g.dict.get("Subtype");
        W instanceof O && (m = W.name), p = g.dict.get("Length1"), b = g.dict.get("Length2"), w = g.dict.get("Length3");
      }
    } else if (l) {
      const W = e1(f.name);
      W && (l.fontFamily = `${l.fontFamily}-PdfJS-XFA`, l.metrics = W.metrics || null, k = W.factors || null, g = await this.fetchStandardFontData(W.name), y = !!g, i = n = eu(f.name), s = !0);
    } else if (!h) {
      const W = J1(f.name);
      W && (g = await this.fetchStandardFontData(W), y = !!g), !y && this.options.useSystemFonts && (S = Bh(this.systemFontCache, this.idFactory, this.options.standardFontDataUrl, f.name, W, a));
    }
    const C = ts(n.getArray("FontMatrix"), Bs), T = qi(e.getArray("FontBBox") || n.getArray("FontBBox"), h ? [0, 0, 0, 0] : void 0);
    let F = e.get("Ascent");
    typeof F != "number" && (F = void 0);
    let R = e.get("Descent");
    typeof R != "number" && (R = void 0);
    let D = e.get("XHeight");
    typeof D != "number" && (D = 0);
    let M = e.get("CapHeight");
    typeof M != "number" && (M = 0);
    let _ = e.get("Flags");
    Number.isInteger(_) || (_ = 0);
    let K = e.get("ItalicAngle");
    typeof K != "number" && (K = 0);
    const se = {
      type: a,
      name: f.name,
      subtype: m,
      file: g,
      length1: p,
      length2: b,
      length3: w,
      isInternalFont: y,
      loadedName: i.loadedName,
      composite: s,
      fixedPitch: !1,
      fontMatrix: C,
      firstChar: r,
      lastChar: o,
      toUnicode: c,
      bbox: T,
      ascent: F,
      descent: R,
      xHeight: D,
      capHeight: M,
      flags: _,
      italicAngle: K,
      isType3Font: h,
      cssFontInfo: l,
      scaleFactors: k,
      systemFontInfo: S
    };
    if (s) {
      const W = i.get("Encoding");
      W instanceof O && (se.cidEncoding = W.name);
      const le = await Ir.create({
        encoding: W,
        fetchBuiltInCMap: this._fetchBuiltInCMapBound,
        useCMap: null
      });
      se.cMap = le, se.vertical = se.cMap.vertical;
    }
    const H = await this.extractDataStructures(n, se);
    return this.extractWidths(n, e, H), new ph(f.name, g, H, this.options);
  }
  static buildFontPaths(e, n, i, s) {
    function a(r) {
      const o = `${e.loadedName}_path_${r}`;
      try {
        if (e.renderer.hasBuiltPath(r))
          return;
        i.send("commonobj", [o, "FontPath", e.renderer.getPathJs(r)]);
      } catch (c) {
        if (s.ignoreErrors) {
          I(`buildFontPaths - ignoring ${o} glyph: "${c}".`);
          return;
        }
        throw c;
      }
    }
    for (const r of n) {
      a(r.fontChar);
      const o = r.accent;
      o != null && o.fontChar && a(o.fontChar);
    }
  }
  static get fallbackFontDict() {
    const e = new E();
    return e.set("BaseFont", O.get("Helvetica")), e.set("Type", O.get("FallbackType")), e.set("Subtype", O.get("FallbackType")), e.set("Encoding", O.get("WinAnsiEncoding")), Q(this, "fallbackFontDict", e);
  }
}
var Z0, Ts, Na, ru, ou;
class kc {
  constructor({
    loadedName: e,
    font: n,
    dict: i
  }) {
    Ee(this, Na);
    Ee(this, Z0, !1);
    Ee(this, Ts, null);
    this.loadedName = e, this.font = n, this.dict = i, this.type3Dependencies = n.isType3Font ? /* @__PURE__ */ new Set() : null;
  }
  send(e) {
    ce(this, Z0) || (ct(this, Z0, !0), e.send("commonobj", [this.loadedName, "Font", this.font.exportData()]));
  }
  fallback(e, n) {
    this.font.data && (this.font.disableFontFace = !0, Fa.buildFontPaths(this.font, this.font.glyphCacheValues, e, n));
  }
  loadType3Data(e, n, i) {
    if (ce(this, Ts))
      return ce(this, Ts);
    const {
      font: s,
      type3Dependencies: a
    } = this;
    zt(s.isType3Font, "Must be a Type3 font.");
    const r = e.clone({
      ignoreErrors: !1
    }), o = new Dt(e.type3FontRefs);
    this.dict.objId && !o.has(this.dict.objId) && o.put(this.dict.objId), r.type3FontRefs = o;
    let c = Promise.resolve();
    const l = this.dict.get("CharProcs"), h = this.dict.get("Resources") || n, f = /* @__PURE__ */ Object.create(null), [u, d, x, g] = s.bbox, m = x - u, p = g - d, b = Math.hypot(m, p);
    for (const w of l.getKeys())
      c = c.then(() => {
        const y = l.get(w), k = new on();
        return r.getOperatorList({
          stream: y,
          task: i,
          resources: h,
          operatorList: k
        }).then(() => {
          switch (k.fnArray[0]) {
            case A.setCharWidthAndBounds:
              J(this, Na, ru).call(this, k, b);
              break;
            case A.setCharWidth:
              b || J(this, Na, ou).call(this, k);
              break;
          }
          f[w] = k.getIR();
          for (const S of k.dependencies)
            a.add(S);
        }).catch(function(S) {
          I(`Type3 font resource "${w}" is not available.`);
          const C = new on();
          f[w] = C.getIR();
        });
      });
    return ct(this, Ts, c.then(() => {
      s.charProcOperatorList = f, this._bbox && (s.isCharBBox = !0, s.bbox = this._bbox);
    })), ce(this, Ts);
  }
}
Z0 = new WeakMap(), Ts = new WeakMap(), Na = new WeakSet(), ru = function(e, n = NaN) {
  const i = tt.normalizeRect(e.argsArray[0].slice(2)), s = i[2] - i[0], a = i[3] - i[1], r = Math.hypot(s, a);
  s === 0 || a === 0 ? (e.fnArray.splice(0, 1), e.argsArray.splice(0, 1)) : (n === 0 || Math.round(r / n) >= 10) && (this._bbox ?? (this._bbox = [1 / 0, 1 / 0, -1 / 0, -1 / 0]), tt.rectBoundingBox(...i, this._bbox));
  let o = 0, c = e.length;
  for (; o < c; ) {
    switch (e.fnArray[o]) {
      case A.setCharWidthAndBounds:
        break;
      case A.setStrokeColorSpace:
      case A.setFillColorSpace:
      case A.setStrokeColor:
      case A.setStrokeColorN:
      case A.setFillColor:
      case A.setFillColorN:
      case A.setStrokeGray:
      case A.setFillGray:
      case A.setStrokeRGBColor:
      case A.setFillRGBColor:
      case A.setStrokeCMYKColor:
      case A.setFillCMYKColor:
      case A.shadingFill:
      case A.setRenderingIntent:
        e.fnArray.splice(o, 1), e.argsArray.splice(o, 1), c--;
        continue;
      case A.setGState:
        const [l] = e.argsArray[o];
        let h = 0, f = l.length;
        for (; h < f; ) {
          const [u] = l[h];
          switch (u) {
            case "TR":
            case "TR2":
            case "HT":
            case "BG":
            case "BG2":
            case "UCR":
            case "UCR2":
              l.splice(h, 1), f--;
              continue;
          }
          h++;
        }
        break;
    }
    o++;
  }
}, ou = function(e) {
  let n = 1;
  const i = e.length;
  for (; n < i; ) {
    switch (e.fnArray[n]) {
      case A.constructPath:
        const s = e.argsArray[n][2];
        this._bbox ?? (this._bbox = [1 / 0, 1 / 0, -1 / 0, -1 / 0]), tt.rectBoundingBox(...s, this._bbox);
        break;
    }
    n++;
  }
};
class Yr {
  constructor(e = new cu()) {
    this.state = e, this.stateStack = [];
  }
  save() {
    const e = this.state;
    this.stateStack.push(this.state), this.state = e.clone();
  }
  restore() {
    const e = this.stateStack.pop();
    e && (this.state = e);
  }
  transform(e) {
    this.state.ctm = tt.transform(this.state.ctm, e);
  }
}
class Jg {
  constructor() {
    this.ctm = new Float32Array(ai), this.fontName = null, this.fontSize = 0, this.loadedName = null, this.font = null, this.fontMatrix = Bs, this.textMatrix = ai.slice(), this.textLineMatrix = ai.slice(), this.charSpacing = 0, this.wordSpacing = 0, this.leading = 0, this.textHScale = 1, this.textRise = 0;
  }
  setTextMatrix(e, n, i, s, a, r) {
    const o = this.textMatrix;
    o[0] = e, o[1] = n, o[2] = i, o[3] = s, o[4] = a, o[5] = r;
  }
  setTextLineMatrix(e, n, i, s, a, r) {
    const o = this.textLineMatrix;
    o[0] = e, o[1] = n, o[2] = i, o[3] = s, o[4] = a, o[5] = r;
  }
  translateTextMatrix(e, n) {
    const i = this.textMatrix;
    i[4] = i[0] * e + i[2] * n + i[4], i[5] = i[1] * e + i[3] * n + i[5];
  }
  translateTextLineMatrix(e, n) {
    const i = this.textLineMatrix;
    i[4] = i[0] * e + i[2] * n + i[4], i[5] = i[1] * e + i[3] * n + i[5];
  }
  carriageReturn() {
    this.translateTextLineMatrix(0, -this.leading), this.textMatrix = this.textLineMatrix.slice();
  }
  clone() {
    const e = Object.create(this);
    return e.textMatrix = this.textMatrix.slice(), e.textLineMatrix = this.textLineMatrix.slice(), e.fontMatrix = this.fontMatrix.slice(), e;
  }
}
class cu {
  constructor() {
    this.ctm = new Float32Array(ai), this.font = null, this.textRenderingMode = cf.FILL, this._fillColorSpace = this._strokeColorSpace = Qe.gray, this.patternFillColorSpace = null, this.patternStrokeColorSpace = null, this.currentPointX = this.currentPointY = 0, this.pathMinMax = new Float32Array([1 / 0, 1 / 0, -1 / 0, -1 / 0]), this.pathBuffer = [];
  }
  get fillColorSpace() {
    return this._fillColorSpace;
  }
  set fillColorSpace(e) {
    this._fillColorSpace = this.patternFillColorSpace = e;
  }
  get strokeColorSpace() {
    return this._strokeColorSpace;
  }
  set strokeColorSpace(e) {
    this._strokeColorSpace = this.patternStrokeColorSpace = e;
  }
  clone({
    newPath: e = !1
  } = {}) {
    const n = Object.create(this);
    return e && (n.pathBuffer = [], n.pathMinMax = new Float32Array([1 / 0, 1 / 0, -1 / 0, -1 / 0])), n;
  }
}
const oa = class oa {
  static get opMap() {
    return Q(this, "opMap", Object.assign(/* @__PURE__ */ Object.create(null), {
      w: {
        id: A.setLineWidth,
        numArgs: 1,
        variableArgs: !1
      },
      J: {
        id: A.setLineCap,
        numArgs: 1,
        variableArgs: !1
      },
      j: {
        id: A.setLineJoin,
        numArgs: 1,
        variableArgs: !1
      },
      M: {
        id: A.setMiterLimit,
        numArgs: 1,
        variableArgs: !1
      },
      d: {
        id: A.setDash,
        numArgs: 2,
        variableArgs: !1
      },
      ri: {
        id: A.setRenderingIntent,
        numArgs: 1,
        variableArgs: !1
      },
      i: {
        id: A.setFlatness,
        numArgs: 1,
        variableArgs: !1
      },
      gs: {
        id: A.setGState,
        numArgs: 1,
        variableArgs: !1
      },
      q: {
        id: A.save,
        numArgs: 0,
        variableArgs: !1
      },
      Q: {
        id: A.restore,
        numArgs: 0,
        variableArgs: !1
      },
      cm: {
        id: A.transform,
        numArgs: 6,
        variableArgs: !1
      },
      m: {
        id: A.moveTo,
        numArgs: 2,
        variableArgs: !1
      },
      l: {
        id: A.lineTo,
        numArgs: 2,
        variableArgs: !1
      },
      c: {
        id: A.curveTo,
        numArgs: 6,
        variableArgs: !1
      },
      v: {
        id: A.curveTo2,
        numArgs: 4,
        variableArgs: !1
      },
      y: {
        id: A.curveTo3,
        numArgs: 4,
        variableArgs: !1
      },
      h: {
        id: A.closePath,
        numArgs: 0,
        variableArgs: !1
      },
      re: {
        id: A.rectangle,
        numArgs: 4,
        variableArgs: !1
      },
      S: {
        id: A.stroke,
        numArgs: 0,
        variableArgs: !1
      },
      s: {
        id: A.closeStroke,
        numArgs: 0,
        variableArgs: !1
      },
      f: {
        id: A.fill,
        numArgs: 0,
        variableArgs: !1
      },
      F: {
        id: A.fill,
        numArgs: 0,
        variableArgs: !1
      },
      "f*": {
        id: A.eoFill,
        numArgs: 0,
        variableArgs: !1
      },
      B: {
        id: A.fillStroke,
        numArgs: 0,
        variableArgs: !1
      },
      "B*": {
        id: A.eoFillStroke,
        numArgs: 0,
        variableArgs: !1
      },
      b: {
        id: A.closeFillStroke,
        numArgs: 0,
        variableArgs: !1
      },
      "b*": {
        id: A.closeEOFillStroke,
        numArgs: 0,
        variableArgs: !1
      },
      n: {
        id: A.endPath,
        numArgs: 0,
        variableArgs: !1
      },
      W: {
        id: A.clip,
        numArgs: 0,
        variableArgs: !1
      },
      "W*": {
        id: A.eoClip,
        numArgs: 0,
        variableArgs: !1
      },
      BT: {
        id: A.beginText,
        numArgs: 0,
        variableArgs: !1
      },
      ET: {
        id: A.endText,
        numArgs: 0,
        variableArgs: !1
      },
      Tc: {
        id: A.setCharSpacing,
        numArgs: 1,
        variableArgs: !1
      },
      Tw: {
        id: A.setWordSpacing,
        numArgs: 1,
        variableArgs: !1
      },
      Tz: {
        id: A.setHScale,
        numArgs: 1,
        variableArgs: !1
      },
      TL: {
        id: A.setLeading,
        numArgs: 1,
        variableArgs: !1
      },
      Tf: {
        id: A.setFont,
        numArgs: 2,
        variableArgs: !1
      },
      Tr: {
        id: A.setTextRenderingMode,
        numArgs: 1,
        variableArgs: !1
      },
      Ts: {
        id: A.setTextRise,
        numArgs: 1,
        variableArgs: !1
      },
      Td: {
        id: A.moveText,
        numArgs: 2,
        variableArgs: !1
      },
      TD: {
        id: A.setLeadingMoveText,
        numArgs: 2,
        variableArgs: !1
      },
      Tm: {
        id: A.setTextMatrix,
        numArgs: 6,
        variableArgs: !1
      },
      "T*": {
        id: A.nextLine,
        numArgs: 0,
        variableArgs: !1
      },
      Tj: {
        id: A.showText,
        numArgs: 1,
        variableArgs: !1
      },
      TJ: {
        id: A.showSpacedText,
        numArgs: 1,
        variableArgs: !1
      },
      "'": {
        id: A.nextLineShowText,
        numArgs: 1,
        variableArgs: !1
      },
      '"': {
        id: A.nextLineSetSpacingShowText,
        numArgs: 3,
        variableArgs: !1
      },
      d0: {
        id: A.setCharWidth,
        numArgs: 2,
        variableArgs: !1
      },
      d1: {
        id: A.setCharWidthAndBounds,
        numArgs: 6,
        variableArgs: !1
      },
      CS: {
        id: A.setStrokeColorSpace,
        numArgs: 1,
        variableArgs: !1
      },
      cs: {
        id: A.setFillColorSpace,
        numArgs: 1,
        variableArgs: !1
      },
      SC: {
        id: A.setStrokeColor,
        numArgs: 4,
        variableArgs: !0
      },
      SCN: {
        id: A.setStrokeColorN,
        numArgs: 33,
        variableArgs: !0
      },
      sc: {
        id: A.setFillColor,
        numArgs: 4,
        variableArgs: !0
      },
      scn: {
        id: A.setFillColorN,
        numArgs: 33,
        variableArgs: !0
      },
      G: {
        id: A.setStrokeGray,
        numArgs: 1,
        variableArgs: !1
      },
      g: {
        id: A.setFillGray,
        numArgs: 1,
        variableArgs: !1
      },
      RG: {
        id: A.setStrokeRGBColor,
        numArgs: 3,
        variableArgs: !1
      },
      rg: {
        id: A.setFillRGBColor,
        numArgs: 3,
        variableArgs: !1
      },
      K: {
        id: A.setStrokeCMYKColor,
        numArgs: 4,
        variableArgs: !1
      },
      k: {
        id: A.setFillCMYKColor,
        numArgs: 4,
        variableArgs: !1
      },
      sh: {
        id: A.shadingFill,
        numArgs: 1,
        variableArgs: !1
      },
      BI: {
        id: A.beginInlineImage,
        numArgs: 0,
        variableArgs: !1
      },
      ID: {
        id: A.beginImageData,
        numArgs: 0,
        variableArgs: !1
      },
      EI: {
        id: A.endInlineImage,
        numArgs: 1,
        variableArgs: !1
      },
      Do: {
        id: A.paintXObject,
        numArgs: 1,
        variableArgs: !1
      },
      MP: {
        id: A.markPoint,
        numArgs: 1,
        variableArgs: !1
      },
      DP: {
        id: A.markPointProps,
        numArgs: 2,
        variableArgs: !1
      },
      BMC: {
        id: A.beginMarkedContent,
        numArgs: 1,
        variableArgs: !1
      },
      BDC: {
        id: A.beginMarkedContentProps,
        numArgs: 2,
        variableArgs: !1
      },
      EMC: {
        id: A.endMarkedContent,
        numArgs: 0,
        variableArgs: !1
      },
      BX: {
        id: A.beginCompat,
        numArgs: 0,
        variableArgs: !1
      },
      EX: {
        id: A.endCompat,
        numArgs: 0,
        variableArgs: !1
      },
      BM: null,
      BD: null,
      true: null,
      fa: null,
      fal: null,
      fals: null,
      false: null,
      nu: null,
      nul: null,
      null: null
    }));
  }
  constructor(e, n, i = new Yr()) {
    this.parser = new zi({
      lexer: new ti(e, oa.opMap),
      xref: n
    }), this.stateManager = i, this.nonProcessedArgs = [], this._isPathOp = !1, this._numInvalidPathOPS = 0;
  }
  get savedStatesDepth() {
    return this.stateManager.stateStack.length;
  }
  read(e) {
    let n = e.args;
    for (; ; ) {
      const i = this.parser.getObj();
      if (i instanceof Mt) {
        const s = i.cmd, a = oa.opMap[s];
        if (!a) {
          I(`Unknown command "${s}".`);
          continue;
        }
        const r = a.id, o = a.numArgs;
        let c = n !== null ? n.length : 0;
        if (this._isPathOp || (this._numInvalidPathOPS = 0), this._isPathOp = r >= A.moveTo && r <= A.endPath, a.variableArgs)
          c > o && Ge(`Command ${s}: expected [0, ${o}] args, but received ${c} args.`);
        else {
          if (c !== o) {
            const l = this.nonProcessedArgs;
            for (; c > o; )
              l.push(n.shift()), c--;
            for (; c < o && l.length !== 0; )
              n === null && (n = []), n.unshift(l.pop()), c++;
          }
          if (c < o) {
            const l = `command ${s}: expected ${o} args, but received ${c} args.`;
            if (this._isPathOp && ++this._numInvalidPathOPS > oa.MAX_INVALID_PATH_OPS)
              throw new j(`Invalid ${l}`);
            I(`Skipping ${l}`), n !== null && (n.length = 0);
            continue;
          }
        }
        return this.preprocessCommand(r, n), e.fn = r, e.args = n, !0;
      }
      if (i === $t)
        return !1;
      if (i !== null && (n === null && (n = []), n.push(i), n.length > 33))
        throw new j("Too many arguments");
    }
  }
  preprocessCommand(e, n) {
    switch (e | 0) {
      case A.save:
        this.stateManager.save();
        break;
      case A.restore:
        this.stateManager.restore();
        break;
      case A.transform:
        this.stateManager.transform(n);
        break;
    }
  }
};
Ye(oa, "MAX_INVALID_PATH_OPS", 10);
let Ba = oa;
class Qg extends Ba {
  constructor(e) {
    super(new pn(e));
  }
  parse() {
    const e = {
      fn: 0,
      args: []
    }, n = {
      fontSize: 0,
      fontName: "",
      fontColor: new Uint8ClampedArray(3)
    };
    try {
      for (; e.args.length = 0, !!this.read(e); ) {
        if (this.savedStatesDepth !== 0)
          continue;
        const {
          fn: i,
          args: s
        } = e;
        switch (i | 0) {
          case A.setFont:
            const [a, r] = s;
            a instanceof O && (n.fontName = a.name), typeof r == "number" && r > 0 && (n.fontSize = r);
            break;
          case A.setFillRGBColor:
            Qe.rgb.getRgbItem(s, 0, n.fontColor, 0);
            break;
          case A.setFillGray:
            Qe.gray.getRgbItem(s, 0, n.fontColor, 0);
            break;
          case A.setFillCMYKColor:
            Qe.cmyk.getRgbItem(s, 0, n.fontColor, 0);
            break;
        }
      }
    } catch (i) {
      I(`parseDefaultAppearance - ignoring errors: "${i}".`);
    }
    return n;
  }
}
function n1(t) {
  return new Qg(t).parse();
}
class e3 extends Ba {
  constructor(e, n, i, s) {
    var a;
    super(e), this.stream = e, this.evaluatorOptions = n, this.xref = i, this.globalColorSpaceCache = s, this.resources = (a = e.dict) == null ? void 0 : a.get("Resources");
  }
  parse() {
    const e = {
      fn: 0,
      args: []
    };
    let n = {
      scaleFactor: 1,
      fontSize: 0,
      fontName: "",
      fontColor: new Uint8ClampedArray(3),
      fillColorSpace: Qe.gray
    }, i = !1;
    const s = [];
    try {
      for (; e.args.length = 0, !(i || !this.read(e)); ) {
        const {
          fn: a,
          args: r
        } = e;
        switch (a | 0) {
          case A.save:
            s.push({
              scaleFactor: n.scaleFactor,
              fontSize: n.fontSize,
              fontName: n.fontName,
              fontColor: n.fontColor.slice(),
              fillColorSpace: n.fillColorSpace
            });
            break;
          case A.restore:
            n = s.pop() || n;
            break;
          case A.setTextMatrix:
            n.scaleFactor *= Math.hypot(r[0], r[1]);
            break;
          case A.setFont:
            const [o, c] = r;
            o instanceof O && (n.fontName = o.name), typeof c == "number" && c > 0 && (n.fontSize = c * n.scaleFactor);
            break;
          case A.setFillColorSpace:
            n.fillColorSpace = Qe.parse({
              cs: r[0],
              xref: this.xref,
              resources: this.resources,
              pdfFunctionFactory: this._pdfFunctionFactory,
              globalColorSpaceCache: this.globalColorSpaceCache,
              localColorSpaceCache: this._localColorSpaceCache
            });
            break;
          case A.setFillColor:
            n.fillColorSpace.getRgbItem(r, 0, n.fontColor, 0);
            break;
          case A.setFillRGBColor:
            Qe.rgb.getRgbItem(r, 0, n.fontColor, 0);
            break;
          case A.setFillGray:
            Qe.gray.getRgbItem(r, 0, n.fontColor, 0);
            break;
          case A.setFillCMYKColor:
            Qe.cmyk.getRgbItem(r, 0, n.fontColor, 0);
            break;
          case A.showText:
          case A.showSpacedText:
          case A.nextLineShowText:
          case A.nextLineSetSpacingShowText:
            i = !0;
            break;
        }
      }
    } catch (a) {
      I(`parseAppearanceStream - ignoring errors: "${a}".`);
    }
    return this.stream.reset(), delete n.scaleFactor, delete n.fillColorSpace, n;
  }
  get _localColorSpaceCache() {
    return Q(this, "_localColorSpaceCache", new tu());
  }
  get _pdfFunctionFactory() {
    const e = new iu({
      xref: this.xref,
      isEvalSupported: this.evaluatorOptions.isEvalSupported
    });
    return Q(this, "_pdfFunctionFactory", e);
  }
}
function t3(t, e, n, i) {
  return new e3(t, e, n, i).parse();
}
function Si(t, e) {
  if (t[0] === t[1] && t[1] === t[2]) {
    const n = t[0] / 255;
    return `${Xe(n)} ${e ? "g" : "G"}`;
  }
  return Array.from(t, (n) => Xe(n / 255)).join(" ") + ` ${e ? "rg" : "RG"}`;
}
function n3({
  fontSize: t,
  fontName: e,
  fontColor: n
}) {
  return `/${ql(e)} ${t} Tf ${Si(n, !0)}`;
}
class pi {
  constructor(e, n) {
    this.xref = e, this.widths = null, this.firstChar = 1 / 0, this.lastChar = -1 / 0, this.fontFamily = n;
    const i = new OffscreenCanvas(1, 1);
    this.ctxMeasure = i.getContext("2d", {
      willReadFrequently: !0
    }), pi._fontNameId || (pi._fontNameId = 1), this.fontName = O.get(`InvalidPDFjsFont_${n}_${pi._fontNameId++}`);
  }
  get fontDescriptorRef() {
    if (!pi._fontDescriptorRef) {
      const e = new E(this.xref);
      e.set("Type", O.get("FontDescriptor")), e.set("FontName", this.fontName), e.set("FontFamily", "MyriadPro Regular"), e.set("FontBBox", [0, 0, 0, 0]), e.set("FontStretch", O.get("Normal")), e.set("FontWeight", 400), e.set("ItalicAngle", 0), pi._fontDescriptorRef = this.xref.getNewPersistentRef(e);
    }
    return pi._fontDescriptorRef;
  }
  get descendantFontRef() {
    const e = new E(this.xref);
    e.set("BaseFont", this.fontName), e.set("Type", O.get("Font")), e.set("Subtype", O.get("CIDFontType0")), e.set("CIDToGIDMap", O.get("Identity")), e.set("FirstChar", this.firstChar), e.set("LastChar", this.lastChar), e.set("FontDescriptor", this.fontDescriptorRef), e.set("DW", 1e3);
    const n = [], i = [...this.widths.entries()].sort();
    let s = null, a = null;
    for (const [o, c] of i) {
      if (!s) {
        s = o, a = [c];
        continue;
      }
      o === s + a.length ? a.push(c) : (n.push(s, a), s = o, a = [c]);
    }
    s && n.push(s, a), e.set("W", n);
    const r = new E(this.xref);
    return r.set("Ordering", "Identity"), r.set("Registry", "Adobe"), r.set("Supplement", 0), e.set("CIDSystemInfo", r), this.xref.getNewPersistentRef(e);
  }
  get baseFontRef() {
    const e = new E(this.xref);
    return e.set("BaseFont", this.fontName), e.set("Type", O.get("Font")), e.set("Subtype", O.get("Type0")), e.set("Encoding", O.get("Identity-H")), e.set("DescendantFonts", [this.descendantFontRef]), e.set("ToUnicode", O.get("Identity-H")), this.xref.getNewPersistentRef(e);
  }
  get resources() {
    const e = new E(this.xref), n = new E(this.xref);
    return n.set(this.fontName.name, this.baseFontRef), e.set("Font", n), e;
  }
  _createContext() {
    return this.widths = /* @__PURE__ */ new Map(), this.ctxMeasure.font = `1000px ${this.fontFamily}`, this.ctxMeasure;
  }
  createFontResources(e) {
    const n = this._createContext();
    for (const i of e.split(/\r\n?|\n/))
      for (const s of i.split("")) {
        const a = s.charCodeAt(0);
        if (this.widths.has(a))
          continue;
        const r = n.measureText(s), o = Math.ceil(r.width);
        this.widths.set(a, o), this.firstChar = Math.min(a, this.firstChar), this.lastChar = Math.max(a, this.lastChar);
      }
    return this.resources;
  }
  static getFirstPositionInfo(e, n, i) {
    const [s, a, r, o] = e;
    let c = r - s, l = o - a;
    n % 180 !== 0 && ([c, l] = [l, c]);
    const h = Ni * i, f = to * i;
    return {
      coords: [0, l + f - h],
      bbox: [0, 0, c, l],
      matrix: n !== 0 ? ao(n, l, h) : void 0
    };
  }
  createAppearance(e, n, i, s, a, r) {
    const o = this._createContext(), c = [];
    let l = -1 / 0;
    for (const _ of e.split(/\r\n?|\n/)) {
      c.push(_);
      const K = o.measureText(_).width;
      l = Math.max(l, K);
      for (const se of t2(_)) {
        const H = String.fromCodePoint(se);
        let W = this.widths.get(se);
        if (W === void 0) {
          const le = o.measureText(H);
          W = Math.ceil(le.width), this.widths.set(se, W), this.firstChar = Math.min(se, this.firstChar), this.lastChar = Math.max(se, this.lastChar);
        }
      }
    }
    l *= s / 1e3;
    const [h, f, u, d] = n;
    let x = u - h, g = d - f;
    i % 180 !== 0 && ([x, g] = [g, x]);
    let m = 1;
    l > x && (m = x / l);
    let p = 1;
    const b = Ni * s, w = to * s, y = b * c.length;
    y > g && (p = g / y);
    const k = Math.min(m, p), S = s * k, C = ["q", `0 0 ${Xe(x)} ${Xe(g)} re W n`, "BT", `1 0 0 1 0 ${Xe(g + w)} Tm 0 Tc ${Si(a, !0)}`, `/${this.fontName.name} ${Xe(S)} Tf`], {
      resources: T
    } = this;
    if (r = typeof r == "number" && r >= 0 && r <= 1 ? r : 1, r !== 1) {
      C.push("/R0 gs");
      const _ = new E(this.xref), K = new E(this.xref);
      K.set("ca", r), K.set("CA", r), K.set("Type", O.get("ExtGState")), _.set("R0", K), T.set("ExtGState", _);
    }
    const F = Xe(b);
    for (const _ of c)
      C.push(`0 -${F} Td <${s2(_)}> Tj`);
    C.push("ET", "Q");
    const R = C.join(`
`), D = new E(this.xref);
    if (D.set("Subtype", O.get("Form")), D.set("Type", O.get("XObject")), D.set("BBox", [0, 0, x, g]), D.set("Length", R.length), D.set("Resources", T), i) {
      const _ = ao(i, x, g);
      D.set("Matrix", _);
    }
    const M = new pn(R);
    return M.dict = D, M;
  }
}
class lu {
  constructor(e, n, i) {
    this.root = e, this.xref = n, this._type = i;
  }
  getAll() {
    const e = /* @__PURE__ */ new Map();
    if (!this.root)
      return e;
    const n = this.xref, i = new Dt();
    i.put(this.root);
    const s = [this.root];
    for (; s.length > 0; ) {
      const a = n.fetchIfRef(s.shift());
      if (!(a instanceof E))
        continue;
      if (a.has("Kids")) {
        const o = a.get("Kids");
        if (!Array.isArray(o))
          continue;
        for (const c of o) {
          if (i.has(c))
            throw new j(`Duplicate entry in "${this._type}" tree.`);
          s.push(c), i.put(c);
        }
        continue;
      }
      const r = a.get(this._type);
      if (Array.isArray(r))
        for (let o = 0, c = r.length; o < c; o += 2)
          e.set(n.fetchIfRef(r[o]), n.fetchIfRef(r[o + 1]));
    }
    return e;
  }
  getRaw(e) {
    if (!this.root)
      return null;
    const n = this.xref;
    let i = n.fetchIfRef(this.root), s = 0;
    const a = 10;
    for (; i.has("Kids"); ) {
      if (++s > a)
        return I(`Search depth limit reached for "${this._type}" tree.`), null;
      const o = i.get("Kids");
      if (!Array.isArray(o))
        return null;
      let c = 0, l = o.length - 1;
      for (; c <= l; ) {
        const h = c + l >> 1, f = n.fetchIfRef(o[h]), u = f.get("Limits");
        if (e < n.fetchIfRef(u[0]))
          l = h - 1;
        else if (e > n.fetchIfRef(u[1]))
          c = h + 1;
        else {
          i = f;
          break;
        }
      }
      if (c > l)
        return null;
    }
    const r = i.get(this._type);
    if (Array.isArray(r)) {
      let o = 0, c = r.length - 2;
      for (; o <= c; ) {
        const l = o + c >> 1, h = l + (l & 1), f = n.fetchIfRef(r[h]);
        if (e < f)
          c = h - 2;
        else if (e > f)
          o = h + 2;
        else
          return r[h + 1];
      }
    }
    return null;
  }
  get(e) {
    return this.xref.fetchIfRef(this.getRaw(e));
  }
}
class Xs extends lu {
  constructor(e, n) {
    super(e, n, "Names");
  }
}
class ho extends lu {
  constructor(e, n) {
    super(e, n, "Nums");
  }
}
function i1() {
  Vx(), Kd(), H9(), Jn.cleanup();
}
function Ph(t) {
  return t instanceof E ? t.has("UF") ? t.get("UF") : t.has("F") ? t.get("F") : t.has("Unix") ? t.get("Unix") : t.has("Mac") ? t.get("Mac") : t.has("DOS") ? t.get("DOS") : null : null;
}
function i3(t) {
  return t.substring(t.lastIndexOf("/") + 1);
}
var J0;
class dl {
  constructor(e, n, i = !1) {
    Ee(this, J0, !1);
    e instanceof E && (this.xref = n, this.root = e, e.has("FS") && (this.fs = e.get("FS")), e.has("RF") && I("Related file specifications are not supported"), i || (e.has("EF") ? ct(this, J0, !0) : I("Non-embedded file specifications are not supported")));
  }
  get filename() {
    let e = "";
    const n = Ph(this.root);
    return n && typeof n == "string" && (e = Ze(n, !0).replaceAll("\\\\", "\\").replaceAll("\\/", "/").replaceAll("\\", "/")), Q(this, "filename", e || "unnamed");
  }
  get content() {
    var n;
    if (!ce(this, J0))
      return null;
    this._contentRef || (this._contentRef = Ph((n = this.root) == null ? void 0 : n.get("EF")));
    let e = null;
    if (this._contentRef) {
      const i = this.xref.fetchIfRef(this._contentRef);
      i instanceof je ? e = i.getBytes() : I("Embedded file specification points to non-existing/invalid content");
    } else
      I("Embedded file specification does not have any content");
    return e;
  }
  get description() {
    var i;
    let e = "";
    const n = (i = this.root) == null ? void 0 : i.get("Desc");
    return n && typeof n == "string" && (e = Ze(n)), Q(this, "description", e);
  }
  get serializable() {
    return {
      rawFilename: this.filename,
      filename: i3(this.filename),
      content: this.content,
      description: this.description
    };
  }
}
J0 = new WeakMap();
const yn = {
  NoError: 0,
  UnterminatedCdat: -2,
  UnterminatedXmlDeclaration: -3,
  UnterminatedDoctypeDeclaration: -4,
  UnterminatedComment: -5,
  MalformedElement: -6,
  UnterminatedElement: -9
};
function ea(t, e) {
  const n = t[e];
  return n === " " || n === `
` || n === "\r" || n === "	";
}
function s3(t) {
  for (let e = 0, n = t.length; e < n; e++)
    if (!ea(t, e))
      return !1;
  return !0;
}
class hu {
  _resolveEntities(e) {
    return e.replaceAll(/&([^;]+);/g, (n, i) => {
      if (i.substring(0, 2) === "#x")
        return String.fromCodePoint(parseInt(i.substring(2), 16));
      if (i.substring(0, 1) === "#")
        return String.fromCodePoint(parseInt(i.substring(1), 10));
      switch (i) {
        case "lt":
          return "<";
        case "gt":
          return ">";
        case "amp":
          return "&";
        case "quot":
          return '"';
        case "apos":
          return "'";
      }
      return this.onResolveEntity(i);
    });
  }
  _parseContent(e, n) {
    const i = [];
    let s = n;
    function a() {
      for (; s < e.length && ea(e, s); )
        ++s;
    }
    for (; s < e.length && !ea(e, s) && e[s] !== ">" && e[s] !== "/"; )
      ++s;
    const r = e.substring(n, s);
    for (a(); s < e.length && e[s] !== ">" && e[s] !== "/" && e[s] !== "?"; ) {
      a();
      let o = "", c = "";
      for (; s < e.length && !ea(e, s) && e[s] !== "="; )
        o += e[s], ++s;
      if (a(), e[s] !== "=")
        return null;
      ++s, a();
      const l = e[s];
      if (l !== '"' && l !== "'")
        return null;
      const h = e.indexOf(l, ++s);
      if (h < 0)
        return null;
      c = e.substring(s, h), i.push({
        name: o,
        value: this._resolveEntities(c)
      }), s = h + 1, a();
    }
    return {
      name: r,
      attributes: i,
      parsed: s - n
    };
  }
  _parseProcessingInstruction(e, n) {
    let i = n;
    function s() {
      for (; i < e.length && ea(e, i); )
        ++i;
    }
    for (; i < e.length && !ea(e, i) && e[i] !== ">" && e[i] !== "?" && e[i] !== "/"; )
      ++i;
    const a = e.substring(n, i);
    s();
    const r = i;
    for (; i < e.length && (e[i] !== "?" || e[i + 1] !== ">"); )
      ++i;
    const o = e.substring(r, i);
    return {
      name: a,
      value: o,
      parsed: i - n
    };
  }
  parseXml(e) {
    let n = 0;
    for (; n < e.length; ) {
      const i = e[n];
      let s = n;
      if (i === "<") {
        ++s;
        const a = e[s];
        let r;
        switch (a) {
          case "/":
            if (++s, r = e.indexOf(">", s), r < 0) {
              this.onError(yn.UnterminatedElement);
              return;
            }
            this.onEndElement(e.substring(s, r)), s = r + 1;
            break;
          case "?":
            ++s;
            const o = this._parseProcessingInstruction(e, s);
            if (e.substring(s + o.parsed, s + o.parsed + 2) !== "?>") {
              this.onError(yn.UnterminatedXmlDeclaration);
              return;
            }
            this.onPi(o.name, o.value), s += o.parsed + 2;
            break;
          case "!":
            if (e.substring(s + 1, s + 3) === "--") {
              if (r = e.indexOf("-->", s + 3), r < 0) {
                this.onError(yn.UnterminatedComment);
                return;
              }
              this.onComment(e.substring(s + 3, r)), s = r + 3;
            } else if (e.substring(s + 1, s + 8) === "[CDATA[") {
              if (r = e.indexOf("]]>", s + 8), r < 0) {
                this.onError(yn.UnterminatedCdat);
                return;
              }
              this.onCdata(e.substring(s + 8, r)), s = r + 3;
            } else if (e.substring(s + 1, s + 8) === "DOCTYPE") {
              const h = e.indexOf("[", s + 8);
              let f = !1;
              if (r = e.indexOf(">", s + 8), r < 0) {
                this.onError(yn.UnterminatedDoctypeDeclaration);
                return;
              }
              if (h > 0 && r > h) {
                if (r = e.indexOf("]>", s + 8), r < 0) {
                  this.onError(yn.UnterminatedDoctypeDeclaration);
                  return;
                }
                f = !0;
              }
              const u = e.substring(s + 8, r + (f ? 1 : 0));
              this.onDoctype(u), s = r + (f ? 2 : 1);
            } else {
              this.onError(yn.MalformedElement);
              return;
            }
            break;
          default:
            const c = this._parseContent(e, s);
            if (c === null) {
              this.onError(yn.MalformedElement);
              return;
            }
            let l = !1;
            if (e.substring(s + c.parsed, s + c.parsed + 2) === "/>")
              l = !0;
            else if (e.substring(s + c.parsed, s + c.parsed + 1) !== ">") {
              this.onError(yn.UnterminatedElement);
              return;
            }
            this.onBeginElement(c.name, c.attributes, l), s += c.parsed + (l ? 2 : 1);
            break;
        }
      } else {
        for (; s < e.length && e[s] !== "<"; )
          s++;
        const a = e.substring(n, s);
        this.onText(this._resolveEntities(a));
      }
      n = s;
    }
  }
  onResolveEntity(e) {
    return `&${e};`;
  }
  onPi(e, n) {
  }
  onComment(e) {
  }
  onCdata(e) {
  }
  onDoctype(e) {
  }
  onText(e) {
  }
  onBeginElement(e, n, i) {
  }
  onEndElement(e) {
  }
  onError(e) {
  }
}
class f0 {
  constructor(e, n) {
    this.nodeName = e, this.nodeValue = n, Object.defineProperty(this, "parentNode", {
      value: null,
      writable: !0
    });
  }
  get firstChild() {
    var e;
    return (e = this.childNodes) == null ? void 0 : e[0];
  }
  get nextSibling() {
    const e = this.parentNode.childNodes;
    if (!e)
      return;
    const n = e.indexOf(this);
    if (n !== -1)
      return e[n + 1];
  }
  get textContent() {
    return this.childNodes ? this.childNodes.map((e) => e.textContent).join("") : this.nodeValue || "";
  }
  get children() {
    return this.childNodes || [];
  }
  hasChildNodes() {
    var e;
    return ((e = this.childNodes) == null ? void 0 : e.length) > 0;
  }
  searchNode(e, n) {
    var r;
    if (n >= e.length)
      return this;
    const i = e[n];
    if (i.name.startsWith("#") && n < e.length - 1)
      return this.searchNode(e, n + 1);
    const s = [];
    let a = this;
    for (; ; ) {
      if (i.name === a.nodeName)
        if (i.pos === 0) {
          const o = a.searchNode(e, n + 1);
          if (o !== null)
            return o;
        } else {
          if (s.length === 0)
            return null;
          {
            const [o] = s.pop();
            let c = 0;
            for (const l of o.childNodes)
              if (i.name === l.nodeName) {
                if (c === i.pos)
                  return l.searchNode(e, n + 1);
                c++;
              }
            return a.searchNode(e, n + 1);
          }
        }
      if (((r = a.childNodes) == null ? void 0 : r.length) > 0)
        s.push([a, 0]), a = a.childNodes[0];
      else {
        if (s.length === 0)
          return null;
        for (; s.length !== 0; ) {
          const [o, c] = s.pop(), l = c + 1;
          if (l < o.childNodes.length) {
            s.push([o, l]), a = o.childNodes[l];
            break;
          }
        }
        if (s.length === 0)
          return null;
      }
    }
  }
  dump(e) {
    if (this.nodeName === "#text") {
      e.push(fa(this.nodeValue));
      return;
    }
    if (e.push(`<${this.nodeName}`), this.attributes)
      for (const n of this.attributes)
        e.push(` ${n.name}="${fa(n.value)}"`);
    if (this.hasChildNodes()) {
      e.push(">");
      for (const n of this.childNodes)
        n.dump(e);
      e.push(`</${this.nodeName}>`);
    } else this.nodeValue ? e.push(`>${fa(this.nodeValue)}</${this.nodeName}>`) : e.push("/>");
  }
}
class Ho extends hu {
  constructor({
    hasAttributes: e = !1,
    lowerCaseName: n = !1
  }) {
    super(), this._currentFragment = null, this._stack = null, this._errorCode = yn.NoError, this._hasAttributes = e, this._lowerCaseName = n;
  }
  parseFromString(e) {
    if (this._currentFragment = [], this._stack = [], this._errorCode = yn.NoError, this.parseXml(e), this._errorCode !== yn.NoError)
      return;
    const [n] = this._currentFragment;
    if (n)
      return {
        documentElement: n
      };
  }
  onText(e) {
    if (s3(e))
      return;
    const n = new f0("#text", e);
    this._currentFragment.push(n);
  }
  onCdata(e) {
    const n = new f0("#text", e);
    this._currentFragment.push(n);
  }
  onBeginElement(e, n, i) {
    this._lowerCaseName && (e = e.toLowerCase());
    const s = new f0(e);
    s.childNodes = [], this._hasAttributes && (s.attributes = n), this._currentFragment.push(s), !i && (this._stack.push(this._currentFragment), this._currentFragment = s.childNodes);
  }
  onEndElement(e) {
    this._currentFragment = this._stack.pop() || [];
    const n = this._currentFragment.at(-1);
    if (!n)
      return null;
    for (const i of n.childNodes)
      i.parentNode = n;
    return n;
  }
  onError(e) {
    this._errorCode = e;
  }
}
class a3 {
  constructor(e) {
    e = this._repair(e);
    const i = new Ho({
      lowerCaseName: !0
    }).parseFromString(e);
    this._metadataMap = /* @__PURE__ */ new Map(), this._data = e, i && this._parse(i);
  }
  _repair(e) {
    return e.replace(/^[^<]+/, "").replaceAll(/>\\376\\377([^<]+)/g, function(n, i) {
      const s = i.replaceAll(/\\([0-3])([0-7])([0-7])/g, function(r, o, c, l) {
        return String.fromCharCode(o * 64 + c * 8 + l * 1);
      }).replaceAll(/&(amp|apos|gt|lt|quot);/g, function(r, o) {
        switch (o) {
          case "amp":
            return "&";
          case "apos":
            return "'";
          case "gt":
            return ">";
          case "lt":
            return "<";
          case "quot":
            return '"';
        }
        throw new Error(`_repair: ${o} isn't defined.`);
      }), a = [">"];
      for (let r = 0, o = s.length; r < o; r += 2) {
        const c = s.charCodeAt(r) * 256 + s.charCodeAt(r + 1);
        c >= 32 && c < 127 && c !== 60 && c !== 62 && c !== 38 ? a.push(String.fromCharCode(c)) : a.push("&#x" + (65536 + c).toString(16).substring(1) + ";");
      }
      return a.join("");
    });
  }
  _getSequence(e) {
    const n = e.nodeName;
    return n !== "rdf:bag" && n !== "rdf:seq" && n !== "rdf:alt" ? null : e.childNodes.filter((i) => i.nodeName === "rdf:li");
  }
  _parseArray(e) {
    if (!e.hasChildNodes())
      return;
    const [n] = e.childNodes, i = this._getSequence(n) || [];
    this._metadataMap.set(e.nodeName, i.map((s) => s.textContent.trim()));
  }
  _parse(e) {
    let n = e.documentElement;
    if (n.nodeName !== "rdf:rdf")
      for (n = n.firstChild; n && n.nodeName !== "rdf:rdf"; )
        n = n.nextSibling;
    if (!(!n || n.nodeName !== "rdf:rdf" || !n.hasChildNodes())) {
      for (const i of n.childNodes)
        if (i.nodeName === "rdf:description")
          for (const s of i.childNodes) {
            const a = s.nodeName;
            switch (a) {
              case "#text":
                continue;
              case "dc:creator":
              case "dc:subject":
                this._parseArray(s);
                continue;
            }
            this._metadataMap.set(a, s.textContent.trim());
          }
    }
  }
  get serializable() {
    return {
      parsedData: this._metadataMap,
      rawData: this._data
    };
  }
}
const Nh = 40, qn = {
  PAGE_CONTENT: 1,
  STREAM_CONTENT: 2,
  OBJECT: 3,
  ANNOTATION: 4,
  ELEMENT: 5
};
var Do, fu, Xn, xl, gl, uu, du;
const Cs = class Cs {
  constructor(e, n, i) {
    Ee(this, Do);
    this.xref = e, this.dict = n, this.ref = i instanceof he ? i : null, this.roleMap = /* @__PURE__ */ new Map(), this.structParentIds = null;
  }
  init() {
    this.readRoleMap();
  }
  addAnnotationIdToPage(e, n) {
    J(this, Do, fu).call(this, e, n, qn.ANNOTATION);
  }
  readRoleMap() {
    const e = this.dict.get("RoleMap");
    if (e instanceof E)
      for (const [n, i] of e)
        i instanceof O && this.roleMap.set(n, i.name);
  }
  static async canCreateStructureTree({
    catalogRef: e,
    pdfManager: n,
    newAnnotationsByPage: i
  }) {
    var r;
    if (!(e instanceof he))
      return I("Cannot save the struct tree: no catalog reference."), !1;
    let s = 0, a = !0;
    for (const [o, c] of i) {
      const {
        ref: l
      } = await n.getPage(o);
      if (!(l instanceof he)) {
        I(`Cannot save the struct tree: page ${o} has no ref.`), a = !0;
        break;
      }
      for (const h of c)
        (r = h.accessibilityData) != null && r.type && (h.parentTreeId = s++, a = !1);
    }
    if (a) {
      for (const o of i.values())
        for (const c of o)
          delete c.parentTreeId;
      return !1;
    }
    return !0;
  }
  static async createStructureTree({
    newAnnotationsByPage: e,
    xref: n,
    catalogRef: i,
    pdfManager: s,
    changes: a
  }) {
    const r = await s.ensureCatalog("cloneDict"), o = new kn();
    o.put(i, r);
    const c = n.getNewTemporaryRef();
    r.set("StructTreeRoot", c);
    const l = new E(n);
    l.set("Type", O.get("StructTreeRoot"));
    const h = n.getNewTemporaryRef();
    l.set("ParentTree", h);
    const f = [];
    l.set("K", f), o.put(c, l);
    const u = new E(n), d = [];
    u.set("Nums", d);
    const x = await J(this, Xn, xl).call(this, {
      newAnnotationsByPage: e,
      structTreeRootRef: c,
      structTreeRoot: null,
      kids: f,
      nums: d,
      xref: n,
      pdfManager: s,
      changes: a,
      cache: o
    });
    l.set("ParentTreeNextKey", x), o.put(h, u);
    for (const [g, m] of o.items())
      a.put(g, {
        data: m
      });
  }
  async canUpdateStructTree({
    pdfManager: e,
    newAnnotationsByPage: n
  }) {
    var c, l;
    if (!this.ref)
      return I("Cannot update the struct tree: no root reference."), !1;
    let i = this.dict.get("ParentTreeNextKey");
    if (!Number.isInteger(i) || i < 0)
      return I("Cannot update the struct tree: invalid next key."), !1;
    const s = this.dict.get("ParentTree");
    if (!(s instanceof E))
      return I("Cannot update the struct tree: ParentTree isn't a dict."), !1;
    const a = s.get("Nums");
    if (!Array.isArray(a))
      return I("Cannot update the struct tree: nums isn't an array."), !1;
    const r = new ho(s, this.xref);
    for (const h of n.keys()) {
      const {
        pageDict: f
      } = await e.getPage(h);
      if (!f.has("StructParents"))
        continue;
      const u = f.get("StructParents");
      if (!Number.isInteger(u) || !Array.isArray(r.get(u)))
        return I(`Cannot save the struct tree: page ${h} has a wrong id.`), !1;
    }
    let o = !0;
    for (const [h, f] of n) {
      const {
        pageDict: u
      } = await e.getPage(h);
      J(c = Cs, Xn, uu).call(c, {
        elements: f,
        xref: this.xref,
        pageDict: u,
        numberTree: r
      });
      for (const d of f)
        (l = d.accessibilityData) != null && l.type && (d.accessibilityData.structParent >= 0 || (d.parentTreeId = i++), o = !1);
    }
    if (o) {
      for (const h of n.values())
        for (const f of h)
          delete f.parentTreeId, delete f.structTreeParent;
      return !1;
    }
    return !0;
  }
  async updateStructureTree({
    newAnnotationsByPage: e,
    pdfManager: n,
    changes: i
  }) {
    var d;
    const {
      ref: s,
      xref: a
    } = this, r = this.dict.clone(), o = new kn();
    o.put(s, r);
    let c = r.getRaw("ParentTree"), l;
    c instanceof he ? l = a.fetch(c) : (l = c, c = a.getNewTemporaryRef(), r.set("ParentTree", c)), l = l.clone(), o.put(c, l);
    let h = l.getRaw("Nums"), f = null;
    h instanceof he && (f = h, h = a.fetch(f)), h = h.slice(), f || l.set("Nums", h);
    const u = await J(d = Cs, Xn, xl).call(d, {
      newAnnotationsByPage: e,
      structTreeRootRef: s,
      structTreeRoot: this,
      kids: null,
      nums: h,
      xref: a,
      pdfManager: n,
      changes: i,
      cache: o
    });
    if (u !== -1) {
      r.set("ParentTreeNextKey", u), f && o.put(f, h);
      for (const [x, g] of o.items())
        i.put(x, {
          data: g
        });
    }
  }
};
Do = new WeakSet(), fu = function(e, n, i) {
  if (!(e instanceof he) || n < 0)
    return;
  this.structParentIds || (this.structParentIds = new kn());
  let s = this.structParentIds.get(e);
  s || (s = [], this.structParentIds.put(e, s)), s.push([n, i]);
}, Xn = new WeakSet(), xl = async function({
  newAnnotationsByPage: e,
  structTreeRootRef: n,
  structTreeRoot: i,
  kids: s,
  nums: a,
  xref: r,
  pdfManager: o,
  changes: c,
  cache: l
}) {
  var d, x;
  const h = O.get("OBJR");
  let f = -1, u;
  for (const [g, m] of e) {
    const p = await o.getPage(g), {
      ref: b
    } = p, w = b instanceof he;
    for (const {
      accessibilityData: y,
      ref: k,
      parentTreeId: S,
      structTreeParent: C
    } of m) {
      if (!(y != null && y.type))
        continue;
      const {
        structParent: T
      } = y;
      if (i && Number.isInteger(T) && T >= 0) {
        let M = (u || (u = /* @__PURE__ */ new Map())).get(g);
        M === void 0 && (M = new xu(i, p.pageDict).collectObjects(b), u.set(g, M));
        const _ = M == null ? void 0 : M.get(T);
        if (_) {
          const K = r.fetch(_).clone();
          J(d = Cs, Xn, gl).call(d, K, y), c.put(_, {
            data: K
          });
          continue;
        }
      }
      f = Math.max(f, S);
      const F = r.getNewTemporaryRef(), R = new E(r);
      J(x = Cs, Xn, gl).call(x, R, y), await J(this, Xn, du).call(this, {
        structTreeParent: C,
        tagDict: R,
        newTagRef: F,
        structTreeRootRef: n,
        fallbackKids: s,
        xref: r,
        cache: l
      });
      const D = new E(r);
      R.set("K", D), D.set("Type", h), w && D.set("Pg", b), D.set("Obj", k), l.put(F, R), a.push(S, F);
    }
  }
  return f + 1;
}, gl = function(e, {
  type: n,
  title: i,
  lang: s,
  alt: a,
  expanded: r,
  actualText: o
}) {
  e.set("S", O.get(n)), i && e.set("T", $n(i)), s && e.set("Lang", $n(s)), a && e.set("Alt", $n(a)), r && e.set("E", $n(r)), o && e.set("ActualText", $n(o));
}, uu = function({
  elements: e,
  xref: n,
  pageDict: i,
  numberTree: s
}) {
  const a = /* @__PURE__ */ new Map();
  for (const l of e)
    if (l.structTreeParentId) {
      const h = parseInt(l.structTreeParentId.split("_mc")[1], 10);
      let f = a.get(h);
      f || (f = [], a.set(h, f)), f.push(l);
    }
  const r = i.get("StructParents");
  if (!Number.isInteger(r))
    return;
  const o = s.get(r), c = (l, h, f) => {
    const u = a.get(l);
    if (u) {
      const d = h.getRaw("P"), x = n.fetchIfRef(d);
      if (d instanceof he && x instanceof E) {
        const g = {
          ref: f,
          dict: h
        };
        for (const m of u)
          m.structTreeParent = g;
      }
      return !0;
    }
    return !1;
  };
  for (const l of o) {
    if (!(l instanceof he))
      continue;
    const h = n.fetch(l), f = h.get("K");
    if (Number.isInteger(f)) {
      c(f, h, l);
      continue;
    }
    if (Array.isArray(f))
      for (let u of f) {
        if (u = n.fetchIfRef(u), Number.isInteger(u) && c(u, h, l))
          break;
        if (!(u instanceof E))
          continue;
        if (!Tt(u.get("Type"), "MCR"))
          break;
        const d = u.get("MCID");
        if (Number.isInteger(d) && c(d, h, l))
          break;
      }
  }
}, du = async function({
  structTreeParent: e,
  tagDict: n,
  newTagRef: i,
  structTreeRootRef: s,
  fallbackKids: a,
  xref: r,
  cache: o
}) {
  let c = null, l;
  e ? ({
    ref: c
  } = e, l = e.dict.getRaw("P") || s) : l = s, n.set("P", l);
  const h = r.fetchIfRef(l);
  if (!h) {
    a.push(i);
    return;
  }
  let f = o.get(l);
  f || (f = h.clone(), o.put(l, f));
  const u = f.getRaw("K");
  let d = u instanceof he ? o.get(u) : null;
  if (!d) {
    d = r.fetchIfRef(u), d = Array.isArray(d) ? d.slice() : [u];
    const g = r.getNewTemporaryRef();
    f.set("K", g), o.put(g, d);
  }
  const x = d.indexOf(c);
  d.splice(x >= 0 ? x + 1 : d.length, 0, i);
}, Ee(Cs, Xn);
let R0 = Cs;
class r3 {
  constructor(e, n) {
    this.tree = e, this.xref = e.xref, this.dict = n, this.kids = [], this.parseKids();
  }
  get role() {
    const e = this.dict.get("S"), n = e instanceof O ? e.name : "", {
      root: i
    } = this.tree;
    return i.roleMap.get(n) ?? n;
  }
  parseKids() {
    let e = null;
    const n = this.dict.getRaw("Pg");
    n instanceof he && (e = n.toString());
    const i = this.dict.get("K");
    if (Array.isArray(i))
      for (const s of i) {
        const a = this.parseKid(e, this.xref.fetchIfRef(s));
        a && this.kids.push(a);
      }
    else {
      const s = this.parseKid(e, i);
      s && this.kids.push(s);
    }
  }
  parseKid(e, n) {
    if (Number.isInteger(n))
      return this.tree.pageDict.objId !== e ? null : new Dr({
        type: qn.PAGE_CONTENT,
        mcid: n,
        pageObjId: e
      });
    if (!(n instanceof E))
      return null;
    const i = n.getRaw("Pg");
    i instanceof he && (e = i.toString());
    const s = n.get("Type") instanceof O ? n.get("Type").name : null;
    if (s === "MCR") {
      if (this.tree.pageDict.objId !== e)
        return null;
      const a = n.getRaw("Stm");
      return new Dr({
        type: qn.STREAM_CONTENT,
        refObjId: a instanceof he ? a.toString() : null,
        pageObjId: e,
        mcid: n.get("MCID")
      });
    }
    if (s === "OBJR") {
      if (this.tree.pageDict.objId !== e)
        return null;
      const a = n.getRaw("Obj");
      return new Dr({
        type: qn.OBJECT,
        refObjId: a instanceof he ? a.toString() : null,
        pageObjId: e
      });
    }
    return new Dr({
      type: qn.ELEMENT,
      dict: n
    });
  }
}
class Dr {
  constructor({
    type: e,
    dict: n = null,
    mcid: i = null,
    pageObjId: s = null,
    refObjId: a = null
  }) {
    this.type = e, this.dict = n, this.mcid = i, this.pageObjId = s, this.refObjId = a, this.parentNode = null;
  }
}
class xu {
  constructor(e, n) {
    this.root = e, this.xref = (e == null ? void 0 : e.xref) ?? null, this.rootDict = (e == null ? void 0 : e.dict) ?? null, this.pageDict = n, this.nodes = [];
  }
  collectObjects(e) {
    var r;
    if (!this.root || !this.rootDict || !(e instanceof he))
      return null;
    const n = this.rootDict.get("ParentTree");
    if (!n)
      return null;
    const i = (r = this.root.structParentIds) == null ? void 0 : r.get(e);
    if (!i)
      return null;
    const s = /* @__PURE__ */ new Map(), a = new ho(n, this.xref);
    for (const [o] of i) {
      const c = a.getRaw(o);
      c instanceof he && s.set(o, c);
    }
    return s;
  }
  parse(e) {
    var o, c;
    if (!this.root || !this.rootDict || !(e instanceof he))
      return;
    const n = this.rootDict.get("ParentTree");
    if (!n)
      return;
    const i = this.pageDict.get("StructParents"), s = (o = this.root.structParentIds) == null ? void 0 : o.get(e);
    if (!Number.isInteger(i) && !s)
      return;
    const a = /* @__PURE__ */ new Map(), r = new ho(n, this.xref);
    if (Number.isInteger(i)) {
      const l = r.get(i);
      if (Array.isArray(l))
        for (const h of l)
          h instanceof he && this.addNode(this.xref.fetch(h), a);
    }
    if (s)
      for (const [l, h] of s) {
        const f = r.get(l);
        if (f) {
          const u = this.addNode(this.xref.fetchIfRef(f), a);
          ((c = u == null ? void 0 : u.kids) == null ? void 0 : c.length) === 1 && u.kids[0].type === qn.OBJECT && (u.kids[0].type = h);
        }
      }
  }
  addNode(e, n, i = 0) {
    if (i > Nh)
      return I("StructTree MAX_DEPTH reached."), null;
    if (!(e instanceof E))
      return null;
    if (n.has(e))
      return n.get(e);
    const s = new r3(this, e);
    n.set(e, s);
    const a = e.get("P");
    if (!(a instanceof E) || Tt(a.get("Type"), "StructTreeRoot"))
      return this.addTopLevelNode(e, s) || n.delete(e), s;
    const r = this.addNode(a, n, i + 1);
    if (!r)
      return s;
    let o = !1;
    for (const c of r.kids)
      c.type === qn.ELEMENT && c.dict === e && (c.parentNode = s, o = !0);
    return o || n.delete(e), s;
  }
  addTopLevelNode(e, n) {
    const i = this.rootDict.get("K");
    if (!i)
      return !1;
    if (i instanceof E)
      return i.objId !== e.objId ? !1 : (this.nodes[0] = n, !0);
    if (!Array.isArray(i))
      return !0;
    let s = !1;
    for (let a = 0; a < i.length; a++) {
      const r = i[a];
      (r == null ? void 0 : r.toString()) === e.objId && (this.nodes[a] = n, s = !0);
    }
    return s;
  }
  get serializable() {
    function e(i, s, a = 0) {
      if (a > Nh) {
        I("StructTree too deep to be fully serialized.");
        return;
      }
      const r = /* @__PURE__ */ Object.create(null);
      r.role = i.role, r.children = [], s.children.push(r);
      let o = i.dict.get("Alt");
      typeof o != "string" && (o = i.dict.get("ActualText")), typeof o == "string" && (r.alt = Ze(o));
      const c = i.dict.get("A");
      if (c instanceof E) {
        const h = qi(c.getArray("BBox"), null);
        if (h)
          r.bbox = h;
        else {
          const f = c.get("Width"), u = c.get("Height");
          typeof f == "number" && f > 0 && typeof u == "number" && u > 0 && (r.bbox = [0, 0, f, u]);
        }
      }
      const l = i.dict.get("Lang");
      typeof l == "string" && (r.lang = Ze(l));
      for (const h of i.kids) {
        const f = h.type === qn.ELEMENT ? h.parentNode : null;
        if (f) {
          e(f, r, a + 1);
          continue;
        } else h.type === qn.PAGE_CONTENT || h.type === qn.STREAM_CONTENT ? r.children.push({
          type: "content",
          id: `p${h.pageObjId}_mc${h.mcid}`
        }) : h.type === qn.OBJECT ? r.children.push({
          type: "object",
          id: h.refObjId
        }) : h.type === qn.ANNOTATION && r.children.push({
          type: "annotation",
          id: `${zd}${h.refObjId}`
        });
      }
    }
    const n = /* @__PURE__ */ Object.create(null);
    n.children = [], n.role = "Root";
    for (const i of this.nodes)
      i && e(i, n);
    return n;
  }
}
const o3 = (t) => t instanceof he, fo = Wd.bind(null, o3, Tt);
function Sc(t) {
  return t instanceof E && (t = t.get("D")), fo(t) ? t : null;
}
function Oh(t) {
  let e = t.get("D");
  if (e) {
    if (e instanceof O && (e = e.name), typeof e == "string")
      return Ze(e, !0);
    if (fo(e))
      return JSON.stringify(e);
  }
  return null;
}
var Ca, lt, Pt, gu, pu, mu, bu, wu, yu, pl, ku, Su;
const Po = class Po {
  constructor(e, n) {
    Ee(this, Pt);
    Ee(this, Ca, null);
    Ee(this, lt, null);
    Ye(this, "builtInCMapCache", /* @__PURE__ */ new Map());
    Ye(this, "fontCache", new kn());
    Ye(this, "globalColorSpaceCache", new Pg());
    Ye(this, "globalImageCache", new cl());
    Ye(this, "nonBlendModesSet", new Dt());
    Ye(this, "pageDictCache", new kn());
    Ye(this, "pageIndexCache", new kn());
    Ye(this, "pageKidsCountCache", new kn());
    Ye(this, "standardFontDataCache", /* @__PURE__ */ new Map());
    Ye(this, "systemFontCache", /* @__PURE__ */ new Map());
    if (this.pdfManager = e, this.xref = n, ct(this, lt, n.getCatalogObj()), !(ce(this, lt) instanceof E))
      throw new j("Catalog object is not a dictionary.");
    this.toplevelPagesDict;
  }
  cloneDict() {
    return ce(this, lt).clone();
  }
  get version() {
    const e = ce(this, lt).get("Version");
    if (e instanceof O) {
      if (uf.test(e.name))
        return Q(this, "version", e.name);
      I(`Invalid PDF catalog version: ${e.name}`);
    }
    return Q(this, "version", null);
  }
  get lang() {
    const e = ce(this, lt).get("Lang");
    return Q(this, "lang", e && typeof e == "string" ? Ze(e) : null);
  }
  get needsRendering() {
    const e = ce(this, lt).get("NeedsRendering");
    return Q(this, "needsRendering", typeof e == "boolean" ? e : !1);
  }
  get collection() {
    let e = null;
    try {
      const n = ce(this, lt).get("Collection");
      n instanceof E && n.size > 0 && (e = n);
    } catch (n) {
      if (n instanceof mt)
        throw n;
      Ge("Cannot fetch Collection entry; assuming no collection is present.");
    }
    return Q(this, "collection", e);
  }
  get acroForm() {
    let e = null;
    try {
      const n = ce(this, lt).get("AcroForm");
      n instanceof E && n.size > 0 && (e = n);
    } catch (n) {
      if (n instanceof mt)
        throw n;
      Ge("Cannot fetch AcroForm entry; assuming no forms are present.");
    }
    return Q(this, "acroForm", e);
  }
  get acroFormRef() {
    const e = ce(this, lt).getRaw("AcroForm");
    return Q(this, "acroFormRef", e instanceof he ? e : null);
  }
  get metadata() {
    var i;
    const e = ce(this, lt).getRaw("Metadata");
    if (!(e instanceof he))
      return Q(this, "metadata", null);
    let n = null;
    try {
      const s = this.xref.fetch(e, !((i = this.xref.encrypt) != null && i.encryptMetadata));
      if (s instanceof je && s.dict instanceof E) {
        const a = s.dict.get("Type"), r = s.dict.get("Subtype");
        if (Tt(a, "Metadata") && Tt(r, "XML")) {
          const o = k0(s.getString());
          o && (n = new a3(o).serializable);
        }
      }
    } catch (s) {
      if (s instanceof mt)
        throw s;
      Ge(`Skipping invalid Metadata: "${s}".`);
    }
    return Q(this, "metadata", n);
  }
  get markInfo() {
    let e = null;
    try {
      e = J(this, Pt, gu).call(this);
    } catch (n) {
      if (n instanceof mt)
        throw n;
      I("Unable to read mark info.");
    }
    return Q(this, "markInfo", e);
  }
  get structTreeRoot() {
    let e = null;
    try {
      e = J(this, Pt, pu).call(this);
    } catch (n) {
      if (n instanceof mt)
        throw n;
      I("Unable read to structTreeRoot info.");
    }
    return Q(this, "structTreeRoot", e);
  }
  get toplevelPagesDict() {
    const e = ce(this, lt).get("Pages");
    if (!(e instanceof E))
      throw new j("Invalid top-level pages dictionary.");
    return Q(this, "toplevelPagesDict", e);
  }
  get documentOutline() {
    let e = null;
    try {
      e = J(this, Pt, mu).call(this);
    } catch (n) {
      if (n instanceof mt)
        throw n;
      I("Unable to read document outline.");
    }
    return Q(this, "documentOutline", e);
  }
  get permissions() {
    let e = null;
    try {
      e = J(this, Pt, bu).call(this);
    } catch (n) {
      if (n instanceof mt)
        throw n;
      I("Unable to read permissions.");
    }
    return Q(this, "permissions", e);
  }
  get optionalContentConfig() {
    let e = null;
    try {
      const n = ce(this, lt).get("OCProperties");
      if (!n)
        return Q(this, "optionalContentConfig", null);
      const i = n.get("D");
      if (!i)
        return Q(this, "optionalContentConfig", null);
      const s = n.get("OCGs");
      if (!Array.isArray(s))
        return Q(this, "optionalContentConfig", null);
      const a = new kn();
      for (const r of s)
        !(r instanceof he) || a.has(r) || a.put(r, J(this, Pt, wu).call(this, r));
      e = J(this, Pt, yu).call(this, i, a);
    } catch (n) {
      if (n instanceof mt)
        throw n;
      I(`Unable to read optional content config: ${n}`);
    }
    return Q(this, "optionalContentConfig", e);
  }
  setActualNumPages(e = null) {
    ct(this, Ca, e);
  }
  get hasActualNumPages() {
    return ce(this, Ca) !== null;
  }
  get _pagesCount() {
    const e = this.toplevelPagesDict.get("Count");
    if (!Number.isInteger(e))
      throw new j("Page count in top-level pages dictionary is not an integer.");
    return Q(this, "_pagesCount", e);
  }
  get numPages() {
    return ce(this, Ca) ?? this._pagesCount;
  }
  get destinations() {
    var i;
    const e = J(this, Pt, pl).call(this), n = /* @__PURE__ */ Object.create(null);
    for (const s of e)
      if (s instanceof Xs)
        for (const [a, r] of s.getAll()) {
          const o = Sc(r);
          o && (n[Ze(a, !0)] = o);
        }
      else if (s instanceof E)
        for (const [a, r] of s) {
          const o = Sc(r);
          o && (n[i = Ze(a, !0)] || (n[i] = o));
        }
    return Q(this, "destinations", n);
  }
  getDestination(e) {
    if (this.hasOwnProperty("destinations"))
      return this.destinations[e] ?? null;
    const n = J(this, Pt, pl).call(this);
    for (const i of n)
      if (i instanceof Xs || i instanceof E) {
        const s = Sc(i.get(e));
        if (s)
          return s;
      }
    if (n.length) {
      const i = this.destinations[e];
      if (i)
        return i;
    }
    return null;
  }
  get pageLabels() {
    let e = null;
    try {
      e = J(this, Pt, ku).call(this);
    } catch (n) {
      if (n instanceof mt)
        throw n;
      I("Unable to read page labels.");
    }
    return Q(this, "pageLabels", e);
  }
  get pageLayout() {
    const e = ce(this, lt).get("PageLayout");
    let n = "";
    if (e instanceof O)
      switch (e.name) {
        case "SinglePage":
        case "OneColumn":
        case "TwoColumnLeft":
        case "TwoColumnRight":
        case "TwoPageLeft":
        case "TwoPageRight":
          n = e.name;
      }
    return Q(this, "pageLayout", n);
  }
  get pageMode() {
    const e = ce(this, lt).get("PageMode");
    let n = "UseNone";
    if (e instanceof O)
      switch (e.name) {
        case "UseNone":
        case "UseOutlines":
        case "UseThumbs":
        case "FullScreen":
        case "UseOC":
        case "UseAttachments":
          n = e.name;
      }
    return Q(this, "pageMode", n);
  }
  get viewerPreferences() {
    const e = ce(this, lt).get("ViewerPreferences");
    if (!(e instanceof E))
      return Q(this, "viewerPreferences", null);
    let n = null;
    for (const [i, s] of e) {
      let a;
      switch (i) {
        case "HideToolbar":
        case "HideMenubar":
        case "HideWindowUI":
        case "FitWindow":
        case "CenterWindow":
        case "DisplayDocTitle":
        case "PickTrayByPDFSize":
          typeof s == "boolean" && (a = s);
          break;
        case "NonFullScreenPageMode":
          if (s instanceof O)
            switch (s.name) {
              case "UseNone":
              case "UseOutlines":
              case "UseThumbs":
              case "UseOC":
                a = s.name;
                break;
              default:
                a = "UseNone";
            }
          break;
        case "Direction":
          if (s instanceof O)
            switch (s.name) {
              case "L2R":
              case "R2L":
                a = s.name;
                break;
              default:
                a = "L2R";
            }
          break;
        case "ViewArea":
        case "ViewClip":
        case "PrintArea":
        case "PrintClip":
          if (s instanceof O)
            switch (s.name) {
              case "MediaBox":
              case "CropBox":
              case "BleedBox":
              case "TrimBox":
              case "ArtBox":
                a = s.name;
                break;
              default:
                a = "CropBox";
            }
          break;
        case "PrintScaling":
          if (s instanceof O)
            switch (s.name) {
              case "None":
              case "AppDefault":
                a = s.name;
                break;
              default:
                a = "AppDefault";
            }
          break;
        case "Duplex":
          if (s instanceof O)
            switch (s.name) {
              case "Simplex":
              case "DuplexFlipShortEdge":
              case "DuplexFlipLongEdge":
                a = s.name;
                break;
              default:
                a = "None";
            }
          break;
        case "PrintPageRange":
          Array.isArray(s) && s.length % 2 === 0 && s.every((o, c, l) => Number.isInteger(o) && o > 0 && (c === 0 || o >= l[c - 1]) && o <= this.numPages) && (a = s);
          break;
        case "NumCopies":
          Number.isInteger(s) && s > 0 && (a = s);
          break;
        default:
          I(`Ignoring non-standard key in ViewerPreferences: ${i}.`);
          continue;
      }
      if (a === void 0) {
        I(`Bad value, for key "${i}", in ViewerPreferences: ${s}.`);
        continue;
      }
      n ?? (n = /* @__PURE__ */ Object.create(null)), n[i] = a;
    }
    return Q(this, "viewerPreferences", n);
  }
  get openAction() {
    const e = ce(this, lt).get("OpenAction"), n = /* @__PURE__ */ Object.create(null);
    if (e instanceof E) {
      const i = new E(this.xref);
      i.set("A", e);
      const s = {
        url: null,
        dest: null,
        action: null
      };
      Po.parseDestDictionary({
        destDict: i,
        resultObj: s
      }), Array.isArray(s.dest) ? n.dest = s.dest : s.action && (n.action = s.action);
    } else fo(e) && (n.dest = e);
    return Q(this, "openAction", Ul(n) > 0 ? n : null);
  }
  get attachments() {
    const e = ce(this, lt).get("Names");
    let n = null;
    if (e instanceof E && e.has("EmbeddedFiles")) {
      const i = new Xs(e.getRaw("EmbeddedFiles"), this.xref);
      for (const [s, a] of i.getAll()) {
        const r = new dl(a, this.xref);
        n ?? (n = /* @__PURE__ */ Object.create(null)), n[Ze(s, !0)] = r.serializable;
      }
    }
    return Q(this, "attachments", n);
  }
  get xfaImages() {
    const e = ce(this, lt).get("Names");
    let n = null;
    if (e instanceof E && e.has("XFAImages")) {
      const i = new Xs(e.getRaw("XFAImages"), this.xref);
      for (const [s, a] of i.getAll())
        a instanceof je && (n ?? (n = /* @__PURE__ */ new Map()), n.set(Ze(s, !0), a.getBytes()));
    }
    return Q(this, "xfaImages", n);
  }
  get jsActions() {
    const e = J(this, Pt, Su).call(this);
    let n = _o(this.xref, ce(this, lt), Od);
    if (e) {
      n || (n = /* @__PURE__ */ Object.create(null));
      for (const [i, s] of e)
        i in n ? n[i].push(s) : n[i] = [s];
    }
    return Q(this, "jsActions", n);
  }
  async cleanup(e = !1) {
    i1(), this.globalColorSpaceCache.clear(), this.globalImageCache.clear(e), this.pageKidsCountCache.clear(), this.pageIndexCache.clear(), this.pageDictCache.clear(), this.nonBlendModesSet.clear();
    for (const {
      dict: n
    } of await Promise.all(this.fontCache))
      delete n.cacheKey;
    this.fontCache.clear(), this.builtInCMapCache.clear(), this.standardFontDataCache.clear(), this.systemFontCache.clear();
  }
  async getPageDict(e) {
    const n = [this.toplevelPagesDict], i = new Dt(), s = ce(this, lt).getRaw("Pages");
    s instanceof he && i.put(s);
    const a = this.xref, r = this.pageKidsCountCache, o = this.pageIndexCache, c = this.pageDictCache;
    let l = 0;
    for (; n.length; ) {
      const h = n.pop();
      if (h instanceof he) {
        const x = r.get(h);
        if (x >= 0 && l + x <= e) {
          l += x;
          continue;
        }
        if (i.has(h))
          throw new j("Pages tree contains circular reference.");
        i.put(h);
        const g = await (c.get(h) || a.fetchAsync(h));
        if (g instanceof E) {
          let m = g.getRaw("Type");
          if (m instanceof he && (m = await a.fetchAsync(m)), Tt(m, "Page") || !g.has("Kids")) {
            if (r.has(h) || r.put(h, 1), o.has(h) || o.put(h, l), l === e)
              return [g, h];
            l++;
            continue;
          }
        }
        n.push(g);
        continue;
      }
      if (!(h instanceof E))
        throw new j("Page dictionary kid reference points to wrong type of object.");
      const {
        objId: f
      } = h;
      let u = h.getRaw("Count");
      if (u instanceof he && (u = await a.fetchAsync(u)), Number.isInteger(u) && u >= 0 && (f && !r.has(f) && r.put(f, u), l + u <= e)) {
        l += u;
        continue;
      }
      let d = h.getRaw("Kids");
      if (d instanceof he && (d = await a.fetchAsync(d)), !Array.isArray(d)) {
        let x = h.getRaw("Type");
        if (x instanceof he && (x = await a.fetchAsync(x)), Tt(x, "Page") || !h.has("Kids")) {
          if (l === e)
            return [h, null];
          l++;
          continue;
        }
        throw new j("Page dictionary kids object is not an array.");
      }
      for (let x = d.length - 1; x >= 0; x--) {
        const g = d[x];
        n.push(g), h === this.toplevelPagesDict && g instanceof he && !c.has(g) && c.put(g, a.fetchAsync(g));
      }
    }
    throw new Error(`Page index ${e} not found.`);
  }
  async getAllPageDicts(e = !1) {
    const {
      ignoreErrors: n
    } = this.pdfManager.evaluatorOptions, i = [{
      currentNode: this.toplevelPagesDict,
      posInKids: 0
    }], s = new Dt(), a = ce(this, lt).getRaw("Pages");
    a instanceof he && s.put(a);
    const r = /* @__PURE__ */ new Map(), o = this.xref, c = this.pageIndexCache;
    let l = 0;
    function h(u, d) {
      d && !c.has(d) && c.put(d, l), r.set(l++, [u, d]);
    }
    function f(u) {
      if (u instanceof es && !e)
        throw u;
      e && n && l === 0 && (I(`getAllPageDicts - Skipping invalid first page: "${u}".`), u = E.empty), r.set(l++, [u, null]);
    }
    for (; i.length > 0; ) {
      const u = i.at(-1), {
        currentNode: d,
        posInKids: x
      } = u;
      let g = d.getRaw("Kids");
      if (g instanceof he)
        try {
          g = await o.fetchAsync(g);
        } catch (w) {
          f(w);
          break;
        }
      if (!Array.isArray(g)) {
        f(new j("Page dictionary kids object is not an array."));
        break;
      }
      if (x >= g.length) {
        i.pop();
        continue;
      }
      const m = g[x];
      let p;
      if (m instanceof he) {
        if (s.has(m)) {
          f(new j("Pages tree contains circular reference."));
          break;
        }
        s.put(m);
        try {
          p = await o.fetchAsync(m);
        } catch (w) {
          f(w);
          break;
        }
      } else
        p = m;
      if (!(p instanceof E)) {
        f(new j("Page dictionary kid reference points to wrong type of object."));
        break;
      }
      let b = p.getRaw("Type");
      if (b instanceof he)
        try {
          b = await o.fetchAsync(b);
        } catch (w) {
          f(w);
          break;
        }
      Tt(b, "Page") || !p.has("Kids") ? h(p, m instanceof he ? m : null) : i.push({
        currentNode: p,
        posInKids: 0
      }), u.posInKids++;
    }
    return r;
  }
  getPageIndex(e) {
    const n = this.pageIndexCache.get(e);
    if (n !== void 0)
      return Promise.resolve(n);
    const i = this.xref;
    function s(o) {
      let c = 0, l;
      return i.fetchAsync(o).then(function(h) {
        if (io(o, e) && !ff(h, "Page") && !(h instanceof E && !h.has("Type") && h.has("Contents")))
          throw new j("The reference does not point to a /Page dictionary.");
        if (!h)
          return null;
        if (!(h instanceof E))
          throw new j("Node must be a dictionary.");
        return l = h.getRaw("Parent"), h.getAsync("Parent");
      }).then(function(h) {
        if (!h)
          return null;
        if (!(h instanceof E))
          throw new j("Parent must be a dictionary.");
        return h.getAsync("Kids");
      }).then(function(h) {
        if (!h)
          return null;
        const f = [];
        let u = !1;
        for (const d of h) {
          if (!(d instanceof he))
            throw new j("Kid must be a reference.");
          if (io(d, o)) {
            u = !0;
            break;
          }
          f.push(i.fetchAsync(d).then(function(x) {
            if (!(x instanceof E))
              throw new j("Kid node must be a dictionary.");
            x.has("Count") ? c += x.get("Count") : c++;
          }));
        }
        if (!u)
          throw new j("Kid reference not found in parent's kids.");
        return Promise.all(f).then(() => [c, l]);
      });
    }
    let a = 0;
    const r = (o) => s(o).then((c) => {
      if (!c)
        return this.pageIndexCache.put(e, a), a;
      const [l, h] = c;
      return a += l, r(h);
    });
    return r(e);
  }
  get baseUrl() {
    const e = ce(this, lt).get("URI");
    if (e instanceof E) {
      const n = e.get("Base");
      if (typeof n == "string") {
        const i = no(n, null, {
          tryConvertEncoding: !0
        });
        if (i)
          return Q(this, "baseUrl", i.href);
      }
    }
    return Q(this, "baseUrl", this.pdfManager.docBaseUrl);
  }
  static parseDestDictionary({
    destDict: e,
    resultObj: n,
    docBaseUrl: i = null,
    docAttachments: s = null
  }) {
    if (!(e instanceof E)) {
      I("parseDestDictionary: `destDict` must be a dictionary.");
      return;
    }
    let a = e.get("A"), r, o;
    if (a instanceof E || (e.has("Dest") ? a = e.get("Dest") : (a = e.get("AA"), a instanceof E && (a.has("D") ? a = a.get("D") : a.has("U") && (a = a.get("U"))))), a instanceof E) {
      const c = a.get("S");
      if (!(c instanceof O)) {
        I("parseDestDictionary: Invalid type in Action dictionary.");
        return;
      }
      const l = c.name;
      switch (l) {
        case "ResetForm":
          const h = a.get("Flags"), f = ((typeof h == "number" ? h : 0) & 1) === 0, u = [], d = [];
          for (const R of a.get("Fields") || [])
            R instanceof he ? d.push(R.toString()) : typeof R == "string" && u.push(Ze(R));
          n.resetForm = {
            fields: u,
            refs: d,
            include: f
          };
          break;
        case "URI":
          r = a.get("URI"), r instanceof O && (r = "/" + r.name);
          break;
        case "GoTo":
          o = a.get("D");
          break;
        case "Launch":
        case "GoToR":
          const x = a.get("F");
          if (x instanceof E) {
            const R = new dl(x, null, !0), {
              rawFilename: D
            } = R.serializable;
            r = D;
          } else typeof x == "string" && (r = x);
          const g = Oh(a);
          g && typeof r == "string" && (r = r.split("#", 1)[0] + "#" + g);
          const m = a.get("NewWindow");
          typeof m == "boolean" && (n.newWindow = m);
          break;
        case "GoToE":
          const p = a.get("T");
          let b;
          if (s && p instanceof E) {
            const R = p.get("R"), D = p.get("N");
            Tt(R, "C") && typeof D == "string" && (b = s[Ze(D, !0)]);
          }
          if (b) {
            n.attachment = b;
            const R = Oh(a);
            R && (n.attachmentDest = R);
          } else
            I('parseDestDictionary - unimplemented "GoToE" action.');
          break;
        case "Named":
          const w = a.get("N");
          w instanceof O && (n.action = w.name);
          break;
        case "SetOCGState":
          const y = a.get("State"), k = a.get("PreserveRB");
          if (!Array.isArray(y) || y.length === 0)
            break;
          const S = [];
          for (const R of y)
            if (R instanceof O)
              switch (R.name) {
                case "ON":
                case "OFF":
                case "Toggle":
                  S.push(R.name);
                  break;
              }
            else R instanceof he && S.push(R.toString());
          if (S.length !== y.length)
            break;
          n.setOCGState = {
            state: S,
            preserveRB: typeof k == "boolean" ? k : !0
          };
          break;
        case "JavaScript":
          const C = a.get("JS");
          let T;
          C instanceof je ? T = C.getString() : typeof C == "string" && (T = C);
          const F = T && gf(Ze(T, !0));
          if (F) {
            r = F.url, n.newWindow = F.newWindow;
            break;
          }
        default:
          if (l === "JavaScript" || l === "SubmitForm")
            break;
          I(`parseDestDictionary - unsupported action: "${l}".`);
          break;
      }
    } else e.has("Dest") && (o = e.get("Dest"));
    if (typeof r == "string") {
      const c = no(r, i, {
        addDefaultProtocol: !0,
        tryConvertEncoding: !0
      });
      c && (n.url = c.href), n.unsafeUrl = r;
    }
    o && (o instanceof O && (o = o.name), typeof o == "string" ? n.dest = Ze(o, !0) : fo(o) && (n.dest = o));
  }
};
Ca = new WeakMap(), lt = new WeakMap(), Pt = new WeakSet(), gu = function() {
  const e = ce(this, lt).get("MarkInfo");
  if (!(e instanceof E))
    return null;
  const n = {
    Marked: !1,
    UserProperties: !1,
    Suspects: !1
  };
  for (const i in n) {
    const s = e.get(i);
    typeof s == "boolean" && (n[i] = s);
  }
  return n;
}, pu = function() {
  const e = ce(this, lt).getRaw("StructTreeRoot"), n = this.xref.fetchIfRef(e);
  if (!(n instanceof E))
    return null;
  const i = new R0(this.xref, n, e);
  return i.init(), i;
}, mu = function() {
  let e = ce(this, lt).get("Outlines");
  if (!(e instanceof E) || (e = e.getRaw("First"), !(e instanceof he)))
    return null;
  const n = {
    items: []
  }, i = [{
    obj: e,
    parent: n
  }], s = new Dt();
  s.put(e);
  const a = this.xref, r = new Uint8ClampedArray(3);
  for (; i.length > 0; ) {
    const o = i.shift(), c = a.fetchIfRef(o.obj);
    if (c === null)
      continue;
    c.has("Title") || I("Invalid outline item encountered.");
    const l = {
      url: null,
      dest: null,
      action: null
    };
    Po.parseDestDictionary({
      destDict: c,
      resultObj: l,
      docBaseUrl: this.baseUrl,
      docAttachments: this.attachments
    });
    const h = c.get("Title"), f = c.get("F") || 0, u = c.getArray("C"), d = c.get("Count");
    let x = r;
    xn(u, 3) && (u[0] !== 0 || u[1] !== 0 || u[2] !== 0) && (x = Qe.rgb.getRgb(u, 0));
    const g = {
      action: l.action,
      attachment: l.attachment,
      dest: l.dest,
      url: l.url,
      unsafeUrl: l.unsafeUrl,
      newWindow: l.newWindow,
      setOCGState: l.setOCGState,
      title: typeof h == "string" ? Ze(h) : "",
      color: x,
      count: Number.isInteger(d) ? d : void 0,
      bold: !!(f & 2),
      italic: !!(f & 1),
      items: []
    };
    o.parent.items.push(g), e = c.getRaw("First"), e instanceof he && !s.has(e) && (i.push({
      obj: e,
      parent: g
    }), s.put(e)), e = c.getRaw("Next"), e instanceof he && !s.has(e) && (i.push({
      obj: e,
      parent: o.parent
    }), s.put(e));
  }
  return n.items.length > 0 ? n.items : null;
}, bu = function() {
  const e = this.xref.trailer.get("Encrypt");
  if (!(e instanceof E))
    return null;
  let n = e.get("P");
  if (typeof n != "number")
    return null;
  n += 2 ** 32;
  const i = [];
  for (const s in A1) {
    const a = A1[s];
    n & a && i.push(a);
  }
  return i;
}, wu = function(e) {
  const n = this.xref.fetch(e), i = {
    id: e.toString(),
    name: null,
    intent: null,
    usage: {
      print: null,
      view: null
    },
    rbGroups: []
  }, s = n.get("Name");
  typeof s == "string" && (i.name = Ze(s));
  let a = n.getArray("Intent");
  Array.isArray(a) || (a = [a]), a.every((h) => h instanceof O) && (i.intent = a.map((h) => h.name));
  const r = n.get("Usage");
  if (!(r instanceof E))
    return i;
  const o = i.usage, c = r.get("Print");
  if (c instanceof E) {
    const h = c.get("PrintState");
    if (h instanceof O)
      switch (h.name) {
        case "ON":
        case "OFF":
          o.print = {
            printState: h.name
          };
      }
  }
  const l = r.get("View");
  if (l instanceof E) {
    const h = l.get("ViewState");
    if (h instanceof O)
      switch (h.name) {
        case "ON":
        case "OFF":
          o.view = {
            viewState: h.name
          };
      }
  }
  return i;
}, yu = function(e, n) {
  function i(h) {
    const f = [];
    if (Array.isArray(h))
      for (const u of h)
        u instanceof he && n.has(u) && f.push(u.toString());
    return f;
  }
  function s(h, f = 0) {
    if (!Array.isArray(h))
      return null;
    const u = [];
    for (const x of h) {
      if (x instanceof he && n.has(x)) {
        c.put(x), u.push(x.toString());
        continue;
      }
      const g = a(x, f);
      g && u.push(g);
    }
    if (f > 0)
      return u;
    const d = [];
    for (const [x] of n.items())
      c.has(x) || d.push(x.toString());
    return d.length && u.push({
      name: null,
      order: d
    }), u;
  }
  function a(h, f) {
    if (++f > l)
      return I("parseNestedOrder - reached MAX_NESTED_LEVELS."), null;
    const u = o.fetchIfRef(h);
    if (!Array.isArray(u))
      return null;
    const d = o.fetchIfRef(u[0]);
    if (typeof d != "string")
      return null;
    const x = s(u.slice(1), f);
    return x != null && x.length ? {
      name: Ze(d),
      order: x
    } : null;
  }
  function r(h) {
    if (Array.isArray(h))
      for (const f of h) {
        const u = o.fetchIfRef(f);
        if (!Array.isArray(u) || !u.length)
          continue;
        const d = /* @__PURE__ */ new Set();
        for (const x of u)
          x instanceof he && n.has(x) && !d.has(x.toString()) && (d.add(x.toString()), n.get(x).rbGroups.push(d));
      }
  }
  const o = this.xref, c = new Dt(), l = 10;
  return r(e.get("RBGroups")), {
    name: typeof e.get("Name") == "string" ? Ze(e.get("Name")) : null,
    creator: typeof e.get("Creator") == "string" ? Ze(e.get("Creator")) : null,
    baseState: e.get("BaseState") instanceof O ? e.get("BaseState").name : null,
    on: i(e.get("ON")),
    off: i(e.get("OFF")),
    order: s(e.get("Order")),
    groups: [...n]
  };
}, pl = function() {
  const e = ce(this, lt).get("Names"), n = [];
  return e != null && e.has("Dests") && n.push(new Xs(e.getRaw("Dests"), this.xref)), ce(this, lt).has("Dests") && n.push(ce(this, lt).get("Dests")), n;
}, ku = function() {
  const e = ce(this, lt).getRaw("PageLabels");
  if (!e)
    return null;
  const n = new Array(this.numPages);
  let i = null, s = "";
  const r = new ho(e, this.xref).getAll();
  let o = "", c = 1;
  for (let l = 0, h = this.numPages; l < h; l++) {
    const f = r.get(l);
    if (f !== void 0) {
      if (!(f instanceof E))
        throw new j("PageLabel is not a dictionary.");
      if (f.has("Type") && !Tt(f.get("Type"), "PageLabel"))
        throw new j("Invalid type in PageLabel dictionary.");
      if (f.has("S")) {
        const u = f.get("S");
        if (!(u instanceof O))
          throw new j("Invalid style in PageLabel dictionary.");
        i = u.name;
      } else
        i = null;
      if (f.has("P")) {
        const u = f.get("P");
        if (typeof u != "string")
          throw new j("Invalid prefix in PageLabel dictionary.");
        s = Ze(u);
      } else
        s = "";
      if (f.has("St")) {
        const u = f.get("St");
        if (!(Number.isInteger(u) && u >= 1))
          throw new j("Invalid start in PageLabel dictionary.");
        c = u;
      } else
        c = 1;
    }
    switch (i) {
      case "D":
        o = c;
        break;
      case "R":
      case "r":
        o = Jd(c, i === "r");
        break;
      case "A":
      case "a":
        const u = 26, g = i === "a" ? 97 : 65, m = c - 1;
        o = String.fromCharCode(g + m % u).repeat(Math.floor(m / u) + 1);
        break;
      default:
        if (i)
          throw new j(`Invalid style "${i}" in PageLabel dictionary.`);
        o = "";
    }
    n[l] = s + o, c++;
  }
  return n;
}, Su = function() {
  const e = ce(this, lt).get("Names");
  let n = null;
  function i(a, r) {
    if (!(r instanceof E) || !Tt(r.get("S"), "JavaScript"))
      return;
    let o = r.get("JS");
    if (o instanceof je)
      o = o.getString();
    else if (typeof o != "string")
      return;
    o = Ze(o, !0).replaceAll("\0", ""), o && (n || (n = /* @__PURE__ */ new Map())).set(a, o);
  }
  if (e instanceof E && e.has("JavaScript")) {
    const a = new Xs(e.getRaw("JavaScript"), this.xref);
    for (const [r, o] of a.getAll())
      i(Ze(r, !0), o);
  }
  const s = ce(this, lt).get("OpenAction");
  return s && i("OpenAction", s), n;
};
let M0 = Po;
function c3(t) {
  return t instanceof he || t instanceof E || t instanceof je || Array.isArray(t);
}
function l3(t, e) {
  if (t instanceof E)
    t = t.getRawValues();
  else if (t instanceof je)
    t = t.dict.getRawValues();
  else if (!Array.isArray(t))
    return;
  for (const n of t)
    c3(n) && e.push(n);
}
var Q0, ml;
const y1 = class y1 {
  constructor(e, n, i) {
    Ee(this, Q0);
    Ye(this, "refSet", new Dt());
    this.dict = e, this.keys = n, this.xref = i;
  }
  async load() {
    const {
      keys: e,
      dict: n
    } = this, i = [];
    for (const s of e) {
      const a = n.getRaw(s);
      a !== void 0 && i.push(a);
    }
    await J(this, Q0, ml).call(this, i), this.refSet = null;
  }
  static async load(e, n, i) {
    if (i.stream.isDataLoaded)
      return;
    await new y1(e, n, i).load();
  }
};
Q0 = new WeakSet(), ml = async function(e) {
  const n = [], i = [];
  for (; e.length; ) {
    let s = e.pop();
    if (s instanceof he) {
      if (this.refSet.has(s))
        continue;
      try {
        this.refSet.put(s), s = this.xref.fetch(s);
      } catch (a) {
        if (!(a instanceof mt)) {
          I(`ObjectLoader.#walk - requesting all data: "${a}".`), await this.xref.stream.manager.requestAllChunks();
          return;
        }
        n.push(s), i.push({
          begin: a.begin,
          end: a.end
        });
      }
    }
    if (s instanceof je) {
      const a = s.getBaseStreams();
      if (a) {
        let r = !1;
        for (const o of a)
          o.isDataLoaded || (r = !0, i.push({
            begin: o.start,
            end: o.end
          }));
        r && n.push(s);
      }
    }
    l3(s, e);
  }
  if (i.length) {
    await this.xref.stream.manager.requestRanges(i);
    for (const s of n)
      s instanceof he && this.refSet.remove(s);
    await J(this, Q0, ml).call(this, n);
  }
};
let Ea = y1;
const Go = Symbol(), Rs = Symbol(), St = Symbol(), os = Symbol(), Vn = Symbol(), ia = Symbol(), Zr = Symbol(), ni = Symbol(), mi = Symbol(), $ = Symbol("content"), zn = Symbol("data"), Ra = Symbol(), N = Symbol("extra"), ut = Symbol(), ar = Symbol(), bl = Symbol(), Cu = Symbol(), Ms = Symbol(), $o = Symbol(), D0 = Symbol(), u0 = Symbol(), s1 = Symbol(), tn = Symbol(), d0 = Symbol(), Vt = Symbol(), Ma = Symbol(), Ri = Symbol(), Et = Symbol(), Ne = Symbol(), Ft = Symbol(), ft = Symbol(), P0 = Symbol(), ta = Symbol(), wl = Symbol(), Jr = Symbol(), a1 = Symbol(), Hs = Symbol(), sa = Symbol(), Ki = Symbol(), x0 = Symbol(), Li = Symbol(), Hi = Symbol(), N0 = Symbol(), O0 = Symbol(), h3 = Symbol(), Bt = Symbol("namespaceId"), et = Symbol("nodeName"), Di = Symbol(), wi = Symbol(), yl = Symbol(), _i = Symbol(), Ci = Symbol(), Sn = Symbol(), La = Symbol(), as = Symbol(), Au = Symbol("root"), a0 = Symbol(), Pi = Symbol(), kl = Symbol(), vu = Symbol(), vn = Symbol(), ei = Symbol(), jt = Symbol(), Iu = Symbol(), Te = Symbol(), g0 = Symbol(), Je = Symbol(), rt = Symbol("uid"), oi = Symbol(), Rt = {
  config: {
    id: 0,
    check: (t) => t.startsWith("http://www.xfa.org/schema/xci/")
  },
  connectionSet: {
    id: 1,
    check: (t) => t.startsWith("http://www.xfa.org/schema/xfa-connection-set/")
  },
  datasets: {
    id: 2,
    check: (t) => t.startsWith("http://www.xfa.org/schema/xfa-data/")
  },
  form: {
    id: 3,
    check: (t) => t.startsWith("http://www.xfa.org/schema/xfa-form/")
  },
  localeSet: {
    id: 4,
    check: (t) => t.startsWith("http://www.xfa.org/schema/xfa-locale-set/")
  },
  pdf: {
    id: 5,
    check: (t) => t === "http://ns.adobe.com/xdp/pdf/"
  },
  signature: {
    id: 6,
    check: (t) => t === "http://www.w3.org/2000/09/xmldsig#"
  },
  sourceSet: {
    id: 7,
    check: (t) => t.startsWith("http://www.xfa.org/schema/xfa-source-set/")
  },
  stylesheet: {
    id: 8,
    check: (t) => t === "http://www.w3.org/1999/XSL/Transform"
  },
  template: {
    id: 9,
    check: (t) => t.startsWith("http://www.xfa.org/schema/xfa-template/")
  },
  xdc: {
    id: 10,
    check: (t) => t.startsWith("http://www.xfa.org/schema/xdc/")
  },
  xdp: {
    id: 11,
    check: (t) => t === "http://ns.adobe.com/xdp/"
  },
  xfdf: {
    id: 12,
    check: (t) => t === "http://ns.adobe.com/xfdf/"
  },
  xhtml: {
    id: 13,
    check: (t) => t === "http://www.w3.org/1999/xhtml"
  },
  xmpmeta: {
    id: 14,
    check: (t) => t === "http://ns.adobe.com/xmpmeta/"
  }
}, f3 = {
  pt: (t) => t,
  cm: (t) => t / 2.54 * 72,
  mm: (t) => t / (10 * 2.54) * 72,
  in: (t) => t * 72,
  px: (t) => t
}, u3 = /([+-]?\d+\.?\d*)(.*)/;
function zo(t) {
  return t.startsWith("'") || t.startsWith('"') ? t.slice(1, -1) : t;
}
function De({
  data: t,
  defaultValue: e,
  validate: n
}) {
  if (!t)
    return e;
  t = t.trim();
  const i = parseInt(t, 10);
  return !isNaN(i) && n(i) ? i : e;
}
function uo({
  data: t,
  defaultValue: e,
  validate: n
}) {
  if (!t)
    return e;
  t = t.trim();
  const i = parseFloat(t);
  return !isNaN(i) && n(i) ? i : e;
}
function Wo({
  data: t,
  defaultValue: e,
  validate: n
}) {
  return t ? (t = t.trim(), n(t) ? t : e) : e;
}
function V(t, e) {
  return Wo({
    data: t,
    defaultValue: e[0],
    validate: (n) => e.includes(n)
  });
}
function ge(t, e = "0") {
  if (e || (e = "0"), !t)
    return ge(e);
  const n = t.trim().match(u3);
  if (!n)
    return ge(e);
  const [, i, s] = n, a = parseFloat(i);
  if (isNaN(a))
    return ge(e);
  if (a === 0)
    return 0;
  const r = f3[s];
  return r ? r(a) : a;
}
function Lh(t) {
  if (!t)
    return {
      num: 1,
      den: 1
    };
  const e = t.split(":", 2).map((s) => parseFloat(s.trim())).filter((s) => !isNaN(s));
  if (e.length === 1 && e.push(1), e.length === 0)
    return {
      num: 1,
      den: 1
    };
  const [n, i] = e;
  return {
    num: n,
    den: i
  };
}
function ci(t) {
  return t ? t.trim().split(/\s+/).map((e) => ({
    excluded: e[0] === "-",
    viewname: e.substring(1)
  })) : [];
}
function d3(t, e = [0, 0, 0]) {
  let [n, i, s] = e;
  if (!t)
    return {
      r: n,
      g: i,
      b: s
    };
  const a = t.split(",", 3).map((r) => Wt(parseInt(r.trim(), 10), 0, 255)).map((r) => isNaN(r) ? 0 : r);
  return a.length < 3 ? {
    r: n,
    g: i,
    b: s
  } : ([n, i, s] = a, {
    r: n,
    g: i,
    b: s
  });
}
function x3(t) {
  if (!t)
    return {
      x: -1,
      y: -1,
      width: -1,
      height: -1
    };
  const n = t.split(",", 4).map((o) => ge(o.trim(), "-1"));
  if (n.length < 4 || n[2] < 0 || n[3] < 0)
    return {
      x: -1,
      y: -1,
      width: -1,
      height: -1
    };
  const [i, s, a, r] = n;
  return {
    x: i,
    y: s,
    width: a,
    height: r
  };
}
class Ce {
  static get FAILURE() {
    return Q(this, "FAILURE", new Ce(!1, null, null, null));
  }
  static get EMPTY() {
    return Q(this, "EMPTY", new Ce(!0, null, null, null));
  }
  constructor(e, n, i, s) {
    this.success = e, this.html = n, this.bbox = i, this.breakNode = s;
  }
  isBreak() {
    return !!this.breakNode;
  }
  static breakNode(e) {
    return new Ce(!1, null, null, e);
  }
  static success(e, n = null) {
    return new Ce(!0, e, n, null);
  }
}
class g3 {
  constructor(e) {
    this.fonts = /* @__PURE__ */ new Map(), this.cache = /* @__PURE__ */ new Map(), this.warned = /* @__PURE__ */ new Set(), this.defaultFont = null, this.add(e);
  }
  add(e, n = null) {
    for (const s of e)
      this.addPdfFont(s);
    for (const s of this.fonts.values())
      s.regular || (s.regular = s.italic || s.bold || s.bolditalic);
    if (!n || n.size === 0)
      return;
    const i = this.fonts.get("PdfJS-Fallback-PdfJS-XFA");
    for (const s of n)
      this.fonts.set(s, i);
  }
  addPdfFont(e) {
    var o, c, l;
    const n = e.cssFontInfo, i = n.fontFamily;
    let s = this.fonts.get(i);
    s || (s = /* @__PURE__ */ Object.create(null), this.fonts.set(i, s), this.defaultFont || (this.defaultFont = s));
    let a = "";
    const r = parseFloat(n.fontWeight);
    parseFloat(n.italicAngle) !== 0 ? a = r >= 700 ? "bolditalic" : "italic" : r >= 700 && (a = "bold"), a || ((e.name.includes("Bold") || (o = e.psName) != null && o.includes("Bold")) && (a = "bold"), (e.name.includes("Italic") || e.name.endsWith("It") || (c = e.psName) != null && c.includes("Italic") || (l = e.psName) != null && l.endsWith("It")) && (a += "italic")), a || (a = "regular"), s[a] = e;
  }
  getDefault() {
    return this.defaultFont;
  }
  find(e, n = !0) {
    var o, c;
    let i = this.fonts.get(e) || this.cache.get(e);
    if (i)
      return i;
    const s = /,|-|_| |bolditalic|bold|italic|regular|it/gi;
    let a = e.replaceAll(s, "");
    if (i = this.fonts.get(a), i)
      return this.cache.set(e, i), i;
    a = a.toLowerCase();
    const r = [];
    for (const [l, h] of this.fonts.entries())
      l.replaceAll(s, "").toLowerCase().startsWith(a) && r.push(h);
    if (r.length === 0)
      for (const [, l] of this.fonts.entries())
        (o = l.regular.name) != null && o.replaceAll(s, "").toLowerCase().startsWith(a) && r.push(l);
    if (r.length === 0) {
      a = a.replaceAll(/psmt|mt/gi, "");
      for (const [l, h] of this.fonts.entries())
        l.replaceAll(s, "").toLowerCase().startsWith(a) && r.push(h);
    }
    if (r.length === 0)
      for (const l of this.fonts.values())
        (c = l.regular.name) != null && c.replaceAll(s, "").toLowerCase().startsWith(a) && r.push(l);
    return r.length >= 1 ? (r.length !== 1 && n && I(`XFA - Too many choices to guess the correct font: ${e}`), this.cache.set(e, r[0]), r[0]) : (n && !this.warned.has(e) && (this.warned.add(e), I(`XFA - Cannot find the font: ${e}`)), null);
  }
}
function r1(t, e) {
  return t.posture === "italic" ? t.weight === "bold" ? e.bolditalic : e.italic : t.weight === "bold" ? e.bold : e.regular;
}
function p3(t, e = !1) {
  let n = null;
  if (t) {
    const r = zo(t.typeface), o = t[ft].fontFinder.find(r);
    n = r1(t, o);
  }
  if (!n)
    return {
      lineHeight: 12,
      lineGap: 2,
      lineNoGap: 10
    };
  const i = t.size || 10, s = n.lineHeight ? Math.max(e ? 0 : 1.2, n.lineHeight) : 1.2, a = n.lineGap === void 0 ? 0.2 : n.lineGap;
  return {
    lineHeight: s * i,
    lineGap: a * i,
    lineNoGap: Math.max(1, s - a) * i
  };
}
const m3 = 1.02;
class _h {
  constructor(e, n, i, s) {
    if (this.lineHeight = i, this.paraMargin = n || {
      top: 0,
      bottom: 0,
      left: 0,
      right: 0
    }, !e) {
      [this.pdfFont, this.xfaFont] = this.defaultFont(s);
      return;
    }
    this.xfaFont = {
      typeface: e.typeface,
      posture: e.posture,
      weight: e.weight,
      size: e.size,
      letterSpacing: e.letterSpacing
    };
    const a = s.find(e.typeface);
    if (!a) {
      [this.pdfFont, this.xfaFont] = this.defaultFont(s);
      return;
    }
    this.pdfFont = r1(e, a), this.pdfFont || ([this.pdfFont, this.xfaFont] = this.defaultFont(s));
  }
  defaultFont(e) {
    const n = e.find("Helvetica", !1) || e.find("Myriad Pro", !1) || e.find("Arial", !1) || e.getDefault();
    if (n != null && n.regular) {
      const s = n.regular, r = {
        typeface: s.cssFontInfo.fontFamily,
        posture: "normal",
        weight: "normal",
        size: 10,
        letterSpacing: 0
      };
      return [s, r];
    }
    return [null, {
      typeface: "Courier",
      posture: "normal",
      weight: "normal",
      size: 10,
      letterSpacing: 0
    }];
  }
}
class b3 {
  constructor(e, n, i, s) {
    this.fontFinder = s, this.stack = [new _h(e, n, i, s)];
  }
  pushData(e, n, i) {
    const s = this.stack.at(-1);
    for (const r of ["typeface", "posture", "weight", "size", "letterSpacing"])
      e[r] || (e[r] = s.xfaFont[r]);
    for (const r of ["top", "bottom", "left", "right"])
      isNaN(n[r]) && (n[r] = s.paraMargin[r]);
    const a = new _h(e, n, i || s.lineHeight, this.fontFinder);
    a.pdfFont || (a.pdfFont = s.pdfFont), this.stack.push(a);
  }
  popFont() {
    this.stack.pop();
  }
  topFont() {
    return this.stack.at(-1);
  }
}
class w3 {
  constructor(e, n, i, s) {
    this.glyphs = [], this.fontSelector = new b3(e, n, i, s), this.extraHeight = 0;
  }
  pushData(e, n, i) {
    this.fontSelector.pushData(e, n, i);
  }
  popFont(e) {
    return this.fontSelector.popFont();
  }
  addPara() {
    const e = this.fontSelector.topFont();
    this.extraHeight += e.paraMargin.top + e.paraMargin.bottom;
  }
  addString(e) {
    if (!e)
      return;
    const n = this.fontSelector.topFont(), i = n.xfaFont.size;
    if (n.pdfFont) {
      const s = n.xfaFont.letterSpacing, a = n.pdfFont, r = a.lineHeight || 1.2, o = n.lineHeight || Math.max(1.2, r) * i, c = a.lineGap === void 0 ? 0.2 : a.lineGap, l = r - c, h = Math.max(1, l) * i, f = i / 1e3, u = a.defaultWidth || a.charsToGlyphs(" ")[0].width;
      for (const d of e.split(/[\u2029\n]/)) {
        const x = a.encodeString(d).join(""), g = a.charsToGlyphs(x);
        for (const m of g) {
          const p = m.width || u;
          this.glyphs.push([p * f + s, o, h, m.unicode, !1]);
        }
        this.glyphs.push([0, 0, 0, `
`, !0]);
      }
      this.glyphs.pop();
      return;
    }
    for (const s of e.split(/[\u2029\n]/)) {
      for (const a of s.split(""))
        this.glyphs.push([i, 1.2 * i, i, a, !1]);
      this.glyphs.push([0, 0, 0, `
`, !0]);
    }
    this.glyphs.pop();
  }
  compute(e) {
    let n = -1, i = 0, s = 0, a = 0, r = 0, o = 0, c = !1, l = !0;
    for (let h = 0, f = this.glyphs.length; h < f; h++) {
      const [u, d, x, g, m] = this.glyphs[h], p = g === " ", b = l ? x : d;
      if (m) {
        s = Math.max(s, r), r = 0, a += o, o = b, n = -1, i = 0, l = !1;
        continue;
      }
      if (p) {
        r + u > e ? (s = Math.max(s, r), r = 0, a += o, o = b, n = -1, i = 0, c = !0, l = !1) : (o = Math.max(b, o), i = r, r += u, n = h);
        continue;
      }
      if (r + u > e) {
        a += o, o = b, n !== -1 ? (h = n, s = Math.max(s, i), r = 0, n = -1, i = 0) : (s = Math.max(s, r), r = u), c = !0, l = !1;
        continue;
      }
      r += u, o = Math.max(b, o);
    }
    return s = Math.max(s, r), a += o + this.extraHeight, {
      width: m3 * s,
      height: a,
      isBroken: c
    };
  }
}
const Uh = /^[^.[]+/, y3 = /^[^\]]+/, Mn = {
  dot: 0,
  dotDot: 1,
  dotHash: 2,
  dotBracket: 3,
  dotParen: 4
}, Tu = /* @__PURE__ */ new Map([["$data", (t, e) => t.datasets ? t.datasets.data : t], ["$record", (t, e) => (t.datasets ? t.datasets.data : t)[Vt]()[0]], ["$template", (t, e) => t.template], ["$connectionSet", (t, e) => t.connectionSet], ["$form", (t, e) => t.form], ["$layout", (t, e) => t.layout], ["$host", (t, e) => t.host], ["$dataWindow", (t, e) => t.dataWindow], ["$event", (t, e) => t.event], ["!", (t, e) => t.datasets], ["$xfa", (t, e) => t], ["xfa", (t, e) => t], ["$", (t, e) => e]]), jh = /* @__PURE__ */ new WeakMap();
function k3(t) {
  return t = t.trim(), t === "*" ? 1 / 0 : parseInt(t, 10) || 0;
}
function Fu(t, e, n = !0) {
  let i = t.match(Uh);
  if (!i)
    return null;
  let [s] = i;
  const a = [{
    name: s,
    cacheName: "." + s,
    index: 0,
    js: null,
    formCalc: null,
    operator: Mn.dot
  }];
  let r = s.length;
  for (; r < t.length; ) {
    const o = r;
    if (t.charAt(r++) === "[") {
      if (i = t.slice(r).match(y3), !i)
        return I("XFA - Invalid index in SOM expression"), null;
      a.at(-1).index = k3(i[0]), r += i[0].length + 1;
      continue;
    }
    let l;
    switch (t.charAt(r)) {
      case ".":
        if (!e)
          return null;
        r++, l = Mn.dotDot;
        break;
      case "#":
        r++, l = Mn.dotHash;
        break;
      case "[":
        if (n)
          return I("XFA - SOM expression contains a FormCalc subexpression which is not supported for now."), null;
        l = Mn.dotBracket;
        break;
      case "(":
        if (n)
          return I("XFA - SOM expression contains a JavaScript subexpression which is not supported for now."), null;
        l = Mn.dotParen;
        break;
      default:
        l = Mn.dot;
        break;
    }
    if (i = t.slice(r).match(Uh), !i)
      break;
    [s] = i, r += s.length, a.push({
      name: s,
      cacheName: t.slice(o, r),
      operator: l,
      index: 0,
      js: null,
      formCalc: null
    });
  }
  return a;
}
function Wi(t, e, n, i = !0, s = !0) {
  const a = Fu(n, i);
  if (!a)
    return null;
  const r = Tu.get(a[0].name);
  let o = 0, c;
  r ? (c = !0, t = [r(t, e)], o = 1) : (c = e === null, t = [e || t]);
  for (let l = a.length; o < l; o++) {
    const {
      name: h,
      cacheName: f,
      operator: u,
      index: d
    } = a[o], x = [];
    for (const g of t) {
      if (!g.isXFAObject)
        continue;
      let m, p;
      if (s && (p = jh.get(g), p || (p = /* @__PURE__ */ new Map(), jh.set(g, p)), m = p.get(f)), !m) {
        switch (u) {
          case Mn.dot:
            m = g[D0](h, !1);
            break;
          case Mn.dotDot:
            m = g[D0](h, !0);
            break;
          case Mn.dotHash:
            m = g[$o](h), m = m.isXFAObjectArray ? m.children : [m];
            break;
        }
        s && p.set(f, m);
      }
      m.length > 0 && x.push(m);
    }
    if (x.length === 0 && !c && o === 0) {
      if (e = e[Ne](), !e)
        return null;
      o = -1, t = [e];
      continue;
    }
    t = isFinite(d) ? x.filter((g) => d < g.length).map((g) => g[d]) : x.flat();
  }
  return t.length === 0 ? null : t;
}
function S3(t, e, n) {
  const i = Fu(n);
  if (!i || i.some((r) => r.operator === Mn.dotDot))
    return null;
  const s = Tu.get(i[0].name);
  let a = 0;
  s ? (t = s(t, e), a = 1) : t = e || t;
  for (let r = i.length; a < r; a++) {
    const {
      name: o,
      operator: c,
      index: l
    } = i[a];
    if (!isFinite(l))
      return i[a].index = 0, t.createNodes(i.slice(a));
    let h;
    switch (c) {
      case Mn.dot:
        h = t[D0](o, !1);
        break;
      case Mn.dotDot:
        h = t[D0](o, !0);
        break;
      case Mn.dotHash:
        h = t[$o](o), h = h.isXFAObjectArray ? h.children : [h];
        break;
    }
    if (h.length === 0)
      return t.createNodes(i.slice(a));
    if (l < h.length) {
      const f = h[l];
      if (!f.isXFAObject)
        return I("XFA - Cannot create a node."), null;
      t = f;
    } else
      return i[a].index = l - h.length, t.createNodes(i.slice(a));
  }
  return null;
}
const Pr = Symbol(), ds = Symbol(), Ks = Symbol(), qe = Symbol("_children"), Cc = Symbol(), $i = Symbol(), Ac = Symbol(), qh = Symbol(), vc = Symbol(), Hh = Symbol(), Ic = Symbol(), r0 = Symbol(), Nr = Symbol(), jn = Symbol("parent"), Ja = Symbol(), Qa = Symbol(), Tc = Symbol();
let Sl = 0;
const Bu = Rt.datasets.id;
class U {
  constructor(e, n, i = !1) {
    this[Bt] = e, this[et] = n, this[Ic] = i, this[jn] = null, this[qe] = [], this[rt] = `${n}${Sl++}`, this[ft] = null;
  }
  get isXFAObject() {
    return !0;
  }
  get isXFAObjectArray() {
    return !1;
  }
  createNodes(e) {
    let n = this, i = null;
    for (const {
      name: s,
      index: a
    } of e) {
      for (let r = 0, o = isFinite(a) ? a : 0; r <= o; r++) {
        const c = n[Bt] === Bu ? -1 : n[Bt];
        i = new yi(c, s), n[St](i);
      }
      n = i;
    }
    return i;
  }
  [wi](e) {
    if (!this[Ic] || !this[yl](e))
      return !1;
    const n = e[et], i = this[n];
    if (i instanceof v) {
      if (i.push(e))
        return this[St](e), !0;
    } else
      return i !== null && this[as](i), this[n] = e, this[St](e), !0;
    let s = "";
    return this.id ? s = ` (id: ${this.id})` : this.name && (s = ` (name: ${this.name} ${this.h.value})`), I(`XFA - node "${this[et]}"${s} has already enough "${n}"!`), !1;
  }
  [yl](e) {
    return this.hasOwnProperty(e[et]) && e[Bt] === this[Bt];
  }
  [x0]() {
    return !1;
  }
  [Go]() {
    return !1;
  }
  [a1]() {
    return !1;
  }
  [Hs]() {
    return !1;
  }
  [Sn]() {
    this.para && this[Ft]()[N].paraStack.pop();
  }
  [La]() {
    this[Ft]()[N].paraStack.push(this.para);
  }
  [kl](e) {
    this.id && this[Bt] === Rt.template.id && e.set(this.id, this);
  }
  [Ft]() {
    return this[ft].template;
  }
  [Li]() {
    return !1;
  }
  [Hi]() {
    return !1;
  }
  [St](e) {
    e[jn] = this, this[qe].push(e), !e[ft] && this[ft] && (e[ft] = this[ft]);
  }
  [as](e) {
    const n = this[qe].indexOf(e);
    this[qe].splice(n, 1);
  }
  [P0]() {
    return this.hasOwnProperty("value");
  }
  [vn](e) {
  }
  [_i](e) {
  }
  [ut]() {
  }
  [Vn](e) {
    delete this[Ic], this[Zr] && (e.clean(this[Zr]), delete this[Zr]);
  }
  [wl](e) {
    return this[qe].indexOf(e);
  }
  [Jr](e, n) {
    n[jn] = this, this[qe].splice(e, 0, n), !n[ft] && this[ft] && (n[ft] = this[ft]);
  }
  [N0]() {
    return !this.name;
  }
  [h3]() {
    return "";
  }
  [jt]() {
    return this[qe].length === 0 ? this[$] : this[qe].map((e) => e[jt]()).join("");
  }
  get [Ks]() {
    const e = Object.getPrototypeOf(this);
    if (!e._attributes) {
      const n = e._attributes = /* @__PURE__ */ new Set();
      for (const i of Object.getOwnPropertyNames(this)) {
        if (this[i] === null || this[i] instanceof U || this[i] instanceof v)
          break;
        n.add(i);
      }
    }
    return Q(this, Ks, e._attributes);
  }
  [Ki](e) {
    let n = this;
    for (; n; ) {
      if (n === e)
        return !0;
      n = n[Ne]();
    }
    return !1;
  }
  [Ne]() {
    return this[jn];
  }
  [Et]() {
    return this[Ne]();
  }
  [Vt](e = null) {
    return e ? this[e] : this[qe];
  }
  [Ra]() {
    const e = /* @__PURE__ */ Object.create(null);
    this[$] && (e.$content = this[$]);
    for (const n of Object.getOwnPropertyNames(this)) {
      const i = this[n];
      i !== null && (i instanceof U ? e[n] = i[Ra]() : i instanceof v ? i.isEmpty() || (e[n] = i.dump()) : e[n] = i);
    }
    return e;
  }
  [Je]() {
    return null;
  }
  [Te]() {
    return Ce.EMPTY;
  }
  *[Ma]() {
    for (const e of this[Vt]())
      yield e;
  }
  *[qh](e, n) {
    for (const i of this[Ma]())
      if (!e || n === e.has(i[et])) {
        const s = this[Ms](), a = i[Te](s);
        a.success || (this[N].failingNode = i), yield a;
      }
  }
  [ar]() {
    return null;
  }
  [Rs](e, n) {
    this[N].children.push(e);
  }
  [Ms]() {
  }
  [os]({
    filter: e = null,
    include: n = !0
  }) {
    if (!this[N].generator)
      this[N].generator = this[qh](e, n);
    else {
      const i = this[Ms](), s = this[N].failingNode[Te](i);
      if (!s.success)
        return s;
      s.html && this[Rs](s.html, s.bbox), delete this[N].failingNode;
    }
    for (; ; ) {
      const i = this[N].generator.next();
      if (i.done)
        break;
      const s = i.value;
      if (!s.success)
        return s;
      s.html && this[Rs](s.html, s.bbox);
    }
    return this[N].generator = null, Ce.EMPTY;
  }
  [vu](e) {
    this[Qa] = new Set(Object.keys(e));
  }
  [Hh](e) {
    const n = this[Ks], i = this[Qa];
    return [...e].filter((s) => n.has(s) && !i.has(s));
  }
  [a0](e, n = /* @__PURE__ */ new Set()) {
    for (const i of this[qe])
      i[Ja](e, n);
  }
  [Ja](e, n) {
    const i = this[vc](e, n);
    i ? this[Pr](i, e, n) : this[a0](e, n);
  }
  [vc](e, n) {
    const {
      use: i,
      usehref: s
    } = this;
    if (!i && !s)
      return null;
    let a = null, r = null, o = null, c = i;
    if (s ? (c = s, s.startsWith("#som(") && s.endsWith(")") ? r = s.slice(5, -1) : s.startsWith(".#som(") && s.endsWith(")") ? r = s.slice(6, -1) : s.startsWith("#") ? o = s.slice(1) : s.startsWith(".#") && (o = s.slice(2))) : i.startsWith("#") ? o = i.slice(1) : r = i, this.use = this.usehref = "", o ? a = e.get(o) : (a = Wi(e.get(Au), this, r, !0, !1), a && (a = a[0])), !a)
      return I(`XFA - Invalid prototype reference: ${c}.`), null;
    if (a[et] !== this[et])
      return I(`XFA - Incompatible prototype: ${a[et]} !== ${this[et]}.`), null;
    if (n.has(a))
      return I("XFA - Cycle detected in prototypes use."), null;
    n.add(a);
    const l = a[vc](e, n);
    return l && a[Pr](l, e, n), a[a0](e, n), n.delete(a), a;
  }
  [Pr](e, n, i) {
    if (i.has(e)) {
      I("XFA - Cycle detected in prototypes use.");
      return;
    }
    !this[$] && e[$] && (this[$] = e[$]), new Set(i).add(e);
    for (const a of this[Hh](e[Qa]))
      this[a] = e[a], this[Qa] && this[Qa].add(a);
    for (const a of Object.getOwnPropertyNames(this)) {
      if (this[Ks].has(a))
        continue;
      const r = this[a], o = e[a];
      if (r instanceof v) {
        for (const c of r[qe])
          c[Ja](n, i);
        for (let c = r[qe].length, l = o[qe].length; c < l; c++) {
          const h = e[qe][c][ni]();
          if (r.push(h))
            h[jn] = this, this[qe].push(h), h[Ja](n, i);
          else
            break;
        }
        continue;
      }
      if (r !== null) {
        r[a0](n, i), o && r[Pr](o, n, i);
        continue;
      }
      if (o !== null) {
        const c = o[ni]();
        c[jn] = this, this[a] = c, this[qe].push(c), c[Ja](n, i);
      }
    }
  }
  static [Cc](e) {
    return Array.isArray(e) ? e.map((n) => U[Cc](n)) : typeof e == "object" && e !== null ? Object.assign({}, e) : e;
  }
  [ni]() {
    const e = Object.create(Object.getPrototypeOf(this));
    for (const n of Object.getOwnPropertySymbols(this))
      try {
        e[n] = this[n];
      } catch {
        Q(e, n, this[n]);
      }
    e[rt] = `${e[et]}${Sl++}`, e[qe] = [];
    for (const n of Object.getOwnPropertyNames(this)) {
      if (this[Ks].has(n)) {
        e[n] = U[Cc](this[n]);
        continue;
      }
      const i = this[n];
      e[n] = i instanceof v ? new v(i[r0]) : null;
    }
    for (const n of this[qe]) {
      const i = n[et], s = n[ni]();
      e[qe].push(s), s[jn] = e, e[i] === null ? e[i] = s : e[i][qe].push(s);
    }
    return e;
  }
  [Vt](e = null) {
    return e ? this[qe].filter((n) => n[et] === e) : this[qe];
  }
  [$o](e) {
    return this[e];
  }
  [D0](e, n, i = !0) {
    return Array.from(this[u0](e, n, i));
  }
  *[u0](e, n, i = !0) {
    if (e === "parent") {
      yield this[jn];
      return;
    }
    for (const s of this[qe])
      s[et] === e && (yield s), s.name === e && (yield s), (n || s[N0]()) && (yield* s[u0](e, n, !1));
    i && this[Ks].has(e) && (yield new o1(this, e, this[e]));
  }
}
class v {
  constructor(e = 1 / 0) {
    this[r0] = e, this[qe] = [];
  }
  get isXFAObject() {
    return !1;
  }
  get isXFAObjectArray() {
    return !0;
  }
  push(e) {
    return this[qe].length <= this[r0] ? (this[qe].push(e), !0) : (I(`XFA - node "${e[et]}" accepts no more than ${this[r0]} children`), !1);
  }
  isEmpty() {
    return this[qe].length === 0;
  }
  dump() {
    return this[qe].length === 1 ? this[qe][0][Ra]() : this[qe].map((e) => e[Ra]());
  }
  [ni]() {
    const e = new v(this[r0]);
    return e[qe] = this[qe].map((n) => n[ni]()), e;
  }
  get children() {
    return this[qe];
  }
  clear() {
    this[qe].length = 0;
  }
}
class o1 {
  constructor(e, n, i) {
    this[jn] = e, this[et] = n, this[$] = i, this[mi] = !1, this[rt] = `attribute${Sl++}`;
  }
  [Ne]() {
    return this[jn];
  }
  [sa]() {
    return !0;
  }
  [s1]() {
    return this[$].trim();
  }
  [vn](e) {
    e = e.value || "", this[$] = e.toString();
  }
  [jt]() {
    return this[$];
  }
  [Ki](e) {
    return this[jn] === e || this[jn][Ki](e);
  }
}
class yi extends U {
  constructor(e, n, i = {}) {
    if (super(e, n), this[$] = "", this[$i] = null, n !== "#text") {
      const s = /* @__PURE__ */ new Map();
      this[ds] = s;
      for (const [a, r] of Object.entries(i))
        s.set(a, new o1(this, a, r));
      if (i.hasOwnProperty(Di)) {
        const a = i[Di].xfa.dataNode;
        a !== void 0 && (a === "dataGroup" ? this[$i] = !1 : a === "dataValue" && (this[$i] = !0));
      }
    }
    this[mi] = !1;
  }
  [g0](e) {
    const n = this[et];
    if (n === "#text") {
      e.push(fa(this[$]));
      return;
    }
    const i = Pc(n), s = this[Bt] === Bu ? "xfa:" : "";
    e.push(`<${s}${i}`);
    for (const [a, r] of this[ds].entries()) {
      const o = Pc(a);
      e.push(` ${o}="${fa(r[$])}"`);
    }
    if (this[$i] !== null && (this[$i] ? e.push(' xfa:dataNode="dataValue"') : e.push(' xfa:dataNode="dataGroup"')), !this[$] && this[qe].length === 0) {
      e.push("/>");
      return;
    }
    if (e.push(">"), this[$])
      typeof this[$] == "string" ? e.push(fa(this[$])) : this[$][g0](e);
    else
      for (const a of this[qe])
        a[g0](e);
    e.push(`</${s}${i}>`);
  }
  [wi](e) {
    if (this[$]) {
      const n = new yi(this[Bt], "#text");
      this[St](n), n[$] = this[$], this[$] = "";
    }
    return this[St](e), !0;
  }
  [_i](e) {
    this[$] += e;
  }
  [ut]() {
    if (this[$] && this[qe].length > 0) {
      const e = new yi(this[Bt], "#text");
      this[St](e), e[$] = this[$], delete this[$];
    }
  }
  [Te]() {
    return this[et] === "#text" ? Ce.success({
      name: "#text",
      value: this[$]
    }) : Ce.EMPTY;
  }
  [Vt](e = null) {
    return e ? this[qe].filter((n) => n[et] === e) : this[qe];
  }
  [Cu]() {
    return this[ds];
  }
  [$o](e) {
    const n = this[ds].get(e);
    return n !== void 0 ? n : this[Vt](e);
  }
  *[u0](e, n) {
    const i = this[ds].get(e);
    i && (yield i);
    for (const s of this[qe])
      s[et] === e && (yield s), n && (yield* s[u0](e, n));
  }
  *[bl](e, n) {
    const i = this[ds].get(e);
    i && (!n || !i[mi]) && (yield i);
    for (const s of this[qe])
      yield* s[bl](e, n);
  }
  *[d0](e, n, i) {
    for (const s of this[qe])
      s[et] === e && (!i || !s[mi]) && (yield s), n && (yield* s[d0](e, n, i));
  }
  [sa]() {
    return this[$i] === null ? this[qe].length === 0 || this[qe][0][Bt] === Rt.xhtml.id : this[$i];
  }
  [s1]() {
    return this[$i] === null ? this[qe].length === 0 ? this[$].trim() : this[qe][0][Bt] === Rt.xhtml.id ? this[qe][0][jt]().trim() : null : this[$].trim();
  }
  [vn](e) {
    e = e.value || "", this[$] = e.toString();
  }
  [Ra](e = !1) {
    const n = /* @__PURE__ */ Object.create(null);
    e && (n.$ns = this[Bt]), this[$] && (n.$content = this[$]), n.$name = this[et], n.children = [];
    for (const i of this[qe])
      n.children.push(i[Ra](e));
    n.attributes = /* @__PURE__ */ Object.create(null);
    for (const [i, s] of this[ds])
      n.attributes[i] = s[$];
    return n;
  }
}
class vt extends U {
  constructor(e, n) {
    super(e, n), this[$] = "";
  }
  [_i](e) {
    this[$] += e;
  }
  [ut]() {
  }
}
class ot extends vt {
  constructor(e, n, i) {
    super(e, n), this[Nr] = i;
  }
  [ut]() {
    this[$] = Wo({
      data: this[$],
      defaultValue: this[Nr][0],
      validate: (e) => this[Nr].includes(e)
    });
  }
  [Vn](e) {
    super[Vn](e), delete this[Nr];
  }
}
class $e extends vt {
  [ut]() {
    this[$] = this[$].trim();
  }
}
class li extends vt {
  constructor(e, n, i, s) {
    super(e, n), this[Ac] = i, this[Tc] = s;
  }
  [ut]() {
    this[$] = De({
      data: this[$],
      defaultValue: this[Ac],
      validate: this[Tc]
    });
  }
  [Vn](e) {
    super[Vn](e), delete this[Ac], delete this[Tc];
  }
}
class qt extends li {
  constructor(e, n) {
    super(e, n, 0, (i) => i === 1);
  }
}
class Eu extends li {
  constructor(e, n) {
    super(e, n, 1, (i) => i === 0);
  }
}
function Me(t) {
  return typeof t == "string" ? "0px" : Number.isInteger(t) ? `${t}px` : `${t.toFixed(2)}px`;
}
const Gh = {
  anchorType(t, e) {
    const n = t[Et]();
    if (!(!n || n.layout && n.layout !== "position"))
      switch ("transform" in e || (e.transform = ""), t.anchorType) {
        case "bottomCenter":
          e.transform += "translate(-50%, -100%)";
          break;
        case "bottomLeft":
          e.transform += "translate(0,-100%)";
          break;
        case "bottomRight":
          e.transform += "translate(-100%,-100%)";
          break;
        case "middleCenter":
          e.transform += "translate(-50%,-50%)";
          break;
        case "middleLeft":
          e.transform += "translate(0,-50%)";
          break;
        case "middleRight":
          e.transform += "translate(-100%,-50%)";
          break;
        case "topCenter":
          e.transform += "translate(-50%,0)";
          break;
        case "topRight":
          e.transform += "translate(-100%,0)";
          break;
      }
  },
  dimensions(t, e) {
    var a;
    const n = t[Et]();
    let i = t.w;
    const s = t.h;
    if ((a = n.layout) != null && a.includes("row")) {
      const r = n[N], o = t.colSpan;
      let c;
      o === -1 ? (c = Math.sumPrecise(r.columnWidths.slice(r.currentColumn)), r.currentColumn = 0) : (c = Math.sumPrecise(r.columnWidths.slice(r.currentColumn, r.currentColumn + o)), r.currentColumn = (r.currentColumn + t.colSpan) % r.columnWidths.length), isNaN(c) || (i = t.w = c);
    }
    e.width = i !== "" ? Me(i) : "auto", e.height = s !== "" ? Me(s) : "auto";
  },
  position(t, e) {
    const n = t[Et]();
    n != null && n.layout && n.layout !== "position" || (e.position = "absolute", e.left = Me(t.x), e.top = Me(t.y));
  },
  rotate(t, e) {
    t.rotate && ("transform" in e || (e.transform = ""), e.transform += `rotate(-${t.rotate}deg)`, e.transformOrigin = "top left");
  },
  presence(t, e) {
    switch (t.presence) {
      case "invisible":
        e.visibility = "hidden";
        break;
      case "hidden":
      case "inactive":
        e.display = "none";
        break;
    }
  },
  hAlign(t, e) {
    if (t[et] === "para")
      switch (t.hAlign) {
        case "justifyAll":
          e.textAlign = "justify-all";
          break;
        case "radix":
          e.textAlign = "left";
          break;
        default:
          e.textAlign = t.hAlign;
      }
    else
      switch (t.hAlign) {
        case "left":
          e.alignSelf = "start";
          break;
        case "center":
          e.alignSelf = "center";
          break;
        case "right":
          e.alignSelf = "end";
          break;
      }
  },
  margin(t, e) {
    t.margin && (e.margin = t.margin[Je]().margin);
  }
};
function Ru(t, e) {
  t[Et]().layout === "position" && (t.minW > 0 && (e.minWidth = Me(t.minW)), t.maxW > 0 && (e.maxWidth = Me(t.maxW)), t.minH > 0 && (e.minHeight = Me(t.minH)), t.maxH > 0 && (e.maxHeight = Me(t.maxH)));
}
function $h(t, e, n, i, s, a) {
  const r = new w3(e, n, i, s);
  return typeof t == "string" ? r.addString(t) : t[Ci](r), r.compute(a);
}
function c1(t, e) {
  let n = null, i = null, s = !1;
  if ((!t.w || !t.h) && t.value) {
    let a = 0, r = 0;
    t.margin && (a = t.margin.leftInset + t.margin.rightInset, r = t.margin.topInset + t.margin.bottomInset);
    let o = null, c = null;
    t.para && (c = /* @__PURE__ */ Object.create(null), o = t.para.lineHeight === "" ? null : t.para.lineHeight, c.top = t.para.spaceAbove === "" ? 0 : t.para.spaceAbove, c.bottom = t.para.spaceBelow === "" ? 0 : t.para.spaceBelow, c.left = t.para.marginLeft === "" ? 0 : t.para.marginLeft, c.right = t.para.marginRight === "" ? 0 : t.para.marginRight);
    let l = t.font;
    if (!l) {
      const u = t[Ft]();
      let d = t[Ne]();
      for (; d && d !== u; ) {
        if (d.font) {
          l = d.font;
          break;
        }
        d = d[Ne]();
      }
    }
    const h = (t.w || e.width) - a, f = t[ft].fontFinder;
    if (t.value.exData && t.value.exData[$] && t.value.exData.contentType === "text/html") {
      const u = $h(t.value.exData[$], l, c, o, f, h);
      i = u.width, n = u.height, s = u.isBroken;
    } else {
      const u = t.value[jt]();
      if (u) {
        const d = $h(u, l, c, o, f, h);
        i = d.width, n = d.height, s = d.isBroken;
      }
    }
    i !== null && !t.w && (i += a), n !== null && !t.h && (n += r);
  }
  return {
    w: i,
    h: n,
    isBroken: s
  };
}
function Mu(t, e, n) {
  let i;
  if (t.w !== "" && t.h !== "")
    i = [t.x, t.y, t.w, t.h];
  else {
    if (!n)
      return null;
    let s = t.w;
    if (s === "") {
      if (t.maxW === 0) {
        const r = t[Et]();
        s = r.layout === "position" && r.w !== "" ? 0 : t.minW;
      } else
        s = Math.min(t.maxW, n.width);
      e.attributes.style.width = Me(s);
    }
    let a = t.h;
    if (a === "") {
      if (t.maxH === 0) {
        const r = t[Et]();
        a = r.layout === "position" && r.h !== "" ? 0 : t.minH;
      } else
        a = Math.min(t.maxH, n.height);
      e.attributes.style.height = Me(a);
    }
    i = [t.x, t.y, s, a];
  }
  return i;
}
function Vo(t) {
  var n;
  const e = t[Et]();
  if ((n = e.layout) != null && n.includes("row")) {
    const i = e[N], s = t.colSpan;
    let a;
    s === -1 ? a = Math.sumPrecise(i.columnWidths.slice(i.currentColumn)) : a = Math.sumPrecise(i.columnWidths.slice(i.currentColumn, i.currentColumn + s)), isNaN(a) || (t.w = a);
  }
  e.layout && e.layout !== "position" && (t.x = t.y = 0), t.layout === "table" && t.w === "" && Array.isArray(t.columnWidths) && (t.w = Math.sumPrecise(t.columnWidths));
}
function Du(t) {
  switch (t.layout) {
    case "position":
      return "xfaPosition";
    case "lr-tb":
      return "xfaLrTb";
    case "rl-row":
      return "xfaRlRow";
    case "rl-tb":
      return "xfaRlTb";
    case "row":
      return "xfaRow";
    case "table":
      return "xfaTable";
    case "tb":
      return "xfaTb";
    default:
      return "xfaPosition";
  }
}
function wn(t, ...e) {
  const n = /* @__PURE__ */ Object.create(null);
  for (const i of e) {
    const s = t[i];
    if (s !== null) {
      if (Gh.hasOwnProperty(i)) {
        Gh[i](t, n);
        continue;
      }
      if (s instanceof U) {
        const a = s[Je]();
        a ? Object.assign(n, a) : I(`(DEBUG) - XFA - style for ${i} not implemented yet`);
      }
    }
  }
  return n;
}
function Ds(t, e) {
  const {
    attributes: n
  } = e, {
    style: i
  } = n, s = {
    name: "div",
    attributes: {
      class: ["xfaWrapper"],
      style: /* @__PURE__ */ Object.create(null)
    },
    children: []
  };
  if (n.class.push("xfaWrapped"), t.border) {
    const {
      widths: a,
      insets: r
    } = t.border[N];
    let o, c, l = r[0], h = r[3];
    const f = r[0] + r[2], u = r[1] + r[3];
    switch (t.border.hand) {
      case "even":
        l -= a[0] / 2, h -= a[3] / 2, o = `calc(100% + ${(a[1] + a[3]) / 2 - u}px)`, c = `calc(100% + ${(a[0] + a[2]) / 2 - f}px)`;
        break;
      case "left":
        l -= a[0], h -= a[3], o = `calc(100% + ${a[1] + a[3] - u}px)`, c = `calc(100% + ${a[0] + a[2] - f}px)`;
        break;
      case "right":
        o = u ? `calc(100% - ${u}px)` : "100%", c = f ? `calc(100% - ${f}px)` : "100%";
        break;
    }
    const d = ["xfaBorder"];
    _a(t.border) && d.push("xfaPrintOnly");
    const x = {
      name: "div",
      attributes: {
        class: d,
        style: {
          top: `${l}px`,
          left: `${h}px`,
          width: o,
          height: c
        }
      },
      children: []
    };
    for (const g of ["border", "borderWidth", "borderColor", "borderRadius", "borderStyle"])
      i[g] !== void 0 && (x.attributes.style[g] = i[g], delete i[g]);
    s.children.push(x, e);
  } else
    s.children.push(e);
  for (const a of ["background", "backgroundClip", "top", "left", "width", "height", "minWidth", "minHeight", "maxWidth", "maxHeight", "transform", "transformOrigin", "visibility"])
    i[a] !== void 0 && (s.attributes.style[a] = i[a], delete i[a]);
  return s.attributes.style.position = i.position === "absolute" ? "absolute" : "relative", delete i.position, i.alignSelf && (s.attributes.style.alignSelf = i.alignSelf, delete i.alignSelf), s;
}
function Pu(t) {
  const e = ge(t.textIndent, "0px");
  if (e >= 0)
    return;
  const i = "padding" + ((t.textAlign === "right" ? "right" : "left") === "left" ? "Left" : "Right"), s = ge(t[i], "0px");
  t[i] = `${s - e}px`;
}
function l1(t, e) {
  switch (t.access) {
    case "nonInteractive":
      e.push("xfaNonInteractive");
      break;
    case "readOnly":
      e.push("xfaReadOnly");
      break;
    case "protected":
      e.push("xfaDisabled");
      break;
  }
}
function _a(t) {
  return t.relevant.length > 0 && !t.relevant[0].excluded && t.relevant[0].viewname === "print";
}
function Nu(t) {
  const e = t[Ft]()[N].paraStack;
  return e.length ? e.at(-1) : null;
}
function Ou(t, e, n) {
  var i;
  if ((i = n.attributes.class) != null && i.includes("xfaRich")) {
    e && (t.h === "" && (e.height = "auto"), t.w === "" && (e.width = "auto"));
    const s = Nu(t);
    if (s) {
      const a = n.attributes.style;
      switch (a.display = "flex", a.flexDirection = "column", s.vAlign) {
        case "top":
          a.justifyContent = "start";
          break;
        case "bottom":
          a.justifyContent = "end";
          break;
        case "middle":
          a.justifyContent = "center";
          break;
      }
      const r = s[Je]();
      for (const [o, c] of Object.entries(r))
        o in a || (a[o] = c);
    }
  }
}
function Lu(t, e, n, i) {
  if (!n) {
    delete i.fontFamily;
    return;
  }
  const s = zo(t.typeface);
  i.fontFamily = `"${s}"`;
  const a = n.find(s);
  if (a) {
    const {
      fontFamily: r
    } = a.regular.cssFontInfo;
    r !== s && (i.fontFamily = `"${r}"`);
    const o = Nu(e);
    if (o && o.lineHeight !== "" || i.lineHeight)
      return;
    const c = r1(t, a);
    c && (i.lineHeight = Math.max(1.2, c.lineHeight));
  }
}
function _u(t) {
  const e = no(t, null, {
    addDefaultProtocol: !0,
    tryConvertEncoding: !0
  });
  return e ? e.href : null;
}
function Uu(t, e) {
  return {
    name: "div",
    attributes: {
      class: [t.layout === "lr-tb" ? "xfaLr" : "xfaRl"]
    },
    children: e
  };
}
function ju(t) {
  if (!t[N])
    return null;
  const n = {
    name: "div",
    attributes: t[N].attributes,
    children: t[N].children
  };
  if (t[N].failingNode) {
    const i = t[N].failingNode[ar]();
    i && (t.layout.endsWith("-tb") ? n.children.push(Uu(t, [i])) : n.children.push(i));
  }
  return n.children.length === 0 ? null : n;
}
function qu(t, e, n) {
  const i = t[N], s = i.availableSpace, [a, r, o, c] = n;
  switch (t.layout) {
    case "position": {
      i.width = Math.max(i.width, a + o), i.height = Math.max(i.height, r + c), i.children.push(e);
      break;
    }
    case "lr-tb":
    case "rl-tb":
      (!i.line || i.attempt === 1) && (i.line = Uu(t, []), i.children.push(i.line), i.numberInLine = 0), i.numberInLine += 1, i.line.children.push(e), i.attempt === 0 ? (i.currentWidth += o, i.height = Math.max(i.height, i.prevHeight + c)) : (i.currentWidth = o, i.prevHeight = i.height, i.height += c, i.attempt = 0), i.width = Math.max(i.width, i.currentWidth);
      break;
    case "rl-row":
    case "row": {
      i.children.push(e), i.width += o, i.height = Math.max(i.height, c);
      const l = Me(i.height);
      for (const h of i.children)
        h.attributes.style.height = l;
      break;
    }
    case "table": {
      i.width = Wt(o, i.width, s.width), i.height += c, i.children.push(e);
      break;
    }
    case "tb": {
      i.width = Wt(o, i.width, s.width), i.height += c, i.children.push(e);
      break;
    }
  }
}
function Hu(t) {
  const e = t[N].availableSpace, n = t.margin ? t.margin.topInset + t.margin.bottomInset : 0, i = t.margin ? t.margin.leftInset + t.margin.rightInset : 0;
  switch (t.layout) {
    case "lr-tb":
    case "rl-tb":
      return t[N].attempt === 0 ? {
        width: e.width - i - t[N].currentWidth,
        height: e.height - n - t[N].prevHeight
      } : {
        width: e.width - i,
        height: e.height - n - t[N].height
      };
    case "rl-row":
    case "row":
      return {
        width: Math.sumPrecise(t[N].columnWidths.slice(t[N].currentColumn)),
        height: e.height - i
      };
    case "table":
    case "tb":
      return {
        width: e.width - i,
        height: e.height - n - t[N].height
      };
    case "position":
    default:
      return e;
  }
}
function C3(t) {
  let e = t.w === "" ? NaN : t.w, n = t.h === "" ? NaN : t.h, [i, s] = [0, 0];
  switch (t.anchorType || "") {
    case "bottomCenter":
      [i, s] = [e / 2, n];
      break;
    case "bottomLeft":
      [i, s] = [0, n];
      break;
    case "bottomRight":
      [i, s] = [e, n];
      break;
    case "middleCenter":
      [i, s] = [e / 2, n / 2];
      break;
    case "middleLeft":
      [i, s] = [0, n / 2];
      break;
    case "middleRight":
      [i, s] = [e, n / 2];
      break;
    case "topCenter":
      [i, s] = [e / 2, 0];
      break;
    case "topRight":
      [i, s] = [e, 0];
      break;
  }
  let a, r;
  switch (t.rotate || 0) {
    case 0:
      [a, r] = [-i, -s];
      break;
    case 90:
      [a, r] = [-s, i], [e, n] = [n, -e];
      break;
    case 180:
      [a, r] = [i, s], [e, n] = [-e, -n];
      break;
    case 270:
      [a, r] = [s, -i], [e, n] = [-n, e];
      break;
  }
  return [t.x + a + Math.min(0, e), t.y + r + Math.min(0, n), Math.abs(e), Math.abs(n)];
}
function Xo(t, e) {
  var c;
  if (t[Ft]()[N].firstUnsplittable === null || t.w === 0 || t.h === 0)
    return !0;
  const n = 2, i = t[Et](), s = ((c = i[N]) == null ? void 0 : c.attempt) || 0, [, a, r, o] = C3(t);
  switch (i.layout) {
    case "lr-tb":
    case "rl-tb":
      return s === 0 ? t[Ft]()[N].noLayoutFailure ? t.w !== "" ? Math.round(r - e.width) <= n : e.width > n : t.h !== "" && Math.round(o - e.height) > n ? !1 : t.w !== "" ? Math.round(r - e.width) <= n ? !0 : i[N].numberInLine === 0 ? e.height > n : !1 : e.width > n : t[Ft]()[N].noLayoutFailure ? !0 : t.h !== "" && Math.round(o - e.height) > n ? !1 : t.w === "" || Math.round(r - e.width) <= n ? e.height > n : i[Hi]() ? !1 : e.height > n;
    case "table":
    case "tb":
      return t[Ft]()[N].noLayoutFailure ? !0 : t.h !== "" && !t[Li]() ? Math.round(o - e.height) <= n : t.w === "" || Math.round(r - e.width) <= n ? e.height > n : i[Hi]() ? !1 : e.height > n;
    case "position":
      if (t[Ft]()[N].noLayoutFailure || t.h === "" || Math.round(o + a - e.height) <= n)
        return !0;
      const l = t[Ft]()[N].currentContentArea;
      return o + a > l.h;
    case "rl-row":
    case "row":
      return t[Ft]()[N].noLayoutFailure ? !0 : t.h !== "" ? Math.round(o - e.height) <= n : !0;
    default:
      return !0;
  }
}
const ne = Rt.template.id, Ps = "http://www.w3.org/2000/svg", xo = 2, A3 = 3, v3 = 5e3, I3 = /^H(\d+)$/, T3 = /* @__PURE__ */ new Set(["image/gif", "image/jpeg", "image/jpg", "image/pjpeg", "image/png", "image/apng", "image/x-png", "image/bmp", "image/x-ms-bmp", "image/tiff", "image/tif", "application/octet-stream"]), F3 = [[[66, 77], "image/bmp"], [[255, 216, 255], "image/jpeg"], [[73, 73, 42, 0], "image/tiff"], [[77, 77, 0, 42], "image/tiff"], [[71, 73, 70, 56, 57, 97], "image/gif"], [[137, 80, 78, 71, 13, 10, 26, 10], "image/png"]];
function zh(t) {
  if (!t || !t.border)
    return {
      w: 0,
      h: 0
    };
  const e = t.border[tn]();
  return e ? {
    w: e.widths[0] + e.widths[2] + e.insets[0] + e.insets[2],
    h: e.widths[1] + e.widths[3] + e.insets[1] + e.insets[3]
  } : {
    w: 0,
    h: 0
  };
}
function h1(t) {
  return t.margin && (t.margin.topInset || t.margin.rightInset || t.margin.bottomInset || t.margin.leftInset);
}
function f1(t, e) {
  if (!t.value) {
    const n = new b1({});
    t[St](n), t.value = n;
  }
  t.value[vn](e);
}
function* u1(t) {
  for (const e of t[Vt]()) {
    if (e instanceof g1) {
      yield* e[Ma]();
      continue;
    }
    yield e;
  }
}
function rr(t) {
  var e;
  return ((e = t.validate) == null ? void 0 : e.nullTest) === "error";
}
function Ko(t) {
  for (; t; ) {
    if (!t.traversal) {
      t[ei] = t[Ne]()[ei];
      return;
    }
    if (t[ei])
      return;
    let e = null;
    for (const s of t.traversal[Vt]())
      if (s.operation === "next") {
        e = s;
        break;
      }
    if (!e || !e.ref) {
      t[ei] = t[Ne]()[ei];
      return;
    }
    const n = t[Ft]();
    t[ei] = ++n[ei];
    const i = n[Pi](e.ref, t);
    if (!i)
      return;
    t = i[0];
  }
}
function Yo(t, e) {
  var i;
  const n = t.assist;
  if (n) {
    const s = n[Te]();
    s && (e.title = s);
    const r = n.role.match(I3);
    if (r) {
      const o = "heading", c = r[1];
      e.role = o, e["aria-level"] = c;
    }
  }
  if (t.layout === "table")
    e.role = "table";
  else if (t.layout === "row")
    e.role = "row";
  else {
    const s = t[Ne]();
    s.layout === "row" && (e.role = ((i = s.assist) == null ? void 0 : i.role) === "TH" ? "columnheader" : "cell");
  }
}
function _s(t) {
  if (!t.assist)
    return null;
  const e = t.assist;
  return e.speak && e.speak[$] !== "" ? e.speak[$] : e.toolTip ? e.toolTip[$] : null;
}
function cs(t) {
  return Ce.success({
    name: "div",
    attributes: {
      class: ["xfaRich"],
      style: /* @__PURE__ */ Object.create(null)
    },
    children: [{
      name: "span",
      attributes: {
        style: /* @__PURE__ */ Object.create(null)
      },
      value: t
    }]
  });
}
function Zo(t) {
  const e = t[Ft]();
  e[N].firstUnsplittable === null && (e[N].firstUnsplittable = t, e[N].noLayoutFailure = !0);
}
function Jo(t) {
  const e = t[Ft]();
  e[N].firstUnsplittable === t && (e[N].noLayoutFailure = !1);
}
function Wh(t) {
  if (t[N] || (t[N] = /* @__PURE__ */ Object.create(null), t.targetType === "auto"))
    return !1;
  const e = t[Ft]();
  let n = null;
  if (t.target) {
    if (n = e[Pi](t.target, t[Ne]()), !n)
      return !1;
    n = n[0];
  }
  const {
    currentPageArea: i,
    currentContentArea: s
  } = e[N];
  if (t.targetType === "pageArea")
    return n instanceof Da || (n = null), t.startNew ? (t[N].target = n || i, !0) : n && n !== i ? (t[N].target = n, !0) : !1;
  n instanceof d1 || (n = null);
  const a = n && n[Ne]();
  let r, o = a;
  if (t.startNew)
    if (n) {
      const c = a.contentArea.children, l = c.indexOf(s), h = c.indexOf(n);
      l !== -1 && l < h && (o = null), r = h - 1;
    } else
      r = i.contentArea.children.indexOf(s);
  else if (n && n !== s)
    r = a.contentArea.children.indexOf(n) - 1, o = a === i ? null : a;
  else
    return !1;
  return t[N].target = o, t[N].index = r, !0;
}
function Vh(t, e, n) {
  const i = t[Ft](), s = i[N].noLayoutFailure, a = e[Et];
  e[Et] = () => t, i[N].noLayoutFailure = !0;
  const r = e[Te](n);
  t[Rs](r.html, r.bbox), i[N].noLayoutFailure = s, e[Et] = a;
}
class B3 extends $e {
  constructor(e) {
    super(ne, "appearanceFilter"), this.id = e.id || "", this.type = V(e.type, ["optional", "required"]), this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class Gu extends U {
  constructor(e) {
    super(ne, "arc", !0), this.circular = De({
      data: e.circular,
      defaultValue: 0,
      validate: (n) => n === 1
    }), this.hand = V(e.hand, ["even", "left", "right"]), this.id = e.id || "", this.startAngle = uo({
      data: e.startAngle,
      defaultValue: 0,
      validate: (n) => !0
    }), this.sweepAngle = uo({
      data: e.sweepAngle,
      defaultValue: 360,
      validate: (n) => !0
    }), this.use = e.use || "", this.usehref = e.usehref || "", this.edge = null, this.fill = null;
  }
  [Te]() {
    var c;
    const e = this.edge || new or({}), n = e[Je](), i = /* @__PURE__ */ Object.create(null);
    ((c = this.fill) == null ? void 0 : c.presence) === "visible" ? Object.assign(i, this.fill[Je]()) : i.fill = "transparent", i.strokeWidth = Me(e.presence === "visible" ? e.thickness : 0), i.stroke = n.color;
    let s;
    const a = {
      xmlns: Ps,
      style: {
        width: "100%",
        height: "100%",
        overflow: "visible"
      }
    };
    if (this.sweepAngle === 360)
      s = {
        name: "ellipse",
        attributes: {
          xmlns: Ps,
          cx: "50%",
          cy: "50%",
          rx: "50%",
          ry: "50%",
          style: i
        }
      };
    else {
      const l = this.startAngle * Math.PI / 180, h = this.sweepAngle * Math.PI / 180, f = this.sweepAngle > 180 ? 1 : 0, [u, d, x, g] = [50 * (1 + Math.cos(l)), 50 * (1 - Math.sin(l)), 50 * (1 + Math.cos(l + h)), 50 * (1 - Math.sin(l + h))];
      s = {
        name: "path",
        attributes: {
          xmlns: Ps,
          d: `M ${u} ${d} A 50 50 0 ${f} 0 ${x} ${g}`,
          vectorEffect: "non-scaling-stroke",
          style: i
        }
      }, Object.assign(a, {
        viewBox: "0 0 100 100",
        preserveAspectRatio: "none"
      });
    }
    const r = {
      name: "svg",
      children: [s],
      attributes: a
    }, o = this[Ne]()[Ne]();
    return h1(o) ? Ce.success({
      name: "div",
      attributes: {
        style: {
          display: "inline",
          width: "100%",
          height: "100%"
        }
      },
      children: [r]
    }) : (r.attributes.style.position = "absolute", Ce.success(r));
  }
}
class E3 extends U {
  constructor(e) {
    super(ne, "area", !0), this.colSpan = De({
      data: e.colSpan,
      defaultValue: 1,
      validate: (n) => n >= 1 || n === -1
    }), this.id = e.id || "", this.name = e.name || "", this.relevant = ci(e.relevant), this.use = e.use || "", this.usehref = e.usehref || "", this.x = ge(e.x, "0pt"), this.y = ge(e.y, "0pt"), this.desc = null, this.extras = null, this.area = new v(), this.draw = new v(), this.exObject = new v(), this.exclGroup = new v(), this.field = new v(), this.subform = new v(), this.subformSet = new v();
  }
  *[Ma]() {
    yield* u1(this);
  }
  [N0]() {
    return !0;
  }
  [Hs]() {
    return !0;
  }
  [Rs](e, n) {
    const [i, s, a, r] = n;
    this[N].width = Math.max(this[N].width, i + a), this[N].height = Math.max(this[N].height, s + r), this[N].children.push(e);
  }
  [Ms]() {
    return this[N].availableSpace;
  }
  [Te](e) {
    const n = wn(this, "position"), i = {
      style: n,
      id: this[rt],
      class: ["xfaArea"]
    };
    _a(this) && i.class.push("xfaPrintOnly"), this.name && (i.xfaName = this.name);
    const s = [];
    this[N] = {
      children: s,
      width: 0,
      height: 0,
      availableSpace: e
    };
    const a = this[os]({
      filter: /* @__PURE__ */ new Set(["area", "draw", "field", "exclGroup", "subform", "subformSet"]),
      include: !0
    });
    if (!a.success)
      return a.isBreak() ? a : (delete this[N], Ce.FAILURE);
    n.width = Me(this[N].width), n.height = Me(this[N].height);
    const r = {
      name: "div",
      attributes: i,
      children: s
    }, o = [this.x, this.y, this[N].width, this[N].height];
    return delete this[N], Ce.success(r, o);
  }
}
class R3 extends U {
  constructor(e) {
    super(ne, "assist", !0), this.id = e.id || "", this.role = e.role || "", this.use = e.use || "", this.usehref = e.usehref || "", this.speak = null, this.toolTip = null;
  }
  [Te]() {
    var e;
    return ((e = this.toolTip) == null ? void 0 : e[$]) || null;
  }
}
class M3 extends U {
  constructor(e) {
    super(ne, "barcode", !0), this.charEncoding = Wo({
      data: e.charEncoding ? e.charEncoding.toLowerCase() : "",
      defaultValue: "",
      validate: (n) => ["utf-8", "big-five", "fontspecific", "gbk", "gb-18030", "gb-2312", "ksc-5601", "none", "shift-jis", "ucs-2", "utf-16"].includes(n) || n.match(/iso-8859-\d{2}/)
    }), this.checksum = V(e.checksum, ["none", "1mod10", "1mod10_1mod11", "2mod10", "auto"]), this.dataColumnCount = De({
      data: e.dataColumnCount,
      defaultValue: -1,
      validate: (n) => n >= 0
    }), this.dataLength = De({
      data: e.dataLength,
      defaultValue: -1,
      validate: (n) => n >= 0
    }), this.dataPrep = V(e.dataPrep, ["none", "flateCompress"]), this.dataRowCount = De({
      data: e.dataRowCount,
      defaultValue: -1,
      validate: (n) => n >= 0
    }), this.endChar = e.endChar || "", this.errorCorrectionLevel = De({
      data: e.errorCorrectionLevel,
      defaultValue: -1,
      validate: (n) => n >= 0 && n <= 8
    }), this.id = e.id || "", this.moduleHeight = ge(e.moduleHeight, "5mm"), this.moduleWidth = ge(e.moduleWidth, "0.25mm"), this.printCheckDigit = De({
      data: e.printCheckDigit,
      defaultValue: 0,
      validate: (n) => n === 1
    }), this.rowColumnRatio = Lh(e.rowColumnRatio), this.startChar = e.startChar || "", this.textLocation = V(e.textLocation, ["below", "above", "aboveEmbedded", "belowEmbedded", "none"]), this.truncate = De({
      data: e.truncate,
      defaultValue: 0,
      validate: (n) => n === 1
    }), this.type = V(e.type ? e.type.toLowerCase() : "", ["aztec", "codabar", "code2of5industrial", "code2of5interleaved", "code2of5matrix", "code2of5standard", "code3of9", "code3of9extended", "code11", "code49", "code93", "code128", "code128a", "code128b", "code128c", "code128sscc", "datamatrix", "ean8", "ean8add2", "ean8add5", "ean13", "ean13add2", "ean13add5", "ean13pwcd", "fim", "logmars", "maxicode", "msi", "pdf417", "pdf417macro", "plessey", "postauscust2", "postauscust3", "postausreplypaid", "postausstandard", "postukrm4scc", "postusdpbc", "postusimb", "postusstandard", "postus5zip", "qrcode", "rfid", "rss14", "rss14expanded", "rss14limited", "rss14stacked", "rss14stackedomni", "rss14truncated", "telepen", "ucc128", "ucc128random", "ucc128sscc", "upca", "upcaadd2", "upcaadd5", "upcapwcd", "upce", "upceadd2", "upceadd5", "upcean2", "upcean5", "upsmaxicode"]), this.upsMode = V(e.upsMode, ["usCarrier", "internationalCarrier", "secureSymbol", "standardSymbol"]), this.use = e.use || "", this.usehref = e.usehref || "", this.wideNarrowRatio = Lh(e.wideNarrowRatio), this.encrypt = null, this.extras = null;
  }
}
class D3 extends U {
  constructor(e) {
    super(ne, "bind", !0), this.match = V(e.match, ["once", "dataRef", "global", "none"]), this.ref = e.ref || "", this.picture = null;
  }
}
class Cl extends U {
  constructor(e) {
    super(ne, "bindItems"), this.connection = e.connection || "", this.labelRef = e.labelRef || "", this.ref = e.ref || "", this.valueRef = e.valueRef || "";
  }
}
class P3 extends U {
  constructor(e) {
    super(ne, "bookend"), this.id = e.id || "", this.leader = e.leader || "", this.trailer = e.trailer || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class N3 extends qt {
  constructor(e) {
    super(ne, "boolean"), this.id = e.id || "", this.name = e.name || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
  [Te](e) {
    return cs(this[$] === 1 ? "1" : "0");
  }
}
class $u extends U {
  constructor(e) {
    super(ne, "border", !0), this.break = V(e.break, ["close", "open"]), this.hand = V(e.hand, ["even", "left", "right"]), this.id = e.id || "", this.presence = V(e.presence, ["visible", "hidden", "inactive", "invisible"]), this.relevant = ci(e.relevant), this.use = e.use || "", this.usehref = e.usehref || "", this.corner = new v(4), this.edge = new v(4), this.extras = null, this.fill = null, this.margin = null;
  }
  [tn]() {
    if (!this[N]) {
      const e = this.edge.children.slice();
      if (e.length < 4) {
        const s = e.at(-1) || new or({});
        for (let a = e.length; a < 4; a++)
          e.push(s);
      }
      const n = e.map((s) => s.thickness), i = [0, 0, 0, 0];
      this.margin && (i[0] = this.margin.topInset, i[1] = this.margin.rightInset, i[2] = this.margin.bottomInset, i[3] = this.margin.leftInset), this[N] = {
        widths: n,
        insets: i,
        edges: e
      };
    }
    return this[N];
  }
  [Je]() {
    var s;
    const {
      edges: e
    } = this[tn](), n = e.map((a) => {
      const r = a[Je]();
      return r.color || (r.color = "#000000"), r;
    }), i = /* @__PURE__ */ Object.create(null);
    if (this.margin && Object.assign(i, this.margin[Je]()), ((s = this.fill) == null ? void 0 : s.presence) === "visible" && Object.assign(i, this.fill[Je]()), this.corner.children.some((a) => a.radius !== 0)) {
      const a = this.corner.children.map((r) => r[Je]());
      if (a.length === 2 || a.length === 3) {
        const r = a.at(-1);
        for (let o = a.length; o < 4; o++)
          a.push(r);
      }
      i.borderRadius = a.map((r) => r.radius).join(" ");
    }
    switch (this.presence) {
      case "invisible":
      case "hidden":
        i.borderStyle = "";
        break;
      case "inactive":
        i.borderStyle = "none";
        break;
      default:
        i.borderStyle = n.map((a) => a.style).join(" ");
        break;
    }
    return i.borderWidth = n.map((a) => a.width).join(" "), i.borderColor = n.map((a) => a.color).join(" "), i;
  }
}
class O3 extends U {
  constructor(e) {
    super(ne, "break", !0), this.after = V(e.after, ["auto", "contentArea", "pageArea", "pageEven", "pageOdd"]), this.afterTarget = e.afterTarget || "", this.before = V(e.before, ["auto", "contentArea", "pageArea", "pageEven", "pageOdd"]), this.beforeTarget = e.beforeTarget || "", this.bookendLeader = e.bookendLeader || "", this.bookendTrailer = e.bookendTrailer || "", this.id = e.id || "", this.overflowLeader = e.overflowLeader || "", this.overflowTarget = e.overflowTarget || "", this.overflowTrailer = e.overflowTrailer || "", this.startNew = De({
      data: e.startNew,
      defaultValue: 0,
      validate: (n) => n === 1
    }), this.use = e.use || "", this.usehref = e.usehref || "", this.extras = null;
  }
}
class zu extends U {
  constructor(e) {
    super(ne, "breakAfter", !0), this.id = e.id || "", this.leader = e.leader || "", this.startNew = De({
      data: e.startNew,
      defaultValue: 0,
      validate: (n) => n === 1
    }), this.target = e.target || "", this.targetType = V(e.targetType, ["auto", "contentArea", "pageArea"]), this.trailer = e.trailer || "", this.use = e.use || "", this.usehref = e.usehref || "", this.script = null;
  }
}
class Wu extends U {
  constructor(e) {
    super(ne, "breakBefore", !0), this.id = e.id || "", this.leader = e.leader || "", this.startNew = De({
      data: e.startNew,
      defaultValue: 0,
      validate: (n) => n === 1
    }), this.target = e.target || "", this.targetType = V(e.targetType, ["auto", "contentArea", "pageArea"]), this.trailer = e.trailer || "", this.use = e.use || "", this.usehref = e.usehref || "", this.script = null;
  }
  [Te](e) {
    return this[N] = {}, Ce.FAILURE;
  }
}
class L3 extends U {
  constructor(e) {
    super(ne, "button", !0), this.highlight = V(e.highlight, ["inverted", "none", "outline", "push"]), this.id = e.id || "", this.use = e.use || "", this.usehref = e.usehref || "", this.extras = null;
  }
  [Te](e) {
    const i = this[Ne]()[Ne](), s = {
      name: "button",
      attributes: {
        id: this[rt],
        class: ["xfaButton"],
        style: {}
      },
      children: []
    };
    for (const a of i.event.children) {
      if (a.activity !== "click" || !a.script)
        continue;
      const r = gf(a.script[$]);
      if (!r)
        continue;
      const o = _u(r.url);
      o && s.children.push({
        name: "a",
        attributes: {
          id: "link" + this[rt],
          href: o,
          newWindow: r.newWindow,
          class: ["xfaLink"],
          style: {}
        },
        children: []
      });
    }
    return Ce.success(s);
  }
}
class _3 extends U {
  constructor(e) {
    super(ne, "calculate", !0), this.id = e.id || "", this.override = V(e.override, ["disabled", "error", "ignore", "warning"]), this.use = e.use || "", this.usehref = e.usehref || "", this.extras = null, this.message = null, this.script = null;
  }
}
class U3 extends U {
  constructor(e) {
    super(ne, "caption", !0), this.id = e.id || "", this.placement = V(e.placement, ["left", "bottom", "inline", "right", "top"]), this.presence = V(e.presence, ["visible", "hidden", "inactive", "invisible"]), this.reserve = Math.ceil(ge(e.reserve)), this.use = e.use || "", this.usehref = e.usehref || "", this.extras = null, this.font = null, this.margin = null, this.para = null, this.value = null;
  }
  [vn](e) {
    f1(this, e);
  }
  [tn](e) {
    if (!this[N]) {
      let {
        width: n,
        height: i
      } = e;
      switch (this.placement) {
        case "left":
        case "right":
        case "inline":
          n = this.reserve <= 0 ? n : this.reserve;
          break;
        case "top":
        case "bottom":
          i = this.reserve <= 0 ? i : this.reserve;
          break;
      }
      this[N] = c1(this, {
        width: n
      });
    }
    return this[N];
  }
  [Te](e) {
    if (!this.value)
      return Ce.EMPTY;
    this[La]();
    const n = this.value[Te](e).html;
    if (!n)
      return this[Sn](), Ce.EMPTY;
    const i = this.reserve;
    if (this.reserve <= 0) {
      const {
        w: r,
        h: o
      } = this[tn](e);
      switch (this.placement) {
        case "left":
        case "right":
        case "inline":
          this.reserve = r;
          break;
        case "top":
        case "bottom":
          this.reserve = o;
          break;
      }
    }
    const s = [];
    typeof n == "string" ? s.push({
      name: "#text",
      value: n
    }) : s.push(n);
    const a = wn(this, "font", "margin", "visibility");
    switch (this.placement) {
      case "left":
      case "right":
        this.reserve > 0 && (a.width = Me(this.reserve));
        break;
      case "top":
      case "bottom":
        this.reserve > 0 && (a.height = Me(this.reserve));
        break;
    }
    return Ou(this, null, n), this[Sn](), this.reserve = i, Ce.success({
      name: "div",
      attributes: {
        style: a,
        class: ["xfaCaption"]
      },
      children: s
    });
  }
}
class j3 extends $e {
  constructor(e) {
    super(ne, "certificate"), this.id = e.id || "", this.name = e.name || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class q3 extends U {
  constructor(e) {
    super(ne, "certificates", !0), this.credentialServerPolicy = V(e.credentialServerPolicy, ["optional", "required"]), this.id = e.id || "", this.url = e.url || "", this.urlPolicy = e.urlPolicy || "", this.use = e.use || "", this.usehref = e.usehref || "", this.encryption = null, this.issuers = null, this.keyUsage = null, this.oids = null, this.signing = null, this.subjectDNs = null;
  }
}
class Vu extends U {
  constructor(e) {
    super(ne, "checkButton", !0), this.id = e.id || "", this.mark = V(e.mark, ["default", "check", "circle", "cross", "diamond", "square", "star"]), this.shape = V(e.shape, ["square", "round"]), this.size = ge(e.size, "10pt"), this.use = e.use || "", this.usehref = e.usehref || "", this.border = null, this.extras = null, this.margin = null;
  }
  [Te](e) {
    var m, p, b;
    const n = wn(this, "margin"), i = Me(this.size);
    n.width = n.height = i;
    let s, a, r;
    const o = this[Ne]()[Ne](), c = o.items.children.length && o.items.children[0][Te]().html || [], l = {
      on: (c[0] !== void 0 ? c[0] : "on").toString(),
      off: (c[1] !== void 0 ? c[1] : "off").toString()
    }, f = (((m = o.value) == null ? void 0 : m[jt]()) || "off") === l.on || void 0, u = o[Et](), d = o[rt];
    let x;
    u instanceof Zu ? (r = u[rt], s = "radio", a = "xfaRadio", x = ((p = u[zn]) == null ? void 0 : p[rt]) || u[rt]) : (s = "checkbox", a = "xfaCheckbox", x = ((b = o[zn]) == null ? void 0 : b[rt]) || o[rt]);
    const g = {
      name: "input",
      attributes: {
        class: [a],
        style: n,
        fieldId: d,
        dataId: x,
        type: s,
        checked: f,
        xfaOn: l.on,
        xfaOff: l.off,
        "aria-label": _s(o),
        "aria-required": !1
      }
    };
    return r && (g.attributes.name = r), rr(o) && (g.attributes["aria-required"] = !0, g.attributes.required = !0), Ce.success({
      name: "label",
      attributes: {
        class: ["xfaLabel"]
      },
      children: [g]
    });
  }
}
class Xu extends U {
  constructor(e) {
    super(ne, "choiceList", !0), this.commitOn = V(e.commitOn, ["select", "exit"]), this.id = e.id || "", this.open = V(e.open, ["userControl", "always", "multiSelect", "onEntry"]), this.textEntry = De({
      data: e.textEntry,
      defaultValue: 0,
      validate: (n) => n === 1
    }), this.use = e.use || "", this.usehref = e.usehref || "", this.border = null, this.extras = null, this.margin = null;
  }
  [Te](e) {
    var l, h, f;
    const n = wn(this, "border", "margin"), s = this[Ne]()[Ne](), r = {
      fontSize: `calc(${((l = s.font) == null ? void 0 : l.size) || 10}px * var(--total-scale-factor))`
    }, o = [];
    if (s.items.children.length > 0) {
      const u = s.items;
      let d = 0, x = 0;
      u.children.length === 2 && (d = u.children[0].save, x = 1 - d);
      const g = u.children[d][Te]().html, m = u.children[x][Te]().html;
      let p = !1;
      const b = ((h = s.value) == null ? void 0 : h[jt]()) || "";
      for (let w = 0, y = g.length; w < y; w++) {
        const k = {
          name: "option",
          attributes: {
            value: m[w] || g[w],
            style: r
          },
          value: g[w]
        };
        m[w] === b && (k.attributes.selected = p = !0), o.push(k);
      }
      p || o.splice(0, 0, {
        name: "option",
        attributes: {
          hidden: !0,
          selected: !0
        },
        value: " "
      });
    }
    const c = {
      class: ["xfaSelect"],
      fieldId: s[rt],
      dataId: ((f = s[zn]) == null ? void 0 : f[rt]) || s[rt],
      style: n,
      "aria-label": _s(s),
      "aria-required": !1
    };
    return rr(s) && (c["aria-required"] = !0, c.required = !0), this.open === "multiSelect" && (c.multiple = !0), Ce.success({
      name: "label",
      attributes: {
        class: ["xfaLabel"]
      },
      children: [{
        name: "select",
        children: o,
        attributes: c
      }]
    });
  }
}
class H3 extends U {
  constructor(e) {
    super(ne, "color", !0), this.cSpace = V(e.cSpace, ["SRGB"]), this.id = e.id || "", this.use = e.use || "", this.usehref = e.usehref || "", this.value = e.value ? d3(e.value) : "", this.extras = null;
  }
  [P0]() {
    return !1;
  }
  [Je]() {
    return this.value ? tt.makeHexColor(this.value.r, this.value.g, this.value.b) : null;
  }
}
class G3 extends U {
  constructor(e) {
    super(ne, "comb"), this.id = e.id || "", this.numberOfCells = De({
      data: e.numberOfCells,
      defaultValue: 0,
      validate: (n) => n >= 0
    }), this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class $3 extends U {
  constructor(e) {
    super(ne, "connect", !0), this.connection = e.connection || "", this.id = e.id || "", this.ref = e.ref || "", this.usage = V(e.usage, ["exportAndImport", "exportOnly", "importOnly"]), this.use = e.use || "", this.usehref = e.usehref || "", this.picture = null;
  }
}
class d1 extends U {
  constructor(e) {
    super(ne, "contentArea", !0), this.h = ge(e.h), this.id = e.id || "", this.name = e.name || "", this.relevant = ci(e.relevant), this.use = e.use || "", this.usehref = e.usehref || "", this.w = ge(e.w), this.x = ge(e.x, "0pt"), this.y = ge(e.y, "0pt"), this.desc = null, this.extras = null;
  }
  [Te](e) {
    const n = Me(this.x), i = Me(this.y), s = {
      left: n,
      top: i,
      width: Me(this.w),
      height: Me(this.h)
    }, a = ["xfaContentarea"];
    return _a(this) && a.push("xfaPrintOnly"), Ce.success({
      name: "div",
      children: [],
      attributes: {
        style: s,
        class: a,
        id: this[rt]
      }
    });
  }
}
class Ku extends U {
  constructor(e) {
    super(ne, "corner", !0), this.id = e.id || "", this.inverted = De({
      data: e.inverted,
      defaultValue: 0,
      validate: (n) => n === 1
    }), this.join = V(e.join, ["square", "round"]), this.presence = V(e.presence, ["visible", "hidden", "inactive", "invisible"]), this.radius = ge(e.radius), this.stroke = V(e.stroke, ["solid", "dashDot", "dashDotDot", "dashed", "dotted", "embossed", "etched", "lowered", "raised"]), this.thickness = ge(e.thickness, "0.5pt"), this.use = e.use || "", this.usehref = e.usehref || "", this.color = null, this.extras = null;
  }
  [Je]() {
    const e = wn(this, "visibility");
    return e.radius = Me(this.join === "square" ? 0 : this.radius), e;
  }
}
class z3 extends vt {
  constructor(e) {
    super(ne, "date"), this.id = e.id || "", this.name = e.name || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
  [ut]() {
    const e = this[$].trim();
    this[$] = e ? new Date(e) : null;
  }
  [Te](e) {
    return cs(this[$] ? this[$].toString() : "");
  }
}
class W3 extends vt {
  constructor(e) {
    super(ne, "dateTime"), this.id = e.id || "", this.name = e.name || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
  [ut]() {
    const e = this[$].trim();
    this[$] = e ? new Date(e) : null;
  }
  [Te](e) {
    return cs(this[$] ? this[$].toString() : "");
  }
}
class V3 extends U {
  constructor(e) {
    super(ne, "dateTimeEdit", !0), this.hScrollPolicy = V(e.hScrollPolicy, ["auto", "off", "on"]), this.id = e.id || "", this.picker = V(e.picker, ["host", "none"]), this.use = e.use || "", this.usehref = e.usehref || "", this.border = null, this.comb = null, this.extras = null, this.margin = null;
  }
  [Te](e) {
    var a;
    const n = wn(this, "border", "font", "margin"), i = this[Ne]()[Ne](), s = {
      name: "input",
      attributes: {
        type: "text",
        fieldId: i[rt],
        dataId: ((a = i[zn]) == null ? void 0 : a[rt]) || i[rt],
        class: ["xfaTextfield"],
        style: n,
        "aria-label": _s(i),
        "aria-required": !1
      }
    };
    return rr(i) && (s.attributes["aria-required"] = !0, s.attributes.required = !0), Ce.success({
      name: "label",
      attributes: {
        class: ["xfaLabel"]
      },
      children: [s]
    });
  }
}
class X3 extends vt {
  constructor(e) {
    super(ne, "decimal"), this.fracDigits = De({
      data: e.fracDigits,
      defaultValue: 2,
      validate: (n) => !0
    }), this.id = e.id || "", this.leadDigits = De({
      data: e.leadDigits,
      defaultValue: -1,
      validate: (n) => !0
    }), this.name = e.name || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
  [ut]() {
    const e = parseFloat(this[$].trim());
    this[$] = isNaN(e) ? null : e;
  }
  [Te](e) {
    return cs(this[$] !== null ? this[$].toString() : "");
  }
}
class K3 extends U {
  constructor(e) {
    super(ne, "defaultUi", !0), this.id = e.id || "", this.use = e.use || "", this.usehref = e.usehref || "", this.extras = null;
  }
}
class Y3 extends U {
  constructor(e) {
    super(ne, "desc", !0), this.id = e.id || "", this.use = e.use || "", this.usehref = e.usehref || "", this.boolean = new v(), this.date = new v(), this.dateTime = new v(), this.decimal = new v(), this.exData = new v(), this.float = new v(), this.image = new v(), this.integer = new v(), this.text = new v(), this.time = new v();
  }
}
class Z3 extends ot {
  constructor(e) {
    super(ne, "digestMethod", ["", "SHA1", "SHA256", "SHA512", "RIPEMD160"]), this.id = e.id || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class J3 extends U {
  constructor(e) {
    super(ne, "digestMethods", !0), this.id = e.id || "", this.type = V(e.type, ["optional", "required"]), this.use = e.use || "", this.usehref = e.usehref || "", this.digestMethod = new v();
  }
}
class Yu extends U {
  constructor(e) {
    super(ne, "draw", !0), this.anchorType = V(e.anchorType, ["topLeft", "bottomCenter", "bottomLeft", "bottomRight", "middleCenter", "middleLeft", "middleRight", "topCenter", "topRight"]), this.colSpan = De({
      data: e.colSpan,
      defaultValue: 1,
      validate: (n) => n >= 1 || n === -1
    }), this.h = e.h ? ge(e.h) : "", this.hAlign = V(e.hAlign, ["left", "center", "justify", "justifyAll", "radix", "right"]), this.id = e.id || "", this.locale = e.locale || "", this.maxH = ge(e.maxH, "0pt"), this.maxW = ge(e.maxW, "0pt"), this.minH = ge(e.minH, "0pt"), this.minW = ge(e.minW, "0pt"), this.name = e.name || "", this.presence = V(e.presence, ["visible", "hidden", "inactive", "invisible"]), this.relevant = ci(e.relevant), this.rotate = De({
      data: e.rotate,
      defaultValue: 0,
      validate: (n) => n % 90 === 0
    }), this.use = e.use || "", this.usehref = e.usehref || "", this.w = e.w ? ge(e.w) : "", this.x = ge(e.x, "0pt"), this.y = ge(e.y, "0pt"), this.assist = null, this.border = null, this.caption = null, this.desc = null, this.extras = null, this.font = null, this.keep = null, this.margin = null, this.para = null, this.traversal = null, this.ui = null, this.value = null, this.setProperty = new v();
  }
  [vn](e) {
    f1(this, e);
  }
  [Te](e) {
    if (Ko(this), this.presence === "hidden" || this.presence === "inactive")
      return Ce.EMPTY;
    Vo(this), this[La]();
    const n = this.w, i = this.h, {
      w: s,
      h: a,
      isBroken: r
    } = c1(this, e);
    if (s && this.w === "") {
      if (r && this[Et]()[Hi]())
        return this[Sn](), Ce.FAILURE;
      this.w = s;
    }
    if (a && this.h === "" && (this.h = a), Zo(this), !Xo(this, e))
      return this.w = n, this.h = i, this[Sn](), Ce.FAILURE;
    Jo(this);
    const o = wn(this, "font", "hAlign", "dimensions", "position", "presence", "rotate", "anchorType", "border", "margin");
    Ru(this, o), o.margin && (o.padding = o.margin, delete o.margin);
    const c = ["xfaDraw"];
    this.font && c.push("xfaFont"), _a(this) && c.push("xfaPrintOnly");
    const l = {
      style: o,
      id: this[rt],
      class: c
    };
    this.name && (l.xfaName = this.name);
    const h = {
      name: "div",
      attributes: l,
      children: []
    };
    Yo(this, l);
    const f = Mu(this, h, e), u = this.value ? this.value[Te](e).html : null;
    return u === null ? (this.w = n, this.h = i, this[Sn](), Ce.success(Ds(this, h), f)) : (h.children.push(u), Ou(this, o, u), this.w = n, this.h = i, this[Sn](), Ce.success(Ds(this, h), f));
  }
}
class or extends U {
  constructor(e) {
    super(ne, "edge", !0), this.cap = V(e.cap, ["square", "butt", "round"]), this.id = e.id || "", this.presence = V(e.presence, ["visible", "hidden", "inactive", "invisible"]), this.stroke = V(e.stroke, ["solid", "dashDot", "dashDotDot", "dashed", "dotted", "embossed", "etched", "lowered", "raised"]), this.thickness = ge(e.thickness, "0.5pt"), this.use = e.use || "", this.usehref = e.usehref || "", this.color = null, this.extras = null;
  }
  [Je]() {
    const e = wn(this, "visibility");
    if (Object.assign(e, {
      linecap: this.cap,
      width: Me(this.thickness),
      color: this.color ? this.color[Je]() : "#000000",
      style: ""
    }), this.presence !== "visible")
      e.style = "none";
    else
      switch (this.stroke) {
        case "solid":
          e.style = "solid";
          break;
        case "dashDot":
          e.style = "dashed";
          break;
        case "dashDotDot":
          e.style = "dashed";
          break;
        case "dashed":
          e.style = "dashed";
          break;
        case "dotted":
          e.style = "dotted";
          break;
        case "embossed":
          e.style = "ridge";
          break;
        case "etched":
          e.style = "groove";
          break;
        case "lowered":
          e.style = "inset";
          break;
        case "raised":
          e.style = "outset";
          break;
      }
    return e;
  }
}
class Q3 extends ot {
  constructor(e) {
    super(ne, "encoding", ["adbe.x509.rsa_sha1", "adbe.pkcs7.detached", "adbe.pkcs7.sha1"]), this.id = e.id || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class ep extends U {
  constructor(e) {
    super(ne, "encodings", !0), this.id = e.id || "", this.type = V(e.type, ["optional", "required"]), this.use = e.use || "", this.usehref = e.usehref || "", this.encoding = new v();
  }
}
class tp extends U {
  constructor(e) {
    super(ne, "encrypt", !0), this.id = e.id || "", this.use = e.use || "", this.usehref = e.usehref || "", this.certificate = null;
  }
}
class np extends U {
  constructor(e) {
    super(ne, "encryptData", !0), this.id = e.id || "", this.operation = V(e.operation, ["encrypt", "decrypt"]), this.target = e.target || "", this.use = e.use || "", this.usehref = e.usehref || "", this.filter = null, this.manifest = null;
  }
}
class ip extends U {
  constructor(e) {
    super(ne, "encryption", !0), this.id = e.id || "", this.type = V(e.type, ["optional", "required"]), this.use = e.use || "", this.usehref = e.usehref || "", this.certificate = new v();
  }
}
class sp extends ot {
  constructor(e) {
    super(ne, "encryptionMethod", ["", "AES256-CBC", "TRIPLEDES-CBC", "AES128-CBC", "AES192-CBC"]), this.id = e.id || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class ap extends U {
  constructor(e) {
    super(ne, "encryptionMethods", !0), this.id = e.id || "", this.type = V(e.type, ["optional", "required"]), this.use = e.use || "", this.usehref = e.usehref || "", this.encryptionMethod = new v();
  }
}
class rp extends U {
  constructor(e) {
    super(ne, "event", !0), this.activity = V(e.activity, ["click", "change", "docClose", "docReady", "enter", "exit", "full", "indexChange", "initialize", "mouseDown", "mouseEnter", "mouseExit", "mouseUp", "postExecute", "postOpen", "postPrint", "postSave", "postSign", "postSubmit", "preExecute", "preOpen", "prePrint", "preSave", "preSign", "preSubmit", "ready", "validationState"]), this.id = e.id || "", this.listen = V(e.listen, ["refOnly", "refAndDescendents"]), this.name = e.name || "", this.ref = e.ref || "", this.use = e.use || "", this.usehref = e.usehref || "", this.extras = null, this.encryptData = null, this.execute = null, this.script = null, this.signData = null, this.submit = null;
  }
}
class op extends vt {
  constructor(e) {
    super(ne, "exData"), this.contentType = e.contentType || "", this.href = e.href || "", this.id = e.id || "", this.maxLength = De({
      data: e.maxLength,
      defaultValue: -1,
      validate: (n) => n >= -1
    }), this.name = e.name || "", this.rid = e.rid || "", this.transferEncoding = V(e.transferEncoding, ["none", "base64", "package"]), this.use = e.use || "", this.usehref = e.usehref || "";
  }
  [a1]() {
    return this.contentType === "text/html";
  }
  [wi](e) {
    return this.contentType === "text/html" && e[Bt] === Rt.xhtml.id ? (this[$] = e, !0) : this.contentType === "text/xml" ? (this[$] = e, !0) : !1;
  }
  [Te](e) {
    return this.contentType !== "text/html" || !this[$] ? Ce.EMPTY : this[$][Te](e);
  }
}
class cp extends U {
  constructor(e) {
    super(ne, "exObject", !0), this.archive = e.archive || "", this.classId = e.classId || "", this.codeBase = e.codeBase || "", this.codeType = e.codeType || "", this.id = e.id || "", this.name = e.name || "", this.use = e.use || "", this.usehref = e.usehref || "", this.extras = null, this.boolean = new v(), this.date = new v(), this.dateTime = new v(), this.decimal = new v(), this.exData = new v(), this.exObject = new v(), this.float = new v(), this.image = new v(), this.integer = new v(), this.text = new v(), this.time = new v();
  }
}
class Zu extends U {
  constructor(e) {
    super(ne, "exclGroup", !0), this.access = V(e.access, ["open", "nonInteractive", "protected", "readOnly"]), this.accessKey = e.accessKey || "", this.anchorType = V(e.anchorType, ["topLeft", "bottomCenter", "bottomLeft", "bottomRight", "middleCenter", "middleLeft", "middleRight", "topCenter", "topRight"]), this.colSpan = De({
      data: e.colSpan,
      defaultValue: 1,
      validate: (n) => n >= 1 || n === -1
    }), this.h = e.h ? ge(e.h) : "", this.hAlign = V(e.hAlign, ["left", "center", "justify", "justifyAll", "radix", "right"]), this.id = e.id || "", this.layout = V(e.layout, ["position", "lr-tb", "rl-row", "rl-tb", "row", "table", "tb"]), this.maxH = ge(e.maxH, "0pt"), this.maxW = ge(e.maxW, "0pt"), this.minH = ge(e.minH, "0pt"), this.minW = ge(e.minW, "0pt"), this.name = e.name || "", this.presence = V(e.presence, ["visible", "hidden", "inactive", "invisible"]), this.relevant = ci(e.relevant), this.use = e.use || "", this.usehref = e.usehref || "", this.w = e.w ? ge(e.w) : "", this.x = ge(e.x, "0pt"), this.y = ge(e.y, "0pt"), this.assist = null, this.bind = null, this.border = null, this.calculate = null, this.caption = null, this.desc = null, this.extras = null, this.margin = null, this.para = null, this.traversal = null, this.validate = null, this.connect = new v(), this.event = new v(), this.field = new v(), this.setProperty = new v();
  }
  [Hs]() {
    return !0;
  }
  [P0]() {
    return !0;
  }
  [vn](e) {
    for (const n of this.field.children) {
      if (!n.value) {
        const i = new b1({});
        n[St](i), n.value = i;
      }
      n.value[vn](e);
    }
  }
  [Hi]() {
    return this.layout.endsWith("-tb") && this[N].attempt === 0 && this[N].numberInLine > 0 || this[Ne]()[Hi]();
  }
  [Li]() {
    var n;
    const e = this[Et]();
    return e[Li]() ? this[N]._isSplittable !== void 0 ? this[N]._isSplittable : this.layout === "position" || this.layout.includes("row") ? (this[N]._isSplittable = !1, !1) : (n = e.layout) != null && n.endsWith("-tb") && e[N].numberInLine !== 0 ? !1 : (this[N]._isSplittable = !0, !0) : !1;
  }
  [ar]() {
    return ju(this);
  }
  [Rs](e, n) {
    qu(this, e, n);
  }
  [Ms]() {
    return Hu(this);
  }
  [Te](e) {
    if (Ko(this), this.presence === "hidden" || this.presence === "inactive" || this.h === 0 || this.w === 0)
      return Ce.EMPTY;
    Vo(this);
    const n = [], i = {
      id: this[rt],
      class: []
    };
    l1(this, i.class), this[N] || (this[N] = /* @__PURE__ */ Object.create(null)), Object.assign(this[N], {
      children: n,
      attributes: i,
      attempt: 0,
      line: null,
      numberInLine: 0,
      availableSpace: {
        width: Math.min(this.w || 1 / 0, e.width),
        height: Math.min(this.h || 1 / 0, e.height)
      },
      width: 0,
      height: 0,
      prevHeight: 0,
      currentWidth: 0
    });
    const s = this[Li]();
    if (s || Zo(this), !Xo(this, e))
      return Ce.FAILURE;
    const a = /* @__PURE__ */ new Set(["field"]);
    if (this.layout.includes("row")) {
      const p = this[Et]().columnWidths;
      Array.isArray(p) && p.length > 0 && (this[N].columnWidths = p, this[N].currentColumn = 0);
    }
    const r = wn(this, "anchorType", "dimensions", "position", "presence", "border", "margin", "hAlign"), o = ["xfaExclgroup"], c = Du(this);
    c && o.push(c), _a(this) && o.push("xfaPrintOnly"), i.style = r, i.class = o, this.name && (i.xfaName = this.name), this[La]();
    const l = this.layout === "lr-tb" || this.layout === "rl-tb", h = l ? xo : 1;
    for (; this[N].attempt < h; this[N].attempt++) {
      l && this[N].attempt === xo - 1 && (this[N].numberInLine = 0);
      const p = this[os]({
        filter: a,
        include: !0
      });
      if (p.success)
        break;
      if (p.isBreak())
        return this[Sn](), p;
      if (l && this[N].attempt === 0 && this[N].numberInLine === 0 && !this[Ft]()[N].noLayoutFailure) {
        this[N].attempt = h;
        break;
      }
    }
    if (this[Sn](), s || Jo(this), this[N].attempt === h)
      return s || delete this[N], Ce.FAILURE;
    let f = 0, u = 0;
    this.margin && (f = this.margin.leftInset + this.margin.rightInset, u = this.margin.topInset + this.margin.bottomInset);
    const d = Math.max(this[N].width + f, this.w || 0), x = Math.max(this[N].height + u, this.h || 0), g = [this.x, this.y, d, x];
    this.w === "" && (r.width = Me(d)), this.h === "" && (r.height = Me(x));
    const m = {
      name: "div",
      attributes: i,
      children: n
    };
    return Yo(this, i), delete this[N], Ce.success(Ds(this, m), g);
  }
}
class lp extends U {
  constructor(e) {
    super(ne, "execute"), this.connection = e.connection || "", this.executeType = V(e.executeType, ["import", "remerge"]), this.id = e.id || "", this.runAt = V(e.runAt, ["client", "both", "server"]), this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class hp extends U {
  constructor(e) {
    super(ne, "extras", !0), this.id = e.id || "", this.name = e.name || "", this.use = e.use || "", this.usehref = e.usehref || "", this.boolean = new v(), this.date = new v(), this.dateTime = new v(), this.decimal = new v(), this.exData = new v(), this.extras = new v(), this.float = new v(), this.image = new v(), this.integer = new v(), this.text = new v(), this.time = new v();
  }
}
class x1 extends U {
  constructor(e) {
    super(ne, "field", !0), this.access = V(e.access, ["open", "nonInteractive", "protected", "readOnly"]), this.accessKey = e.accessKey || "", this.anchorType = V(e.anchorType, ["topLeft", "bottomCenter", "bottomLeft", "bottomRight", "middleCenter", "middleLeft", "middleRight", "topCenter", "topRight"]), this.colSpan = De({
      data: e.colSpan,
      defaultValue: 1,
      validate: (n) => n >= 1 || n === -1
    }), this.h = e.h ? ge(e.h) : "", this.hAlign = V(e.hAlign, ["left", "center", "justify", "justifyAll", "radix", "right"]), this.id = e.id || "", this.locale = e.locale || "", this.maxH = ge(e.maxH, "0pt"), this.maxW = ge(e.maxW, "0pt"), this.minH = ge(e.minH, "0pt"), this.minW = ge(e.minW, "0pt"), this.name = e.name || "", this.presence = V(e.presence, ["visible", "hidden", "inactive", "invisible"]), this.relevant = ci(e.relevant), this.rotate = De({
      data: e.rotate,
      defaultValue: 0,
      validate: (n) => n % 90 === 0
    }), this.use = e.use || "", this.usehref = e.usehref || "", this.w = e.w ? ge(e.w) : "", this.x = ge(e.x, "0pt"), this.y = ge(e.y, "0pt"), this.assist = null, this.bind = null, this.border = null, this.calculate = null, this.caption = null, this.desc = null, this.extras = null, this.font = null, this.format = null, this.items = new v(2), this.keep = null, this.margin = null, this.para = null, this.traversal = null, this.ui = null, this.validate = null, this.value = null, this.bindItems = new v(), this.connect = new v(), this.event = new v(), this.setProperty = new v();
  }
  [Hs]() {
    return !0;
  }
  [vn](e) {
    f1(this, e);
  }
  [Te](e) {
    var p, b, w, y, k;
    if (Ko(this), !this.ui) {
      this.ui = new m1({}), this.ui[ft] = this[ft], this[St](this.ui);
      let S;
      switch (this.items.children.length) {
        case 0:
          S = new id({}), this.ui.textEdit = S;
          break;
        case 1:
          S = new Vu({}), this.ui.checkButton = S;
          break;
        case 2:
          S = new Xu({}), this.ui.choiceList = S;
          break;
      }
      this.ui[St](S);
    }
    if (!this.ui || this.presence === "hidden" || this.presence === "inactive" || this.h === 0 || this.w === 0)
      return Ce.EMPTY;
    this.caption && delete this.caption[N], this[La]();
    const n = this.caption ? this.caption[Te](e).html : null, i = this.w, s = this.h;
    let a = 0, r = 0;
    this.margin && (a = this.margin.leftInset + this.margin.rightInset, r = this.margin.topInset + this.margin.bottomInset);
    let o = null;
    if (this.w === "" || this.h === "") {
      let S = null, C = null, T = 0, F = 0;
      if (this.ui.checkButton)
        T = F = this.ui.checkButton.size;
      else {
        const {
          w: R,
          h: D
        } = c1(this, e);
        R !== null ? (T = R, F = D) : F = p3(this.font, !0).lineNoGap;
      }
      if (o = zh(this.ui[tn]()), T += o.w, F += o.h, this.caption) {
        const {
          w: R,
          h: D,
          isBroken: M
        } = this.caption[tn](e);
        if (M && this[Et]()[Hi]())
          return this[Sn](), Ce.FAILURE;
        switch (S = R, C = D, this.caption.placement) {
          case "left":
          case "right":
          case "inline":
            S += T;
            break;
          case "top":
          case "bottom":
            C += F;
            break;
        }
      } else
        S = T, C = F;
      S && this.w === "" && (S += a, this.w = Math.min(this.maxW <= 0 ? 1 / 0 : this.maxW, this.minW + 1 < S ? S : this.minW)), C && this.h === "" && (C += r, this.h = Math.min(this.maxH <= 0 ? 1 / 0 : this.maxH, this.minH + 1 < C ? C : this.minH));
    }
    if (this[Sn](), Vo(this), Zo(this), !Xo(this, e))
      return this.w = i, this.h = s, this[Sn](), Ce.FAILURE;
    Jo(this);
    const c = wn(this, "font", "dimensions", "position", "rotate", "anchorType", "presence", "margin", "hAlign");
    Ru(this, c);
    const l = ["xfaField"];
    this.font && l.push("xfaFont"), _a(this) && l.push("xfaPrintOnly");
    const h = {
      style: c,
      id: this[rt],
      class: l
    };
    c.margin && (c.padding = c.margin, delete c.margin), l1(this, l), this.name && (h.xfaName = this.name);
    const f = [], u = {
      name: "div",
      attributes: h,
      children: f
    };
    Yo(this, h);
    const d = this.border ? this.border[Je]() : null, x = Mu(this, u, e), g = this.ui[Te]().html;
    if (!g)
      return Object.assign(c, d), Ce.success(Ds(this, u), x);
    this[ei] && ((p = g.children) != null && p[0] ? g.children[0].attributes.tabindex = this[ei] : g.attributes.tabindex = this[ei]), (b = g.attributes).style || (b.style = /* @__PURE__ */ Object.create(null));
    let m = null;
    if (this.ui.button ? (g.children.length === 1 && ([m] = g.children.splice(0, 1)), Object.assign(g.attributes.style, d)) : Object.assign(c, d), f.push(g), this.value) {
      if (this.ui.imageEdit)
        g.children.push(this.value[Te]().html);
      else if (!this.ui.button) {
        let S = "";
        if (this.value.exData)
          S = this.value.exData[jt]();
        else if (this.value.text)
          S = this.value.text[tn]();
        else {
          const C = this.value[Te]().html;
          C !== null && (S = C.children[0].value);
        }
        this.ui.textEdit && ((w = this.value.text) != null && w.maxChars) && (g.children[0].attributes.maxLength = this.value.text.maxChars), S && (this.ui.numericEdit && (S = parseFloat(S), S = isNaN(S) ? "" : S.toString()), g.children[0].name === "textarea" ? g.children[0].attributes.textContent = S : g.children[0].attributes.value = S);
      }
    }
    if (!this.ui.imageEdit && ((y = g.children) != null && y[0]) && this.h) {
      o = o || zh(this.ui[tn]());
      let S = 0;
      if (this.caption && ["top", "bottom"].includes(this.caption.placement)) {
        S = this.caption.reserve, S <= 0 && (S = this.caption[tn](e).h);
        const C = this.h - S - r - o.h;
        g.children[0].attributes.style.height = Me(C);
      } else
        g.children[0].attributes.style.height = "100%";
    }
    if (m && g.children.push(m), !n)
      return g.attributes.class && g.attributes.class.push("xfaLeft"), this.w = i, this.h = s, Ce.success(Ds(this, u), x);
    if (this.ui.button)
      return c.padding && delete c.padding, n.name === "div" && (n.name = "span"), g.children.push(n), Ce.success(u, x);
    switch (this.ui.checkButton && (n.attributes.class[0] = "xfaCaptionForCheckButton"), (k = g.attributes).class || (k.class = []), g.children.splice(0, 0, n), this.caption.placement) {
      case "left":
        g.attributes.class.push("xfaLeft");
        break;
      case "right":
        g.attributes.class.push("xfaRight");
        break;
      case "top":
        g.attributes.class.push("xfaTop");
        break;
      case "bottom":
        g.attributes.class.push("xfaBottom");
        break;
      case "inline":
        g.attributes.class.push("xfaLeft");
        break;
    }
    return this.w = i, this.h = s, Ce.success(Ds(this, u), x);
  }
}
class fp extends U {
  constructor(e) {
    super(ne, "fill", !0), this.id = e.id || "", this.presence = V(e.presence, ["visible", "hidden", "inactive", "invisible"]), this.use = e.use || "", this.usehref = e.usehref || "", this.color = null, this.extras = null, this.linear = null, this.pattern = null, this.radial = null, this.solid = null, this.stipple = null;
  }
  [Je]() {
    var o;
    const e = this[Ne](), i = e[Ne]()[Ne](), s = /* @__PURE__ */ Object.create(null);
    let a = "color", r = a;
    e instanceof $u && (a = "background-color", r = "background", i instanceof m1 && (s.backgroundColor = "white")), (e instanceof ed || e instanceof Gu) && (a = r = "fill", s.fill = "white");
    for (const c of Object.getOwnPropertyNames(this)) {
      if (c === "extras" || c === "color")
        continue;
      const l = this[c];
      if (!(l instanceof U))
        continue;
      const h = l[Je](this.color);
      return h && (s[h.startsWith("#") ? a : r] = h), s;
    }
    if ((o = this.color) != null && o.value) {
      const c = this.color[Je]();
      s[c.startsWith("#") ? a : r] = c;
    }
    return s;
  }
}
class up extends U {
  constructor(e) {
    super(ne, "filter", !0), this.addRevocationInfo = V(e.addRevocationInfo, ["", "required", "optional", "none"]), this.id = e.id || "", this.name = e.name || "", this.use = e.use || "", this.usehref = e.usehref || "", this.version = De({
      data: this.version,
      defaultValue: 5,
      validate: (n) => n >= 1 && n <= 5
    }), this.appearanceFilter = null, this.certificates = null, this.digestMethods = null, this.encodings = null, this.encryptionMethods = null, this.handler = null, this.lockDocument = null, this.mdp = null, this.reasons = null, this.timeStamp = null;
  }
}
class dp extends vt {
  constructor(e) {
    super(ne, "float"), this.id = e.id || "", this.name = e.name || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
  [ut]() {
    const e = parseFloat(this[$].trim());
    this[$] = isNaN(e) ? null : e;
  }
  [Te](e) {
    return cs(this[$] !== null ? this[$].toString() : "");
  }
}
class xp extends U {
  constructor(e) {
    super(ne, "font", !0), this.baselineShift = ge(e.baselineShift), this.fontHorizontalScale = uo({
      data: e.fontHorizontalScale,
      defaultValue: 100,
      validate: (n) => n >= 0
    }), this.fontVerticalScale = uo({
      data: e.fontVerticalScale,
      defaultValue: 100,
      validate: (n) => n >= 0
    }), this.id = e.id || "", this.kerningMode = V(e.kerningMode, ["none", "pair"]), this.letterSpacing = ge(e.letterSpacing, "0"), this.lineThrough = De({
      data: e.lineThrough,
      defaultValue: 0,
      validate: (n) => n === 1 || n === 2
    }), this.lineThroughPeriod = V(e.lineThroughPeriod, ["all", "word"]), this.overline = De({
      data: e.overline,
      defaultValue: 0,
      validate: (n) => n === 1 || n === 2
    }), this.overlinePeriod = V(e.overlinePeriod, ["all", "word"]), this.posture = V(e.posture, ["normal", "italic"]), this.size = ge(e.size, "10pt"), this.typeface = e.typeface || "Courier", this.underline = De({
      data: e.underline,
      defaultValue: 0,
      validate: (n) => n === 1 || n === 2
    }), this.underlinePeriod = V(e.underlinePeriod, ["all", "word"]), this.use = e.use || "", this.usehref = e.usehref || "", this.weight = V(e.weight, ["normal", "bold"]), this.extras = null, this.fill = null;
  }
  [Vn](e) {
    super[Vn](e), this[ft].usedTypefaces.add(this.typeface);
  }
  [Je]() {
    const e = wn(this, "fill"), n = e.color;
    return n && (n === "#000000" ? delete e.color : n.startsWith("#") || (e.background = n, e.backgroundClip = "text", e.color = "transparent")), this.baselineShift && (e.verticalAlign = Me(this.baselineShift)), e.fontKerning = this.kerningMode === "none" ? "none" : "normal", e.letterSpacing = Me(this.letterSpacing), this.lineThrough !== 0 && (e.textDecoration = "line-through", this.lineThrough === 2 && (e.textDecorationStyle = "double")), this.overline !== 0 && (e.textDecoration = "overline", this.overline === 2 && (e.textDecorationStyle = "double")), e.fontStyle = this.posture, e.fontSize = Me(0.99 * this.size), Lu(this, this, this[ft].fontFinder, e), this.underline !== 0 && (e.textDecoration = "underline", this.underline === 2 && (e.textDecorationStyle = "double")), e.fontWeight = this.weight, e;
  }
}
class gp extends U {
  constructor(e) {
    super(ne, "format", !0), this.id = e.id || "", this.use = e.use || "", this.usehref = e.usehref || "", this.extras = null, this.picture = null;
  }
}
class pp extends $e {
  constructor(e) {
    super(ne, "handler"), this.id = e.id || "", this.type = V(e.type, ["optional", "required"]), this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class mp extends U {
  constructor(e) {
    super(ne, "hyphenation"), this.excludeAllCaps = De({
      data: e.excludeAllCaps,
      defaultValue: 0,
      validate: (n) => n === 1
    }), this.excludeInitialCap = De({
      data: e.excludeInitialCap,
      defaultValue: 0,
      validate: (n) => n === 1
    }), this.hyphenate = De({
      data: e.hyphenate,
      defaultValue: 0,
      validate: (n) => n === 1
    }), this.id = e.id || "", this.pushCharacterCount = De({
      data: e.pushCharacterCount,
      defaultValue: 3,
      validate: (n) => n >= 0
    }), this.remainCharacterCount = De({
      data: e.remainCharacterCount,
      defaultValue: 3,
      validate: (n) => n >= 0
    }), this.use = e.use || "", this.usehref = e.usehref || "", this.wordCharacterCount = De({
      data: e.wordCharacterCount,
      defaultValue: 7,
      validate: (n) => n >= 0
    });
  }
}
class Ju extends $e {
  constructor(e) {
    super(ne, "image"), this.aspect = V(e.aspect, ["fit", "actual", "height", "none", "width"]), this.contentType = e.contentType || "", this.href = e.href || "", this.id = e.id || "", this.name = e.name || "", this.transferEncoding = V(e.transferEncoding, ["base64", "none", "package"]), this.use = e.use || "", this.usehref = e.usehref || "";
  }
  [Te]() {
    var a;
    if (this.contentType && !T3.has(this.contentType.toLowerCase()))
      return Ce.EMPTY;
    let e = (a = this[ft].images) == null ? void 0 : a.get(this.href);
    if (!e && (this.href || !this[$]) || (!e && this.transferEncoding === "base64" && (e = Vd(this[$])), !e))
      return Ce.EMPTY;
    if (!this.contentType) {
      for (const [r, o] of F3)
        if (e.length > r.length && r.every((c, l) => c === e[l])) {
          this.contentType = o;
          break;
        }
      if (!this.contentType)
        return Ce.EMPTY;
    }
    const n = new Blob([e], {
      type: this.contentType
    });
    let i;
    switch (this.aspect) {
      case "fit":
      case "actual":
        break;
      case "height":
        i = {
          height: "100%",
          objectFit: "fill"
        };
        break;
      case "none":
        i = {
          width: "100%",
          height: "100%",
          objectFit: "fill"
        };
        break;
      case "width":
        i = {
          width: "100%",
          objectFit: "fill"
        };
        break;
    }
    const s = this[Ne]();
    return Ce.success({
      name: "img",
      attributes: {
        class: ["xfaImage"],
        style: i,
        src: URL.createObjectURL(n),
        alt: s ? _s(s[Ne]()) : null
      }
    });
  }
}
class bp extends U {
  constructor(e) {
    super(ne, "imageEdit", !0), this.data = V(e.data, ["link", "embed"]), this.id = e.id || "", this.use = e.use || "", this.usehref = e.usehref || "", this.border = null, this.extras = null, this.margin = null;
  }
  [Te](e) {
    return this.data === "embed" ? Ce.success({
      name: "div",
      children: [],
      attributes: {}
    }) : Ce.EMPTY;
  }
}
class wp extends vt {
  constructor(e) {
    super(ne, "integer"), this.id = e.id || "", this.name = e.name || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
  [ut]() {
    const e = parseInt(this[$].trim(), 10);
    this[$] = isNaN(e) ? null : e;
  }
  [Te](e) {
    return cs(this[$] !== null ? this[$].toString() : "");
  }
}
class yp extends U {
  constructor(e) {
    super(ne, "issuers", !0), this.id = e.id || "", this.type = V(e.type, ["optional", "required"]), this.use = e.use || "", this.usehref = e.usehref || "", this.certificate = new v();
  }
}
class Al extends U {
  constructor(e) {
    super(ne, "items", !0), this.id = e.id || "", this.name = e.name || "", this.presence = V(e.presence, ["visible", "hidden", "inactive", "invisible"]), this.ref = e.ref || "", this.save = De({
      data: e.save,
      defaultValue: 0,
      validate: (n) => n === 1
    }), this.use = e.use || "", this.usehref = e.usehref || "", this.boolean = new v(), this.date = new v(), this.dateTime = new v(), this.decimal = new v(), this.exData = new v(), this.float = new v(), this.image = new v(), this.integer = new v(), this.text = new v(), this.time = new v();
  }
  [Te]() {
    const e = [];
    for (const n of this[Vt]())
      e.push(n[jt]());
    return Ce.success(e);
  }
}
class kp extends U {
  constructor(e) {
    super(ne, "keep", !0), this.id = e.id || "";
    const n = ["none", "contentArea", "pageArea"];
    this.intact = V(e.intact, n), this.next = V(e.next, n), this.previous = V(e.previous, n), this.use = e.use || "", this.usehref = e.usehref || "", this.extras = null;
  }
}
class Sp extends U {
  constructor(e) {
    super(ne, "keyUsage");
    const n = ["", "yes", "no"];
    this.crlSign = V(e.crlSign, n), this.dataEncipherment = V(e.dataEncipherment, n), this.decipherOnly = V(e.decipherOnly, n), this.digitalSignature = V(e.digitalSignature, n), this.encipherOnly = V(e.encipherOnly, n), this.id = e.id || "", this.keyAgreement = V(e.keyAgreement, n), this.keyCertSign = V(e.keyCertSign, n), this.keyEncipherment = V(e.keyEncipherment, n), this.nonRepudiation = V(e.nonRepudiation, n), this.type = V(e.type, ["optional", "required"]), this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class Cp extends U {
  constructor(e) {
    super(ne, "line", !0), this.hand = V(e.hand, ["even", "left", "right"]), this.id = e.id || "", this.slope = V(e.slope, ["\\", "/"]), this.use = e.use || "", this.usehref = e.usehref || "", this.edge = null;
  }
  [Te]() {
    const e = this[Ne]()[Ne](), n = this.edge || new or({}), i = n[Je](), s = /* @__PURE__ */ Object.create(null), a = n.presence === "visible" ? n.thickness : 0;
    s.strokeWidth = Me(a), s.stroke = i.color;
    let r, o, c, l, h = "100%", f = "100%";
    e.w <= a ? ([r, o, c, l] = ["50%", 0, "50%", "100%"], h = s.strokeWidth) : e.h <= a ? ([r, o, c, l] = [0, "50%", "100%", "50%"], f = s.strokeWidth) : this.slope === "\\" ? [r, o, c, l] = [0, 0, "100%", "100%"] : [r, o, c, l] = [0, "100%", "100%", 0];
    const d = {
      name: "svg",
      children: [{
        name: "line",
        attributes: {
          xmlns: Ps,
          x1: r,
          y1: o,
          x2: c,
          y2: l,
          style: s
        }
      }],
      attributes: {
        xmlns: Ps,
        width: h,
        height: f,
        style: {
          overflow: "visible"
        }
      }
    };
    return h1(e) ? Ce.success({
      name: "div",
      attributes: {
        style: {
          display: "inline",
          width: "100%",
          height: "100%"
        }
      },
      children: [d]
    }) : (d.attributes.style.position = "absolute", Ce.success(d));
  }
}
class Ap extends U {
  constructor(e) {
    super(ne, "linear", !0), this.id = e.id || "", this.type = V(e.type, ["toRight", "toBottom", "toLeft", "toTop"]), this.use = e.use || "", this.usehref = e.usehref || "", this.color = null, this.extras = null;
  }
  [Je](e) {
    e = e ? e[Je]() : "#FFFFFF";
    const n = this.type.replace(/([RBLT])/, " $1").toLowerCase(), i = this.color ? this.color[Je]() : "#000000";
    return `linear-gradient(${n}, ${e}, ${i})`;
  }
}
class vp extends vt {
  constructor(e) {
    super(ne, "lockDocument"), this.id = e.id || "", this.type = V(e.type, ["optional", "required"]), this.use = e.use || "", this.usehref = e.usehref || "";
  }
  [ut]() {
    this[$] = V(this[$], ["auto", "0", "1"]);
  }
}
class Ip extends U {
  constructor(e) {
    super(ne, "manifest", !0), this.action = V(e.action, ["include", "all", "exclude"]), this.id = e.id || "", this.name = e.name || "", this.use = e.use || "", this.usehref = e.usehref || "", this.extras = null, this.ref = new v();
  }
}
class Tp extends U {
  constructor(e) {
    super(ne, "margin", !0), this.bottomInset = ge(e.bottomInset, "0"), this.id = e.id || "", this.leftInset = ge(e.leftInset, "0"), this.rightInset = ge(e.rightInset, "0"), this.topInset = ge(e.topInset, "0"), this.use = e.use || "", this.usehref = e.usehref || "", this.extras = null;
  }
  [Je]() {
    return {
      margin: Me(this.topInset) + " " + Me(this.rightInset) + " " + Me(this.bottomInset) + " " + Me(this.leftInset)
    };
  }
}
class Fp extends U {
  constructor(e) {
    super(ne, "mdp"), this.id = e.id || "", this.permissions = De({
      data: e.permissions,
      defaultValue: 2,
      validate: (n) => n === 1 || n === 3
    }), this.signatureType = V(e.signatureType, ["filler", "author"]), this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class Bp extends U {
  constructor(e) {
    super(ne, "medium"), this.id = e.id || "", this.imagingBBox = x3(e.imagingBBox), this.long = ge(e.long), this.orientation = V(e.orientation, ["portrait", "landscape"]), this.short = ge(e.short), this.stock = e.stock || "", this.trayIn = V(e.trayIn, ["auto", "delegate", "pageFront"]), this.trayOut = V(e.trayOut, ["auto", "delegate"]), this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class Ep extends U {
  constructor(e) {
    super(ne, "message", !0), this.id = e.id || "", this.use = e.use || "", this.usehref = e.usehref || "", this.text = new v();
  }
}
class Rp extends U {
  constructor(e) {
    super(ne, "numericEdit", !0), this.hScrollPolicy = V(e.hScrollPolicy, ["auto", "off", "on"]), this.id = e.id || "", this.use = e.use || "", this.usehref = e.usehref || "", this.border = null, this.comb = null, this.extras = null, this.margin = null;
  }
  [Te](e) {
    var a;
    const n = wn(this, "border", "font", "margin"), i = this[Ne]()[Ne](), s = {
      name: "input",
      attributes: {
        type: "text",
        fieldId: i[rt],
        dataId: ((a = i[zn]) == null ? void 0 : a[rt]) || i[rt],
        class: ["xfaTextfield"],
        style: n,
        "aria-label": _s(i),
        "aria-required": !1
      }
    };
    return rr(i) && (s.attributes["aria-required"] = !0, s.attributes.required = !0), Ce.success({
      name: "label",
      attributes: {
        class: ["xfaLabel"]
      },
      children: [s]
    });
  }
}
class Mp extends U {
  constructor(e) {
    super(ne, "occur", !0), this.id = e.id || "", this.initial = e.initial !== "" ? De({
      data: e.initial,
      defaultValue: "",
      validate: (n) => !0
    }) : "", this.max = e.max !== "" ? De({
      data: e.max,
      defaultValue: 1,
      validate: (n) => !0
    }) : "", this.min = e.min !== "" ? De({
      data: e.min,
      defaultValue: 1,
      validate: (n) => !0
    }) : "", this.use = e.use || "", this.usehref = e.usehref || "", this.extras = null;
  }
  [Vn]() {
    const e = this[Ne](), n = this.min;
    this.min === "" && (this.min = e instanceof Da || e instanceof L0 ? 0 : 1), this.max === "" && (n === "" ? this.max = e instanceof Da || e instanceof L0 ? -1 : 1 : this.max = this.min), this.max !== -1 && this.max < this.min && (this.max = this.min), this.initial === "" && (this.initial = e instanceof p1 ? 1 : this.min);
  }
}
class Dp extends $e {
  constructor(e) {
    super(ne, "oid"), this.id = e.id || "", this.name = e.name || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class Pp extends U {
  constructor(e) {
    super(ne, "oids", !0), this.id = e.id || "", this.type = V(e.type, ["optional", "required"]), this.use = e.use || "", this.usehref = e.usehref || "", this.oid = new v();
  }
}
class Qu extends U {
  constructor(e) {
    super(ne, "overflow"), this.id = e.id || "", this.leader = e.leader || "", this.target = e.target || "", this.trailer = e.trailer || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
  [tn]() {
    if (!this[N]) {
      const e = this[Ne](), n = this[Ft](), i = n[Pi](this.target, e), s = n[Pi](this.leader, e), a = n[Pi](this.trailer, e);
      this[N] = {
        target: (i == null ? void 0 : i[0]) || null,
        leader: (s == null ? void 0 : s[0]) || null,
        trailer: (a == null ? void 0 : a[0]) || null,
        addLeader: !1,
        addTrailer: !1
      };
    }
    return this[N];
  }
}
class Da extends U {
  constructor(e) {
    super(ne, "pageArea", !0), this.blankOrNotBlank = V(e.blankOrNotBlank, ["any", "blank", "notBlank"]), this.id = e.id || "", this.initialNumber = De({
      data: e.initialNumber,
      defaultValue: 1,
      validate: (n) => !0
    }), this.name = e.name || "", this.numbered = De({
      data: e.numbered,
      defaultValue: 1,
      validate: (n) => !0
    }), this.oddOrEven = V(e.oddOrEven, ["any", "even", "odd"]), this.pagePosition = V(e.pagePosition, ["any", "first", "last", "only", "rest"]), this.relevant = ci(e.relevant), this.use = e.use || "", this.usehref = e.usehref || "", this.desc = null, this.extras = null, this.medium = null, this.occur = null, this.area = new v(), this.contentArea = new v(), this.draw = new v(), this.exclGroup = new v(), this.field = new v(), this.subform = new v();
  }
  [O0]() {
    return this[N] ? !this.occur || this.occur.max === -1 || this[N].numberOfUse < this.occur.max : (this[N] = {
      numberOfUse: 0
    }, !0);
  }
  [ia]() {
    delete this[N];
  }
  [Ri]() {
    this[N] || (this[N] = {
      numberOfUse: 0
    });
    const e = this[Ne]();
    return e.relation === "orderedOccurrence" && this[O0]() ? (this[N].numberOfUse += 1, this) : e[Ri]();
  }
  [Ms]() {
    return this[N].space || {
      width: 0,
      height: 0
    };
  }
  [Te]() {
    this[N] || (this[N] = {
      numberOfUse: 1
    });
    const e = [];
    this[N].children = e;
    const n = /* @__PURE__ */ Object.create(null);
    if (this.medium && this.medium.short && this.medium.long) {
      if (n.width = Me(this.medium.short), n.height = Me(this.medium.long), this[N].space = {
        width: this.medium.short,
        height: this.medium.long
      }, this.medium.orientation === "landscape") {
        const i = n.width;
        n.width = n.height, n.height = i, this[N].space = {
          width: this.medium.long,
          height: this.medium.short
        };
      }
    } else
      I("XFA - No medium specified in pageArea: please file a bug.");
    return this[os]({
      filter: /* @__PURE__ */ new Set(["area", "draw", "field", "subform"]),
      include: !0
    }), this[os]({
      filter: /* @__PURE__ */ new Set(["contentArea"]),
      include: !0
    }), Ce.success({
      name: "div",
      children: e,
      attributes: {
        class: ["xfaPage"],
        id: this[rt],
        style: n,
        xfaName: this.name
      }
    });
  }
}
class L0 extends U {
  constructor(e) {
    super(ne, "pageSet", !0), this.duplexImposition = V(e.duplexImposition, ["longEdge", "shortEdge"]), this.id = e.id || "", this.name = e.name || "", this.relation = V(e.relation, ["orderedOccurrence", "duplexPaginated", "simplexPaginated"]), this.relevant = ci(e.relevant), this.use = e.use || "", this.usehref = e.usehref || "", this.extras = null, this.occur = null, this.pageArea = new v(), this.pageSet = new v();
  }
  [ia]() {
    for (const e of this.pageArea.children)
      e[ia]();
    for (const e of this.pageSet.children)
      e[ia]();
  }
  [O0]() {
    return !this.occur || this.occur.max === -1 || this[N].numberOfUse < this.occur.max;
  }
  [Ri]() {
    if (this[N] || (this[N] = {
      numberOfUse: 1,
      pageIndex: -1,
      pageSetIndex: -1
    }), this.relation === "orderedOccurrence") {
      if (this[N].pageIndex + 1 < this.pageArea.children.length)
        return this[N].pageIndex += 1, this.pageArea.children[this[N].pageIndex][Ri]();
      if (this[N].pageSetIndex + 1 < this.pageSet.children.length)
        return this[N].pageSetIndex += 1, this.pageSet.children[this[N].pageSetIndex][Ri]();
      if (this[O0]())
        return this[N].numberOfUse += 1, this[N].pageIndex = -1, this[N].pageSetIndex = -1, this[Ri]();
      const a = this[Ne]();
      return a instanceof L0 ? a[Ri]() : (this[ia](), this[Ri]());
    }
    const e = this[Ft]()[N].pageNumber, n = e % 2 === 0 ? "even" : "odd", i = e === 0 ? "first" : "rest";
    let s = this.pageArea.children.find((a) => a.oddOrEven === n && a.pagePosition === i);
    return s || (s = this.pageArea.children.find((a) => a.oddOrEven === "any" && a.pagePosition === i), s) || (s = this.pageArea.children.find((a) => a.oddOrEven === "any" && a.pagePosition === "any"), s) ? s : this.pageArea.children[0];
  }
}
class Np extends U {
  constructor(e) {
    super(ne, "para", !0), this.hAlign = V(e.hAlign, ["left", "center", "justify", "justifyAll", "radix", "right"]), this.id = e.id || "", this.lineHeight = e.lineHeight ? ge(e.lineHeight, "0pt") : "", this.marginLeft = e.marginLeft ? ge(e.marginLeft, "0pt") : "", this.marginRight = e.marginRight ? ge(e.marginRight, "0pt") : "", this.orphans = De({
      data: e.orphans,
      defaultValue: 0,
      validate: (n) => n >= 0
    }), this.preserve = e.preserve || "", this.radixOffset = e.radixOffset ? ge(e.radixOffset, "0pt") : "", this.spaceAbove = e.spaceAbove ? ge(e.spaceAbove, "0pt") : "", this.spaceBelow = e.spaceBelow ? ge(e.spaceBelow, "0pt") : "", this.tabDefault = e.tabDefault ? ge(this.tabDefault) : "", this.tabStops = (e.tabStops || "").trim().split(/\s+/).map((n, i) => i % 2 === 1 ? ge(n) : n), this.textIndent = e.textIndent ? ge(e.textIndent, "0pt") : "", this.use = e.use || "", this.usehref = e.usehref || "", this.vAlign = V(e.vAlign, ["top", "bottom", "middle"]), this.widows = De({
      data: e.widows,
      defaultValue: 0,
      validate: (n) => n >= 0
    }), this.hyphenation = null;
  }
  [Je]() {
    const e = wn(this, "hAlign");
    return this.marginLeft !== "" && (e.paddingLeft = Me(this.marginLeft)), this.marginRight !== "" && (e.paddingRight = Me(this.marginRight)), this.spaceAbove !== "" && (e.paddingTop = Me(this.spaceAbove)), this.spaceBelow !== "" && (e.paddingBottom = Me(this.spaceBelow)), this.textIndent !== "" && (e.textIndent = Me(this.textIndent), Pu(e)), this.lineHeight > 0 && (e.lineHeight = Me(this.lineHeight)), this.tabDefault !== "" && (e.tabSize = Me(this.tabDefault)), this.tabStops.length > 0, this.hyphenatation && Object.assign(e, this.hyphenatation[Je]()), e;
  }
}
class Op extends U {
  constructor(e) {
    super(ne, "passwordEdit", !0), this.hScrollPolicy = V(e.hScrollPolicy, ["auto", "off", "on"]), this.id = e.id || "", this.passwordChar = e.passwordChar || "*", this.use = e.use || "", this.usehref = e.usehref || "", this.border = null, this.extras = null, this.margin = null;
  }
}
class Lp extends U {
  constructor(e) {
    super(ne, "pattern", !0), this.id = e.id || "", this.type = V(e.type, ["crossHatch", "crossDiagonal", "diagonalLeft", "diagonalRight", "horizontal", "vertical"]), this.use = e.use || "", this.usehref = e.usehref || "", this.color = null, this.extras = null;
  }
  [Je](e) {
    e = e ? e[Je]() : "#FFFFFF";
    const n = this.color ? this.color[Je]() : "#000000", i = 5, s = "repeating-linear-gradient", a = `${e},${e} ${i}px,${n} ${i}px,${n} ${2 * i}px`;
    switch (this.type) {
      case "crossHatch":
        return `${s}(to top,${a}) ${s}(to right,${a})`;
      case "crossDiagonal":
        return `${s}(45deg,${a}) ${s}(-45deg,${a})`;
      case "diagonalLeft":
        return `${s}(45deg,${a})`;
      case "diagonalRight":
        return `${s}(-45deg,${a})`;
      case "horizontal":
        return `${s}(to top,${a})`;
      case "vertical":
        return `${s}(to right,${a})`;
    }
    return "";
  }
}
class _p extends $e {
  constructor(e) {
    super(ne, "picture"), this.id = e.id || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class Up extends U {
  constructor(e) {
    super(ne, "proto", !0), this.appearanceFilter = new v(), this.arc = new v(), this.area = new v(), this.assist = new v(), this.barcode = new v(), this.bindItems = new v(), this.bookend = new v(), this.boolean = new v(), this.border = new v(), this.break = new v(), this.breakAfter = new v(), this.breakBefore = new v(), this.button = new v(), this.calculate = new v(), this.caption = new v(), this.certificate = new v(), this.certificates = new v(), this.checkButton = new v(), this.choiceList = new v(), this.color = new v(), this.comb = new v(), this.connect = new v(), this.contentArea = new v(), this.corner = new v(), this.date = new v(), this.dateTime = new v(), this.dateTimeEdit = new v(), this.decimal = new v(), this.defaultUi = new v(), this.desc = new v(), this.digestMethod = new v(), this.digestMethods = new v(), this.draw = new v(), this.edge = new v(), this.encoding = new v(), this.encodings = new v(), this.encrypt = new v(), this.encryptData = new v(), this.encryption = new v(), this.encryptionMethod = new v(), this.encryptionMethods = new v(), this.event = new v(), this.exData = new v(), this.exObject = new v(), this.exclGroup = new v(), this.execute = new v(), this.extras = new v(), this.field = new v(), this.fill = new v(), this.filter = new v(), this.float = new v(), this.font = new v(), this.format = new v(), this.handler = new v(), this.hyphenation = new v(), this.image = new v(), this.imageEdit = new v(), this.integer = new v(), this.issuers = new v(), this.items = new v(), this.keep = new v(), this.keyUsage = new v(), this.line = new v(), this.linear = new v(), this.lockDocument = new v(), this.manifest = new v(), this.margin = new v(), this.mdp = new v(), this.medium = new v(), this.message = new v(), this.numericEdit = new v(), this.occur = new v(), this.oid = new v(), this.oids = new v(), this.overflow = new v(), this.pageArea = new v(), this.pageSet = new v(), this.para = new v(), this.passwordEdit = new v(), this.pattern = new v(), this.picture = new v(), this.radial = new v(), this.reason = new v(), this.reasons = new v(), this.rectangle = new v(), this.ref = new v(), this.script = new v(), this.setProperty = new v(), this.signData = new v(), this.signature = new v(), this.signing = new v(), this.solid = new v(), this.speak = new v(), this.stipple = new v(), this.subform = new v(), this.subformSet = new v(), this.subjectDN = new v(), this.subjectDNs = new v(), this.submit = new v(), this.text = new v(), this.textEdit = new v(), this.time = new v(), this.timeStamp = new v(), this.toolTip = new v(), this.traversal = new v(), this.traverse = new v(), this.ui = new v(), this.validate = new v(), this.value = new v(), this.variables = new v();
  }
}
class jp extends U {
  constructor(e) {
    super(ne, "radial", !0), this.id = e.id || "", this.type = V(e.type, ["toEdge", "toCenter"]), this.use = e.use || "", this.usehref = e.usehref || "", this.color = null, this.extras = null;
  }
  [Je](e) {
    e = e ? e[Je]() : "#FFFFFF";
    const n = this.color ? this.color[Je]() : "#000000";
    return `radial-gradient(circle at center, ${this.type === "toEdge" ? `${e},${n}` : `${n},${e}`})`;
  }
}
class qp extends $e {
  constructor(e) {
    super(ne, "reason"), this.id = e.id || "", this.name = e.name || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class Hp extends U {
  constructor(e) {
    super(ne, "reasons", !0), this.id = e.id || "", this.type = V(e.type, ["optional", "required"]), this.use = e.use || "", this.usehref = e.usehref || "", this.reason = new v();
  }
}
class ed extends U {
  constructor(e) {
    super(ne, "rectangle", !0), this.hand = V(e.hand, ["even", "left", "right"]), this.id = e.id || "", this.use = e.use || "", this.usehref = e.usehref || "", this.corner = new v(4), this.edge = new v(4), this.fill = null;
  }
  [Te]() {
    var l;
    const e = this.edge.children.length ? this.edge.children[0] : new or({}), n = e[Je](), i = /* @__PURE__ */ Object.create(null);
    ((l = this.fill) == null ? void 0 : l.presence) === "visible" ? Object.assign(i, this.fill[Je]()) : i.fill = "transparent", i.strokeWidth = Me(e.presence === "visible" ? e.thickness : 0), i.stroke = n.color;
    const a = (this.corner.children.length ? this.corner.children[0] : new Ku({}))[Je](), o = {
      name: "svg",
      children: [{
        name: "rect",
        attributes: {
          xmlns: Ps,
          width: "100%",
          height: "100%",
          x: 0,
          y: 0,
          rx: a.radius,
          ry: a.radius,
          style: i
        }
      }],
      attributes: {
        xmlns: Ps,
        style: {
          overflow: "visible"
        },
        width: "100%",
        height: "100%"
      }
    }, c = this[Ne]()[Ne]();
    return h1(c) ? Ce.success({
      name: "div",
      attributes: {
        style: {
          display: "inline",
          width: "100%",
          height: "100%"
        }
      },
      children: [o]
    }) : (o.attributes.style.position = "absolute", Ce.success(o));
  }
}
class Gp extends $e {
  constructor(e) {
    super(ne, "ref"), this.id = e.id || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class $p extends $e {
  constructor(e) {
    super(ne, "script"), this.binding = e.binding || "", this.contentType = e.contentType || "", this.id = e.id || "", this.name = e.name || "", this.runAt = V(e.runAt, ["client", "both", "server"]), this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class vl extends U {
  constructor(e) {
    super(ne, "setProperty"), this.connection = e.connection || "", this.ref = e.ref || "", this.target = e.target || "";
  }
}
class zp extends U {
  constructor(e) {
    super(ne, "signData", !0), this.id = e.id || "", this.operation = V(e.operation, ["sign", "clear", "verify"]), this.ref = e.ref || "", this.target = e.target || "", this.use = e.use || "", this.usehref = e.usehref || "", this.filter = null, this.manifest = null;
  }
}
class Wp extends U {
  constructor(e) {
    super(ne, "signature", !0), this.id = e.id || "", this.type = V(e.type, ["PDF1.3", "PDF1.6"]), this.use = e.use || "", this.usehref = e.usehref || "", this.border = null, this.extras = null, this.filter = null, this.manifest = null, this.margin = null;
  }
}
class Vp extends U {
  constructor(e) {
    super(ne, "signing", !0), this.id = e.id || "", this.type = V(e.type, ["optional", "required"]), this.use = e.use || "", this.usehref = e.usehref || "", this.certificate = new v();
  }
}
class Xp extends U {
  constructor(e) {
    super(ne, "solid", !0), this.id = e.id || "", this.use = e.use || "", this.usehref = e.usehref || "", this.extras = null;
  }
  [Je](e) {
    return e ? e[Je]() : "#FFFFFF";
  }
}
class Kp extends $e {
  constructor(e) {
    super(ne, "speak"), this.disable = De({
      data: e.disable,
      defaultValue: 0,
      validate: (n) => n === 1
    }), this.id = e.id || "", this.priority = V(e.priority, ["custom", "caption", "name", "toolTip"]), this.rid = e.rid || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class Yp extends U {
  constructor(e) {
    super(ne, "stipple", !0), this.id = e.id || "", this.rate = De({
      data: e.rate,
      defaultValue: 50,
      validate: (n) => n >= 0 && n <= 100
    }), this.use = e.use || "", this.usehref = e.usehref || "", this.color = null, this.extras = null;
  }
  [Je](e) {
    const n = this.rate / 100;
    return tt.makeHexColor(Math.round(e.value.r * (1 - n) + this.value.r * n), Math.round(e.value.g * (1 - n) + this.value.g * n), Math.round(e.value.b * (1 - n) + this.value.b * n));
  }
}
class td extends U {
  constructor(e) {
    super(ne, "subform", !0), this.access = V(e.access, ["open", "nonInteractive", "protected", "readOnly"]), this.allowMacro = De({
      data: e.allowMacro,
      defaultValue: 0,
      validate: (n) => n === 1
    }), this.anchorType = V(e.anchorType, ["topLeft", "bottomCenter", "bottomLeft", "bottomRight", "middleCenter", "middleLeft", "middleRight", "topCenter", "topRight"]), this.colSpan = De({
      data: e.colSpan,
      defaultValue: 1,
      validate: (n) => n >= 1 || n === -1
    }), this.columnWidths = (e.columnWidths || "").trim().split(/\s+/).map((n) => n === "-1" ? -1 : ge(n)), this.h = e.h ? ge(e.h) : "", this.hAlign = V(e.hAlign, ["left", "center", "justify", "justifyAll", "radix", "right"]), this.id = e.id || "", this.layout = V(e.layout, ["position", "lr-tb", "rl-row", "rl-tb", "row", "table", "tb"]), this.locale = e.locale || "", this.maxH = ge(e.maxH, "0pt"), this.maxW = ge(e.maxW, "0pt"), this.mergeMode = V(e.mergeMode, ["consumeData", "matchTemplate"]), this.minH = ge(e.minH, "0pt"), this.minW = ge(e.minW, "0pt"), this.name = e.name || "", this.presence = V(e.presence, ["visible", "hidden", "inactive", "invisible"]), this.relevant = ci(e.relevant), this.restoreState = V(e.restoreState, ["manual", "auto"]), this.scope = V(e.scope, ["name", "none"]), this.use = e.use || "", this.usehref = e.usehref || "", this.w = e.w ? ge(e.w) : "", this.x = ge(e.x, "0pt"), this.y = ge(e.y, "0pt"), this.assist = null, this.bind = null, this.bookend = null, this.border = null, this.break = null, this.calculate = null, this.desc = null, this.extras = null, this.keep = null, this.margin = null, this.occur = null, this.overflow = null, this.pageSet = null, this.para = null, this.traversal = null, this.validate = null, this.variables = null, this.area = new v(), this.breakAfter = new v(), this.breakBefore = new v(), this.connect = new v(), this.draw = new v(), this.event = new v(), this.exObject = new v(), this.exclGroup = new v(), this.field = new v(), this.proto = new v(), this.setProperty = new v(), this.subform = new v(), this.subformSet = new v();
  }
  [Et]() {
    const e = this[Ne]();
    return e instanceof g1 ? e[Et]() : e;
  }
  [Hs]() {
    return !0;
  }
  [Hi]() {
    return this.layout.endsWith("-tb") && this[N].attempt === 0 && this[N].numberInLine > 0 || this[Ne]()[Hi]();
  }
  *[Ma]() {
    yield* u1(this);
  }
  [ar]() {
    return ju(this);
  }
  [Rs](e, n) {
    qu(this, e, n);
  }
  [Ms]() {
    return Hu(this);
  }
  [Li]() {
    var n;
    const e = this[Et]();
    return e[Li]() ? this[N]._isSplittable !== void 0 ? this[N]._isSplittable : this.layout === "position" || this.layout.includes("row") ? (this[N]._isSplittable = !1, !1) : this.keep && this.keep.intact !== "none" ? (this[N]._isSplittable = !1, !1) : (n = e.layout) != null && n.endsWith("-tb") && e[N].numberInLine !== 0 ? !1 : (this[N]._isSplittable = !0, !0) : !1;
  }
  [Te](e) {
    var y;
    if (Ko(this), this.break) {
      if (this.break.after !== "auto" || this.break.afterTarget !== "") {
        const k = new zu({
          targetType: this.break.after,
          target: this.break.afterTarget,
          startNew: this.break.startNew.toString()
        });
        k[ft] = this[ft], this[St](k), this.breakAfter.push(k);
      }
      if (this.break.before !== "auto" || this.break.beforeTarget !== "") {
        const k = new Wu({
          targetType: this.break.before,
          target: this.break.beforeTarget,
          startNew: this.break.startNew.toString()
        });
        k[ft] = this[ft], this[St](k), this.breakBefore.push(k);
      }
      if (this.break.overflowTarget !== "") {
        const k = new Qu({
          target: this.break.overflowTarget,
          leader: this.break.overflowLeader,
          trailer: this.break.overflowTrailer
        });
        k[ft] = this[ft], this[St](k), this.overflow.push(k);
      }
      this[as](this.break), this.break = null;
    }
    if (this.presence === "hidden" || this.presence === "inactive")
      return Ce.EMPTY;
    if ((this.breakBefore.children.length > 1 || this.breakAfter.children.length > 1) && I("XFA - Several breakBefore or breakAfter in subforms: please file a bug."), this.breakBefore.children.length >= 1) {
      const k = this.breakBefore.children[0];
      if (Wh(k))
        return Ce.breakNode(k);
    }
    if ((y = this[N]) != null && y.afterBreakAfter)
      return Ce.EMPTY;
    Vo(this);
    const n = [], i = {
      id: this[rt],
      class: []
    };
    l1(this, i.class), this[N] || (this[N] = /* @__PURE__ */ Object.create(null)), Object.assign(this[N], {
      children: n,
      line: null,
      attributes: i,
      attempt: 0,
      numberInLine: 0,
      availableSpace: {
        width: Math.min(this.w || 1 / 0, e.width),
        height: Math.min(this.h || 1 / 0, e.height)
      },
      width: 0,
      height: 0,
      prevHeight: 0,
      currentWidth: 0
    });
    const s = this[Ft](), a = s[N].noLayoutFailure, r = this[Li]();
    if (r || Zo(this), !Xo(this, e))
      return Ce.FAILURE;
    const o = /* @__PURE__ */ new Set(["area", "draw", "exclGroup", "field", "subform", "subformSet"]);
    if (this.layout.includes("row")) {
      const k = this[Et]().columnWidths;
      Array.isArray(k) && k.length > 0 && (this[N].columnWidths = k, this[N].currentColumn = 0);
    }
    const c = wn(this, "anchorType", "dimensions", "position", "presence", "border", "margin", "hAlign"), l = ["xfaSubform"], h = Du(this);
    if (h && l.push(h), i.style = c, i.class = l, this.name && (i.xfaName = this.name), this.overflow) {
      const k = this.overflow[tn]();
      k.addLeader && (k.addLeader = !1, Vh(this, k.leader, e));
    }
    this[La]();
    const f = this.layout === "lr-tb" || this.layout === "rl-tb", u = f ? xo : 1;
    for (; this[N].attempt < u; this[N].attempt++) {
      f && this[N].attempt === xo - 1 && (this[N].numberInLine = 0);
      const k = this[os]({
        filter: o,
        include: !0
      });
      if (k.success)
        break;
      if (k.isBreak())
        return this[Sn](), k;
      if (f && this[N].attempt === 0 && this[N].numberInLine === 0 && !s[N].noLayoutFailure) {
        this[N].attempt = u;
        break;
      }
    }
    if (this[Sn](), r || Jo(this), s[N].noLayoutFailure = a, this[N].attempt === u)
      return this.overflow && (this[Ft]()[N].overflowNode = this.overflow), r || delete this[N], Ce.FAILURE;
    if (this.overflow) {
      const k = this.overflow[tn]();
      k.addTrailer && (k.addTrailer = !1, Vh(this, k.trailer, e));
    }
    let d = 0, x = 0;
    this.margin && (d = this.margin.leftInset + this.margin.rightInset, x = this.margin.topInset + this.margin.bottomInset);
    const g = Math.max(this[N].width + d, this.w || 0), m = Math.max(this[N].height + x, this.h || 0), p = [this.x, this.y, g, m];
    if (this.w === "" && (c.width = Me(g)), this.h === "" && (c.height = Me(m)), (c.width === "0px" || c.height === "0px") && n.length === 0)
      return Ce.EMPTY;
    const b = {
      name: "div",
      attributes: i,
      children: n
    };
    Yo(this, i);
    const w = Ce.success(Ds(this, b), p);
    if (this.breakAfter.children.length >= 1) {
      const k = this.breakAfter.children[0];
      if (Wh(k))
        return this[N].afterBreakAfter = w, Ce.breakNode(k);
    }
    return delete this[N], w;
  }
}
class g1 extends U {
  constructor(e) {
    super(ne, "subformSet", !0), this.id = e.id || "", this.name = e.name || "", this.relation = V(e.relation, ["ordered", "choice", "unordered"]), this.relevant = ci(e.relevant), this.use = e.use || "", this.usehref = e.usehref || "", this.bookend = null, this.break = null, this.desc = null, this.extras = null, this.occur = null, this.overflow = null, this.breakAfter = new v(), this.breakBefore = new v(), this.subform = new v(), this.subformSet = new v();
  }
  *[Ma]() {
    yield* u1(this);
  }
  [Et]() {
    let e = this[Ne]();
    for (; !(e instanceof td); )
      e = e[Ne]();
    return e;
  }
  [Hs]() {
    return !0;
  }
}
class Zp extends vt {
  constructor(e) {
    super(ne, "subjectDN"), this.delimiter = e.delimiter || ",", this.id = e.id || "", this.name = e.name || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
  [ut]() {
    this[$] = new Map(this[$].split(this.delimiter).map((e) => (e = e.split("=", 2), e[0] = e[0].trim(), e)));
  }
}
class Jp extends U {
  constructor(e) {
    super(ne, "subjectDNs", !0), this.id = e.id || "", this.type = V(e.type, ["optional", "required"]), this.use = e.use || "", this.usehref = e.usehref || "", this.subjectDN = new v();
  }
}
class Qp extends U {
  constructor(e) {
    super(ne, "submit", !0), this.embedPDF = De({
      data: e.embedPDF,
      defaultValue: 0,
      validate: (n) => n === 1
    }), this.format = V(e.format, ["xdp", "formdata", "pdf", "urlencoded", "xfd", "xml"]), this.id = e.id || "", this.target = e.target || "", this.textEncoding = Wo({
      data: e.textEncoding ? e.textEncoding.toLowerCase() : "",
      defaultValue: "",
      validate: (n) => ["utf-8", "big-five", "fontspecific", "gbk", "gb-18030", "gb-2312", "ksc-5601", "none", "shift-jis", "ucs-2", "utf-16"].includes(n) || n.match(/iso-8859-\d{2}/)
    }), this.use = e.use || "", this.usehref = e.usehref || "", this.xdpContent = e.xdpContent || "", this.encrypt = null, this.encryptData = new v(), this.signData = new v();
  }
}
class p1 extends U {
  constructor(e) {
    super(ne, "template", !0), this.baseProfile = V(e.baseProfile, ["full", "interactiveForms"]), this.extras = null, this.subform = new v();
  }
  [ut]() {
    this.subform.children.length === 0 && I("XFA - No subforms in template node."), this.subform.children.length >= 2 && I("XFA - Several subforms in template node: please file a bug."), this[ei] = v3;
  }
  [Li]() {
    return !0;
  }
  [Pi](e, n) {
    return e.startsWith("#") ? [this[ta].get(e.slice(1))] : Wi(this, n, e, !0, !0);
  }
  *[Iu]() {
    var x, g, m;
    if (!this.subform.children.length)
      return Ce.success({
        name: "div",
        children: []
      });
    this[N] = {
      overflowNode: null,
      firstUnsplittable: null,
      currentContentArea: null,
      currentPageArea: null,
      noLayoutFailure: !1,
      pageNumber: 1,
      pagePosition: "first",
      oddOrEven: "odd",
      blankOrNotBlank: "nonBlank",
      paraStack: []
    };
    const e = this.subform.children[0];
    e.pageSet[ia]();
    const n = e.pageSet.pageArea.children, i = {
      name: "div",
      children: []
    };
    let s = null, a = null, r = null;
    if (e.breakBefore.children.length >= 1 ? (a = e.breakBefore.children[0], r = a.target) : e.subform.children.length >= 1 && e.subform.children[0].breakBefore.children.length >= 1 ? (a = e.subform.children[0].breakBefore.children[0], r = a.target) : (x = e.break) != null && x.beforeTarget ? (a = e.break, r = a.beforeTarget) : e.subform.children.length >= 1 && ((g = e.subform.children[0].break) != null && g.beforeTarget) && (a = e.subform.children[0].break, r = a.beforeTarget), a) {
      const p = this[Pi](r, a[Ne]());
      p instanceof Da && (s = p, a[N] = {});
    }
    s || (s = n[0]), s[N] = {
      numberOfUse: 1
    };
    const o = s[Ne]();
    o[N] = {
      numberOfUse: 1,
      pageIndex: o.pageArea.children.indexOf(s),
      pageSetIndex: 0
    };
    let c, l = null, h = null, f = !0, u = 0, d = 0;
    for (; ; ) {
      if (f)
        u = 0;
      else if (i.children.pop(), ++u === A3)
        return I("XFA - Something goes wrong: please file a bug."), i;
      c = null, this[N].currentPageArea = s;
      const p = s[Te]().html;
      i.children.push(p), l && (this[N].noLayoutFailure = !0, p.children.push(l[Te](s[N].space).html), l = null), h && (this[N].noLayoutFailure = !0, p.children.push(h[Te](s[N].space).html), h = null);
      const b = s.contentArea.children, w = p.children.filter((k) => k.attributes.class.includes("xfaContentarea"));
      f = !1, this[N].firstUnsplittable = null, this[N].noLayoutFailure = !1;
      const y = (k) => {
        var C;
        const S = e[ar]();
        S && (f || (f = ((C = S.children) == null ? void 0 : C.length) > 0), w[k].children.push(S));
      };
      for (let k = d, S = b.length; k < S; k++) {
        const C = this[N].currentContentArea = b[k], T = {
          width: C.w,
          height: C.h
        };
        d = 0, l && (w[k].children.push(l[Te](T).html), l = null), h && (w[k].children.push(h[Te](T).html), h = null);
        const F = e[Te](T);
        if (F.success)
          return F.html ? (f || (f = ((m = F.html.children) == null ? void 0 : m.length) > 0), w[k].children.push(F.html)) : !f && i.children.length > 1 && i.children.pop(), i;
        if (F.isBreak()) {
          const R = F.breakNode;
          if (y(k), R.targetType === "auto")
            continue;
          R.leader && (l = this[Pi](R.leader, R[Ne]()), l = l ? l[0] : null), R.trailer && (h = this[Pi](R.trailer, R[Ne]()), h = h ? h[0] : null), R.targetType === "pageArea" ? (c = R[N].target, k = 1 / 0) : R[N].target ? (c = R[N].target, d = R[N].index + 1, k = 1 / 0) : k = R[N].index;
          continue;
        }
        if (this[N].overflowNode) {
          const R = this[N].overflowNode;
          this[N].overflowNode = null;
          const D = R[tn](), M = D.target;
          D.addLeader = D.leader !== null, D.addTrailer = D.trailer !== null, y(k);
          const _ = k;
          if (k = 1 / 0, M instanceof Da)
            c = M;
          else if (M instanceof d1) {
            const K = b.indexOf(M);
            K !== -1 ? K > _ ? k = K - 1 : d = K : (c = M[Ne](), d = c.contentArea.children.indexOf(M));
          }
          continue;
        }
        y(k);
      }
      this[N].pageNumber += 1, c && (c[O0]() ? c[N].numberOfUse += 1 : c = null), s = c || s[Ri](), yield null;
    }
  }
}
class nd extends vt {
  constructor(e) {
    super(ne, "text"), this.id = e.id || "", this.maxChars = De({
      data: e.maxChars,
      defaultValue: 0,
      validate: (n) => n >= 0
    }), this.name = e.name || "", this.rid = e.rid || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
  [Go]() {
    return !0;
  }
  [wi](e) {
    return e[Bt] === Rt.xhtml.id ? (this[$] = e, !0) : (I(`XFA - Invalid content in Text: ${e[et]}.`), !1);
  }
  [_i](e) {
    this[$] instanceof U || super[_i](e);
  }
  [ut]() {
    typeof this[$] == "string" && (this[$] = this[$].replaceAll(`\r
`, `
`));
  }
  [tn]() {
    return typeof this[$] == "string" ? this[$].split(/[\u2029\u2028\n]/).filter((e) => !!e).join(`
`) : this[$][jt]();
  }
  [Te](e) {
    if (typeof this[$] == "string") {
      const n = cs(this[$]).html;
      return this[$].includes("\u2029") ? (n.name = "div", n.children = [], this[$].split("\u2029").map((i) => i.split(/[\u2028\n]/).flatMap((s) => [{
        name: "span",
        value: s
      }, {
        name: "br"
      }])).forEach((i) => {
        n.children.push({
          name: "p",
          children: i
        });
      })) : /[\u2028\n]/.test(this[$]) && (n.name = "div", n.children = [], this[$].split(/[\u2028\n]/).forEach((i) => {
        n.children.push({
          name: "span",
          value: i
        }, {
          name: "br"
        });
      })), Ce.success(n);
    }
    return this[$][Te](e);
  }
}
class id extends U {
  constructor(e) {
    super(ne, "textEdit", !0), this.allowRichText = De({
      data: e.allowRichText,
      defaultValue: 0,
      validate: (n) => n === 1
    }), this.hScrollPolicy = V(e.hScrollPolicy, ["auto", "off", "on"]), this.id = e.id || "", this.multiLine = De({
      data: e.multiLine,
      defaultValue: "",
      validate: (n) => n === 0 || n === 1
    }), this.use = e.use || "", this.usehref = e.usehref || "", this.vScrollPolicy = V(e.vScrollPolicy, ["auto", "off", "on"]), this.border = null, this.comb = null, this.extras = null, this.margin = null;
  }
  [Te](e) {
    var a, r;
    const n = wn(this, "border", "font", "margin");
    let i;
    const s = this[Ne]()[Ne]();
    return this.multiLine === "" && (this.multiLine = s instanceof Yu ? 1 : 0), this.multiLine === 1 ? i = {
      name: "textarea",
      attributes: {
        dataId: ((a = s[zn]) == null ? void 0 : a[rt]) || s[rt],
        fieldId: s[rt],
        class: ["xfaTextfield"],
        style: n,
        "aria-label": _s(s),
        "aria-required": !1
      }
    } : i = {
      name: "input",
      attributes: {
        type: "text",
        dataId: ((r = s[zn]) == null ? void 0 : r[rt]) || s[rt],
        fieldId: s[rt],
        class: ["xfaTextfield"],
        style: n,
        "aria-label": _s(s),
        "aria-required": !1
      }
    }, rr(s) && (i.attributes["aria-required"] = !0, i.attributes.required = !0), Ce.success({
      name: "label",
      attributes: {
        class: ["xfaLabel"]
      },
      children: [i]
    });
  }
}
class e7 extends $e {
  constructor(e) {
    super(ne, "time"), this.id = e.id || "", this.name = e.name || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
  [ut]() {
    const e = this[$].trim();
    this[$] = e ? new Date(e) : null;
  }
  [Te](e) {
    return cs(this[$] ? this[$].toString() : "");
  }
}
class t7 extends U {
  constructor(e) {
    super(ne, "timeStamp"), this.id = e.id || "", this.server = e.server || "", this.type = V(e.type, ["optional", "required"]), this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class n7 extends $e {
  constructor(e) {
    super(ne, "toolTip"), this.id = e.id || "", this.rid = e.rid || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class i7 extends U {
  constructor(e) {
    super(ne, "traversal", !0), this.id = e.id || "", this.use = e.use || "", this.usehref = e.usehref || "", this.extras = null, this.traverse = new v();
  }
}
class s7 extends U {
  constructor(e) {
    super(ne, "traverse", !0), this.id = e.id || "", this.operation = V(e.operation, ["next", "back", "down", "first", "left", "right", "up"]), this.ref = e.ref || "", this.use = e.use || "", this.usehref = e.usehref || "", this.extras = null, this.script = null;
  }
  get name() {
    return this.operation;
  }
  [N0]() {
    return !1;
  }
}
class m1 extends U {
  constructor(e) {
    super(ne, "ui", !0), this.id = e.id || "", this.use = e.use || "", this.usehref = e.usehref || "", this.extras = null, this.picture = null, this.barcode = null, this.button = null, this.checkButton = null, this.choiceList = null, this.dateTimeEdit = null, this.defaultUi = null, this.imageEdit = null, this.numericEdit = null, this.passwordEdit = null, this.signature = null, this.textEdit = null;
  }
  [tn]() {
    if (this[N] === void 0) {
      for (const e of Object.getOwnPropertyNames(this)) {
        if (e === "extras" || e === "picture")
          continue;
        const n = this[e];
        if (n instanceof U)
          return this[N] = n, n;
      }
      this[N] = null;
    }
    return this[N];
  }
  [Te](e) {
    const n = this[tn]();
    return n ? n[Te](e) : Ce.EMPTY;
  }
}
class a7 extends U {
  constructor(e) {
    super(ne, "validate", !0), this.formatTest = V(e.formatTest, ["warning", "disabled", "error"]), this.id = e.id || "", this.nullTest = V(e.nullTest, ["disabled", "error", "warning"]), this.scriptTest = V(e.scriptTest, ["error", "disabled", "warning"]), this.use = e.use || "", this.usehref = e.usehref || "", this.extras = null, this.message = null, this.picture = null, this.script = null;
  }
}
class b1 extends U {
  constructor(e) {
    super(ne, "value", !0), this.id = e.id || "", this.override = De({
      data: e.override,
      defaultValue: 0,
      validate: (n) => n === 1
    }), this.relevant = ci(e.relevant), this.use = e.use || "", this.usehref = e.usehref || "", this.arc = null, this.boolean = null, this.date = null, this.dateTime = null, this.decimal = null, this.exData = null, this.float = null, this.image = null, this.integer = null, this.line = null, this.rectangle = null, this.text = null, this.time = null;
  }
  [vn](e) {
    var s;
    const n = this[Ne]();
    if (n instanceof x1 && (s = n.ui) != null && s.imageEdit) {
      this.image || (this.image = new Ju({}), this[St](this.image)), this.image[$] = e[$];
      return;
    }
    const i = e[et];
    if (this[i] !== null) {
      this[i][$] = e[$];
      return;
    }
    for (const a of Object.getOwnPropertyNames(this)) {
      const r = this[a];
      r instanceof U && (this[a] = null, this[as](r));
    }
    this[e[et]] = e, this[St](e);
  }
  [jt]() {
    if (this.exData)
      return typeof this.exData[$] == "string" ? this.exData[$].trim() : this.exData[$][jt]().trim();
    for (const e of Object.getOwnPropertyNames(this)) {
      if (e === "image")
        continue;
      const n = this[e];
      if (n instanceof U)
        return (n[$] || "").toString().trim();
    }
    return null;
  }
  [Te](e) {
    for (const n of Object.getOwnPropertyNames(this)) {
      const i = this[n];
      if (i instanceof U)
        return i[Te](e);
    }
    return Ce.EMPTY;
  }
}
class r7 extends U {
  constructor(e) {
    super(ne, "variables", !0), this.id = e.id || "", this.use = e.use || "", this.usehref = e.usehref || "", this.boolean = new v(), this.date = new v(), this.dateTime = new v(), this.decimal = new v(), this.exData = new v(), this.float = new v(), this.image = new v(), this.integer = new v(), this.manifest = new v(), this.script = new v(), this.text = new v(), this.time = new v();
  }
  [N0]() {
    return !0;
  }
}
class go {
  static [oi](e, n) {
    if (go.hasOwnProperty(e)) {
      const i = go[e](n);
      return i[vu](n), i;
    }
  }
  static appearanceFilter(e) {
    return new B3(e);
  }
  static arc(e) {
    return new Gu(e);
  }
  static area(e) {
    return new E3(e);
  }
  static assist(e) {
    return new R3(e);
  }
  static barcode(e) {
    return new M3(e);
  }
  static bind(e) {
    return new D3(e);
  }
  static bindItems(e) {
    return new Cl(e);
  }
  static bookend(e) {
    return new P3(e);
  }
  static boolean(e) {
    return new N3(e);
  }
  static border(e) {
    return new $u(e);
  }
  static break(e) {
    return new O3(e);
  }
  static breakAfter(e) {
    return new zu(e);
  }
  static breakBefore(e) {
    return new Wu(e);
  }
  static button(e) {
    return new L3(e);
  }
  static calculate(e) {
    return new _3(e);
  }
  static caption(e) {
    return new U3(e);
  }
  static certificate(e) {
    return new j3(e);
  }
  static certificates(e) {
    return new q3(e);
  }
  static checkButton(e) {
    return new Vu(e);
  }
  static choiceList(e) {
    return new Xu(e);
  }
  static color(e) {
    return new H3(e);
  }
  static comb(e) {
    return new G3(e);
  }
  static connect(e) {
    return new $3(e);
  }
  static contentArea(e) {
    return new d1(e);
  }
  static corner(e) {
    return new Ku(e);
  }
  static date(e) {
    return new z3(e);
  }
  static dateTime(e) {
    return new W3(e);
  }
  static dateTimeEdit(e) {
    return new V3(e);
  }
  static decimal(e) {
    return new X3(e);
  }
  static defaultUi(e) {
    return new K3(e);
  }
  static desc(e) {
    return new Y3(e);
  }
  static digestMethod(e) {
    return new Z3(e);
  }
  static digestMethods(e) {
    return new J3(e);
  }
  static draw(e) {
    return new Yu(e);
  }
  static edge(e) {
    return new or(e);
  }
  static encoding(e) {
    return new Q3(e);
  }
  static encodings(e) {
    return new ep(e);
  }
  static encrypt(e) {
    return new tp(e);
  }
  static encryptData(e) {
    return new np(e);
  }
  static encryption(e) {
    return new ip(e);
  }
  static encryptionMethod(e) {
    return new sp(e);
  }
  static encryptionMethods(e) {
    return new ap(e);
  }
  static event(e) {
    return new rp(e);
  }
  static exData(e) {
    return new op(e);
  }
  static exObject(e) {
    return new cp(e);
  }
  static exclGroup(e) {
    return new Zu(e);
  }
  static execute(e) {
    return new lp(e);
  }
  static extras(e) {
    return new hp(e);
  }
  static field(e) {
    return new x1(e);
  }
  static fill(e) {
    return new fp(e);
  }
  static filter(e) {
    return new up(e);
  }
  static float(e) {
    return new dp(e);
  }
  static font(e) {
    return new xp(e);
  }
  static format(e) {
    return new gp(e);
  }
  static handler(e) {
    return new pp(e);
  }
  static hyphenation(e) {
    return new mp(e);
  }
  static image(e) {
    return new Ju(e);
  }
  static imageEdit(e) {
    return new bp(e);
  }
  static integer(e) {
    return new wp(e);
  }
  static issuers(e) {
    return new yp(e);
  }
  static items(e) {
    return new Al(e);
  }
  static keep(e) {
    return new kp(e);
  }
  static keyUsage(e) {
    return new Sp(e);
  }
  static line(e) {
    return new Cp(e);
  }
  static linear(e) {
    return new Ap(e);
  }
  static lockDocument(e) {
    return new vp(e);
  }
  static manifest(e) {
    return new Ip(e);
  }
  static margin(e) {
    return new Tp(e);
  }
  static mdp(e) {
    return new Fp(e);
  }
  static medium(e) {
    return new Bp(e);
  }
  static message(e) {
    return new Ep(e);
  }
  static numericEdit(e) {
    return new Rp(e);
  }
  static occur(e) {
    return new Mp(e);
  }
  static oid(e) {
    return new Dp(e);
  }
  static oids(e) {
    return new Pp(e);
  }
  static overflow(e) {
    return new Qu(e);
  }
  static pageArea(e) {
    return new Da(e);
  }
  static pageSet(e) {
    return new L0(e);
  }
  static para(e) {
    return new Np(e);
  }
  static passwordEdit(e) {
    return new Op(e);
  }
  static pattern(e) {
    return new Lp(e);
  }
  static picture(e) {
    return new _p(e);
  }
  static proto(e) {
    return new Up(e);
  }
  static radial(e) {
    return new jp(e);
  }
  static reason(e) {
    return new qp(e);
  }
  static reasons(e) {
    return new Hp(e);
  }
  static rectangle(e) {
    return new ed(e);
  }
  static ref(e) {
    return new Gp(e);
  }
  static script(e) {
    return new $p(e);
  }
  static setProperty(e) {
    return new vl(e);
  }
  static signData(e) {
    return new zp(e);
  }
  static signature(e) {
    return new Wp(e);
  }
  static signing(e) {
    return new Vp(e);
  }
  static solid(e) {
    return new Xp(e);
  }
  static speak(e) {
    return new Kp(e);
  }
  static stipple(e) {
    return new Yp(e);
  }
  static subform(e) {
    return new td(e);
  }
  static subformSet(e) {
    return new g1(e);
  }
  static subjectDN(e) {
    return new Zp(e);
  }
  static subjectDNs(e) {
    return new Jp(e);
  }
  static submit(e) {
    return new Qp(e);
  }
  static template(e) {
    return new p1(e);
  }
  static text(e) {
    return new nd(e);
  }
  static textEdit(e) {
    return new id(e);
  }
  static time(e) {
    return new e7(e);
  }
  static timeStamp(e) {
    return new t7(e);
  }
  static toolTip(e) {
    return new n7(e);
  }
  static traversal(e) {
    return new i7(e);
  }
  static traverse(e) {
    return new s7(e);
  }
  static ui(e) {
    return new m1(e);
  }
  static validate(e) {
    return new a7(e);
  }
  static value(e) {
    return new b1(e);
  }
  static variables(e) {
    return new r7(e);
  }
}
const Xh = Rt.datasets.id;
function Or(t) {
  const e = new nd({});
  return e[$] = t, e;
}
class o7 {
  constructor(e) {
    var n;
    this.root = e, this.datasets = e.datasets, this.data = ((n = e.datasets) == null ? void 0 : n.data) || new yi(Rt.datasets.id, "data"), this.emptyMerge = this.data[Vt]().length === 0, this.root.form = this.form = e.template[ni]();
  }
  _isConsumeData() {
    return !this.emptyMerge && this._mergeMode;
  }
  _isMatchTemplate() {
    return !this._isConsumeData();
  }
  bind() {
    return this._bindElement(this.form, this.data), this.form;
  }
  getData() {
    return this.data;
  }
  _bindValue(e, n, i) {
    var s, a;
    if (e[zn] = n, e[P0]())
      if (n[sa]()) {
        const r = n[s1]();
        e[vn](Or(r));
      } else if (e instanceof x1 && ((a = (s = e.ui) == null ? void 0 : s.choiceList) == null ? void 0 : a.open) === "multiSelect") {
        const r = n[Vt]().map((o) => o[$].trim()).join(`
`);
        e[vn](Or(r));
      } else this._isConsumeData() && I("XFA - Nodes haven't the same type.");
    else !n[sa]() || this._isMatchTemplate() ? this._bindElement(e, n) : I("XFA - Nodes haven't the same type.");
  }
  _findDataByNameToConsume(e, n, i, s) {
    if (!e)
      return null;
    let a, r;
    for (let o = 0; o < 3; o++) {
      for (a = i[d0](e, !1, !0); r = a.next().value, !!r; )
        if (n === r[sa]())
          return r;
      if (i[Bt] === Rt.datasets.id && i[et] === "data")
        break;
      i = i[Ne]();
    }
    return s ? (a = this.data[d0](e, !0, !1), r = a.next().value, r || (a = this.data[bl](e, !0), r = a.next().value, r != null && r[sa]()) ? r : null) : null;
  }
  _setProperties(e, n) {
    if (e.hasOwnProperty("setProperty"))
      for (const {
        ref: i,
        target: s,
        connection: a
      } of e.setProperty.children) {
        if (a || !i)
          continue;
        const r = Wi(this.root, n, i, !1, !1);
        if (!r) {
          I(`XFA - Invalid reference: ${i}.`);
          continue;
        }
        const [o] = r;
        if (!o[Ki](this.data)) {
          I("XFA - Invalid node: must be a data node.");
          continue;
        }
        const c = Wi(this.root, e, s, !1, !1);
        if (!c) {
          I(`XFA - Invalid target: ${s}.`);
          continue;
        }
        const [l] = c;
        if (!l[Ki](e)) {
          I("XFA - Invalid target: must be a property or subproperty.");
          continue;
        }
        const h = l[Ne]();
        if (l instanceof vl || h instanceof vl) {
          I("XFA - Invalid target: cannot be a setProperty or one of its properties.");
          continue;
        }
        if (l instanceof Cl || h instanceof Cl) {
          I("XFA - Invalid target: cannot be a bindItems or one of its properties.");
          continue;
        }
        const f = o[jt](), u = l[et];
        if (l instanceof o1) {
          const d = /* @__PURE__ */ Object.create(null);
          d[u] = f;
          const x = Reflect.construct(Object.getPrototypeOf(h).constructor, [d]);
          h[u] = x[u];
          continue;
        }
        if (!l.hasOwnProperty($)) {
          I("XFA - Invalid node to use in setProperty");
          continue;
        }
        l[zn] = o, l[$] = f, l[ut]();
      }
  }
  _bindItems(e, n) {
    if (!e.hasOwnProperty("items") || !e.hasOwnProperty("bindItems") || e.bindItems.isEmpty())
      return;
    for (const a of e.items.children)
      e[as](a);
    e.items.clear();
    const i = new Al({}), s = new Al({});
    e[St](i), e.items.push(i), e[St](s), e.items.push(s);
    for (const {
      ref: a,
      labelRef: r,
      valueRef: o,
      connection: c
    } of e.bindItems.children) {
      if (c || !a)
        continue;
      const l = Wi(this.root, n, a, !1, !1);
      if (!l) {
        I(`XFA - Invalid reference: ${a}.`);
        continue;
      }
      for (const h of l) {
        if (!h[Ki](this.datasets)) {
          I(`XFA - Invalid ref (${a}): must be a datasets child.`);
          continue;
        }
        const f = Wi(this.root, h, r, !0, !1);
        if (!f) {
          I(`XFA - Invalid label: ${r}.`);
          continue;
        }
        const [u] = f;
        if (!u[Ki](this.datasets)) {
          I("XFA - Invalid label: must be a datasets child.");
          continue;
        }
        const d = Wi(this.root, h, o, !0, !1);
        if (!d) {
          I(`XFA - Invalid value: ${o}.`);
          continue;
        }
        const [x] = d;
        if (!x[Ki](this.datasets)) {
          I("XFA - Invalid value: must be a datasets child.");
          continue;
        }
        const g = Or(u[jt]()), m = Or(x[jt]());
        i[St](g), i.text.push(g), s[St](m), s.text.push(m);
      }
    }
  }
  _bindOccurrences(e, n, i) {
    let s;
    if (n.length > 1 && (s = e[ni](), s[as](s.occur), s.occur = null), this._bindValue(e, n[0], i), this._setProperties(e, n[0]), this._bindItems(e, n[0]), n.length === 1)
      return;
    const a = e[Ne](), r = e[et], o = a[wl](e);
    for (let c = 1, l = n.length; c < l; c++) {
      const h = n[c], f = s[ni]();
      a[r].push(f), a[Jr](o + c, f), this._bindValue(f, h, i), this._setProperties(f, h), this._bindItems(f, h);
    }
  }
  _createOccurrences(e) {
    if (!this.emptyMerge)
      return;
    const {
      occur: n
    } = e;
    if (!n || n.initial <= 1)
      return;
    const i = e[Ne](), s = e[et];
    if (!(i[s] instanceof v))
      return;
    let a;
    e.name ? a = i[s].children.filter((c) => c.name === e.name).length : a = i[s].children.length;
    const r = i[wl](e) + 1, o = n.initial - a;
    if (o) {
      const c = e[ni]();
      c[as](c.occur), c.occur = null, i[s].push(c), i[Jr](r, c);
      for (let l = 1; l < o; l++) {
        const h = c[ni]();
        i[s].push(h), i[Jr](r + l, h);
      }
    }
  }
  _getOccurInfo(e) {
    const {
      name: n,
      occur: i
    } = e;
    if (!i || !n)
      return [1, 1];
    const s = i.max === -1 ? 1 / 0 : i.max;
    return [i.min, s];
  }
  _setAndBind(e, n) {
    this._setProperties(e, n), this._bindItems(e, n), this._bindElement(e, n);
  }
  _bindElement(e, n) {
    const i = [];
    this._createOccurrences(e);
    for (const s of e[Vt]()) {
      if (s[zn])
        continue;
      if (this._mergeMode === void 0 && s[et] === "subform") {
        this._mergeMode = s.mergeMode === "consumeData";
        const f = n[Vt]();
        if (f.length > 0)
          this._bindOccurrences(s, [f[0]], null);
        else if (this.emptyMerge) {
          const u = n[Bt] === Xh ? -1 : n[Bt], d = s[zn] = new yi(u, s.name || "root");
          n[St](d), this._bindElement(s, d);
        }
        continue;
      }
      if (!s[Hs]())
        continue;
      let a = !1, r = null, o = null, c = null;
      if (s.bind) {
        switch (s.bind.match) {
          case "none":
            this._setAndBind(s, n);
            continue;
          case "global":
            a = !0;
            break;
          case "dataRef":
            if (!s.bind.ref) {
              I(`XFA - ref is empty in node ${s[et]}.`), this._setAndBind(s, n);
              continue;
            }
            o = s.bind.ref;
            break;
        }
        s.bind.picture && (r = s.bind.picture[$]);
      }
      const [l, h] = this._getOccurInfo(s);
      if (o)
        if (c = Wi(this.root, n, o, !0, !1), c === null) {
          if (c = S3(this.data, n, o), !c)
            continue;
          this._isConsumeData() && (c[mi] = !0), this._setAndBind(s, c);
          continue;
        } else
          this._isConsumeData() && (c = c.filter((f) => !f[mi])), c.length > h ? c = c.slice(0, h) : c.length === 0 && (c = null), c && this._isConsumeData() && c.forEach((f) => {
            f[mi] = !0;
          });
      else {
        if (!s.name) {
          this._setAndBind(s, n);
          continue;
        }
        if (this._isConsumeData()) {
          const f = [];
          for (; f.length < h; ) {
            const u = this._findDataByNameToConsume(s.name, s[P0](), n, a);
            if (!u)
              break;
            u[mi] = !0, f.push(u);
          }
          c = f.length > 0 ? f : null;
        } else {
          if (c = n[d0](s.name, !1, this.emptyMerge).next().value, !c) {
            if (l === 0) {
              i.push(s);
              continue;
            }
            const f = n[Bt] === Xh ? -1 : n[Bt];
            c = s[zn] = new yi(f, s.name), this.emptyMerge && (c[mi] = !0), n[St](c), this._setAndBind(s, c);
            continue;
          }
          this.emptyMerge && (c[mi] = !0), c = [c];
        }
      }
      c ? this._bindOccurrences(s, c, r) : l > 0 ? this._setAndBind(s, n) : i.push(s);
    }
    i.forEach((s) => s[Ne]()[as](s));
  }
}
class c7 {
  constructor(e, n) {
    this.data = n, this.dataset = e.datasets || null;
  }
  serialize(e) {
    const n = [[-1, this.data[Vt]()]];
    for (; n.length > 0; ) {
      const s = n.at(-1), [a, r] = s;
      if (a + 1 === r.length) {
        n.pop();
        continue;
      }
      const o = r[++s[0]], c = e.get(o[rt]);
      if (c)
        o[vn](c);
      else {
        const h = o[Cu]();
        for (const f of h.values()) {
          const u = e.get(f[rt]);
          if (u) {
            f[vn](u);
            break;
          }
        }
      }
      const l = o[Vt]();
      l.length > 0 && n.push([-1, l]);
    }
    const i = ['<xfa:datasets xmlns:xfa="http://www.xfa.org/schema/xfa-data/1.0/">'];
    if (this.dataset)
      for (const s of this.dataset[Vt]())
        s[et] !== "data" && s[g0](i);
    return this.data[g0](i), i.push("</xfa:datasets>"), i.join("");
  }
}
const X = Rt.config.id;
class l7 extends U {
  constructor(e) {
    super(X, "acrobat", !0), this.acrobat7 = null, this.autoSave = null, this.common = null, this.validate = null, this.validateApprovalSignatures = null, this.submitUrl = new v();
  }
}
class h7 extends U {
  constructor(e) {
    super(X, "acrobat7", !0), this.dynamicRender = null;
  }
}
class f7 extends ot {
  constructor(e) {
    super(X, "ADBE_JSConsole", ["delegate", "Enable", "Disable"]);
  }
}
class u7 extends ot {
  constructor(e) {
    super(X, "ADBE_JSDebugger", ["delegate", "Enable", "Disable"]);
  }
}
class d7 extends qt {
  constructor(e) {
    super(X, "addSilentPrint");
  }
}
class x7 extends qt {
  constructor(e) {
    super(X, "addViewerPreferences");
  }
}
class g7 extends Eu {
  constructor(e) {
    super(X, "adjustData");
  }
}
class p7 extends li {
  constructor(e) {
    super(X, "adobeExtensionLevel", 0, (n) => n >= 1 && n <= 8);
  }
}
class m7 extends U {
  constructor(e) {
    super(X, "agent", !0), this.name = e.name ? e.name.trim() : "", this.common = new v();
  }
}
class b7 extends vt {
  constructor(e) {
    super(X, "alwaysEmbed");
  }
}
class w7 extends $e {
  constructor(e) {
    super(X, "amd");
  }
}
class y7 extends U {
  constructor(e) {
    super(X, "area"), this.level = De({
      data: e.level,
      defaultValue: 0,
      validate: (n) => n >= 1 && n <= 3
    }), this.name = V(e.name, ["", "barcode", "coreinit", "deviceDriver", "font", "general", "layout", "merge", "script", "signature", "sourceSet", "templateCache"]);
  }
}
class k7 extends ot {
  constructor(e) {
    super(X, "attributes", ["preserve", "delegate", "ignore"]);
  }
}
class S7 extends ot {
  constructor(e) {
    super(X, "autoSave", ["disabled", "enabled"]);
  }
}
class C7 extends $e {
  constructor(e) {
    super(X, "base");
  }
}
class A7 extends U {
  constructor(e) {
    super(X, "batchOutput"), this.format = V(e.format, ["none", "concat", "zip", "zipCompress"]);
  }
}
class v7 extends vt {
  constructor(e) {
    super(X, "behaviorOverride");
  }
  [ut]() {
    this[$] = new Map(this[$].trim().split(/\s+/).filter((e) => e.includes(":")).map((e) => e.split(":", 2)));
  }
}
class I7 extends U {
  constructor(e) {
    super(X, "cache", !0), this.templateCache = null;
  }
}
class T7 extends qt {
  constructor(e) {
    super(X, "change");
  }
}
class F7 extends U {
  constructor(e) {
    super(X, "common", !0), this.data = null, this.locale = null, this.localeSet = null, this.messaging = null, this.suppressBanner = null, this.template = null, this.validationMessaging = null, this.versionControl = null, this.log = new v();
  }
}
class B7 extends U {
  constructor(e) {
    super(X, "compress"), this.scope = V(e.scope, ["imageOnly", "document"]);
  }
}
class E7 extends qt {
  constructor(e) {
    super(X, "compressLogicalStructure");
  }
}
class R7 extends Eu {
  constructor(e) {
    super(X, "compressObjectStream");
  }
}
class M7 extends U {
  constructor(e) {
    super(X, "compression", !0), this.compressLogicalStructure = null, this.compressObjectStream = null, this.level = null, this.type = null;
  }
}
class D7 extends U {
  constructor(e) {
    super(X, "config", !0), this.acrobat = null, this.present = null, this.trace = null, this.agent = new v();
  }
}
class P7 extends ot {
  constructor(e) {
    super(X, "conformance", ["A", "B"]);
  }
}
class N7 extends qt {
  constructor(e) {
    super(X, "contentCopy");
  }
}
class O7 extends li {
  constructor(e) {
    super(X, "copies", 1, (n) => n >= 1);
  }
}
class L7 extends $e {
  constructor(e) {
    super(X, "creator");
  }
}
class _7 extends li {
  constructor(e) {
    super(X, "currentPage", 0, (n) => n >= 0);
  }
}
class U7 extends U {
  constructor(e) {
    super(X, "data", !0), this.adjustData = null, this.attributes = null, this.incrementalLoad = null, this.outputXSL = null, this.range = null, this.record = null, this.startNode = null, this.uri = null, this.window = null, this.xsl = null, this.excludeNS = new v(), this.transform = new v();
  }
}
class j7 extends U {
  constructor(e) {
    super(X, "debug", !0), this.uri = null;
  }
}
class q7 extends vt {
  constructor(e) {
    super(X, "defaultTypeface"), this.writingScript = V(e.writingScript, ["*", "Arabic", "Cyrillic", "EastEuropeanRoman", "Greek", "Hebrew", "Japanese", "Korean", "Roman", "SimplifiedChinese", "Thai", "TraditionalChinese", "Vietnamese"]);
  }
}
class H7 extends ot {
  constructor(e) {
    super(X, "destination", ["pdf", "pcl", "ps", "webClient", "zpl"]);
  }
}
class G7 extends qt {
  constructor(e) {
    super(X, "documentAssembly");
  }
}
class $7 extends U {
  constructor(e) {
    super(X, "driver", !0), this.name = e.name ? e.name.trim() : "", this.fontInfo = null, this.xdc = null;
  }
}
class z7 extends ot {
  constructor(e) {
    super(X, "duplexOption", ["simplex", "duplexFlipLongEdge", "duplexFlipShortEdge"]);
  }
}
class W7 extends ot {
  constructor(e) {
    super(X, "dynamicRender", ["forbidden", "required"]);
  }
}
class V7 extends qt {
  constructor(e) {
    super(X, "embed");
  }
}
class X7 extends qt {
  constructor(e) {
    super(X, "encrypt");
  }
}
class K7 extends U {
  constructor(e) {
    super(X, "encryption", !0), this.encrypt = null, this.encryptionLevel = null, this.permissions = null;
  }
}
class Y7 extends ot {
  constructor(e) {
    super(X, "encryptionLevel", ["40bit", "128bit"]);
  }
}
class Z7 extends $e {
  constructor(e) {
    super(X, "enforce");
  }
}
class J7 extends U {
  constructor(e) {
    super(X, "equate"), this.force = De({
      data: e.force,
      defaultValue: 1,
      validate: (n) => n === 0
    }), this.from = e.from || "", this.to = e.to || "";
  }
}
class Q7 extends U {
  constructor(e) {
    super(X, "equateRange"), this.from = e.from || "", this.to = e.to || "", this._unicodeRange = e.unicodeRange || "";
  }
  get unicodeRange() {
    const e = [], n = /U\+([0-9a-fA-F]+)/, i = this._unicodeRange;
    for (let s of i.split(",").map((a) => a.trim()).filter((a) => !!a))
      s = s.split("-", 2).map((a) => {
        const r = a.match(n);
        return r ? parseInt(r[1], 16) : 0;
      }), s.length === 1 && s.push(s[0]), e.push(s);
    return Q(this, "unicodeRange", e);
  }
}
class e8 extends vt {
  constructor(e) {
    super(X, "exclude");
  }
  [ut]() {
    this[$] = this[$].trim().split(/\s+/).filter((e) => e && ["calculate", "close", "enter", "exit", "initialize", "ready", "validate"].includes(e));
  }
}
class t8 extends $e {
  constructor(e) {
    super(X, "excludeNS");
  }
}
class n8 extends ot {
  constructor(e) {
    super(X, "flipLabel", ["usePrinterSetting", "on", "off"]);
  }
}
class i8 extends U {
  constructor(e) {
    super(X, "fontInfo", !0), this.embed = null, this.map = null, this.subsetBelow = null, this.alwaysEmbed = new v(), this.defaultTypeface = new v(), this.neverEmbed = new v();
  }
}
class s8 extends qt {
  constructor(e) {
    super(X, "formFieldFilling");
  }
}
class a8 extends $e {
  constructor(e) {
    super(X, "groupParent");
  }
}
class r8 extends ot {
  constructor(e) {
    super(X, "ifEmpty", ["dataValue", "dataGroup", "ignore", "remove"]);
  }
}
class o8 extends $e {
  constructor(e) {
    super(X, "includeXDPContent");
  }
}
class c8 extends ot {
  constructor(e) {
    super(X, "incrementalLoad", ["none", "forwardOnly"]);
  }
}
class l8 extends qt {
  constructor(e) {
    super(X, "incrementalMerge");
  }
}
class h8 extends qt {
  constructor(e) {
    super(X, "interactive");
  }
}
class f8 extends ot {
  constructor(e) {
    super(X, "jog", ["usePrinterSetting", "none", "pageSet"]);
  }
}
class u8 extends U {
  constructor(e) {
    super(X, "labelPrinter", !0), this.name = V(e.name, ["zpl", "dpl", "ipl", "tcpl"]), this.batchOutput = null, this.flipLabel = null, this.fontInfo = null, this.xdc = null;
  }
}
class d8 extends ot {
  constructor(e) {
    super(X, "layout", ["paginate", "panel"]);
  }
}
class x8 extends li {
  constructor(e) {
    super(X, "level", 0, (n) => n > 0);
  }
}
class g8 extends qt {
  constructor(e) {
    super(X, "linearized");
  }
}
class p8 extends $e {
  constructor(e) {
    super(X, "locale");
  }
}
class m8 extends $e {
  constructor(e) {
    super(X, "localeSet");
  }
}
class b8 extends U {
  constructor(e) {
    super(X, "log", !0), this.mode = null, this.threshold = null, this.to = null, this.uri = null;
  }
}
class w8 extends U {
  constructor(e) {
    super(X, "map", !0), this.equate = new v(), this.equateRange = new v();
  }
}
class y8 extends U {
  constructor(e) {
    super(X, "mediumInfo", !0), this.map = null;
  }
}
class k8 extends U {
  constructor(e) {
    super(X, "message", !0), this.msgId = null, this.severity = null;
  }
}
class S8 extends U {
  constructor(e) {
    super(X, "messaging", !0), this.message = new v();
  }
}
class C8 extends ot {
  constructor(e) {
    super(X, "mode", ["append", "overwrite"]);
  }
}
class A8 extends qt {
  constructor(e) {
    super(X, "modifyAnnots");
  }
}
class v8 extends li {
  constructor(e) {
    super(X, "msgId", 1, (n) => n >= 1);
  }
}
class I8 extends $e {
  constructor(e) {
    super(X, "nameAttr");
  }
}
class T8 extends vt {
  constructor(e) {
    super(X, "neverEmbed");
  }
}
class F8 extends li {
  constructor(e) {
    super(X, "numberOfCopies", null, (n) => n >= 2 && n <= 5);
  }
}
class B8 extends U {
  constructor(e) {
    super(X, "openAction", !0), this.destination = null;
  }
}
class E8 extends U {
  constructor(e) {
    super(X, "output", !0), this.to = null, this.type = null, this.uri = null;
  }
}
class R8 extends $e {
  constructor(e) {
    super(X, "outputBin");
  }
}
class M8 extends U {
  constructor(e) {
    super(X, "outputXSL", !0), this.uri = null;
  }
}
class D8 extends ot {
  constructor(e) {
    super(X, "overprint", ["none", "both", "draw", "field"]);
  }
}
class P8 extends $e {
  constructor(e) {
    super(X, "packets");
  }
  [ut]() {
    this[$] !== "*" && (this[$] = this[$].trim().split(/\s+/).filter((e) => ["config", "datasets", "template", "xfdf", "xslt"].includes(e)));
  }
}
class N8 extends U {
  constructor(e) {
    super(X, "pageOffset"), this.x = De({
      data: e.x,
      defaultValue: "useXDCSetting",
      validate: (n) => !0
    }), this.y = De({
      data: e.y,
      defaultValue: "useXDCSetting",
      validate: (n) => !0
    });
  }
}
class O8 extends $e {
  constructor(e) {
    super(X, "pageRange");
  }
  [ut]() {
    const e = this[$].trim().split(/\s+/).map((i) => parseInt(i, 10)), n = [];
    for (let i = 0, s = e.length; i < s; i += 2)
      n.push(e.slice(i, i + 2));
    this[$] = n;
  }
}
class L8 extends ot {
  constructor(e) {
    super(X, "pagination", ["simplex", "duplexShortEdge", "duplexLongEdge"]);
  }
}
class _8 extends ot {
  constructor(e) {
    super(X, "paginationOverride", ["none", "forceDuplex", "forceDuplexLongEdge", "forceDuplexShortEdge", "forceSimplex"]);
  }
}
class U8 extends li {
  constructor(e) {
    super(X, "part", 1, (n) => !1);
  }
}
class j8 extends U {
  constructor(e) {
    super(X, "pcl", !0), this.name = e.name || "", this.batchOutput = null, this.fontInfo = null, this.jog = null, this.mediumInfo = null, this.outputBin = null, this.pageOffset = null, this.staple = null, this.xdc = null;
  }
}
class q8 extends U {
  constructor(e) {
    super(X, "pdf", !0), this.name = e.name || "", this.adobeExtensionLevel = null, this.batchOutput = null, this.compression = null, this.creator = null, this.encryption = null, this.fontInfo = null, this.interactive = null, this.linearized = null, this.openAction = null, this.pdfa = null, this.producer = null, this.renderPolicy = null, this.scriptModel = null, this.silentPrint = null, this.submitFormat = null, this.tagged = null, this.version = null, this.viewerPreferences = null, this.xdc = null;
  }
}
class H8 extends U {
  constructor(e) {
    super(X, "pdfa", !0), this.amd = null, this.conformance = null, this.includeXDPContent = null, this.part = null;
  }
}
class G8 extends U {
  constructor(e) {
    super(X, "permissions", !0), this.accessibleContent = null, this.change = null, this.contentCopy = null, this.documentAssembly = null, this.formFieldFilling = null, this.modifyAnnots = null, this.plaintextMetadata = null, this.print = null, this.printHighQuality = null;
  }
}
class $8 extends qt {
  constructor(e) {
    super(X, "pickTrayByPDFSize");
  }
}
class z8 extends $e {
  constructor(e) {
    super(X, "picture");
  }
}
class W8 extends qt {
  constructor(e) {
    super(X, "plaintextMetadata");
  }
}
class V8 extends ot {
  constructor(e) {
    super(X, "presence", ["preserve", "dissolve", "dissolveStructure", "ignore", "remove"]);
  }
}
class X8 extends U {
  constructor(e) {
    super(X, "present", !0), this.behaviorOverride = null, this.cache = null, this.common = null, this.copies = null, this.destination = null, this.incrementalMerge = null, this.layout = null, this.output = null, this.overprint = null, this.pagination = null, this.paginationOverride = null, this.script = null, this.validate = null, this.xdp = null, this.driver = new v(), this.labelPrinter = new v(), this.pcl = new v(), this.pdf = new v(), this.ps = new v(), this.submitUrl = new v(), this.webClient = new v(), this.zpl = new v();
  }
}
class K8 extends qt {
  constructor(e) {
    super(X, "print");
  }
}
class Y8 extends qt {
  constructor(e) {
    super(X, "printHighQuality");
  }
}
class Z8 extends ot {
  constructor(e) {
    super(X, "printScaling", ["appdefault", "noScaling"]);
  }
}
class J8 extends $e {
  constructor(e) {
    super(X, "printerName");
  }
}
class Q8 extends $e {
  constructor(e) {
    super(X, "producer");
  }
}
class em extends U {
  constructor(e) {
    super(X, "ps", !0), this.name = e.name || "", this.batchOutput = null, this.fontInfo = null, this.jog = null, this.mediumInfo = null, this.outputBin = null, this.staple = null, this.xdc = null;
  }
}
class tm extends vt {
  constructor(e) {
    super(X, "range");
  }
  [ut]() {
    this[$] = this[$].split(",", 2).map((e) => e.split("-").map((n) => parseInt(n.trim(), 10))).filter((e) => e.every((n) => !isNaN(n))).map((e) => (e.length === 1 && e.push(e[0]), e));
  }
}
class nm extends vt {
  constructor(e) {
    super(X, "record");
  }
  [ut]() {
    this[$] = this[$].trim();
    const e = parseInt(this[$], 10);
    !isNaN(e) && e >= 0 && (this[$] = e);
  }
}
class im extends vt {
  constructor(e) {
    super(X, "relevant");
  }
  [ut]() {
    this[$] = this[$].trim().split(/\s+/);
  }
}
class sm extends vt {
  constructor(e) {
    super(X, "rename");
  }
  [ut]() {
    this[$] = this[$].trim(), (this[$].toLowerCase().startsWith("xml") || new RegExp("[\\p{L}_][\\p{L}\\d._\\p{M}-]*", "u").test(this[$])) && I("XFA - Rename: invalid XFA name");
  }
}
class am extends ot {
  constructor(e) {
    super(X, "renderPolicy", ["server", "client"]);
  }
}
class rm extends ot {
  constructor(e) {
    super(X, "runScripts", ["both", "client", "none", "server"]);
  }
}
class om extends U {
  constructor(e) {
    super(X, "script", !0), this.currentPage = null, this.exclude = null, this.runScripts = null;
  }
}
class cm extends ot {
  constructor(e) {
    super(X, "scriptModel", ["XFA", "none"]);
  }
}
class lm extends ot {
  constructor(e) {
    super(X, "severity", ["ignore", "error", "information", "trace", "warning"]);
  }
}
class hm extends U {
  constructor(e) {
    super(X, "silentPrint", !0), this.addSilentPrint = null, this.printerName = null;
  }
}
class fm extends U {
  constructor(e) {
    super(X, "staple"), this.mode = V(e.mode, ["usePrinterSetting", "on", "off"]);
  }
}
class um extends $e {
  constructor(e) {
    super(X, "startNode");
  }
}
class dm extends li {
  constructor(e) {
    super(X, "startPage", 0, (n) => !0);
  }
}
class xm extends ot {
  constructor(e) {
    super(X, "submitFormat", ["html", "delegate", "fdf", "xml", "pdf"]);
  }
}
class gm extends $e {
  constructor(e) {
    super(X, "submitUrl");
  }
}
class pm extends li {
  constructor(e) {
    super(X, "subsetBelow", 100, (n) => n >= 0 && n <= 100);
  }
}
class mm extends qt {
  constructor(e) {
    super(X, "suppressBanner");
  }
}
class bm extends qt {
  constructor(e) {
    super(X, "tagged");
  }
}
class wm extends U {
  constructor(e) {
    super(X, "template", !0), this.base = null, this.relevant = null, this.startPage = null, this.uri = null, this.xsl = null;
  }
}
class ym extends ot {
  constructor(e) {
    super(X, "threshold", ["trace", "error", "information", "warning"]);
  }
}
class km extends ot {
  constructor(e) {
    super(X, "to", ["null", "memory", "stderr", "stdout", "system", "uri"]);
  }
}
class Sm extends U {
  constructor(e) {
    super(X, "templateCache"), this.maxEntries = De({
      data: e.maxEntries,
      defaultValue: 5,
      validate: (n) => n >= 0
    });
  }
}
class Cm extends U {
  constructor(e) {
    super(X, "trace", !0), this.area = new v();
  }
}
class Am extends U {
  constructor(e) {
    super(X, "transform", !0), this.groupParent = null, this.ifEmpty = null, this.nameAttr = null, this.picture = null, this.presence = null, this.rename = null, this.whitespace = null;
  }
}
class vm extends ot {
  constructor(e) {
    super(X, "type", ["none", "ascii85", "asciiHex", "ccittfax", "flate", "lzw", "runLength", "native", "xdp", "mergedXDP"]);
  }
}
class Im extends $e {
  constructor(e) {
    super(X, "uri");
  }
}
class Tm extends ot {
  constructor(e) {
    super(X, "validate", ["preSubmit", "prePrint", "preExecute", "preSave"]);
  }
}
class Fm extends vt {
  constructor(e) {
    super(X, "validateApprovalSignatures");
  }
  [ut]() {
    this[$] = this[$].trim().split(/\s+/).filter((e) => ["docReady", "postSign"].includes(e));
  }
}
class Bm extends ot {
  constructor(e) {
    super(X, "validationMessaging", ["allMessagesIndividually", "allMessagesTogether", "firstMessageOnly", "noMessages"]);
  }
}
class Em extends ot {
  constructor(e) {
    super(X, "version", ["1.7", "1.6", "1.5", "1.4", "1.3", "1.2"]);
  }
}
class Rm extends U {
  constructor(e) {
    super(X, "VersionControl"), this.outputBelow = V(e.outputBelow, ["warn", "error", "update"]), this.sourceAbove = V(e.sourceAbove, ["warn", "error"]), this.sourceBelow = V(e.sourceBelow, ["update", "maintain"]);
  }
}
class Mm extends U {
  constructor(e) {
    super(X, "viewerPreferences", !0), this.ADBE_JSConsole = null, this.ADBE_JSDebugger = null, this.addViewerPreferences = null, this.duplexOption = null, this.enforce = null, this.numberOfCopies = null, this.pageRange = null, this.pickTrayByPDFSize = null, this.printScaling = null;
  }
}
class Dm extends U {
  constructor(e) {
    super(X, "webClient", !0), this.name = e.name ? e.name.trim() : "", this.fontInfo = null, this.xdc = null;
  }
}
class Pm extends ot {
  constructor(e) {
    super(X, "whitespace", ["preserve", "ltrim", "normalize", "rtrim", "trim"]);
  }
}
class Nm extends vt {
  constructor(e) {
    super(X, "window");
  }
  [ut]() {
    const e = this[$].split(",", 2).map((n) => parseInt(n.trim(), 10));
    if (e.some((n) => isNaN(n))) {
      this[$] = [0, 0];
      return;
    }
    e.length === 1 && e.push(e[0]), this[$] = e;
  }
}
class Om extends U {
  constructor(e) {
    super(X, "xdc", !0), this.uri = new v(), this.xsl = new v();
  }
}
class Lm extends U {
  constructor(e) {
    super(X, "xdp", !0), this.packets = null;
  }
}
class _m extends U {
  constructor(e) {
    super(X, "xsl", !0), this.debug = null, this.uri = null;
  }
}
class Um extends U {
  constructor(e) {
    super(X, "zpl", !0), this.name = e.name ? e.name.trim() : "", this.batchOutput = null, this.flipLabel = null, this.fontInfo = null, this.xdc = null;
  }
}
class po {
  static [oi](e, n) {
    if (po.hasOwnProperty(e))
      return po[e](n);
  }
  static acrobat(e) {
    return new l7(e);
  }
  static acrobat7(e) {
    return new h7(e);
  }
  static ADBE_JSConsole(e) {
    return new f7(e);
  }
  static ADBE_JSDebugger(e) {
    return new u7(e);
  }
  static addSilentPrint(e) {
    return new d7(e);
  }
  static addViewerPreferences(e) {
    return new x7(e);
  }
  static adjustData(e) {
    return new g7(e);
  }
  static adobeExtensionLevel(e) {
    return new p7(e);
  }
  static agent(e) {
    return new m7(e);
  }
  static alwaysEmbed(e) {
    return new b7(e);
  }
  static amd(e) {
    return new w7(e);
  }
  static area(e) {
    return new y7(e);
  }
  static attributes(e) {
    return new k7(e);
  }
  static autoSave(e) {
    return new S7(e);
  }
  static base(e) {
    return new C7(e);
  }
  static batchOutput(e) {
    return new A7(e);
  }
  static behaviorOverride(e) {
    return new v7(e);
  }
  static cache(e) {
    return new I7(e);
  }
  static change(e) {
    return new T7(e);
  }
  static common(e) {
    return new F7(e);
  }
  static compress(e) {
    return new B7(e);
  }
  static compressLogicalStructure(e) {
    return new E7(e);
  }
  static compressObjectStream(e) {
    return new R7(e);
  }
  static compression(e) {
    return new M7(e);
  }
  static config(e) {
    return new D7(e);
  }
  static conformance(e) {
    return new P7(e);
  }
  static contentCopy(e) {
    return new N7(e);
  }
  static copies(e) {
    return new O7(e);
  }
  static creator(e) {
    return new L7(e);
  }
  static currentPage(e) {
    return new _7(e);
  }
  static data(e) {
    return new U7(e);
  }
  static debug(e) {
    return new j7(e);
  }
  static defaultTypeface(e) {
    return new q7(e);
  }
  static destination(e) {
    return new H7(e);
  }
  static documentAssembly(e) {
    return new G7(e);
  }
  static driver(e) {
    return new $7(e);
  }
  static duplexOption(e) {
    return new z7(e);
  }
  static dynamicRender(e) {
    return new W7(e);
  }
  static embed(e) {
    return new V7(e);
  }
  static encrypt(e) {
    return new X7(e);
  }
  static encryption(e) {
    return new K7(e);
  }
  static encryptionLevel(e) {
    return new Y7(e);
  }
  static enforce(e) {
    return new Z7(e);
  }
  static equate(e) {
    return new J7(e);
  }
  static equateRange(e) {
    return new Q7(e);
  }
  static exclude(e) {
    return new e8(e);
  }
  static excludeNS(e) {
    return new t8(e);
  }
  static flipLabel(e) {
    return new n8(e);
  }
  static fontInfo(e) {
    return new i8(e);
  }
  static formFieldFilling(e) {
    return new s8(e);
  }
  static groupParent(e) {
    return new a8(e);
  }
  static ifEmpty(e) {
    return new r8(e);
  }
  static includeXDPContent(e) {
    return new o8(e);
  }
  static incrementalLoad(e) {
    return new c8(e);
  }
  static incrementalMerge(e) {
    return new l8(e);
  }
  static interactive(e) {
    return new h8(e);
  }
  static jog(e) {
    return new f8(e);
  }
  static labelPrinter(e) {
    return new u8(e);
  }
  static layout(e) {
    return new d8(e);
  }
  static level(e) {
    return new x8(e);
  }
  static linearized(e) {
    return new g8(e);
  }
  static locale(e) {
    return new p8(e);
  }
  static localeSet(e) {
    return new m8(e);
  }
  static log(e) {
    return new b8(e);
  }
  static map(e) {
    return new w8(e);
  }
  static mediumInfo(e) {
    return new y8(e);
  }
  static message(e) {
    return new k8(e);
  }
  static messaging(e) {
    return new S8(e);
  }
  static mode(e) {
    return new C8(e);
  }
  static modifyAnnots(e) {
    return new A8(e);
  }
  static msgId(e) {
    return new v8(e);
  }
  static nameAttr(e) {
    return new I8(e);
  }
  static neverEmbed(e) {
    return new T8(e);
  }
  static numberOfCopies(e) {
    return new F8(e);
  }
  static openAction(e) {
    return new B8(e);
  }
  static output(e) {
    return new E8(e);
  }
  static outputBin(e) {
    return new R8(e);
  }
  static outputXSL(e) {
    return new M8(e);
  }
  static overprint(e) {
    return new D8(e);
  }
  static packets(e) {
    return new P8(e);
  }
  static pageOffset(e) {
    return new N8(e);
  }
  static pageRange(e) {
    return new O8(e);
  }
  static pagination(e) {
    return new L8(e);
  }
  static paginationOverride(e) {
    return new _8(e);
  }
  static part(e) {
    return new U8(e);
  }
  static pcl(e) {
    return new j8(e);
  }
  static pdf(e) {
    return new q8(e);
  }
  static pdfa(e) {
    return new H8(e);
  }
  static permissions(e) {
    return new G8(e);
  }
  static pickTrayByPDFSize(e) {
    return new $8(e);
  }
  static picture(e) {
    return new z8(e);
  }
  static plaintextMetadata(e) {
    return new W8(e);
  }
  static presence(e) {
    return new V8(e);
  }
  static present(e) {
    return new X8(e);
  }
  static print(e) {
    return new K8(e);
  }
  static printHighQuality(e) {
    return new Y8(e);
  }
  static printScaling(e) {
    return new Z8(e);
  }
  static printerName(e) {
    return new J8(e);
  }
  static producer(e) {
    return new Q8(e);
  }
  static ps(e) {
    return new em(e);
  }
  static range(e) {
    return new tm(e);
  }
  static record(e) {
    return new nm(e);
  }
  static relevant(e) {
    return new im(e);
  }
  static rename(e) {
    return new sm(e);
  }
  static renderPolicy(e) {
    return new am(e);
  }
  static runScripts(e) {
    return new rm(e);
  }
  static script(e) {
    return new om(e);
  }
  static scriptModel(e) {
    return new cm(e);
  }
  static severity(e) {
    return new lm(e);
  }
  static silentPrint(e) {
    return new hm(e);
  }
  static staple(e) {
    return new fm(e);
  }
  static startNode(e) {
    return new um(e);
  }
  static startPage(e) {
    return new dm(e);
  }
  static submitFormat(e) {
    return new xm(e);
  }
  static submitUrl(e) {
    return new gm(e);
  }
  static subsetBelow(e) {
    return new pm(e);
  }
  static suppressBanner(e) {
    return new mm(e);
  }
  static tagged(e) {
    return new bm(e);
  }
  static template(e) {
    return new wm(e);
  }
  static templateCache(e) {
    return new Sm(e);
  }
  static threshold(e) {
    return new ym(e);
  }
  static to(e) {
    return new km(e);
  }
  static trace(e) {
    return new Cm(e);
  }
  static transform(e) {
    return new Am(e);
  }
  static type(e) {
    return new vm(e);
  }
  static uri(e) {
    return new Im(e);
  }
  static validate(e) {
    return new Tm(e);
  }
  static validateApprovalSignatures(e) {
    return new Fm(e);
  }
  static validationMessaging(e) {
    return new Bm(e);
  }
  static version(e) {
    return new Em(e);
  }
  static versionControl(e) {
    return new Rm(e);
  }
  static viewerPreferences(e) {
    return new Mm(e);
  }
  static webClient(e) {
    return new Dm(e);
  }
  static whitespace(e) {
    return new Pm(e);
  }
  static window(e) {
    return new Nm(e);
  }
  static xdc(e) {
    return new Om(e);
  }
  static xdp(e) {
    return new Lm(e);
  }
  static xsl(e) {
    return new _m(e);
  }
  static zpl(e) {
    return new Um(e);
  }
}
const Kn = Rt.connectionSet.id;
class jm extends U {
  constructor(e) {
    super(Kn, "connectionSet", !0), this.wsdlConnection = new v(), this.xmlConnection = new v(), this.xsdConnection = new v();
  }
}
class qm extends U {
  constructor(e) {
    super(Kn, "effectiveInputPolicy"), this.id = e.id || "", this.name = e.name || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class Hm extends U {
  constructor(e) {
    super(Kn, "effectiveOutputPolicy"), this.id = e.id || "", this.name = e.name || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class Gm extends $e {
  constructor(e) {
    super(Kn, "operation"), this.id = e.id || "", this.input = e.input || "", this.name = e.name || "", this.output = e.output || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class $m extends $e {
  constructor(e) {
    super(Kn, "rootElement"), this.id = e.id || "", this.name = e.name || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class zm extends $e {
  constructor(e) {
    super(Kn, "soapAction"), this.id = e.id || "", this.name = e.name || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class Wm extends $e {
  constructor(e) {
    super(Kn, "soapAddress"), this.id = e.id || "", this.name = e.name || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class Vm extends $e {
  constructor(e) {
    super(Kn, "uri"), this.id = e.id || "", this.name = e.name || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class Xm extends $e {
  constructor(e) {
    super(Kn, "wsdlAddress"), this.id = e.id || "", this.name = e.name || "", this.use = e.use || "", this.usehref = e.usehref || "";
  }
}
class Km extends U {
  constructor(e) {
    super(Kn, "wsdlConnection", !0), this.dataDescription = e.dataDescription || "", this.name = e.name || "", this.effectiveInputPolicy = null, this.effectiveOutputPolicy = null, this.operation = null, this.soapAction = null, this.soapAddress = null, this.wsdlAddress = null;
  }
}
class Ym extends U {
  constructor(e) {
    super(Kn, "xmlConnection", !0), this.dataDescription = e.dataDescription || "", this.name = e.name || "", this.uri = null;
  }
}
class Zm extends U {
  constructor(e) {
    super(Kn, "xsdConnection", !0), this.dataDescription = e.dataDescription || "", this.name = e.name || "", this.rootElement = null, this.uri = null;
  }
}
class mo {
  static [oi](e, n) {
    if (mo.hasOwnProperty(e))
      return mo[e](n);
  }
  static connectionSet(e) {
    return new jm(e);
  }
  static effectiveInputPolicy(e) {
    return new qm(e);
  }
  static effectiveOutputPolicy(e) {
    return new Hm(e);
  }
  static operation(e) {
    return new Gm(e);
  }
  static rootElement(e) {
    return new $m(e);
  }
  static soapAction(e) {
    return new zm(e);
  }
  static soapAddress(e) {
    return new Wm(e);
  }
  static uri(e) {
    return new Vm(e);
  }
  static wsdlAddress(e) {
    return new Xm(e);
  }
  static wsdlConnection(e) {
    return new Km(e);
  }
  static xmlConnection(e) {
    return new Ym(e);
  }
  static xsdConnection(e) {
    return new Zm(e);
  }
}
const Il = Rt.datasets.id;
class Jm extends yi {
  constructor(e) {
    super(Il, "data", e);
  }
  [x0]() {
    return !0;
  }
}
class Qm extends U {
  constructor(e) {
    super(Il, "datasets", !0), this.data = null, this.Signature = null;
  }
  [wi](e) {
    const n = e[et];
    (n === "data" && e[Bt] === Il || n === "Signature" && e[Bt] === Rt.signature.id) && (this[n] = e), this[St](e);
  }
}
class bo {
  static [oi](e, n) {
    if (bo.hasOwnProperty(e))
      return bo[e](n);
  }
  static datasets(e) {
    return new Qm(e);
  }
  static data(e) {
    return new Jm(e);
  }
}
const It = Rt.localeSet.id;
class e5 extends U {
  constructor(e) {
    super(It, "calendarSymbols", !0), this.name = "gregorian", this.dayNames = new v(2), this.eraNames = null, this.meridiemNames = null, this.monthNames = new v(2);
  }
}
class t5 extends $e {
  constructor(e) {
    super(It, "currencySymbol"), this.name = V(e.name, ["symbol", "isoname", "decimal"]);
  }
}
class n5 extends U {
  constructor(e) {
    super(It, "currencySymbols", !0), this.currencySymbol = new v(3);
  }
}
class i5 extends $e {
  constructor(e) {
    super(It, "datePattern"), this.name = V(e.name, ["full", "long", "med", "short"]);
  }
}
class s5 extends U {
  constructor(e) {
    super(It, "datePatterns", !0), this.datePattern = new v(4);
  }
}
class a5 extends vt {
  constructor(e) {
    super(It, "dateTimeSymbols");
  }
}
class r5 extends $e {
  constructor(e) {
    super(It, "day");
  }
}
class o5 extends U {
  constructor(e) {
    super(It, "dayNames", !0), this.abbr = De({
      data: e.abbr,
      defaultValue: 0,
      validate: (n) => n === 1
    }), this.day = new v(7);
  }
}
class c5 extends $e {
  constructor(e) {
    super(It, "era");
  }
}
class l5 extends U {
  constructor(e) {
    super(It, "eraNames", !0), this.era = new v(2);
  }
}
class h5 extends U {
  constructor(e) {
    super(It, "locale", !0), this.desc = e.desc || "", this.name = "isoname", this.calendarSymbols = null, this.currencySymbols = null, this.datePatterns = null, this.dateTimeSymbols = null, this.numberPatterns = null, this.numberSymbols = null, this.timePatterns = null, this.typeFaces = null;
  }
}
class f5 extends U {
  constructor(e) {
    super(It, "localeSet", !0), this.locale = new v();
  }
}
class u5 extends $e {
  constructor(e) {
    super(It, "meridiem");
  }
}
class d5 extends U {
  constructor(e) {
    super(It, "meridiemNames", !0), this.meridiem = new v(2);
  }
}
class x5 extends $e {
  constructor(e) {
    super(It, "month");
  }
}
class g5 extends U {
  constructor(e) {
    super(It, "monthNames", !0), this.abbr = De({
      data: e.abbr,
      defaultValue: 0,
      validate: (n) => n === 1
    }), this.month = new v(12);
  }
}
class p5 extends $e {
  constructor(e) {
    super(It, "numberPattern"), this.name = V(e.name, ["full", "long", "med", "short"]);
  }
}
class m5 extends U {
  constructor(e) {
    super(It, "numberPatterns", !0), this.numberPattern = new v(4);
  }
}
class b5 extends $e {
  constructor(e) {
    super(It, "numberSymbol"), this.name = V(e.name, ["decimal", "grouping", "percent", "minus", "zero"]);
  }
}
class w5 extends U {
  constructor(e) {
    super(It, "numberSymbols", !0), this.numberSymbol = new v(5);
  }
}
class y5 extends $e {
  constructor(e) {
    super(It, "timePattern"), this.name = V(e.name, ["full", "long", "med", "short"]);
  }
}
class k5 extends U {
  constructor(e) {
    super(It, "timePatterns", !0), this.timePattern = new v(4);
  }
}
class S5 extends U {
  constructor(e) {
    super(It, "typeFace", !0), this.name = e.name | "";
  }
}
class C5 extends U {
  constructor(e) {
    super(It, "typeFaces", !0), this.typeFace = new v();
  }
}
class wo {
  static [oi](e, n) {
    if (wo.hasOwnProperty(e))
      return wo[e](n);
  }
  static calendarSymbols(e) {
    return new e5(e);
  }
  static currencySymbol(e) {
    return new t5(e);
  }
  static currencySymbols(e) {
    return new n5(e);
  }
  static datePattern(e) {
    return new i5(e);
  }
  static datePatterns(e) {
    return new s5(e);
  }
  static dateTimeSymbols(e) {
    return new a5(e);
  }
  static day(e) {
    return new r5(e);
  }
  static dayNames(e) {
    return new o5(e);
  }
  static era(e) {
    return new c5(e);
  }
  static eraNames(e) {
    return new l5(e);
  }
  static locale(e) {
    return new h5(e);
  }
  static localeSet(e) {
    return new f5(e);
  }
  static meridiem(e) {
    return new u5(e);
  }
  static meridiemNames(e) {
    return new d5(e);
  }
  static month(e) {
    return new x5(e);
  }
  static monthNames(e) {
    return new g5(e);
  }
  static numberPattern(e) {
    return new p5(e);
  }
  static numberPatterns(e) {
    return new m5(e);
  }
  static numberSymbol(e) {
    return new b5(e);
  }
  static numberSymbols(e) {
    return new w5(e);
  }
  static timePattern(e) {
    return new y5(e);
  }
  static timePatterns(e) {
    return new k5(e);
  }
  static typeFace(e) {
    return new S5(e);
  }
  static typeFaces(e) {
    return new C5(e);
  }
}
const A5 = Rt.signature.id;
class v5 extends U {
  constructor(e) {
    super(A5, "signature", !0);
  }
}
class yo {
  static [oi](e, n) {
    if (yo.hasOwnProperty(e))
      return yo[e](n);
  }
  static signature(e) {
    return new v5(e);
  }
}
const I5 = Rt.stylesheet.id;
class T5 extends U {
  constructor(e) {
    super(I5, "stylesheet", !0);
  }
}
class ko {
  static [oi](e, n) {
    if (ko.hasOwnProperty(e))
      return ko[e](n);
  }
  static stylesheet(e) {
    return new T5(e);
  }
}
const F5 = Rt.xdp.id;
class B5 extends U {
  constructor(e) {
    super(F5, "xdp", !0), this.uuid = e.uuid || "", this.timeStamp = e.timeStamp || "", this.config = null, this.connectionSet = null, this.datasets = null, this.localeSet = null, this.stylesheet = new v(), this.template = null;
  }
  [yl](e) {
    const n = Rt[e[et]];
    return n && e[Bt] === n.id;
  }
}
class So {
  static [oi](e, n) {
    if (So.hasOwnProperty(e))
      return So[e](n);
  }
  static xdp(e) {
    return new B5(e);
  }
}
const E5 = Rt.xhtml.id, Lr = Symbol(), R5 = /* @__PURE__ */ new Set(["color", "font", "font-family", "font-size", "font-stretch", "font-style", "font-weight", "margin", "margin-bottom", "margin-left", "margin-right", "margin-top", "letter-spacing", "line-height", "orphans", "page-break-after", "page-break-before", "page-break-inside", "tab-interval", "tab-stop", "text-align", "text-decoration", "text-indent", "vertical-align", "widows", "kerning-mode", "xfa-font-horizontal-scale", "xfa-font-vertical-scale", "xfa-spacerun", "xfa-tab-stops"]), M5 = /* @__PURE__ */ new Map([["page-break-after", "breakAfter"], ["page-break-before", "breakBefore"], ["page-break-inside", "breakInside"], ["kerning-mode", (t) => t === "none" ? "none" : "normal"], ["xfa-font-horizontal-scale", (t) => `scaleX(${Math.max(0, parseInt(t) / 100).toFixed(2)})`], ["xfa-font-vertical-scale", (t) => `scaleY(${Math.max(0, parseInt(t) / 100).toFixed(2)})`], ["xfa-spacerun", ""], ["xfa-tab-stops", ""], ["font-size", (t, e) => (t = e.fontSize = Math.abs(ge(t)), Me(0.99 * t))], ["letter-spacing", (t) => Me(ge(t))], ["line-height", (t) => Me(ge(t))], ["margin", (t) => Me(ge(t))], ["margin-bottom", (t) => Me(ge(t))], ["margin-left", (t) => Me(ge(t))], ["margin-right", (t) => Me(ge(t))], ["margin-top", (t) => Me(ge(t))], ["text-indent", (t) => Me(ge(t))], ["font-family", (t) => t], ["vertical-align", (t) => Me(ge(t))]]), D5 = /\s+/g, P5 = /[\r\n]+/g, N5 = /\r\n?/g;
function O5(t, e, n) {
  const i = /* @__PURE__ */ Object.create(null);
  if (!t)
    return i;
  const s = /* @__PURE__ */ Object.create(null);
  for (const [a, r] of t.split(";").map((o) => o.split(":", 2))) {
    const o = M5.get(a);
    if (o === "")
      continue;
    let c = r;
    o && (c = typeof o == "string" ? o : o(r, s)), a.endsWith("scale") ? i.transform = i.transform ? `${i[a]} ${c}` : c : i[a.replaceAll(/-([a-zA-Z])/g, (l, h) => h.toUpperCase())] = c;
  }
  if (i.fontFamily && Lu({
    typeface: i.fontFamily,
    weight: i.fontWeight || "normal",
    posture: i.fontStyle || "normal",
    size: s.fontSize || 0
  }, e, e[ft].fontFinder, i), n && i.verticalAlign && i.verticalAlign !== "0px" && i.fontSize) {
    const o = ge(i.fontSize);
    i.fontSize = Me(o * 0.583), i.verticalAlign = Me(Math.sign(ge(i.verticalAlign)) * o * 0.333);
  }
  return n && i.fontSize && (i.fontSize = `calc(${i.fontSize} * var(--total-scale-factor))`), Pu(i), i;
}
function L5(t) {
  return t.style ? t.style.split(";").filter((e) => !!e.trim()).map((e) => e.split(":", 2).map((n) => n.trim())).filter(([e, n]) => (e === "font-family" && t[ft].usedTypefaces.add(n), R5.has(e))).map((e) => e.join(":")).join(";") : "";
}
const _5 = /* @__PURE__ */ new Set(["body", "html"]);
class Nn extends yi {
  constructor(e, n) {
    super(E5, n), this[Lr] = !1, this.style = e.style || "";
  }
  [Vn](e) {
    super[Vn](e), this.style = L5(this);
  }
  [Go]() {
    return !_5.has(this[et]);
  }
  [_i](e, n = !1) {
    n ? this[Lr] = !0 : (e = e.replaceAll(P5, ""), this.style.includes("xfa-spacerun:yes") || (e = e.replaceAll(D5, " "))), e && (this[$] += e);
  }
  [Ci](e, n = !0) {
    const i = /* @__PURE__ */ Object.create(null), s = {
      top: NaN,
      bottom: NaN,
      left: NaN,
      right: NaN
    };
    let a = null;
    for (const [r, o] of this.style.split(";").map((c) => c.split(":", 2)))
      switch (r) {
        case "font-family":
          i.typeface = zo(o);
          break;
        case "font-size":
          i.size = ge(o);
          break;
        case "font-weight":
          i.weight = o;
          break;
        case "font-style":
          i.posture = o;
          break;
        case "letter-spacing":
          i.letterSpacing = ge(o);
          break;
        case "margin":
          const c = o.split(/ \t/).map((l) => ge(l));
          switch (c.length) {
            case 1:
              s.top = s.bottom = s.left = s.right = c[0];
              break;
            case 2:
              s.top = s.bottom = c[0], s.left = s.right = c[1];
              break;
            case 3:
              s.top = c[0], s.bottom = c[2], s.left = s.right = c[1];
              break;
            case 4:
              s.top = c[0], s.left = c[1], s.bottom = c[2], s.right = c[3];
              break;
          }
          break;
        case "margin-top":
          s.top = ge(o);
          break;
        case "margin-bottom":
          s.bottom = ge(o);
          break;
        case "margin-left":
          s.left = ge(o);
          break;
        case "margin-right":
          s.right = ge(o);
          break;
        case "line-height":
          a = ge(o);
          break;
      }
    if (e.pushData(i, s, a), this[$])
      e.addString(this[$]);
    else
      for (const r of this[Vt]()) {
        if (r[et] === "#text") {
          e.addString(r[$]);
          continue;
        }
        r[Ci](e);
      }
    n && e.popFont();
  }
  [Te](e) {
    const n = [];
    if (this[N] = {
      children: n
    }, this[os]({}), n.length === 0 && !this[$])
      return Ce.EMPTY;
    let i;
    return this[Lr] ? i = this[$] ? this[$].replaceAll(N5, `
`) : void 0 : i = this[$] || void 0, Ce.success({
      name: this[et],
      attributes: {
        href: this.href,
        style: O5(this.style, this, this[Lr])
      },
      children: n,
      value: i
    });
  }
}
class U5 extends Nn {
  constructor(e) {
    super(e, "a"), this.href = _u(e.href) || "";
  }
}
class j5 extends Nn {
  constructor(e) {
    super(e, "b");
  }
  [Ci](e) {
    e.pushFont({
      weight: "bold"
    }), super[Ci](e), e.popFont();
  }
}
class q5 extends Nn {
  constructor(e) {
    super(e, "body");
  }
  [Te](e) {
    const n = super[Te](e), {
      html: i
    } = n;
    return i ? (i.name = "div", i.attributes.class = ["xfaRich"], n) : Ce.EMPTY;
  }
}
class H5 extends Nn {
  constructor(e) {
    super(e, "br");
  }
  [jt]() {
    return `
`;
  }
  [Ci](e) {
    e.addString(`
`);
  }
  [Te](e) {
    return Ce.success({
      name: "br"
    });
  }
}
class G5 extends Nn {
  constructor(e) {
    super(e, "html");
  }
  [Te](e) {
    var i;
    const n = [];
    if (this[N] = {
      children: n
    }, this[os]({}), n.length === 0)
      return Ce.success({
        name: "div",
        attributes: {
          class: ["xfaRich"],
          style: {}
        },
        value: this[$] || ""
      });
    if (n.length === 1) {
      const s = n[0];
      if ((i = s.attributes) != null && i.class.includes("xfaRich"))
        return Ce.success(s);
    }
    return Ce.success({
      name: "div",
      attributes: {
        class: ["xfaRich"],
        style: {}
      },
      children: n
    });
  }
}
class $5 extends Nn {
  constructor(e) {
    super(e, "i");
  }
  [Ci](e) {
    e.pushFont({
      posture: "italic"
    }), super[Ci](e), e.popFont();
  }
}
class z5 extends Nn {
  constructor(e) {
    super(e, "li");
  }
}
class W5 extends Nn {
  constructor(e) {
    super(e, "ol");
  }
}
class V5 extends Nn {
  constructor(e) {
    super(e, "p");
  }
  [Ci](e) {
    super[Ci](e, !1), e.addString(`
`), e.addPara(), e.popFont();
  }
  [jt]() {
    return this[Ne]()[Vt]().at(-1) === this ? super[jt]() : super[jt]() + `
`;
  }
}
class X5 extends Nn {
  constructor(e) {
    super(e, "span");
  }
}
class K5 extends Nn {
  constructor(e) {
    super(e, "sub");
  }
}
class Y5 extends Nn {
  constructor(e) {
    super(e, "sup");
  }
}
class Z5 extends Nn {
  constructor(e) {
    super(e, "ul");
  }
}
class Pa {
  static [oi](e, n) {
    if (Pa.hasOwnProperty(e))
      return Pa[e](n);
  }
  static a(e) {
    return new U5(e);
  }
  static b(e) {
    return new j5(e);
  }
  static body(e) {
    return new q5(e);
  }
  static br(e) {
    return new H5(e);
  }
  static html(e) {
    return new G5(e);
  }
  static i(e) {
    return new $5(e);
  }
  static li(e) {
    return new z5(e);
  }
  static ol(e) {
    return new W5(e);
  }
  static p(e) {
    return new V5(e);
  }
  static span(e) {
    return new X5(e);
  }
  static sub(e) {
    return new K5(e);
  }
  static sup(e) {
    return new Y5(e);
  }
  static ul(e) {
    return new Z5(e);
  }
}
const Kh = {
  config: po,
  connection: mo,
  datasets: bo,
  localeSet: wo,
  signature: yo,
  stylesheet: ko,
  template: go,
  xdp: So,
  xhtml: Pa
};
class Yh {
  constructor(e) {
    this.namespaceId = e;
  }
  [oi](e, n) {
    return new yi(this.namespaceId, e, n);
  }
}
class J5 extends U {
  constructor(e) {
    super(-1, "root", /* @__PURE__ */ Object.create(null)), this.element = null, this[ta] = e;
  }
  [wi](e) {
    return this.element = e, !0;
  }
  [ut]() {
    super[ut](), this.element.template instanceof p1 && (this[ta].set(Au, this.element), this.element.template[a0](this[ta]), this.element.template[ta] = this[ta]);
  }
}
class Q5 extends U {
  constructor() {
    super(-1, "", /* @__PURE__ */ Object.create(null));
  }
  [wi](e) {
    return !1;
  }
}
class e6 {
  constructor(e = null) {
    this._namespaceStack = [], this._nsAgnosticLevel = 0, this._namespacePrefixes = /* @__PURE__ */ new Map(), this._namespaces = /* @__PURE__ */ new Map(), this._nextNsId = Math.max(...Object.values(Rt).map(({
      id: n
    }) => n)), this._currentNamespace = e || new Yh(++this._nextNsId);
  }
  buildRoot(e) {
    return new J5(e);
  }
  build({
    nsPrefix: e,
    name: n,
    attributes: i,
    namespace: s,
    prefixes: a
  }) {
    const r = s !== null;
    if (r && (this._namespaceStack.push(this._currentNamespace), this._currentNamespace = this._searchNamespace(s)), a && this._addNamespacePrefix(a), i.hasOwnProperty(Di)) {
      const l = Kh.datasets, h = i[Di];
      let f = null;
      for (const [u, d] of Object.entries(h))
        if (this._getNamespaceToUse(u) === l) {
          f = {
            xfa: d
          };
          break;
        }
      f ? i[Di] = f : delete i[Di];
    }
    const o = this._getNamespaceToUse(e), c = (o == null ? void 0 : o[oi](n, i)) || new Q5();
    return c[x0]() && this._nsAgnosticLevel++, (r || a || c[x0]()) && (c[Zr] = {
      hasNamespace: r,
      prefixes: a,
      nsAgnostic: c[x0]()
    }), c;
  }
  isNsAgnostic() {
    return this._nsAgnosticLevel > 0;
  }
  _searchNamespace(e) {
    let n = this._namespaces.get(e);
    if (n)
      return n;
    for (const [i, {
      check: s
    }] of Object.entries(Rt))
      if (s(e)) {
        if (n = Kh[i], n)
          return this._namespaces.set(e, n), n;
        break;
      }
    return n = new Yh(++this._nextNsId), this._namespaces.set(e, n), n;
  }
  _addNamespacePrefix(e) {
    for (const {
      prefix: n,
      value: i
    } of e) {
      const s = this._searchNamespace(i);
      let a = this._namespacePrefixes.get(n);
      a || (a = [], this._namespacePrefixes.set(n, a)), a.push(s);
    }
  }
  _getNamespaceToUse(e) {
    if (!e)
      return this._currentNamespace;
    const n = this._namespacePrefixes.get(e);
    return (n == null ? void 0 : n.length) > 0 ? n.at(-1) : (I(`Unknown namespace prefix: ${e}.`), null);
  }
  clean(e) {
    const {
      hasNamespace: n,
      prefixes: i,
      nsAgnostic: s
    } = e;
    n && (this._currentNamespace = this._namespaceStack.pop()), i && i.forEach(({
      prefix: a
    }) => {
      this._namespacePrefixes.get(a).pop();
    }), s && this._nsAgnosticLevel--;
  }
}
class Co extends hu {
  constructor(e = null, n = !1) {
    super(), this._builder = new e6(e), this._stack = [], this._globalData = {
      usedTypefaces: /* @__PURE__ */ new Set()
    }, this._ids = /* @__PURE__ */ new Map(), this._current = this._builder.buildRoot(this._ids), this._errorCode = yn.NoError, this._whiteRegex = /^\s+$/, this._nbsps = /\xa0+/g, this._richText = n;
  }
  parse(e) {
    if (this.parseXml(e), this._errorCode === yn.NoError)
      return this._current[ut](), this._current.element;
  }
  onText(e) {
    if (e = e.replace(this._nbsps, (n) => n.slice(1) + " "), this._richText || this._current[Go]()) {
      this._current[_i](e, this._richText);
      return;
    }
    this._whiteRegex.test(e) || this._current[_i](e.trim());
  }
  onCdata(e) {
    this._current[_i](e);
  }
  _mkAttributes(e, n) {
    let i = null, s = null;
    const a = /* @__PURE__ */ Object.create({});
    for (const {
      name: r,
      value: o
    } of e)
      if (r === "xmlns")
        i ? I(`XFA - multiple namespace definition in <${n}>`) : i = o;
      else if (r.startsWith("xmlns:")) {
        const c = r.substring(6);
        s ?? (s = []), s.push({
          prefix: c,
          value: o
        });
      } else {
        const c = r.indexOf(":");
        if (c === -1)
          a[r] = o;
        else {
          const l = a[Di] ?? (a[Di] = /* @__PURE__ */ Object.create(null)), [h, f] = [r.slice(0, c), r.slice(c + 1)], u = l[h] || (l[h] = /* @__PURE__ */ Object.create(null));
          u[f] = o;
        }
      }
    return [i, s, a];
  }
  _getNameAndPrefix(e, n) {
    const i = e.indexOf(":");
    return i === -1 ? [e, null] : [e.substring(i + 1), n ? "" : e.substring(0, i)];
  }
  onBeginElement(e, n, i) {
    const [s, a, r] = this._mkAttributes(n, e), [o, c] = this._getNameAndPrefix(e, this._builder.isNsAgnostic()), l = this._builder.build({
      nsPrefix: c,
      name: o,
      attributes: r,
      namespace: s,
      prefixes: a
    });
    if (l[ft] = this._globalData, i) {
      l[ut](), this._current[wi](l) && l[kl](this._ids), l[Vn](this._builder);
      return;
    }
    this._stack.push(this._current), this._current = l;
  }
  onEndElement(e) {
    const n = this._current;
    if (n[a1]() && typeof n[$] == "string") {
      const i = new Co();
      i._globalData = this._globalData;
      const s = i.parse(n[$]);
      n[$] = null, n[wi](s);
    }
    n[ut](), this._current = this._stack.pop(), this._current[wi](n) && n[kl](this._ids), n[Vn](this._builder);
  }
  onError(e) {
    this._errorCode = e;
  }
}
class cr {
  constructor(e) {
    try {
      this.root = new Co().parse(cr._createDocument(e));
      const n = new o7(this.root);
      this.form = n.bind(), this.dataHandler = new c7(this.root, n.getData()), this.form[ft].template = this.form;
    } catch (n) {
      I(`XFA - an error occurred during parsing and binding: ${n}`);
    }
  }
  isValid() {
    return !!(this.root && this.form);
  }
  _createPagesHelper() {
    const e = this.form[Iu]();
    return new Promise((n, i) => {
      const s = () => {
        try {
          const a = e.next();
          a.done ? n(a.value) : setTimeout(s, 0);
        } catch (a) {
          i(a);
        }
      };
      setTimeout(s, 0);
    });
  }
  async _createPages() {
    try {
      this.pages = await this._createPagesHelper(), this.dims = this.pages.children.map((e) => {
        const {
          width: n,
          height: i
        } = e.attributes.style;
        return [0, 0, parseInt(n), parseInt(i)];
      });
    } catch (e) {
      I(`XFA - an error occurred during layout: ${e}`);
    }
  }
  getBoundingBox(e) {
    return this.dims[e];
  }
  async getNumPages() {
    return this.pages || await this._createPages(), this.dims.length;
  }
  setImages(e) {
    this.form[ft].images = e;
  }
  setFonts(e) {
    this.form[ft].fontFinder = new g3(e);
    const n = [];
    for (let i of this.form[ft].usedTypefaces)
      i = zo(i), this.form[ft].fontFinder.find(i) || n.push(i);
    return n.length > 0 ? n : null;
  }
  appendFonts(e, n) {
    this.form[ft].fontFinder.add(e, n);
  }
  async getPages() {
    this.pages || await this._createPages();
    const e = this.pages;
    return this.pages = null, e;
  }
  serializeData(e) {
    return this.dataHandler.serialize(e);
  }
  static _createDocument(e) {
    return e["/xdp:xdp"] ? Object.values(e).join("") : e["xdp:xdp"];
  }
  static getRichTextAsHtml(e) {
    if (!e || typeof e != "string")
      return null;
    try {
      let n = new Co(Pa, !0).parse(e);
      if (!["body", "xhtml"].includes(n[et])) {
        const r = Pa.body({});
        r[St](n), n = r;
      }
      const i = n[Te]();
      if (!i.success)
        return null;
      const {
        html: s
      } = i, {
        attributes: a
      } = s;
      return a && (a.class && (a.class = a.class.filter((r) => !r.startsWith("xfa"))), a.dir = "auto"), {
        html: s,
        str: n[jt]()
      };
    } catch (n) {
      I(`XFA - an error occurred during parsing of rich text: ${n}`);
    }
    return null;
  }
}
class Yi {
  static createGlobals(e) {
    return Promise.all([e.ensureCatalog("acroForm"), e.ensureDoc("xfaDatasets"), e.ensureCatalog("structTreeRoot"), e.ensureCatalog("baseUrl"), e.ensureCatalog("attachments"), e.ensureCatalog("globalColorSpaceCache")]).then(([n, i, s, a, r, o]) => ({
      pdfManager: e,
      acroForm: n instanceof E ? n : E.empty,
      xfaDatasets: i,
      structTreeRoot: s,
      baseUrl: a,
      attachments: r,
      globalColorSpaceCache: o
    }), (n) => (I(`createGlobals: "${n}".`), null));
  }
  static async create(e, n, i, s, a, r, o) {
    const c = a ? await this._getPageIndex(e, n, i.pdfManager) : null;
    return i.pdfManager.ensure(this, "_create", [e, n, i, s, a, r, c, o]);
  }
  static _create(e, n, i, s, a = !1, r = null, o = null, c = null) {
    const l = e.fetchIfRef(n);
    if (!(l instanceof E))
      return;
    const {
      acroForm: h,
      pdfManager: f
    } = i, u = n instanceof he ? n.toString() : `annot_${s.createObjId()}`;
    let d = l.get("Subtype");
    d = d instanceof O ? d.name : null;
    const x = {
      xref: e,
      ref: n,
      dict: l,
      subtype: d,
      id: u,
      annotationGlobals: i,
      collectFields: a,
      orphanFields: r,
      needAppearances: !a && h.get("NeedAppearances") === !0,
      pageIndex: o,
      evaluatorOptions: f.evaluatorOptions,
      pageRef: c
    };
    switch (d) {
      case "Link":
        return new r6(x);
      case "Text":
        return new a6(x);
      case "Widget":
        let g = Gn({
          dict: l,
          key: "FT"
        });
        switch (g = g instanceof O ? g.name : null, g) {
          case "Tx":
            return new n6(x);
          case "Btn":
            return new i6(x);
          case "Ch":
            return new s6(x);
          case "Sig":
            return new sd(x);
        }
        return I(`Unimplemented widget field type "${g}", falling back to base field type.`), new ri(x);
      case "Popup":
        return new ad(x);
      case "FreeText":
        return new Fc(x);
      case "Line":
        return new o6(x);
      case "Square":
        return new c6(x);
      case "Circle":
        return new l6(x);
      case "PolyLine":
        return new rd(x);
      case "Polygon":
        return new od(x);
      case "Caret":
        return new h6(x);
      case "Ink":
        return new e0(x);
      case "Highlight":
        return new Bc(x);
      case "Underline":
        return new f6(x);
      case "Squiggly":
        return new u6(x);
      case "StrikeOut":
        return new d6(x);
      case "Stamp":
        return new bs(x);
      case "FileAttachment":
        return new x6(x);
      default:
        return a || I(d ? `Unimplemented annotation type "${d}", falling back to base annotation.` : "Annotation is missing the required /Subtype."), new hr(x);
    }
  }
  static async _getPageIndex(e, n, i) {
    try {
      const s = await e.fetchIfRefAsync(n);
      if (!(s instanceof E))
        return -1;
      const a = s.getRaw("P");
      if (a instanceof he)
        try {
          return await i.ensureCatalog("getPageIndex", [a]);
        } catch (o) {
          Ge(`_getPageIndex -- not a valid page reference: "${o}".`);
        }
      if (s.has("Kids"))
        return -1;
      const r = await i.ensureDoc("numPages");
      for (let o = 0; o < r; o++) {
        const c = await i.getPage(o), l = await i.ensure(c, "annotations");
        for (const h of l)
          if (h instanceof he && io(h, n))
            return o;
      }
    } catch (s) {
      I(`_getPageIndex: "${s}".`);
    }
    return -1;
  }
  static generateImages(e, n, i) {
    if (!i)
      return I("generateImages: OffscreenCanvas is not supported, cannot save or print some annotations with images."), null;
    let s;
    for (const {
      bitmapId: a,
      bitmap: r
    } of e)
      r && (s || (s = /* @__PURE__ */ new Map()), s.set(a, bs.createImage(r, n)));
    return s;
  }
  static async saveNewAnnotations(e, n, i, s, a) {
    const r = e.xref;
    let o;
    const c = [], {
      isOffscreenCanvasSupported: l
    } = e.options;
    for (const h of i)
      if (!h.deleted)
        switch (h.annotationType) {
          case fi.FREETEXT:
            if (!o) {
              const u = new E(r);
              u.set("BaseFont", O.get("Helvetica")), u.set("Type", O.get("Font")), u.set("Subtype", O.get("Type1")), u.set("Encoding", O.get("WinAnsiEncoding")), o = r.getNewTemporaryRef(), a.put(o, {
                data: u
              });
            }
            c.push(Fc.createNewAnnotation(r, h, a, {
              evaluator: e,
              task: n,
              baseFontRef: o
            }));
            break;
          case fi.HIGHLIGHT:
            h.quadPoints ? c.push(Bc.createNewAnnotation(r, h, a)) : c.push(e0.createNewAnnotation(r, h, a));
            break;
          case fi.INK:
            c.push(e0.createNewAnnotation(r, h, a));
            break;
          case fi.STAMP:
            const f = l ? await (s == null ? void 0 : s.get(h.bitmapId)) : null;
            if (f != null && f.imageStream) {
              const {
                imageStream: u,
                smaskStream: d
              } = f;
              if (d) {
                const g = r.getNewTemporaryRef();
                a.put(g, {
                  data: d
                }), u.dict.set("SMask", g);
              }
              const x = f.imageRef = r.getNewTemporaryRef();
              a.put(x, {
                data: u
              }), f.imageStream = f.smaskStream = null;
            }
            c.push(bs.createNewAnnotation(r, h, a, {
              image: f
            }));
            break;
          case fi.SIGNATURE:
            c.push(bs.createNewAnnotation(r, h, a, {}));
            break;
        }
    return {
      annotations: await Promise.all(c)
    };
  }
  static async printNewAnnotations(e, n, i, s, a) {
    if (!s)
      return null;
    const {
      options: r,
      xref: o
    } = n, c = [];
    for (const l of s)
      if (!l.deleted)
        switch (l.annotationType) {
          case fi.FREETEXT:
            c.push(Fc.createNewPrintAnnotation(e, o, l, {
              evaluator: n,
              task: i,
              evaluatorOptions: r
            }));
            break;
          case fi.HIGHLIGHT:
            l.quadPoints ? c.push(Bc.createNewPrintAnnotation(e, o, l, {
              evaluatorOptions: r
            })) : c.push(e0.createNewPrintAnnotation(e, o, l, {
              evaluatorOptions: r
            }));
            break;
          case fi.INK:
            c.push(e0.createNewPrintAnnotation(e, o, l, {
              evaluatorOptions: r
            }));
            break;
          case fi.STAMP:
            const h = r.isOffscreenCanvasSupported ? await (a == null ? void 0 : a.get(l.bitmapId)) : null;
            if (h != null && h.imageStream) {
              const {
                imageStream: f,
                smaskStream: u
              } = h;
              u && f.dict.set("SMask", u), h.imageRef = new Ia(f, f.length), h.imageStream = h.smaskStream = null;
            }
            c.push(bs.createNewPrintAnnotation(e, o, l, {
              image: h,
              evaluatorOptions: r
            }));
            break;
          case fi.SIGNATURE:
            c.push(bs.createNewPrintAnnotation(e, o, l, {
              evaluatorOptions: r
            }));
            break;
        }
    return Promise.all(c);
  }
}
function ga(t, e = new Uint8ClampedArray(3)) {
  if (!Array.isArray(t))
    return e;
  const n = e || new Uint8ClampedArray(3);
  switch (t.length) {
    case 0:
      return null;
    case 1:
      return Qe.gray.getRgbItem(t, 0, n, 0), n;
    case 3:
      return Qe.rgb.getRgbItem(t, 0, n, 0), n;
    case 4:
      return Qe.cmyk.getRgbItem(t, 0, n, 0), n;
    default:
      return e;
  }
}
function ln(t) {
  return Array.from(t, (e) => e / 255);
}
function lr(t, e) {
  const n = t.getArray("QuadPoints");
  if (!xn(n, null) || n.length === 0 || n.length % 8 > 0)
    return null;
  const i = new Float32Array(n.length);
  for (let s = 0, a = n.length; s < a; s += 8) {
    const [r, o, c, l, h, f, u, d] = n.slice(s, s + 8), x = Math.min(r, c, h, u), g = Math.max(r, c, h, u), m = Math.min(o, l, f, d), p = Math.max(o, l, f, d);
    if (e !== null && (x < e[0] || g > e[2] || m < e[1] || p > e[3]))
      return null;
    i.set([x, p, g, p, x, m, g, m], s);
  }
  return i;
}
function Tl(t, e, n) {
  const i = new Float32Array([1 / 0, 1 / 0, -1 / 0, -1 / 0]);
  tt.axialAlignedBoundingBox(e, n, i);
  const [s, a, r, o] = i;
  if (s === r || a === o)
    return [1, 0, 0, 1, t[0], t[1]];
  const c = (t[2] - t[0]) / (r - s), l = (t[3] - t[1]) / (o - a);
  return [c, 0, 0, l, t[0] - s * c, t[1] - a * l];
}
class hr {
  constructor(e) {
    const {
      dict: n,
      xref: i,
      annotationGlobals: s,
      ref: a,
      orphanFields: r
    } = e, o = r == null ? void 0 : r.get(a);
    o && n.set("Parent", o), this.setTitle(n.get("T")), this.setContents(n.get("Contents")), this.setModificationDate(n.get("M")), this.setFlags(n.get("F")), this.setRectangle(n.getArray("Rect")), this.setColor(n.getArray("C")), this.setBorderStyle(n), this.setAppearance(n), this.setOptionalContent(n);
    const c = n.get("MK");
    this.setBorderAndBackgroundColors(c), this.setRotation(c, n), this.ref = e.ref instanceof he ? e.ref : null, this._streams = [], this.appearance && this._streams.push(this.appearance);
    const l = !!(this.flags & _t.LOCKED), h = !!(this.flags & _t.LOCKEDCONTENTS);
    if (this.data = {
      annotationFlags: this.flags,
      borderStyle: this.borderStyle,
      color: this.color,
      backgroundColor: this.backgroundColor,
      borderColor: this.borderColor,
      rotation: this.rotation,
      contentsObj: this._contents,
      hasAppearance: !!this.appearance,
      id: e.id,
      modificationDate: this.modificationDate,
      rect: this.rectangle,
      subtype: e.subtype,
      hasOwnCanvas: !1,
      noRotate: !!(this.flags & _t.NOROTATE),
      noHTML: l && h,
      isEditable: !1,
      structParent: -1
    }, s.structTreeRoot) {
      let u = n.get("StructParent");
      this.data.structParent = u = Number.isInteger(u) && u >= 0 ? u : -1, s.structTreeRoot.addAnnotationIdToPage(e.pageRef, u);
    }
    if (e.collectFields) {
      const u = n.get("Kids");
      if (Array.isArray(u)) {
        const d = [];
        for (const x of u)
          x instanceof he && d.push(x.toString());
        d.length !== 0 && (this.data.kidIds = d);
      }
      this.data.actions = _o(i, n, lf), this.data.fieldName = this._constructFieldName(n), this.data.pageIndex = e.pageIndex;
    }
    const f = n.get("IT");
    f instanceof O && (this.data.it = f.name), this._isOffscreenCanvasSupported = e.evaluatorOptions.isOffscreenCanvasSupported, this._fallbackFontDict = null, this._needAppearances = !1;
  }
  _hasFlag(e, n) {
    return !!(e & n);
  }
  _buildFlags(e, n) {
    let {
      flags: i
    } = this;
    return e === void 0 ? n === void 0 ? void 0 : n ? i & -5 : i & -3 | _t.PRINT : e ? (i |= _t.PRINT, n ? i & -33 | _t.HIDDEN : i & -3 | _t.NOVIEW) : (i &= -35, n ? i & -5 : i | _t.PRINT);
  }
  _isViewable(e) {
    return !this._hasFlag(e, _t.INVISIBLE) && !this._hasFlag(e, _t.NOVIEW);
  }
  _isPrintable(e) {
    return this._hasFlag(e, _t.PRINT) && !this._hasFlag(e, _t.HIDDEN) && !this._hasFlag(e, _t.INVISIBLE);
  }
  mustBeViewed(e, n) {
    var s;
    const i = (s = e == null ? void 0 : e.get(this.data.id)) == null ? void 0 : s.noView;
    return i !== void 0 ? !i : this.viewable && !this._hasFlag(this.flags, _t.HIDDEN);
  }
  mustBePrinted(e) {
    var i;
    const n = (i = e == null ? void 0 : e.get(this.data.id)) == null ? void 0 : i.noPrint;
    return n !== void 0 ? !n : this.printable;
  }
  mustBeViewedWhenEditing(e, n = null) {
    return e ? !this.data.isEditable : !(n != null && n.has(this.data.id));
  }
  get viewable() {
    return this.data.quadPoints === null ? !1 : this.flags === 0 ? !0 : this._isViewable(this.flags);
  }
  get printable() {
    return this.data.quadPoints === null || this.flags === 0 ? !1 : this._isPrintable(this.flags);
  }
  _parseStringHelper(e) {
    const n = typeof e == "string" ? Ze(e) : "", i = n && su(n).dir === "rtl" ? "rtl" : "ltr";
    return {
      str: n,
      dir: i
    };
  }
  setDefaultAppearance(e) {
    const {
      dict: n,
      annotationGlobals: i
    } = e, s = Gn({
      dict: n,
      key: "DA"
    }) || i.acroForm.get("DA");
    this._defaultAppearance = typeof s == "string" ? s : "", this.data.defaultAppearanceData = n1(this._defaultAppearance);
  }
  setTitle(e) {
    this._title = this._parseStringHelper(e);
  }
  setContents(e) {
    this._contents = this._parseStringHelper(e);
  }
  setModificationDate(e) {
    this.modificationDate = typeof e == "string" ? e : null;
  }
  setFlags(e) {
    this.flags = Number.isInteger(e) && e > 0 ? e : 0, this.flags & _t.INVISIBLE && this.constructor.name !== "Annotation" && (this.flags ^= _t.INVISIBLE);
  }
  hasFlag(e) {
    return this._hasFlag(this.flags, e);
  }
  setRectangle(e) {
    this.rectangle = qi(e, [0, 0, 0, 0]);
  }
  setColor(e) {
    this.color = ga(e);
  }
  setLineEndings(e) {
    if (this.lineEndings = ["None", "None"], Array.isArray(e) && e.length === 2)
      for (let n = 0; n < 2; n++) {
        const i = e[n];
        if (i instanceof O)
          switch (i.name) {
            case "None":
              continue;
            case "Square":
            case "Circle":
            case "Diamond":
            case "OpenArrow":
            case "ClosedArrow":
            case "Butt":
            case "ROpenArrow":
            case "RClosedArrow":
            case "Slash":
              this.lineEndings[n] = i.name;
              continue;
          }
        I(`Ignoring invalid lineEnding: ${i}`);
      }
  }
  setRotation(e, n) {
    this.rotation = 0;
    let i = e instanceof E ? e.get("R") || 0 : n.get("Rotate") || 0;
    Number.isInteger(i) && i !== 0 && (i %= 360, i < 0 && (i += 360), i % 90 === 0 && (this.rotation = i));
  }
  setBorderAndBackgroundColors(e) {
    e instanceof E ? (this.borderColor = ga(e.getArray("BC"), null), this.backgroundColor = ga(e.getArray("BG"), null)) : this.borderColor = this.backgroundColor = null;
  }
  setBorderStyle(e) {
    if (this.borderStyle = new t6(), e instanceof E)
      if (e.has("BS")) {
        const n = e.get("BS");
        if (n instanceof E) {
          const i = n.get("Type");
          (!i || Tt(i, "Border")) && (this.borderStyle.setWidth(n.get("W"), this.rectangle), this.borderStyle.setStyle(n.get("S")), this.borderStyle.setDashArray(n.getArray("D")));
        }
      } else if (e.has("Border")) {
        const n = e.getArray("Border");
        Array.isArray(n) && n.length >= 3 && (this.borderStyle.setHorizontalCornerRadius(n[0]), this.borderStyle.setVerticalCornerRadius(n[1]), this.borderStyle.setWidth(n[2], this.rectangle), n.length === 4 && this.borderStyle.setDashArray(n[3], !0));
      } else
        this.borderStyle.setWidth(0);
  }
  setAppearance(e) {
    this.appearance = null;
    const n = e.get("AP");
    if (!(n instanceof E))
      return;
    const i = n.get("N");
    if (i instanceof je) {
      this.appearance = i;
      return;
    }
    if (!(i instanceof E))
      return;
    const s = e.get("AS");
    if (!(s instanceof O) || !i.has(s.name))
      return;
    const a = i.get(s.name);
    a instanceof je && (this.appearance = a);
  }
  setOptionalContent(e) {
    this.oc = null;
    const n = e.get("OC");
    n instanceof O ? I("setOptionalContent: Support for /Name-entry is not implemented.") : n instanceof E && (this.oc = n);
  }
  async loadResources(e, n) {
    const i = await n.dict.getAsync("Resources");
    return i && await Ea.load(i, e, i.xref), i;
  }
  async getOperatorList(e, n, i, s) {
    const {
      hasOwnCanvas: a,
      id: r,
      rect: o
    } = this.data;
    let c = this.appearance;
    const l = !!(a && i & un.DISPLAY);
    if (l && (this.width === 0 || this.height === 0))
      return this.data.hasOwnCanvas = !1, {
        opList: new on(),
        separateForm: !1,
        separateCanvas: !1
      };
    if (!c) {
      if (!l)
        return {
          opList: new on(),
          separateForm: !1,
          separateCanvas: !1
        };
      c = new pn(""), c.dict = new E();
    }
    const h = c.dict, f = await this.loadResources(Oc, c), u = jc(h.getArray("BBox"), [0, 0, 1, 1]), d = ts(h.getArray("Matrix"), ai), x = Tl(o, u, d), g = new on();
    let m;
    return this.oc && (m = await e.parseMarkedContentProps(this.oc, null)), m !== void 0 && g.addOp(A.beginMarkedContentProps, ["OC", m]), g.addOp(A.beginAnnotation, [r, o, x, d, l]), await e.getOperatorList({
      stream: c,
      task: n,
      resources: f,
      operatorList: g,
      fallbackFontDict: this._fallbackFontDict
    }), g.addOp(A.endAnnotation, []), m !== void 0 && g.addOp(A.endMarkedContent, []), this.reset(), {
      opList: g,
      separateForm: !1,
      separateCanvas: l
    };
  }
  async save(e, n, i, s) {
    return null;
  }
  get hasTextContent() {
    return !1;
  }
  async extractTextContent(e, n, i) {
    if (!this.appearance)
      return;
    const s = await this.loadResources(Lc, this.appearance), a = [], r = [];
    let o = null;
    const c = {
      desiredSize: Math.Infinity,
      ready: !0,
      enqueue(l, h) {
        for (const f of l.items)
          f.str !== void 0 && (o || (o = f.transform.slice(-2)), r.push(f.str), f.hasEOL && (a.push(r.join("").trimEnd()), r.length = 0));
      }
    };
    if (await e.getTextContent({
      stream: this.appearance,
      task: n,
      resources: s,
      includeMarkedContent: !0,
      keepWhiteSpace: !0,
      sink: c,
      viewBox: i
    }), this.reset(), r.length && a.push(r.join("").trimEnd()), a.length > 1 || a[0]) {
      const l = this.appearance.dict, h = jc(l.getArray("BBox"), null), f = ts(l.getArray("Matrix"), null);
      this.data.textPosition = this._transformPoint(o, h, f), this.data.textContent = a;
    }
  }
  _transformPoint(e, n, i) {
    const {
      rect: s
    } = this.data;
    n || (n = [0, 0, 1, 1]), i || (i = [1, 0, 0, 1, 0, 0]);
    const a = Tl(s, n, i);
    a[4] -= s[0], a[5] -= s[1];
    const r = e.slice();
    return tt.applyTransform(r, a), tt.applyTransform(r, i), r;
  }
  getFieldObject() {
    return this.data.kidIds ? {
      id: this.data.id,
      actions: this.data.actions,
      name: this.data.fieldName,
      strokeColor: this.data.borderColor,
      fillColor: this.data.backgroundColor,
      type: "",
      kidIds: this.data.kidIds,
      page: this.data.pageIndex,
      rotation: this.rotation
    } : null;
  }
  reset() {
    for (const e of this._streams)
      e.reset();
  }
  _constructFieldName(e) {
    if (!e.has("T") && !e.has("Parent"))
      return I("Unknown field name, falling back to empty field name."), "";
    if (!e.has("Parent"))
      return Ze(e.get("T"));
    const n = [];
    e.has("T") && n.unshift(Ze(e.get("T")));
    let i = e;
    const s = new Dt();
    for (e.objId && s.put(e.objId); i.has("Parent") && (i = i.get("Parent"), !(!(i instanceof E) || i.objId && s.has(i.objId))); )
      i.objId && s.put(i.objId), i.has("T") && n.unshift(Ze(i.get("T")));
    return n.join(".");
  }
  get width() {
    return this.data.rect[2] - this.data.rect[0];
  }
  get height() {
    return this.data.rect[3] - this.data.rect[1];
  }
}
class t6 {
  constructor() {
    this.width = 1, this.rawWidth = 1, this.style = Gs.SOLID, this.dashArray = [3], this.horizontalCornerRadius = 0, this.verticalCornerRadius = 0;
  }
  setWidth(e, n = [0, 0, 0, 0]) {
    if (e instanceof O) {
      this.width = 0;
      return;
    }
    if (typeof e == "number") {
      if (e > 0) {
        this.rawWidth = e;
        const i = (n[2] - n[0]) / 2, s = (n[3] - n[1]) / 2;
        i > 0 && s > 0 && (e > i || e > s) && (I(`AnnotationBorderStyle.setWidth - ignoring width: ${e}`), e = 1);
      }
      this.width = e;
    }
  }
  setStyle(e) {
    if (e instanceof O)
      switch (e.name) {
        case "S":
          this.style = Gs.SOLID;
          break;
        case "D":
          this.style = Gs.DASHED;
          break;
        case "B":
          this.style = Gs.BEVELED;
          break;
        case "I":
          this.style = Gs.INSET;
          break;
        case "U":
          this.style = Gs.UNDERLINE;
          break;
      }
  }
  setDashArray(e, n = !1) {
    if (Array.isArray(e)) {
      let i = !0, s = !0;
      for (const a of e)
        if (+a >= 0)
          a > 0 && (s = !1);
        else {
          i = !1;
          break;
        }
      e.length === 0 || i && !s ? (this.dashArray = e, n && this.setStyle(O.get("D"))) : this.width = 0;
    } else e && (this.width = 0);
  }
  setHorizontalCornerRadius(e) {
    Number.isInteger(e) && (this.horizontalCornerRadius = e);
  }
  setVerticalCornerRadius(e) {
    Number.isInteger(e) && (this.verticalCornerRadius = e);
  }
}
class Tn extends hr {
  constructor(e) {
    super(e);
    const {
      dict: n
    } = e;
    if (n.has("IRT")) {
      const s = n.getRaw("IRT");
      this.data.inReplyTo = s instanceof he ? s.toString() : null;
      const a = n.get("RT");
      this.data.replyType = a instanceof O ? a.name : Mc.REPLY;
    }
    let i = null;
    if (this.data.replyType === Mc.GROUP) {
      const s = n.get("IRT");
      this.setTitle(s.get("T")), this.data.titleObj = this._title, this.setContents(s.get("Contents")), this.data.contentsObj = this._contents, s.has("CreationDate") ? (this.setCreationDate(s.get("CreationDate")), this.data.creationDate = this.creationDate) : this.data.creationDate = null, s.has("M") ? (this.setModificationDate(s.get("M")), this.data.modificationDate = this.modificationDate) : this.data.modificationDate = null, i = s.getRaw("Popup"), s.has("C") ? (this.setColor(s.getArray("C")), this.data.color = this.color) : this.data.color = null;
    } else
      this.data.titleObj = this._title, this.setCreationDate(n.get("CreationDate")), this.data.creationDate = this.creationDate, i = n.getRaw("Popup"), n.has("C") || (this.data.color = null);
    this.data.popupRef = i instanceof he ? i.toString() : null, n.has("RC") && (this.data.richText = cr.getRichTextAsHtml(n.get("RC")));
  }
  setCreationDate(e) {
    this.creationDate = typeof e == "string" ? e : null;
  }
  _setDefaultAppearance({
    xref: e,
    extra: n,
    strokeColor: i,
    fillColor: s,
    blendMode: a,
    strokeAlpha: r,
    fillAlpha: o,
    pointsCallback: c
  }) {
    const l = this.data.rect = [1 / 0, 1 / 0, -1 / 0, -1 / 0], h = ["q"];
    n && h.push(n), i && h.push(`${i[0]} ${i[1]} ${i[2]} RG`), s && h.push(`${s[0]} ${s[1]} ${s[2]} rg`);
    const f = this.data.quadPoints || Float32Array.from([this.rectangle[0], this.rectangle[3], this.rectangle[2], this.rectangle[3], this.rectangle[0], this.rectangle[1], this.rectangle[2], this.rectangle[1]]);
    for (let w = 0, y = f.length; w < y; w += 8) {
      const k = c(h, f.subarray(w, w + 8));
      tt.rectBoundingBox(...k, l);
    }
    h.push("Q");
    const u = new E(e), d = new E(e);
    d.set("Subtype", O.get("Form"));
    const x = new pn(h.join(" "));
    x.dict = d, u.set("Fm0", x);
    const g = new E(e);
    a && g.set("BM", O.get(a)), typeof r == "number" && g.set("CA", r), typeof o == "number" && g.set("ca", o);
    const m = new E(e);
    m.set("GS0", g);
    const p = new E(e);
    p.set("ExtGState", m), p.set("XObject", u);
    const b = new E(e);
    b.set("Resources", p), b.set("BBox", l), this.appearance = new pn("/GS0 gs /Fm0 Do"), this.appearance.dict = b, this._streams.push(this.appearance, x);
  }
  static async createNewAnnotation(e, n, i, s) {
    const a = n.ref || (n.ref = e.getNewTemporaryRef()), r = await this.createNewAppearanceStream(n, e, s);
    let o;
    if (r) {
      const c = e.getNewTemporaryRef();
      o = this.createNewDict(n, e, {
        apRef: c
      }), i.put(c, {
        data: r
      });
    } else
      o = this.createNewDict(n, e, {});
    return Number.isInteger(n.parentTreeId) && o.set("StructParent", n.parentTreeId), i.put(a, {
      data: o
    }), {
      ref: a
    };
  }
  static async createNewPrintAnnotation(e, n, i, s) {
    const a = await this.createNewAppearanceStream(i, n, s), r = this.createNewDict(i, n, a ? {
      ap: a
    } : {}), o = new this.prototype.constructor({
      dict: r,
      xref: n,
      annotationGlobals: e,
      evaluatorOptions: s.evaluatorOptions
    });
    return i.ref && (o.ref = o.refToReplace = i.ref), o;
  }
}
class ri extends hr {
  constructor(e) {
    var u;
    super(e);
    const {
      dict: n,
      xref: i,
      annotationGlobals: s
    } = e, a = this.data;
    this._needAppearances = e.needAppearances, a.annotationType = Xt.WIDGET, a.fieldName === void 0 && (a.fieldName = this._constructFieldName(n)), a.actions === void 0 && (a.actions = _o(i, n, lf));
    let r = Gn({
      dict: n,
      key: "V",
      getArray: !0
    });
    a.fieldValue = this._decodeFormValue(r);
    const o = Gn({
      dict: n,
      key: "DV",
      getArray: !0
    });
    if (a.defaultFieldValue = this._decodeFormValue(o), r === void 0 && s.xfaDatasets) {
      const d = this._title.str;
      d && (this._hasValueFromXFA = !0, a.fieldValue = r = s.xfaDatasets.getValue(d));
    }
    r === void 0 && a.defaultFieldValue !== null && (a.fieldValue = a.defaultFieldValue), a.alternativeText = Ze(n.get("TU") || ""), this.setDefaultAppearance(e), a.hasAppearance || (a.hasAppearance = this._needAppearances && a.fieldValue !== void 0 && a.fieldValue !== null);
    const c = Gn({
      dict: n,
      key: "FT"
    });
    a.fieldType = c instanceof O ? c.name : null;
    const l = Gn({
      dict: n,
      key: "DR"
    }), h = s.acroForm.get("DR"), f = (u = this.appearance) == null ? void 0 : u.dict.get("Resources");
    this._fieldResources = {
      localResources: l,
      acroFormResources: h,
      appearanceResources: f,
      mergedResources: E.merge({
        xref: i,
        dictArray: [l, f, h],
        mergeSubDicts: !0
      })
    }, a.fieldFlags = Gn({
      dict: n,
      key: "Ff"
    }), (!Number.isInteger(a.fieldFlags) || a.fieldFlags < 0) && (a.fieldFlags = 0), a.password = this.hasFieldFlag(ii.PASSWORD), a.readOnly = this.hasFieldFlag(ii.READONLY), a.required = this.hasFieldFlag(ii.REQUIRED), a.hidden = this._hasFlag(a.annotationFlags, _t.HIDDEN) || this._hasFlag(a.annotationFlags, _t.NOVIEW);
  }
  _decodeFormValue(e) {
    return Array.isArray(e) ? e.filter((n) => typeof n == "string").map((n) => Ze(n)) : e instanceof O ? Ze(e.name) : typeof e == "string" ? Ze(e) : null;
  }
  hasFieldFlag(e) {
    return !!(this.data.fieldFlags & e);
  }
  _isViewable(e) {
    return !0;
  }
  mustBeViewed(e, n) {
    return n ? this.viewable : super.mustBeViewed(e, n) && !this._hasFlag(this.flags, _t.NOVIEW);
  }
  getRotationMatrix(e) {
    var i;
    let n = (i = e == null ? void 0 : e.get(this.data.id)) == null ? void 0 : i.rotation;
    return n === void 0 && (n = this.rotation), n === 0 ? ai : ao(n, this.width, this.height);
  }
  getBorderAndBackgroundAppearances(e) {
    var a;
    let n = (a = e == null ? void 0 : e.get(this.data.id)) == null ? void 0 : a.rotation;
    if (n === void 0 && (n = this.rotation), !this.backgroundColor && !this.borderColor)
      return "";
    const i = n === 0 || n === 180 ? `0 0 ${this.width} ${this.height} re` : `0 0 ${this.height} ${this.width} re`;
    let s = "";
    if (this.backgroundColor && (s = `${Si(this.backgroundColor, !0)} ${i} f `), this.borderColor) {
      const r = this.borderStyle.width || 1;
      s += `${r} w ${Si(this.borderColor, !1)} ${i} S `;
    }
    return s;
  }
  async getOperatorList(e, n, i, s) {
    if (i & un.ANNOTATIONS_FORMS && !(this instanceof sd) && !this.data.noHTML && !this.data.hasOwnCanvas)
      return {
        opList: new on(),
        separateForm: !0,
        separateCanvas: !1
      };
    if (!this._hasText)
      return super.getOperatorList(e, n, i, s);
    const a = await this._getAppearance(e, n, i, s);
    if (this.appearance && a === null)
      return super.getOperatorList(e, n, i, s);
    const r = new on();
    if (!this._defaultAppearance || a === null)
      return {
        opList: r,
        separateForm: !1,
        separateCanvas: !1
      };
    const o = !!(this.data.hasOwnCanvas && i & un.DISPLAY), c = [1, 0, 0, 1, 0, 0], l = [0, 0, this.width, this.height], h = Tl(this.data.rect, l, c);
    let f;
    this.oc && (f = await e.parseMarkedContentProps(this.oc, null)), f !== void 0 && r.addOp(A.beginMarkedContentProps, ["OC", f]), r.addOp(A.beginAnnotation, [this.data.id, this.data.rect, h, this.getRotationMatrix(s), o]);
    const u = new pn(a);
    return await e.getOperatorList({
      stream: u,
      task: n,
      resources: this._fieldResources.mergedResources,
      operatorList: r
    }), r.addOp(A.endAnnotation, []), f !== void 0 && r.addOp(A.endMarkedContent, []), {
      opList: r,
      separateForm: !1,
      separateCanvas: o
    };
  }
  _getMKDict(e) {
    const n = new E(null);
    return e && n.set("R", e), this.borderColor && n.set("BC", ln(this.borderColor)), this.backgroundColor && n.set("BG", ln(this.backgroundColor)), n.size > 0 ? n : null;
  }
  amendSavedDict(e, n) {
  }
  setValue(e, n, i, s) {
    const {
      dict: a,
      ref: r
    } = Zd(e, this.ref, i);
    if (!a)
      e.set("V", n);
    else if (!s.has(r)) {
      const o = a.clone();
      return o.set("V", n), s.put(r, {
        data: o
      }), o;
    }
    return null;
  }
  async save(e, n, i, s) {
    const a = i == null ? void 0 : i.get(this.data.id), r = this._buildFlags(a == null ? void 0 : a.noView, a == null ? void 0 : a.noPrint);
    let o = a == null ? void 0 : a.value, c = a == null ? void 0 : a.rotation;
    if (o === this.data.fieldValue || o === void 0) {
      if (!this._hasValueFromXFA && c === void 0 && r === void 0)
        return;
      o || (o = this.data.fieldValue);
    }
    if (c === void 0 && !this._hasValueFromXFA && Array.isArray(o) && Array.isArray(this.data.fieldValue) && S0(o, this.data.fieldValue) && r === void 0)
      return;
    c === void 0 && (c = this.rotation);
    let l = null;
    if (!this._needAppearances && (l = await this._getAppearance(e, n, un.SAVE, i), l === null && r === void 0))
      return;
    let h = !1;
    l != null && l.needAppearances && (h = !0, l = null);
    const {
      xref: f
    } = e, u = f.fetchIfRef(this.ref);
    if (!(u instanceof E))
      return;
    const d = new E(f);
    for (const p of u.getKeys())
      p !== "AP" && d.set(p, u.getRaw(p));
    if (r !== void 0 && (d.set("F", r), l === null && !h)) {
      const p = u.getRaw("AP");
      p && d.set("AP", p);
    }
    const x = {
      path: this.data.fieldName,
      value: o
    }, g = this.setValue(d, Array.isArray(o) ? o.map($n) : $n(o), f, s);
    this.amendSavedDict(i, g || d);
    const m = this._getMKDict(c);
    if (m && d.set("MK", m), s.put(this.ref, {
      data: d,
      xfa: x,
      needAppearances: h
    }), l !== null) {
      const p = f.getNewTemporaryRef(), b = new E(f);
      d.set("AP", b), b.set("N", p);
      const w = this._getSaveFieldResources(f), y = new pn(l), k = y.dict = new E(f);
      k.set("Subtype", O.get("Form")), k.set("Resources", w);
      const S = c % 180 === 0 ? [0, 0, this.width, this.height] : [0, 0, this.height, this.width];
      k.set("BBox", S);
      const C = this.getRotationMatrix(i);
      C !== ai && k.set("Matrix", C), s.put(p, {
        data: y,
        xfa: null,
        needAppearances: !1
      });
    }
    d.set("M", `D:${ji()}`);
  }
  async _getAppearance(e, n, i, s) {
    if (this.data.password)
      return null;
    const a = s == null ? void 0 : s.get(this.data.id);
    let r, o;
    if (a && (r = a.formattedValue || a.value, o = a.rotation), o === void 0 && r === void 0 && !this._needAppearances && (!this._hasValueFromXFA || this.appearance))
      return null;
    const c = this.getBorderAndBackgroundAppearances(s);
    if (r === void 0 && (r = this.data.fieldValue, !r))
      return `/Tx BMC q ${c}Q EMC`;
    if (Array.isArray(r) && r.length === 1 && (r = r[0]), zt(typeof r == "string", "Expected `value` to be a string."), r = r.trimEnd(), this.data.combo) {
      const D = this.data.options.find(({
        exportValue: M
      }) => r === M);
      r = (D == null ? void 0 : D.displayValue) || r;
    }
    if (r === "")
      return `/Tx BMC q ${c}Q EMC`;
    o === void 0 && (o = this.rotation);
    let l = -1, h;
    this.data.multiLine ? (h = r.split(/\r\n?|\n/).map((D) => D.normalize("NFC")), l = h.length) : h = [r.replace(/\r\n?|\n/, "").normalize("NFC")];
    const f = 1, u = 2;
    let {
      width: d,
      height: x
    } = this;
    (o === 90 || o === 270) && ([d, x] = [x, d]), this._defaultAppearance || (this.data.defaultAppearanceData = n1(this._defaultAppearance = "/Helvetica 0 Tf 0 g"));
    let g = await ri._getFontData(e, n, this.data.defaultAppearanceData, this._fieldResources.mergedResources), m, p, b;
    const w = [];
    let y = !1;
    for (const D of h) {
      const M = g.encodeString(D);
      M.length > 1 && (y = !0), w.push(M.join(""));
    }
    if (y && i & un.SAVE)
      return {
        needAppearances: !0
      };
    if (y && this._isOffscreenCanvasSupported) {
      const D = this.data.comb ? "monospace" : "sans-serif", M = new pi(e.xref, D), _ = M.createFontResources(h.join("")), K = _.getRaw("Font");
      if (this._fieldResources.mergedResources.has("Font")) {
        const W = this._fieldResources.mergedResources.get("Font");
        for (const le of K.getKeys())
          W.set(le, K.getRaw(le));
      } else
        this._fieldResources.mergedResources.set("Font", K);
      const se = M.fontName.name;
      g = await ri._getFontData(e, n, {
        fontName: se,
        fontSize: 0
      }, _);
      for (let W = 0, le = w.length; W < le; W++)
        w[W] = mf(h[W]);
      const H = Object.assign(/* @__PURE__ */ Object.create(null), this.data.defaultAppearanceData);
      this.data.defaultAppearanceData.fontSize = 0, this.data.defaultAppearanceData.fontName = se, [m, p, b] = this._computeFontSize(x - 2 * f, d - 2 * u, r, g, l), this.data.defaultAppearanceData = H;
    } else
      this._isOffscreenCanvasSupported || I("_getAppearance: OffscreenCanvas is not supported, annotation may not render correctly."), [m, p, b] = this._computeFontSize(x - 2 * f, d - 2 * u, r, g, l);
    let k = g.descent;
    isNaN(k) ? k = C1 * b : k = Math.max(C1 * b, Math.abs(k) * p);
    const S = Math.min(Math.floor((x - p) / 2), f), C = this.data.textAlignment;
    if (this.data.multiLine)
      return this._getMultilineAppearance(m, w, g, p, d, x, C, u, S, k, b, s);
    if (this.data.comb)
      return this._getCombAppearance(m, g, w[0], p, d, x, u, S, k, b, s);
    const T = S + k;
    if (C === 0 || C > 2)
      return `/Tx BMC q ${c}BT ` + m + ` 1 0 0 1 ${Xe(u)} ${Xe(T)} Tm (${va(w[0])}) Tj ET Q EMC`;
    const F = {
      shift: 0
    }, R = this._renderText(w[0], g, p, d, C, F, u, T);
    return `/Tx BMC q ${c}BT ` + m + ` 1 0 0 1 0 0 Tm ${R} ET Q EMC`;
  }
  static async _getFontData(e, n, i, s) {
    const a = new on(), r = {
      font: null,
      clone() {
        return this;
      }
    }, {
      fontName: o,
      fontSize: c
    } = i;
    return await e.handleSetFont(s, [o && O.get(o), c], null, a, n, r, null), r.font;
  }
  _getTextWidth(e, n) {
    return Math.sumPrecise(n.charsToGlyphs(e).map((i) => i.width)) / 1e3;
  }
  _computeFontSize(e, n, i, s, a) {
    let {
      fontSize: r
    } = this.data.defaultAppearanceData, o = (r || 12) * Ni, c = Math.round(e / o);
    if (!r) {
      const l = (u) => Math.floor(u * 100) / 100;
      if (a === -1) {
        const u = this._getTextWidth(i, s);
        r = l(Math.min(e / Ni, n / u)), c = 1;
      } else {
        const u = i.split(/\r\n?|\n/), d = [];
        for (const g of u) {
          const m = s.encodeString(g).join(""), p = s.charsToGlyphs(m), b = s.getCharPositions(m);
          d.push({
            line: m,
            glyphs: p,
            positions: b
          });
        }
        const x = (g) => {
          let m = 0;
          for (const p of d) {
            const b = this._splitLine(null, s, g, n, p);
            if (m += b.length * g, m > e)
              return !0;
          }
          return !1;
        };
        for (c = Math.max(c, a); ; ) {
          if (o = e / c, r = l(o / Ni), x(r)) {
            c++;
            continue;
          }
          break;
        }
      }
      const {
        fontName: h,
        fontColor: f
      } = this.data.defaultAppearanceData;
      this._defaultAppearance = n3({
        fontSize: r,
        fontName: h,
        fontColor: f
      });
    }
    return [this._defaultAppearance, r, e / c];
  }
  _renderText(e, n, i, s, a, r, o, c) {
    let l;
    if (a === 1) {
      const f = this._getTextWidth(e, n) * i;
      l = (s - f) / 2;
    } else if (a === 2) {
      const f = this._getTextWidth(e, n) * i;
      l = s - f - o;
    } else
      l = o;
    const h = Xe(l - r.shift);
    return r.shift = l, c = Xe(c), `${h} ${c} Td (${va(e)}) Tj`;
  }
  _getSaveFieldResources(e) {
    var r;
    const {
      localResources: n,
      appearanceResources: i,
      acroFormResources: s
    } = this._fieldResources, a = (r = this.data.defaultAppearanceData) == null ? void 0 : r.fontName;
    if (!a)
      return n || E.empty;
    for (const o of [n, i])
      if (o instanceof E) {
        const c = o.get("Font");
        if (c instanceof E && c.has(a))
          return o;
      }
    if (s instanceof E) {
      const o = s.get("Font");
      if (o instanceof E && o.has(a)) {
        const c = new E(e);
        c.set(a, o.getRaw(a));
        const l = new E(e);
        return l.set("Font", c), E.merge({
          xref: e,
          dictArray: [l, n],
          mergeSubDicts: !0
        });
      }
    }
    return n || E.empty;
  }
  getFieldObject() {
    return null;
  }
}
class n6 extends ri {
  constructor(e) {
    super(e);
    const {
      dict: n
    } = e;
    n.has("PMD") && (this.flags |= _t.HIDDEN, this.data.hidden = !0, I("Barcodes are not supported")), this.data.hasOwnCanvas = this.data.readOnly && !this.data.noHTML, this._hasText = !0, typeof this.data.fieldValue != "string" && (this.data.fieldValue = "");
    let i = Gn({
      dict: n,
      key: "Q"
    });
    (!Number.isInteger(i) || i < 0 || i > 2) && (i = null), this.data.textAlignment = i;
    let s = Gn({
      dict: n,
      key: "MaxLen"
    });
    (!Number.isInteger(s) || s < 0) && (s = 0), this.data.maxLen = s, this.data.multiLine = this.hasFieldFlag(ii.MULTILINE), this.data.comb = this.hasFieldFlag(ii.COMB) && !this.data.multiLine && !this.data.password && !this.hasFieldFlag(ii.FILESELECT) && this.data.maxLen !== 0, this.data.doNotScroll = this.hasFieldFlag(ii.DONOTSCROLL);
  }
  get hasTextContent() {
    return !!this.appearance && !this._needAppearances;
  }
  _getCombAppearance(e, n, i, s, a, r, o, c, l, h, f) {
    const u = a / this.data.maxLen, d = this.getBorderAndBackgroundAppearances(f), x = [], g = n.getCharPositions(i);
    for (const [p, b] of g)
      x.push(`(${va(i.substring(p, b))}) Tj`);
    const m = x.join(` ${Xe(u)} 0 Td `);
    return `/Tx BMC q ${d}BT ` + e + ` 1 0 0 1 ${Xe(o)} ${Xe(c + l)} Tm ${m} ET Q EMC`;
  }
  _getMultilineAppearance(e, n, i, s, a, r, o, c, l, h, f, u) {
    const d = [], x = a - 2 * c, g = {
      shift: 0
    };
    for (let b = 0, w = n.length; b < w; b++) {
      const y = n[b], k = this._splitLine(y, i, s, x);
      for (let S = 0, C = k.length; S < C; S++) {
        const T = k[S], F = b === 0 && S === 0 ? -l - (f - h) : -f;
        d.push(this._renderText(T, i, s, a, o, g, c, F));
      }
    }
    const m = this.getBorderAndBackgroundAppearances(u), p = d.join(`
`);
    return `/Tx BMC q ${m}BT ` + e + ` 1 0 0 1 0 ${Xe(r)} Tm ${p} ET Q EMC`;
  }
  _splitLine(e, n, i, s, a = {}) {
    e = a.line || e;
    const r = a.glyphs || n.charsToGlyphs(e);
    if (r.length <= 1)
      return [e];
    const o = a.positions || n.getCharPositions(e), c = i / 1e3, l = [];
    let h = -1, f = -1, u = -1, d = 0, x = 0;
    for (let g = 0, m = r.length; g < m; g++) {
      const [p, b] = o[g], w = r[g], y = w.width * c;
      w.unicode === " " ? x + y > s ? (l.push(e.substring(d, p)), d = p, x = y, h = -1, u = -1) : (x += y, h = p, f = b, u = g) : x + y > s ? h !== -1 ? (l.push(e.substring(d, f)), d = f, g = u + 1, h = -1, x = 0) : (l.push(e.substring(d, p)), d = p, x = y) : x += y;
    }
    return d < e.length && l.push(e.substring(d, e.length)), l;
  }
  async extractTextContent(e, n, i) {
    await super.extractTextContent(e, n, i);
    const s = this.data.textContent;
    if (!s)
      return;
    const a = s.join(`
`);
    if (a === this.data.fieldValue)
      return;
    const r = a.replaceAll(/([.*+?^${}()|[\]\\])|(\s+)/g, (o, c) => c ? `\\${c}` : "\\s+");
    new RegExp(`^\\s*${r}\\s*$`).test(this.data.fieldValue) && (this.data.textContent = this.data.fieldValue.split(`
`));
  }
  getFieldObject() {
    return {
      id: this.data.id,
      value: this.data.fieldValue,
      defaultValue: this.data.defaultFieldValue || "",
      multiline: this.data.multiLine,
      password: this.data.password,
      charLimit: this.data.maxLen,
      comb: this.data.comb,
      editable: !this.data.readOnly,
      hidden: this.data.hidden,
      name: this.data.fieldName,
      rect: this.data.rect,
      actions: this.data.actions,
      page: this.data.pageIndex,
      strokeColor: this.data.borderColor,
      fillColor: this.data.backgroundColor,
      rotation: this.rotation,
      type: "text"
    };
  }
}
class i6 extends ri {
  constructor(e) {
    super(e), this.checkedAppearance = null, this.uncheckedAppearance = null;
    const n = this.hasFieldFlag(ii.RADIO), i = this.hasFieldFlag(ii.PUSHBUTTON);
    this.data.checkBox = !n && !i, this.data.radioButton = n && !i, this.data.pushButton = i, this.data.isTooltipOnly = !1, this.data.checkBox ? this._processCheckBox(e) : this.data.radioButton ? this._processRadioButton(e) : this.data.pushButton ? (this.data.hasOwnCanvas = !0, this.data.noHTML = !1, this._processPushButton(e)) : I("Invalid field flags for button widget annotation");
  }
  async getOperatorList(e, n, i, s) {
    if (this.data.pushButton)
      return super.getOperatorList(e, n, i, !1, s);
    let a = null, r = null;
    if (s) {
      const c = s.get(this.data.id);
      a = c ? c.value : null, r = c ? c.rotation : null;
    }
    if (a === null && this.appearance)
      return super.getOperatorList(e, n, i, s);
    a == null && (a = this.data.checkBox ? this.data.fieldValue === this.data.exportValue : this.data.fieldValue === this.data.buttonValue);
    const o = a ? this.checkedAppearance : this.uncheckedAppearance;
    if (o) {
      const c = this.appearance, l = ts(o.dict.getArray("Matrix"), ai);
      r && o.dict.set("Matrix", this.getRotationMatrix(s)), this.appearance = o;
      const h = super.getOperatorList(e, n, i, s);
      return this.appearance = c, o.dict.set("Matrix", l), h;
    }
    return {
      opList: new on(),
      separateForm: !1,
      separateCanvas: !1
    };
  }
  async save(e, n, i, s) {
    if (this.data.checkBox) {
      this._saveCheckbox(e, n, i, s);
      return;
    }
    this.data.radioButton && this._saveRadioButton(e, n, i, s);
  }
  async _saveCheckbox(e, n, i, s) {
    if (!i)
      return;
    const a = i.get(this.data.id), r = this._buildFlags(a == null ? void 0 : a.noView, a == null ? void 0 : a.noPrint);
    let o = a == null ? void 0 : a.rotation, c = a == null ? void 0 : a.value;
    if (o === void 0 && r === void 0 && (c === void 0 || this.data.fieldValue === this.data.exportValue === c))
      return;
    let l = e.xref.fetchIfRef(this.ref);
    if (!(l instanceof E))
      return;
    l = l.clone(), o === void 0 && (o = this.rotation), c === void 0 && (c = this.data.fieldValue === this.data.exportValue);
    const h = {
      path: this.data.fieldName,
      value: c ? this.data.exportValue : ""
    }, f = O.get(c ? this.data.exportValue : "Off");
    this.setValue(l, f, e.xref, s), l.set("AS", f), l.set("M", `D:${ji()}`), r !== void 0 && l.set("F", r);
    const u = this._getMKDict(o);
    u && l.set("MK", u), s.put(this.ref, {
      data: l,
      xfa: h,
      needAppearances: !1
    });
  }
  async _saveRadioButton(e, n, i, s) {
    if (!i)
      return;
    const a = i.get(this.data.id), r = this._buildFlags(a == null ? void 0 : a.noView, a == null ? void 0 : a.noPrint);
    let o = a == null ? void 0 : a.rotation, c = a == null ? void 0 : a.value;
    if (o === void 0 && r === void 0 && (c === void 0 || this.data.fieldValue === this.data.buttonValue === c))
      return;
    let l = e.xref.fetchIfRef(this.ref);
    if (!(l instanceof E))
      return;
    l = l.clone(), c === void 0 && (c = this.data.fieldValue === this.data.buttonValue), o === void 0 && (o = this.rotation);
    const h = {
      path: this.data.fieldName,
      value: c ? this.data.buttonValue : ""
    }, f = O.get(c ? this.data.buttonValue : "Off");
    c && this.setValue(l, f, e.xref, s), l.set("AS", f), l.set("M", `D:${ji()}`), r !== void 0 && l.set("F", r);
    const u = this._getMKDict(o);
    u && l.set("MK", u), s.put(this.ref, {
      data: l,
      xfa: h,
      needAppearances: !1
    });
  }
  _getDefaultCheckedAppearance(e, n) {
    const {
      width: i,
      height: s
    } = this, a = [0, 0, i, s], o = Math.min(i, s) * 0.8;
    let c, l;
    n === "check" ? (c = {
      width: 0.755 * o,
      height: 0.705 * o
    }, l = "3") : n === "disc" ? (c = {
      width: 0.791 * o,
      height: 0.705 * o
    }, l = "l") : Ke(`_getDefaultCheckedAppearance - unsupported type: ${n}`);
    const h = Xe((i - c.width) / 2), f = Xe((s - c.height) / 2), u = `q BT /PdfJsZaDb ${o} Tf 0 g ${h} ${f} Td (${l}) Tj ET Q`, d = new E(e.xref);
    d.set("FormType", 1), d.set("Subtype", O.get("Form")), d.set("Type", O.get("XObject")), d.set("BBox", a), d.set("Matrix", [1, 0, 0, 1, 0, 0]), d.set("Length", u.length);
    const x = new E(e.xref), g = new E(e.xref);
    g.set("PdfJsZaDb", this.fallbackFontDict), x.set("Font", g), d.set("Resources", x), this.checkedAppearance = new pn(u), this.checkedAppearance.dict = d, this._streams.push(this.checkedAppearance);
  }
  _processCheckBox(e) {
    const n = e.dict.get("AP");
    if (!(n instanceof E))
      return;
    const i = n.get("N");
    if (!(i instanceof E))
      return;
    const s = this._decodeFormValue(e.dict.get("AS"));
    typeof s == "string" && (this.data.fieldValue = s);
    const a = this.data.fieldValue !== null && this.data.fieldValue !== "Off" ? this.data.fieldValue : "Yes", r = this._decodeFormValue(i.getKeys());
    if (r.length === 0)
      r.push("Off", a);
    else if (r.length === 1)
      r[0] === "Off" ? r.push(a) : r.unshift("Off");
    else if (r.includes(a))
      r.length = 0, r.push("Off", a);
    else {
      const l = r.find((h) => h !== "Off");
      r.length = 0, r.push("Off", l);
    }
    r.includes(this.data.fieldValue) || (this.data.fieldValue = "Off"), this.data.exportValue = r[1];
    const o = i.get(this.data.exportValue);
    this.checkedAppearance = o instanceof je ? o : null;
    const c = i.get("Off");
    this.uncheckedAppearance = c instanceof je ? c : null, this.checkedAppearance ? this._streams.push(this.checkedAppearance) : this._getDefaultCheckedAppearance(e, "check"), this.uncheckedAppearance && this._streams.push(this.uncheckedAppearance), this._fallbackFontDict = this.fallbackFontDict, this.data.defaultFieldValue === null && (this.data.defaultFieldValue = "Off");
  }
  _processRadioButton(e) {
    this.data.buttonValue = null;
    const n = e.dict.get("Parent");
    if (n instanceof E) {
      this.parent = e.dict.getRaw("Parent");
      const o = n.get("V");
      o instanceof O && (this.data.fieldValue = this._decodeFormValue(o));
    }
    const i = e.dict.get("AP");
    if (!(i instanceof E))
      return;
    const s = i.get("N");
    if (!(s instanceof E))
      return;
    for (const o of s.getKeys())
      if (o !== "Off") {
        this.data.buttonValue = this._decodeFormValue(o);
        break;
      }
    const a = s.get(this.data.buttonValue);
    this.checkedAppearance = a instanceof je ? a : null;
    const r = s.get("Off");
    this.uncheckedAppearance = r instanceof je ? r : null, this.checkedAppearance ? this._streams.push(this.checkedAppearance) : this._getDefaultCheckedAppearance(e, "disc"), this.uncheckedAppearance && this._streams.push(this.uncheckedAppearance), this._fallbackFontDict = this.fallbackFontDict, this.data.defaultFieldValue === null && (this.data.defaultFieldValue = "Off");
  }
  _processPushButton(e) {
    const {
      dict: n,
      annotationGlobals: i
    } = e;
    if (!n.has("A") && !n.has("AA") && !this.data.alternativeText) {
      I("Push buttons without action dictionaries are not supported");
      return;
    }
    this.data.isTooltipOnly = !n.has("A") && !n.has("AA"), M0.parseDestDictionary({
      destDict: n,
      resultObj: this.data,
      docBaseUrl: i.baseUrl,
      docAttachments: i.attachments
    });
  }
  getFieldObject() {
    let e = "button", n;
    return this.data.checkBox ? (e = "checkbox", n = this.data.exportValue) : this.data.radioButton && (e = "radiobutton", n = this.data.buttonValue), {
      id: this.data.id,
      value: this.data.fieldValue || "Off",
      defaultValue: this.data.defaultFieldValue,
      exportValues: n,
      editable: !this.data.readOnly,
      name: this.data.fieldName,
      rect: this.data.rect,
      hidden: this.data.hidden,
      actions: this.data.actions,
      page: this.data.pageIndex,
      strokeColor: this.data.borderColor,
      fillColor: this.data.backgroundColor,
      rotation: this.rotation,
      type: e
    };
  }
  get fallbackFontDict() {
    const e = new E();
    return e.set("BaseFont", O.get("ZapfDingbats")), e.set("Type", O.get("FallbackType")), e.set("Subtype", O.get("FallbackType")), e.set("Encoding", O.get("ZapfDingbatsEncoding")), Q(this, "fallbackFontDict", e);
  }
}
class s6 extends ri {
  constructor(e) {
    var a;
    super(e);
    const {
      dict: n,
      xref: i
    } = e;
    this.indices = n.getArray("I"), this.hasIndices = Array.isArray(this.indices) && this.indices.length > 0, this.data.options = [];
    const s = Gn({
      dict: n,
      key: "Opt"
    });
    if (Array.isArray(s))
      for (let r = 0, o = s.length; r < o; r++) {
        const c = i.fetchIfRef(s[r]), l = Array.isArray(c);
        this.data.options[r] = {
          exportValue: this._decodeFormValue(l ? i.fetchIfRef(c[0]) : c),
          displayValue: this._decodeFormValue(l ? i.fetchIfRef(c[1]) : c)
        };
      }
    if (!this.hasIndices)
      typeof this.data.fieldValue == "string" ? this.data.fieldValue = [this.data.fieldValue] : (a = this.data).fieldValue || (a.fieldValue = []);
    else {
      this.data.fieldValue = [];
      const r = this.data.options.length;
      for (const o of this.indices)
        Number.isInteger(o) && o >= 0 && o < r && this.data.fieldValue.push(this.data.options[o].exportValue);
    }
    this.data.options.length === 0 && this.data.fieldValue.length > 0 && (this.data.options = this.data.fieldValue.map((r) => ({
      exportValue: r,
      displayValue: r
    }))), this.data.combo = this.hasFieldFlag(ii.COMBO), this.data.multiSelect = this.hasFieldFlag(ii.MULTISELECT), this._hasText = !0;
  }
  getFieldObject() {
    const e = this.data.combo ? "combobox" : "listbox", n = this.data.fieldValue.length > 0 ? this.data.fieldValue[0] : null;
    return {
      id: this.data.id,
      value: n,
      defaultValue: this.data.defaultFieldValue,
      editable: !this.data.readOnly,
      name: this.data.fieldName,
      rect: this.data.rect,
      numItems: this.data.fieldValue.length,
      multipleSelection: this.data.multiSelect,
      hidden: this.data.hidden,
      actions: this.data.actions,
      items: this.data.options,
      page: this.data.pageIndex,
      strokeColor: this.data.borderColor,
      fillColor: this.data.backgroundColor,
      rotation: this.rotation,
      type: e
    };
  }
  amendSavedDict(e, n) {
    var r;
    if (!this.hasIndices)
      return;
    let i = (r = e == null ? void 0 : e.get(this.data.id)) == null ? void 0 : r.value;
    Array.isArray(i) || (i = [i]);
    const s = [], {
      options: a
    } = this.data;
    for (let o = 0, c = 0, l = a.length; o < l; o++)
      a[o].exportValue === i[c] && (s.push(o), c += 1);
    n.set("I", s);
  }
  async _getAppearance(e, n, i, s) {
    if (this.data.combo)
      return super._getAppearance(e, n, i, s);
    let a, r;
    const o = s == null ? void 0 : s.get(this.data.id);
    if (o && (r = o.rotation, a = o.value), r === void 0 && a === void 0 && !this._needAppearances)
      return null;
    a === void 0 ? a = this.data.fieldValue : Array.isArray(a) || (a = [a]);
    const c = 1, l = 2;
    let {
      width: h,
      height: f
    } = this;
    (r === 90 || r === 270) && ([h, f] = [f, h]);
    const u = this.data.options.length, d = [];
    for (let T = 0; T < u; T++) {
      const {
        exportValue: F
      } = this.data.options[T];
      a.includes(F) && d.push(T);
    }
    this._defaultAppearance || (this.data.defaultAppearanceData = n1(this._defaultAppearance = "/Helvetica 0 Tf 0 g"));
    const x = await ri._getFontData(e, n, this.data.defaultAppearanceData, this._fieldResources.mergedResources);
    let g, {
      fontSize: m
    } = this.data.defaultAppearanceData;
    if (m)
      g = this._defaultAppearance;
    else {
      const T = (f - c) / u;
      let F = -1, R;
      for (const {
        displayValue: D
      } of this.data.options) {
        const M = this._getTextWidth(D, x);
        M > F && (F = M, R = D);
      }
      [g, m] = this._computeFontSize(T, h - 2 * l, R, x, -1);
    }
    const p = m * Ni, b = (p - m) / 2, w = Math.floor(f / p);
    let y = 0;
    if (d.length > 0) {
      const T = Math.min(...d), F = Math.max(...d);
      y = Math.max(0, F - w + 1), y > T && (y = T);
    }
    const k = Math.min(y + w + 1, u), S = ["/Tx BMC q", `1 1 ${h} ${f} re W n`];
    if (d.length) {
      S.push("0.600006 0.756866 0.854904 rg");
      for (const T of d)
        y <= T && T < k && S.push(`1 ${f - (T - y + 1) * p} ${h} ${p} re f`);
    }
    S.push("BT", g, `1 0 0 1 0 ${f} Tm`);
    const C = {
      shift: 0
    };
    for (let T = y; T < k; T++) {
      const {
        displayValue: F
      } = this.data.options[T], R = T === y ? b : 0;
      S.push(this._renderText(F, x, m, h, 0, C, l, -p + R));
    }
    return S.push("ET Q EMC"), S.join(`
`);
  }
}
class sd extends ri {
  constructor(e) {
    super(e), this.data.fieldValue = null, this.data.hasOwnCanvas = this.data.noRotate, this.data.noHTML = !this.data.hasOwnCanvas;
  }
  getFieldObject() {
    return {
      id: this.data.id,
      value: null,
      page: this.data.pageIndex,
      type: "signature"
    };
  }
}
class a6 extends Tn {
  constructor(e) {
    super(e), this.data.noRotate = !0, this.data.hasOwnCanvas = this.data.noRotate, this.data.noHTML = !1;
    const {
      dict: i
    } = e;
    this.data.annotationType = Xt.TEXT, this.data.hasAppearance ? this.data.name = "NoIcon" : (this.data.rect[1] = this.data.rect[3] - 22, this.data.rect[2] = this.data.rect[0] + 22, this.data.name = i.has("Name") ? i.get("Name").name : "Note"), i.has("State") ? (this.data.state = i.get("State") || null, this.data.stateModel = i.get("StateModel") || null) : (this.data.state = null, this.data.stateModel = null);
  }
}
class r6 extends hr {
  constructor(e) {
    var a;
    super(e);
    const {
      dict: n,
      annotationGlobals: i
    } = e;
    this.data.annotationType = Xt.LINK, this.data.noHTML = !1;
    const s = lr(n, this.rectangle);
    s && (this.data.quadPoints = s), (a = this.data).borderColor || (a.borderColor = this.data.color), M0.parseDestDictionary({
      destDict: n,
      resultObj: this.data,
      docBaseUrl: i.baseUrl,
      docAttachments: i.attachments
    });
  }
}
class ad extends hr {
  constructor(e) {
    super(e);
    const {
      dict: n
    } = e;
    this.data.annotationType = Xt.POPUP, this.data.noHTML = !1, (this.width === 0 || this.height === 0) && (this.data.rect = null);
    let i = n.get("Parent");
    if (!i) {
      I("Popup annotation has a missing or invalid parent annotation.");
      return;
    }
    this.data.parentRect = qi(i.getArray("Rect"), null);
    const s = i.get("RT");
    if (Tt(s, Mc.GROUP) && (i = i.get("IRT")), i.has("M") ? (this.setModificationDate(i.get("M")), this.data.modificationDate = this.modificationDate) : this.data.modificationDate = null, i.has("C") ? (this.setColor(i.getArray("C")), this.data.color = this.color) : this.data.color = null, !this.viewable) {
      const a = i.get("F");
      this._isViewable(a) && this.setFlags(a);
    }
    this.setTitle(i.get("T")), this.data.titleObj = this._title, this.setContents(i.get("Contents")), this.data.contentsObj = this._contents, i.has("RC") && (this.data.richText = cr.getRichTextAsHtml(i.get("RC"))), this.data.open = !!n.get("Open");
  }
}
class Fc extends Tn {
  constructor(e) {
    var a;
    super(e), this.data.hasOwnCanvas = this.data.noRotate, this.data.isEditable = !this.data.noHTML, this.data.noHTML = !1;
    const {
      annotationGlobals: n,
      evaluatorOptions: i,
      xref: s
    } = e;
    if (this.data.annotationType = Xt.FREETEXT, this.setDefaultAppearance(e), this._hasAppearance = !!this.appearance, this._hasAppearance) {
      const {
        fontColor: r,
        fontSize: o
      } = t3(this.appearance, i, s, n.globalColorSpaceCache);
      this.data.defaultAppearanceData.fontColor = r, this.data.defaultAppearanceData.fontSize = o || 10;
    } else {
      (a = this.data.defaultAppearanceData).fontSize || (a.fontSize = 10);
      const {
        fontColor: r,
        fontSize: o
      } = this.data.defaultAppearanceData;
      if (this._contents.str) {
        this.data.textContent = this._contents.str.split(/\r\n?|\n/).map((f) => f.trimEnd());
        const {
          coords: c,
          bbox: l,
          matrix: h
        } = pi.getFirstPositionInfo(this.rectangle, this.rotation, o);
        this.data.textPosition = this._transformPoint(c, l, h);
      }
      if (this._isOffscreenCanvasSupported) {
        const c = e.dict.get("CA"), l = new pi(s, "sans-serif");
        this.appearance = l.createAppearance(this._contents.str, this.rectangle, this.rotation, o, r, c), this._streams.push(this.appearance);
      } else
        I("FreeTextAnnotation: OffscreenCanvas is not supported, annotation may not render correctly.");
    }
  }
  get hasTextContent() {
    return this._hasAppearance;
  }
  static createNewDict(e, n, {
    apRef: i,
    ap: s
  }) {
    const {
      color: a,
      fontSize: r,
      oldAnnotation: o,
      rect: c,
      rotation: l,
      user: h,
      value: f
    } = e, u = o || new E(n);
    u.set("Type", O.get("Annot")), u.set("Subtype", O.get("FreeText")), o ? (u.set("M", `D:${ji()}`), u.delete("RC")) : u.set("CreationDate", `D:${ji()}`), u.set("Rect", c);
    const d = `/Helv ${r} Tf ${Si(a, !0)}`;
    if (u.set("DA", d), u.set("Contents", $n(f)), u.set("F", 4), u.set("Border", [0, 0, 0]), u.set("Rotate", l), h && u.set("T", $n(h)), i || s) {
      const x = new E(n);
      u.set("AP", x), i ? x.set("N", i) : x.set("N", s);
    }
    return u;
  }
  static async createNewAppearanceStream(e, n, i) {
    const {
      baseFontRef: s,
      evaluator: a,
      task: r
    } = i, {
      color: o,
      fontSize: c,
      rect: l,
      rotation: h,
      value: f
    } = e, u = new E(n), d = new E(n);
    if (s)
      d.set("Helv", s);
    else {
      const Ae = new E(n);
      Ae.set("BaseFont", O.get("Helvetica")), Ae.set("Type", O.get("Font")), Ae.set("Subtype", O.get("Type1")), Ae.set("Encoding", O.get("WinAnsiEncoding")), d.set("Helv", Ae);
    }
    u.set("Font", d);
    const x = await ri._getFontData(a, r, {
      fontName: "Helv",
      fontSize: c
    }, u), [g, m, p, b] = l;
    let w = p - g, y = b - m;
    h % 180 !== 0 && ([w, y] = [y, w]);
    const k = f.split(`
`), S = c / 1e3;
    let C = -1 / 0;
    const T = [];
    for (let Ae of k) {
      const Ve = x.encodeString(Ae);
      if (Ve.length > 1)
        return null;
      Ae = Ve.join(""), T.push(Ae);
      let pe = 0;
      const B = x.charsToGlyphs(Ae);
      for (const P of B)
        pe += P.width * S;
      C = Math.max(C, pe);
    }
    let F = 1;
    C > w && (F = w / C);
    let R = 1;
    const D = Ni * c, M = (Ni - to) * c, _ = D * k.length;
    _ > y && (R = y / _);
    const K = Math.min(F, R), se = c * K;
    let H, W, le;
    switch (h) {
      case 0:
        le = [1, 0, 0, 1], W = [l[0], l[1], w, y], H = [l[0], l[3] - M];
        break;
      case 90:
        le = [0, 1, -1, 0], W = [l[1], -l[2], w, y], H = [l[1], -l[0] - M];
        break;
      case 180:
        le = [-1, 0, 0, -1], W = [-l[2], -l[3], w, y], H = [-l[2], -l[1] - M];
        break;
      case 270:
        le = [0, -1, 1, 0], W = [-l[3], l[0], w, y], H = [-l[3], l[2] - M];
        break;
    }
    const q = ["q", `${le.join(" ")} 0 0 cm`, `${W.join(" ")} re W n`, "BT", `${Si(o, !0)}`, `0 Tc /Helv ${Xe(se)} Tf`];
    q.push(`${H.join(" ")} Td (${va(T[0])}) Tj`);
    const L = Xe(D);
    for (let Ae = 1, Ve = T.length; Ae < Ve; Ae++) {
      const pe = T[Ae];
      q.push(`0 -${L} Td (${va(pe)}) Tj`);
    }
    q.push("ET", "Q");
    const Fe = q.join(`
`), ve = new E(n);
    ve.set("FormType", 1), ve.set("Subtype", O.get("Form")), ve.set("Type", O.get("XObject")), ve.set("BBox", l), ve.set("Resources", u), ve.set("Matrix", [1, 0, 0, 1, -l[0], -l[1]]);
    const Be = new pn(Fe);
    return Be.dict = ve, Be;
  }
}
class o6 extends Tn {
  constructor(e) {
    super(e);
    const {
      dict: n,
      xref: i
    } = e;
    this.data.annotationType = Xt.LINE, this.data.hasOwnCanvas = this.data.noRotate, this.data.noHTML = !1;
    const s = jc(n.getArray("L"), [0, 0, 0, 0]);
    if (this.data.lineCoordinates = tt.normalizeRect(s), this.setLineEndings(n.getArray("LE")), this.data.lineEndings = this.lineEndings, !this.appearance) {
      const a = this.color ? ln(this.color) : [0, 0, 0], r = n.get("CA"), o = ga(n.getArray("IC"), null), c = o ? ln(o) : null, l = c ? r : null, h = this.borderStyle.width || 1, f = 2 * h, u = [this.data.lineCoordinates[0] - f, this.data.lineCoordinates[1] - f, this.data.lineCoordinates[2] + f, this.data.lineCoordinates[3] + f];
      tt.intersect(this.rectangle, u) || (this.rectangle = u), this._setDefaultAppearance({
        xref: i,
        extra: `${h} w`,
        strokeColor: a,
        fillColor: c,
        strokeAlpha: r,
        fillAlpha: l,
        pointsCallback: (d, x) => (d.push(`${s[0]} ${s[1]} m`, `${s[2]} ${s[3]} l`, "S"), [x[0] - h, x[7] - h, x[2] + h, x[3] + h])
      });
    }
  }
}
class c6 extends Tn {
  constructor(e) {
    super(e);
    const {
      dict: n,
      xref: i
    } = e;
    if (this.data.annotationType = Xt.SQUARE, this.data.hasOwnCanvas = this.data.noRotate, this.data.noHTML = !1, !this.appearance) {
      const s = this.color ? ln(this.color) : [0, 0, 0], a = n.get("CA"), r = ga(n.getArray("IC"), null), o = r ? ln(r) : null, c = o ? a : null;
      if (this.borderStyle.width === 0 && !o)
        return;
      this._setDefaultAppearance({
        xref: i,
        extra: `${this.borderStyle.width} w`,
        strokeColor: s,
        fillColor: o,
        strokeAlpha: a,
        fillAlpha: c,
        pointsCallback: (l, h) => {
          const f = h[4] + this.borderStyle.width / 2, u = h[5] + this.borderStyle.width / 2, d = h[6] - h[4] - this.borderStyle.width, x = h[3] - h[7] - this.borderStyle.width;
          return l.push(`${f} ${u} ${d} ${x} re`), o ? l.push("B") : l.push("S"), [h[0], h[7], h[2], h[3]];
        }
      });
    }
  }
}
class l6 extends Tn {
  constructor(e) {
    super(e);
    const {
      dict: n,
      xref: i
    } = e;
    if (this.data.annotationType = Xt.CIRCLE, !this.appearance) {
      const s = this.color ? ln(this.color) : [0, 0, 0], a = n.get("CA"), r = ga(n.getArray("IC"), null), o = r ? ln(r) : null, c = o ? a : null;
      if (this.borderStyle.width === 0 && !o)
        return;
      const l = 4 / 3 * Math.tan(Math.PI / (2 * 4));
      this._setDefaultAppearance({
        xref: i,
        extra: `${this.borderStyle.width} w`,
        strokeColor: s,
        fillColor: o,
        strokeAlpha: a,
        fillAlpha: c,
        pointsCallback: (h, f) => {
          const u = f[0] + this.borderStyle.width / 2, d = f[1] - this.borderStyle.width / 2, x = f[6] - this.borderStyle.width / 2, g = f[7] + this.borderStyle.width / 2, m = u + (x - u) / 2, p = d + (g - d) / 2, b = (x - u) / 2 * l, w = (g - d) / 2 * l;
          return h.push(`${m} ${g} m`, `${m + b} ${g} ${x} ${p + w} ${x} ${p} c`, `${x} ${p - w} ${m + b} ${d} ${m} ${d} c`, `${m - b} ${d} ${u} ${p - w} ${u} ${p} c`, `${u} ${p + w} ${m - b} ${g} ${m} ${g} c`, "h"), o ? h.push("B") : h.push("S"), [f[0], f[7], f[2], f[3]];
        }
      });
    }
  }
}
class rd extends Tn {
  constructor(e) {
    super(e);
    const {
      dict: n,
      xref: i
    } = e;
    this.data.annotationType = Xt.POLYLINE, this.data.hasOwnCanvas = this.data.noRotate, this.data.noHTML = !1, this.data.vertices = null, this instanceof od || (this.setLineEndings(n.getArray("LE")), this.data.lineEndings = this.lineEndings);
    const s = n.getArray("Vertices");
    if (!xn(s, null))
      return;
    const a = this.data.vertices = Float32Array.from(s);
    if (!this.appearance) {
      const r = this.color ? ln(this.color) : [0, 0, 0], o = n.get("CA"), c = this.borderStyle.width || 1, l = 2 * c, h = [1 / 0, 1 / 0, -1 / 0, -1 / 0];
      for (let f = 0, u = a.length; f < u; f += 2)
        tt.rectBoundingBox(a[f] - l, a[f + 1] - l, a[f] + l, a[f + 1] + l, h);
      tt.intersect(this.rectangle, h) || (this.rectangle = h), this._setDefaultAppearance({
        xref: i,
        extra: `${c} w`,
        strokeColor: r,
        strokeAlpha: o,
        pointsCallback: (f, u) => {
          for (let d = 0, x = a.length; d < x; d += 2)
            f.push(`${a[d]} ${a[d + 1]} ${d === 0 ? "m" : "l"}`);
          return f.push("S"), [u[0], u[7], u[2], u[3]];
        }
      });
    }
  }
}
class od extends rd {
  constructor(e) {
    super(e), this.data.annotationType = Xt.POLYGON;
  }
}
class h6 extends Tn {
  constructor(e) {
    super(e), this.data.annotationType = Xt.CARET;
  }
}
class e0 extends Tn {
  constructor(e) {
    super(e), this.data.hasOwnCanvas = this.data.noRotate, this.data.noHTML = !1;
    const {
      dict: n,
      xref: i
    } = e;
    this.data.annotationType = Xt.INK, this.data.inkLists = [], this.data.isEditable = !this.data.noHTML, this.data.noHTML = !1, this.data.opacity = n.get("CA") || 1;
    const s = n.getArray("InkList");
    if (Array.isArray(s)) {
      for (let a = 0, r = s.length; a < r; ++a) {
        if (!Array.isArray(s[a]))
          continue;
        const o = new Float32Array(s[a].length);
        this.data.inkLists.push(o);
        for (let c = 0, l = s[a].length; c < l; c += 2) {
          const h = i.fetchIfRef(s[a][c]), f = i.fetchIfRef(s[a][c + 1]);
          typeof h == "number" && typeof f == "number" && (o[c] = h, o[c + 1] = f);
        }
      }
      if (!this.appearance) {
        const a = this.color ? ln(this.color) : [0, 0, 0], r = n.get("CA"), o = this.borderStyle.width || 1, c = 2 * o, l = [1 / 0, 1 / 0, -1 / 0, -1 / 0];
        for (const h of this.data.inkLists)
          for (let f = 0, u = h.length; f < u; f += 2)
            tt.rectBoundingBox(h[f] - c, h[f + 1] - c, h[f] + c, h[f + 1] + c, l);
        tt.intersect(this.rectangle, l) || (this.rectangle = l), this._setDefaultAppearance({
          xref: i,
          extra: `${o} w`,
          strokeColor: a,
          strokeAlpha: r,
          pointsCallback: (h, f) => {
            for (const u of this.data.inkLists) {
              for (let d = 0, x = u.length; d < x; d += 2)
                h.push(`${u[d]} ${u[d + 1]} ${d === 0 ? "m" : "l"}`);
              h.push("S");
            }
            return [f[0], f[7], f[2], f[3]];
          }
        });
      }
    }
  }
  static createNewDict(e, n, {
    apRef: i,
    ap: s
  }) {
    const {
      oldAnnotation: a,
      color: r,
      opacity: o,
      paths: c,
      outlines: l,
      rect: h,
      rotation: f,
      thickness: u,
      user: d
    } = e, x = a || new E(n);
    x.set("Type", O.get("Annot")), x.set("Subtype", O.get("Ink")), x.set(a ? "M" : "CreationDate", `D:${ji()}`), x.set("Rect", h), x.set("InkList", (l == null ? void 0 : l.points) || c.points), x.set("F", 4), x.set("Rotate", f), d && x.set("T", $n(d)), l && x.set("IT", O.get("InkHighlight"));
    const g = new E(n);
    x.set("BS", g), g.set("W", u), x.set("C", ln(r)), x.set("CA", o);
    const m = new E(n);
    return x.set("AP", m), i ? m.set("N", i) : m.set("N", s), x;
  }
  static async createNewAppearanceStream(e, n, i) {
    if (e.outlines)
      return this.createNewAppearanceStreamForHighlight(e, n, i);
    const {
      color: s,
      rect: a,
      paths: r,
      thickness: o,
      opacity: c
    } = e, l = [`${o} w 1 J 1 j`, `${Si(s, !1)}`];
    c !== 1 && l.push("/R0 gs");
    for (const d of r.lines) {
      l.push(`${Xe(d[4])} ${Xe(d[5])} m`);
      for (let x = 6, g = d.length; x < g; x += 6)
        if (isNaN(d[x]))
          l.push(`${Xe(d[x + 4])} ${Xe(d[x + 5])} l`);
        else {
          const [m, p, b, w, y, k] = d.slice(x, x + 6);
          l.push([m, p, b, w, y, k].map(Xe).join(" ") + " c");
        }
      d.length === 6 && l.push(`${Xe(d[4])} ${Xe(d[5])} l`);
    }
    l.push("S");
    const h = l.join(`
`), f = new E(n);
    if (f.set("FormType", 1), f.set("Subtype", O.get("Form")), f.set("Type", O.get("XObject")), f.set("BBox", a), f.set("Length", h.length), c !== 1) {
      const d = new E(n), x = new E(n), g = new E(n);
      g.set("CA", c), g.set("Type", O.get("ExtGState")), x.set("R0", g), d.set("ExtGState", x), f.set("Resources", d);
    }
    const u = new pn(h);
    return u.dict = f, u;
  }
  static async createNewAppearanceStreamForHighlight(e, n, i) {
    const {
      color: s,
      rect: a,
      outlines: {
        outline: r
      },
      opacity: o
    } = e, c = [`${Si(s, !0)}`, "/R0 gs"];
    c.push(`${Xe(r[4])} ${Xe(r[5])} m`);
    for (let g = 6, m = r.length; g < m; g += 6)
      if (isNaN(r[g]))
        c.push(`${Xe(r[g + 4])} ${Xe(r[g + 5])} l`);
      else {
        const [p, b, w, y, k, S] = r.slice(g, g + 6);
        c.push([p, b, w, y, k, S].map(Xe).join(" ") + " c");
      }
    c.push("h f");
    const l = c.join(`
`), h = new E(n);
    h.set("FormType", 1), h.set("Subtype", O.get("Form")), h.set("Type", O.get("XObject")), h.set("BBox", a), h.set("Length", l.length);
    const f = new E(n), u = new E(n);
    f.set("ExtGState", u), h.set("Resources", f);
    const d = new E(n);
    u.set("R0", d), d.set("BM", O.get("Multiply")), o !== 1 && (d.set("ca", o), d.set("Type", O.get("ExtGState")));
    const x = new pn(l);
    return x.dict = h, x;
  }
}
class Bc extends Tn {
  constructor(e) {
    var a;
    super(e);
    const {
      dict: n,
      xref: i
    } = e;
    if (this.data.annotationType = Xt.HIGHLIGHT, this.data.isEditable = !this.data.noHTML, this.data.noHTML = !1, this.data.opacity = n.get("CA") || 1, this.data.quadPoints = lr(n, null)) {
      const r = (a = this.appearance) == null ? void 0 : a.dict.get("Resources");
      if (!this.appearance || !(r != null && r.has("ExtGState"))) {
        this.appearance && I("HighlightAnnotation - ignoring built-in appearance stream.");
        const o = this.color ? ln(this.color) : [1, 1, 0], c = n.get("CA");
        this._setDefaultAppearance({
          xref: i,
          fillColor: o,
          blendMode: "Multiply",
          fillAlpha: c,
          pointsCallback: (l, h) => (l.push(`${h[0]} ${h[1]} m`, `${h[2]} ${h[3]} l`, `${h[6]} ${h[7]} l`, `${h[4]} ${h[5]} l`, "f"), [h[0], h[7], h[2], h[3]])
        });
      }
    } else
      this.data.popupRef = null;
  }
  static createNewDict(e, n, {
    apRef: i,
    ap: s
  }) {
    const {
      color: a,
      oldAnnotation: r,
      opacity: o,
      rect: c,
      rotation: l,
      user: h,
      quadPoints: f
    } = e, u = r || new E(n);
    if (u.set("Type", O.get("Annot")), u.set("Subtype", O.get("Highlight")), u.set(r ? "M" : "CreationDate", `D:${ji()}`), u.set("CreationDate", `D:${ji()}`), u.set("Rect", c), u.set("F", 4), u.set("Border", [0, 0, 0]), u.set("Rotate", l), u.set("QuadPoints", f), u.set("C", ln(a)), u.set("CA", o), h && u.set("T", $n(h)), i || s) {
      const d = new E(n);
      u.set("AP", d), d.set("N", i || s);
    }
    return u;
  }
  static async createNewAppearanceStream(e, n, i) {
    const {
      color: s,
      rect: a,
      outlines: r,
      opacity: o
    } = e, c = [`${Si(s, !0)}`, "/R0 gs"], l = [];
    for (const m of r) {
      l.length = 0, l.push(`${Xe(m[0])} ${Xe(m[1])} m`);
      for (let p = 2, b = m.length; p < b; p += 2)
        l.push(`${Xe(m[p])} ${Xe(m[p + 1])} l`);
      l.push("h"), c.push(l.join(`
`));
    }
    c.push("f*");
    const h = c.join(`
`), f = new E(n);
    f.set("FormType", 1), f.set("Subtype", O.get("Form")), f.set("Type", O.get("XObject")), f.set("BBox", a), f.set("Length", h.length);
    const u = new E(n), d = new E(n);
    u.set("ExtGState", d), f.set("Resources", u);
    const x = new E(n);
    d.set("R0", x), x.set("BM", O.get("Multiply")), o !== 1 && (x.set("ca", o), x.set("Type", O.get("ExtGState")));
    const g = new pn(h);
    return g.dict = f, g;
  }
}
class f6 extends Tn {
  constructor(e) {
    super(e);
    const {
      dict: n,
      xref: i
    } = e;
    if (this.data.annotationType = Xt.UNDERLINE, this.data.quadPoints = lr(n, null)) {
      if (!this.appearance) {
        const a = this.color ? ln(this.color) : [0, 0, 0], r = n.get("CA");
        this._setDefaultAppearance({
          xref: i,
          extra: "[] 0 d 0.571 w",
          strokeColor: a,
          strokeAlpha: r,
          pointsCallback: (o, c) => (o.push(`${c[4]} ${c[5] + 1.3} m`, `${c[6]} ${c[7] + 1.3} l`, "S"), [c[0], c[7], c[2], c[3]])
        });
      }
    } else
      this.data.popupRef = null;
  }
}
class u6 extends Tn {
  constructor(e) {
    super(e);
    const {
      dict: n,
      xref: i
    } = e;
    if (this.data.annotationType = Xt.SQUIGGLY, this.data.quadPoints = lr(n, null)) {
      if (!this.appearance) {
        const a = this.color ? ln(this.color) : [0, 0, 0], r = n.get("CA");
        this._setDefaultAppearance({
          xref: i,
          extra: "[] 0 d 1 w",
          strokeColor: a,
          strokeAlpha: r,
          pointsCallback: (o, c) => {
            const l = (c[1] - c[5]) / 6;
            let h = l, f = c[4];
            const u = c[5], d = c[6];
            o.push(`${f} ${u + h} m`);
            do
              f += 2, h = h === 0 ? l : 0, o.push(`${f} ${u + h} l`);
            while (f < d);
            return o.push("S"), [c[4], u - 2 * l, d, u + 2 * l];
          }
        });
      }
    } else
      this.data.popupRef = null;
  }
}
class d6 extends Tn {
  constructor(e) {
    super(e);
    const {
      dict: n,
      xref: i
    } = e;
    if (this.data.annotationType = Xt.STRIKEOUT, this.data.quadPoints = lr(n, null)) {
      if (!this.appearance) {
        const a = this.color ? ln(this.color) : [0, 0, 0], r = n.get("CA");
        this._setDefaultAppearance({
          xref: i,
          extra: "[] 0 d 1 w",
          strokeColor: a,
          strokeAlpha: r,
          pointsCallback: (o, c) => (o.push(`${(c[0] + c[4]) / 2} ${(c[1] + c[5]) / 2} m`, `${(c[2] + c[6]) / 2} ${(c[3] + c[7]) / 2} l`, "S"), [c[0], c[7], c[2], c[3]])
        });
      }
    } else
      this.data.popupRef = null;
  }
}
var Fs, No, cd;
class bs extends Tn {
  constructor(n) {
    super(n);
    Ee(this, Fs, null);
    this.data.annotationType = Xt.STAMP, this.data.hasOwnCanvas = this.data.noRotate, this.data.isEditable = !this.data.noHTML, this.data.noHTML = !1;
  }
  mustBeViewedWhenEditing(n, i = null) {
    return n ? (this.data.isEditable && (ce(this, Fs) ?? ct(this, Fs, this.data.hasOwnCanvas), this.data.hasOwnCanvas = !0), !0) : (ce(this, Fs) !== null && (this.data.hasOwnCanvas = ce(this, Fs), ct(this, Fs, null)), !(i != null && i.has(this.data.id)));
  }
  static async createImage(n, i) {
    const {
      width: s,
      height: a
    } = n, r = new OffscreenCanvas(s, a), o = r.getContext("2d", {
      alpha: !0
    });
    o.drawImage(n, 0, 0);
    const c = o.getImageData(0, 0, s, a).data, l = new Uint32Array(c.buffer), h = l.some(An.isLittleEndian ? (p) => p >>> 24 !== 255 : (p) => (p & 255) !== 255);
    h && (o.fillStyle = "white", o.fillRect(0, 0, s, a), o.drawImage(n, 0, 0));
    const f = r.convertToBlob({
      type: "image/jpeg",
      quality: 1
    }).then((p) => p.arrayBuffer()), u = O.get("XObject"), d = O.get("Image"), x = new E(i);
    x.set("Type", u), x.set("Subtype", d), x.set("BitsPerComponent", 8), x.set("ColorSpace", O.get("DeviceRGB")), x.set("Filter", O.get("DCTDecode")), x.set("BBox", [0, 0, s, a]), x.set("Width", s), x.set("Height", a);
    let g = null;
    if (h) {
      const p = new Uint8Array(l.length);
      if (An.isLittleEndian)
        for (let w = 0, y = l.length; w < y; w++)
          p[w] = l[w] >>> 24;
      else
        for (let w = 0, y = l.length; w < y; w++)
          p[w] = l[w] & 255;
      const b = new E(i);
      b.set("Type", u), b.set("Subtype", d), b.set("BitsPerComponent", 8), b.set("ColorSpace", O.get("DeviceGray")), b.set("Width", s), b.set("Height", a), g = new At(p, 0, 0, b);
    }
    return {
      imageStream: new At(await f, 0, 0, x),
      smaskStream: g,
      width: s,
      height: a
    };
  }
  static createNewDict(n, i, {
    apRef: s,
    ap: a
  }) {
    const {
      oldAnnotation: r,
      rect: o,
      rotation: c,
      user: l
    } = n, h = r || new E(i);
    if (h.set("Type", O.get("Annot")), h.set("Subtype", O.get("Stamp")), h.set(r ? "M" : "CreationDate", `D:${ji()}`), h.set("Rect", o), h.set("F", 4), h.set("Border", [0, 0, 0]), h.set("Rotate", c), l && h.set("T", $n(l)), s || a) {
      const f = new E(i);
      h.set("AP", f), s ? f.set("N", s) : f.set("N", a);
    }
    return h;
  }
  static async createNewAppearanceStream(n, i, s) {
    if (n.oldAnnotation)
      return null;
    if (n.isSignature)
      return J(this, No, cd).call(this, n, i);
    const {
      rotation: a
    } = n, {
      imageRef: r,
      width: o,
      height: c
    } = s.image, l = new E(i), h = new E(i);
    l.set("XObject", h), h.set("Im0", r);
    const f = `q ${o} 0 0 ${c} 0 0 cm /Im0 Do Q`, u = new E(i);
    if (u.set("FormType", 1), u.set("Subtype", O.get("Form")), u.set("Type", O.get("XObject")), u.set("BBox", [0, 0, o, c]), u.set("Resources", l), a) {
      const x = ao(a, o, c);
      u.set("Matrix", x);
    }
    const d = new pn(f);
    return d.dict = u, d;
  }
}
Fs = new WeakMap(), No = new WeakSet(), cd = async function(n, i) {
  const {
    areContours: s,
    color: a,
    rect: r,
    lines: o,
    thickness: c
  } = n, l = [`${c} w 1 J 1 j`, `${Si(a, s)}`];
  for (const d of o) {
    l.push(`${Xe(d[4])} ${Xe(d[5])} m`);
    for (let x = 6, g = d.length; x < g; x += 6)
      if (isNaN(d[x]))
        l.push(`${Xe(d[x + 4])} ${Xe(d[x + 5])} l`);
      else {
        const [m, p, b, w, y, k] = d.slice(x, x + 6);
        l.push([m, p, b, w, y, k].map(Xe).join(" ") + " c");
      }
    d.length === 6 && l.push(`${Xe(d[4])} ${Xe(d[5])} l`);
  }
  l.push(s ? "F" : "S");
  const h = l.join(`
`), f = new E(i);
  f.set("FormType", 1), f.set("Subtype", O.get("Form")), f.set("Type", O.get("XObject")), f.set("BBox", r), f.set("Length", h.length);
  const u = new pn(h);
  return u.dict = f, u;
}, Ee(bs, No);
class x6 extends Tn {
  constructor(e) {
    super(e);
    const {
      dict: n,
      xref: i
    } = e, s = new dl(n.get("FS"), i);
    this.data.annotationType = Xt.FILEATTACHMENT, this.data.hasOwnCanvas = this.data.noRotate, this.data.noHTML = !1, this.data.file = s.serializable;
    const a = n.get("Name");
    this.data.name = a instanceof O ? Ze(a.name) : "PushPin";
    const r = n.get("ca");
    this.data.fillAlpha = typeof r == "number" && r >= 0 && r <= 1 ? r : null;
  }
}
const g6 = {
  get r() {
    return Q(this, "r", new Uint8Array([7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21]));
  },
  get k() {
    return Q(this, "k", new Int32Array([-680876936, -389564586, 606105819, -1044525330, -176418897, 1200080426, -1473231341, -45705983, 1770035416, -1958414417, -42063, -1990404162, 1804603682, -40341101, -1502002290, 1236535329, -165796510, -1069501632, 643717713, -373897302, -701558691, 38016083, -660478335, -405537848, 568446438, -1019803690, -187363961, 1163531501, -1444681467, -51403784, 1735328473, -1926607734, -378558, -2022574463, 1839030562, -35309556, -1530992060, 1272893353, -155497632, -1094730640, 681279174, -358537222, -722521979, 76029189, -640364487, -421815835, 530742520, -995338651, -198630844, 1126891415, -1416354905, -57434055, 1700485571, -1894986606, -1051523, -2054922799, 1873313359, -30611744, -1560198380, 1309151649, -145523070, -1120210379, 718787259, -343485551]));
  }
};
function Vi(t, e, n) {
  let i = 1732584193, s = -271733879, a = -1732584194, r = 271733878;
  const o = n + 72 & -64, c = new Uint8Array(o);
  let l, h;
  for (l = 0; l < n; ++l)
    c[l] = t[e++];
  c[l++] = 128;
  const f = o - 8;
  l < f && (l = f), c[l++] = n << 3 & 255, c[l++] = n >> 5 & 255, c[l++] = n >> 13 & 255, c[l++] = n >> 21 & 255, c[l++] = n >>> 29 & 255, l += 3;
  const u = new Int32Array(16), {
    k: d,
    r: x
  } = g6;
  for (l = 0; l < o; ) {
    for (h = 0; h < 16; ++h, l += 4)
      u[h] = c[l] | c[l + 1] << 8 | c[l + 2] << 16 | c[l + 3] << 24;
    let g = i, m = s, p = a, b = r, w, y;
    for (h = 0; h < 64; ++h) {
      h < 16 ? (w = m & p | ~m & b, y = h) : h < 32 ? (w = b & m | ~b & p, y = 5 * h + 1 & 15) : h < 48 ? (w = m ^ p ^ b, y = 3 * h + 5 & 15) : (w = p ^ (m | ~b), y = 7 * h & 15);
      const k = b, S = g + w + d[h] + u[y] | 0, C = x[h];
      b = p, p = m, m = m + (S << C | S >>> 32 - C) | 0, g = k;
    }
    i = i + g | 0, s = s + m | 0, a = a + p | 0, r = r + b | 0;
  }
  return new Uint8Array([i & 255, i >> 8 & 255, i >> 16 & 255, i >>> 24 & 255, s & 255, s >> 8 & 255, s >> 16 & 255, s >>> 24 & 255, a & 255, a >> 8 & 255, a >> 16 & 255, a >>> 24 & 255, r & 255, r >> 8 & 255, r >> 16 & 255, r >>> 24 & 255]);
}
function Zh(t) {
  try {
    return k0(t);
  } catch (e) {
    return I(`UTF-8 decoding failed: "${e}".`), t;
  }
}
class p6 extends Ho {
  constructor(e) {
    super(e), this.node = null;
  }
  onEndElement(e) {
    const n = super.onEndElement(e);
    if (n && e === "xfa:datasets")
      throw this.node = n, new Error("Aborting DatasetXMLParser.");
  }
}
class m6 {
  constructor(e) {
    if (e.datasets)
      this.node = new Ho({
        hasAttributes: !0
      }).parseFromString(e.datasets).documentElement;
    else {
      const n = new p6({
        hasAttributes: !0
      });
      try {
        n.parseFromString(e["xdp:xdp"]);
      } catch {
      }
      this.node = n.node;
    }
  }
  getValue(e) {
    if (!this.node || !e)
      return "";
    const n = this.node.searchNode(xf(e), 0);
    if (!n)
      return "";
    const i = n.firstChild;
    return (i == null ? void 0 : i.nodeName) === "value" ? n.children.map((s) => Zh(s.textContent)) : Zh(n.textContent);
  }
}
class re {
  constructor(e, n) {
    this.high = e | 0, this.low = n | 0;
  }
  and(e) {
    this.high &= e.high, this.low &= e.low;
  }
  xor(e) {
    this.high ^= e.high, this.low ^= e.low;
  }
  shiftRight(e) {
    e >= 32 ? (this.low = this.high >>> e - 32 | 0, this.high = 0) : (this.low = this.low >>> e | this.high << 32 - e, this.high = this.high >>> e | 0);
  }
  rotateRight(e) {
    let n, i;
    e & 32 ? (i = this.low, n = this.high) : (n = this.low, i = this.high), e &= 31, this.low = n >>> e | i << 32 - e, this.high = i >>> e | n << 32 - e;
  }
  not() {
    this.high = ~this.high, this.low = ~this.low;
  }
  add(e) {
    const n = (this.low >>> 0) + (e.low >>> 0);
    let i = (this.high >>> 0) + (e.high >>> 0);
    n > 4294967295 && (i += 1), this.low = n | 0, this.high = i | 0;
  }
  copyTo(e, n) {
    e[n] = this.high >>> 24 & 255, e[n + 1] = this.high >> 16 & 255, e[n + 2] = this.high >> 8 & 255, e[n + 3] = this.high & 255, e[n + 4] = this.low >>> 24 & 255, e[n + 5] = this.low >> 16 & 255, e[n + 6] = this.low >> 8 & 255, e[n + 7] = this.low & 255;
  }
  assign(e) {
    this.high = e.high, this.low = e.low;
  }
}
const b6 = {
  get k() {
    return Q(this, "k", [new re(1116352408, 3609767458), new re(1899447441, 602891725), new re(3049323471, 3964484399), new re(3921009573, 2173295548), new re(961987163, 4081628472), new re(1508970993, 3053834265), new re(2453635748, 2937671579), new re(2870763221, 3664609560), new re(3624381080, 2734883394), new re(310598401, 1164996542), new re(607225278, 1323610764), new re(1426881987, 3590304994), new re(1925078388, 4068182383), new re(2162078206, 991336113), new re(2614888103, 633803317), new re(3248222580, 3479774868), new re(3835390401, 2666613458), new re(4022224774, 944711139), new re(264347078, 2341262773), new re(604807628, 2007800933), new re(770255983, 1495990901), new re(1249150122, 1856431235), new re(1555081692, 3175218132), new re(1996064986, 2198950837), new re(2554220882, 3999719339), new re(2821834349, 766784016), new re(2952996808, 2566594879), new re(3210313671, 3203337956), new re(3336571891, 1034457026), new re(3584528711, 2466948901), new re(113926993, 3758326383), new re(338241895, 168717936), new re(666307205, 1188179964), new re(773529912, 1546045734), new re(1294757372, 1522805485), new re(1396182291, 2643833823), new re(1695183700, 2343527390), new re(1986661051, 1014477480), new re(2177026350, 1206759142), new re(2456956037, 344077627), new re(2730485921, 1290863460), new re(2820302411, 3158454273), new re(3259730800, 3505952657), new re(3345764771, 106217008), new re(3516065817, 3606008344), new re(3600352804, 1432725776), new re(4094571909, 1467031594), new re(275423344, 851169720), new re(430227734, 3100823752), new re(506948616, 1363258195), new re(659060556, 3750685593), new re(883997877, 3785050280), new re(958139571, 3318307427), new re(1322822218, 3812723403), new re(1537002063, 2003034995), new re(1747873779, 3602036899), new re(1955562222, 1575990012), new re(2024104815, 1125592928), new re(2227730452, 2716904306), new re(2361852424, 442776044), new re(2428436474, 593698344), new re(2756734187, 3733110249), new re(3204031479, 2999351573), new re(3329325298, 3815920427), new re(3391569614, 3928383900), new re(3515267271, 566280711), new re(3940187606, 3454069534), new re(4118630271, 4000239992), new re(116418474, 1914138554), new re(174292421, 2731055270), new re(289380356, 3203993006), new re(460393269, 320620315), new re(685471733, 587496836), new re(852142971, 1086792851), new re(1017036298, 365543100), new re(1126000580, 2618297676), new re(1288033470, 3409855158), new re(1501505948, 4234509866), new re(1607167915, 987167468), new re(1816402316, 1246189591)]);
  }
};
function w6(t, e, n, i, s) {
  t.assign(e), t.and(n), s.assign(e), s.not(), s.and(i), t.xor(s);
}
function y6(t, e, n, i, s) {
  t.assign(e), t.and(n), s.assign(e), s.and(i), t.xor(s), s.assign(n), s.and(i), t.xor(s);
}
function k6(t, e, n) {
  t.assign(e), t.rotateRight(28), n.assign(e), n.rotateRight(34), t.xor(n), n.assign(e), n.rotateRight(39), t.xor(n);
}
function S6(t, e, n) {
  t.assign(e), t.rotateRight(14), n.assign(e), n.rotateRight(18), t.xor(n), n.assign(e), n.rotateRight(41), t.xor(n);
}
function C6(t, e, n) {
  t.assign(e), t.rotateRight(1), n.assign(e), n.rotateRight(8), t.xor(n), n.assign(e), n.shiftRight(7), t.xor(n);
}
function A6(t, e, n) {
  t.assign(e), t.rotateRight(19), n.assign(e), n.rotateRight(61), t.xor(n), n.assign(e), n.shiftRight(6), t.xor(n);
}
function ld(t, e, n, i = !1) {
  let s, a, r, o, c, l, h, f;
  i ? (s = new re(3418070365, 3238371032), a = new re(1654270250, 914150663), r = new re(2438529370, 812702999), o = new re(355462360, 4144912697), c = new re(1731405415, 4290775857), l = new re(2394180231, 1750603025), h = new re(3675008525, 1694076839), f = new re(1203062813, 3204075428)) : (s = new re(1779033703, 4089235720), a = new re(3144134277, 2227873595), r = new re(1013904242, 4271175723), o = new re(2773480762, 1595750129), c = new re(1359893119, 2917565137), l = new re(2600822924, 725511199), h = new re(528734635, 4215389547), f = new re(1541459225, 327033209));
  const u = Math.ceil((n + 17) / 128) * 128, d = new Uint8Array(u);
  let x, g;
  for (x = 0; x < n; ++x)
    d[x] = t[e++];
  d[x++] = 128;
  const m = u - 16;
  x < m && (x = m), x += 11, d[x++] = n >>> 29 & 255, d[x++] = n >> 21 & 255, d[x++] = n >> 13 & 255, d[x++] = n >> 5 & 255, d[x++] = n << 3 & 255;
  const p = new Array(80);
  for (x = 0; x < 80; x++)
    p[x] = new re(0, 0);
  const {
    k: b
  } = b6;
  let w = new re(0, 0), y = new re(0, 0), k = new re(0, 0), S = new re(0, 0), C = new re(0, 0), T = new re(0, 0), F = new re(0, 0), R = new re(0, 0);
  const D = new re(0, 0), M = new re(0, 0), _ = new re(0, 0), K = new re(0, 0);
  let se;
  for (x = 0; x < u; ) {
    for (g = 0; g < 16; ++g)
      p[g].high = d[x] << 24 | d[x + 1] << 16 | d[x + 2] << 8 | d[x + 3], p[g].low = d[x + 4] << 24 | d[x + 5] << 16 | d[x + 6] << 8 | d[x + 7], x += 8;
    for (g = 16; g < 80; ++g)
      se = p[g], A6(se, p[g - 2], K), se.add(p[g - 7]), C6(_, p[g - 15], K), se.add(_), se.add(p[g - 16]);
    for (w.assign(s), y.assign(a), k.assign(r), S.assign(o), C.assign(c), T.assign(l), F.assign(h), R.assign(f), g = 0; g < 80; ++g)
      D.assign(R), S6(_, C, K), D.add(_), w6(_, C, T, F, K), D.add(_), D.add(b[g]), D.add(p[g]), k6(M, w, K), y6(_, w, y, k, K), M.add(_), se = R, R = F, F = T, T = C, S.add(D), C = S, S = k, k = y, y = w, se.assign(D), se.add(M), w = se;
    s.add(w), a.add(y), r.add(k), o.add(S), c.add(C), l.add(T), h.add(F), f.add(R);
  }
  let H;
  return i ? (H = new Uint8Array(48), s.copyTo(H, 0), a.copyTo(H, 8), r.copyTo(H, 16), o.copyTo(H, 24), c.copyTo(H, 32), l.copyTo(H, 40)) : (H = new Uint8Array(64), s.copyTo(H, 0), a.copyTo(H, 8), r.copyTo(H, 16), o.copyTo(H, 24), c.copyTo(H, 32), l.copyTo(H, 40), h.copyTo(H, 48), f.copyTo(H, 56)), H;
}
function v6(t, e, n) {
  return ld(t, e, n, !0);
}
const I6 = {
  get k() {
    return Q(this, "k", [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
  }
};
function ki(t, e) {
  return t >>> e | t << 32 - e;
}
function T6(t, e, n) {
  return t & e ^ ~t & n;
}
function F6(t, e, n) {
  return t & e ^ t & n ^ e & n;
}
function B6(t) {
  return ki(t, 2) ^ ki(t, 13) ^ ki(t, 22);
}
function E6(t) {
  return ki(t, 6) ^ ki(t, 11) ^ ki(t, 25);
}
function R6(t) {
  return ki(t, 7) ^ ki(t, 18) ^ t >>> 3;
}
function M6(t) {
  return ki(t, 17) ^ ki(t, 19) ^ t >>> 10;
}
function Fl(t, e, n) {
  let i = 1779033703, s = 3144134277, a = 1013904242, r = 2773480762, o = 1359893119, c = 2600822924, l = 528734635, h = 1541459225;
  const f = Math.ceil((n + 9) / 64) * 64, u = new Uint8Array(f);
  let d, x;
  for (d = 0; d < n; ++d)
    u[d] = t[e++];
  u[d++] = 128;
  const g = f - 8;
  d < g && (d = g), d += 3, u[d++] = n >>> 29 & 255, u[d++] = n >> 21 & 255, u[d++] = n >> 13 & 255, u[d++] = n >> 5 & 255, u[d++] = n << 3 & 255;
  const m = new Uint32Array(64), {
    k: p
  } = I6;
  for (d = 0; d < f; ) {
    for (x = 0; x < 16; ++x)
      m[x] = u[d] << 24 | u[d + 1] << 16 | u[d + 2] << 8 | u[d + 3], d += 4;
    for (x = 16; x < 64; ++x)
      m[x] = M6(m[x - 2]) + m[x - 7] + R6(m[x - 15]) + m[x - 16] | 0;
    let b = i, w = s, y = a, k = r, S = o, C = c, T = l, F = h, R, D;
    for (x = 0; x < 64; ++x)
      R = F + E6(S) + T6(S, C, T) + p[x] + m[x], D = B6(b) + F6(b, w, y), F = T, T = C, C = S, S = k + R | 0, k = y, y = w, w = b, b = R + D | 0;
    i = i + b | 0, s = s + w | 0, a = a + y | 0, r = r + k | 0, o = o + S | 0, c = c + C | 0, l = l + T | 0, h = h + F | 0;
  }
  return new Uint8Array([i >> 24 & 255, i >> 16 & 255, i >> 8 & 255, i & 255, s >> 24 & 255, s >> 16 & 255, s >> 8 & 255, s & 255, a >> 24 & 255, a >> 16 & 255, a >> 8 & 255, a & 255, r >> 24 & 255, r >> 16 & 255, r >> 8 & 255, r & 255, o >> 24 & 255, o >> 16 & 255, o >> 8 & 255, o & 255, c >> 24 & 255, c >> 16 & 255, c >> 8 & 255, c & 255, l >> 24 & 255, l >> 16 & 255, l >> 8 & 255, l & 255, h >> 24 & 255, h >> 16 & 255, h >> 8 & 255, h & 255]);
}
const Jh = 512;
class D6 extends mn {
  constructor(e, n, i) {
    super(n), this.str = e, this.dict = e.dict, this.decrypt = i, this.nextChunk = null, this.initialized = !1;
  }
  readBlock() {
    var o;
    let e;
    if (this.initialized ? e = this.nextChunk : (e = this.str.getBytes(Jh), this.initialized = !0), !(e != null && e.length)) {
      this.eof = !0;
      return;
    }
    this.nextChunk = this.str.getBytes(Jh);
    const n = ((o = this.nextChunk) == null ? void 0 : o.length) > 0, i = this.decrypt;
    e = i(e, !n);
    const s = this.bufferLength, a = s + e.length;
    this.ensureBuffer(a).set(e, s), this.bufferLength = a;
  }
}
class xs {
  constructor(e) {
    this.a = 0, this.b = 0;
    const n = new Uint8Array(256), i = e.length;
    for (let s = 0; s < 256; ++s)
      n[s] = s;
    for (let s = 0, a = 0; s < 256; ++s) {
      const r = n[s];
      a = a + r + e[s % i] & 255, n[s] = n[a], n[a] = r;
    }
    this.s = n;
  }
  encryptBlock(e) {
    let n = this.a, i = this.b;
    const s = this.s, a = e.length, r = new Uint8Array(a);
    for (let o = 0; o < a; ++o) {
      n = n + 1 & 255;
      const c = s[n];
      i = i + c & 255;
      const l = s[i];
      s[n] = l, s[i] = c, r[o] = e[o] ^ s[c + l & 255];
    }
    return this.a = n, this.b = i, r;
  }
  decryptBlock(e) {
    return this.encryptBlock(e);
  }
  encrypt(e) {
    return this.encryptBlock(e);
  }
}
class P6 {
  decryptBlock(e) {
    return e;
  }
  encrypt(e) {
    return e;
  }
}
class w1 {
  constructor() {
    Ye(this, "_s", new Uint8Array([99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22]));
    Ye(this, "_inv_s", new Uint8Array([82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125]));
    Ye(this, "_mix", new Uint32Array([0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795]));
    Ye(this, "_mixCol", new Uint8Array(256).map((e, n) => n < 128 ? n << 1 : n << 1 ^ 27));
    this.buffer = new Uint8Array(16), this.bufferPosition = 0;
  }
  _expandKey(e) {
    Ke("Cannot call `_expandKey` on the base class");
  }
  _decrypt(e, n) {
    let i, s, a;
    const r = new Uint8Array(16);
    r.set(e);
    for (let o = 0, c = this._keySize; o < 16; ++o, ++c)
      r[o] ^= n[c];
    for (let o = this._cyclesOfRepetition - 1; o >= 1; --o) {
      i = r[13], r[13] = r[9], r[9] = r[5], r[5] = r[1], r[1] = i, i = r[14], s = r[10], r[14] = r[6], r[10] = r[2], r[6] = i, r[2] = s, i = r[15], s = r[11], a = r[7], r[15] = r[3], r[11] = i, r[7] = s, r[3] = a;
      for (let c = 0; c < 16; ++c)
        r[c] = this._inv_s[r[c]];
      for (let c = 0, l = o * 16; c < 16; ++c, ++l)
        r[c] ^= n[l];
      for (let c = 0; c < 16; c += 4) {
        const l = this._mix[r[c]], h = this._mix[r[c + 1]], f = this._mix[r[c + 2]], u = this._mix[r[c + 3]];
        i = l ^ h >>> 8 ^ h << 24 ^ f >>> 16 ^ f << 16 ^ u >>> 24 ^ u << 8, r[c] = i >>> 24 & 255, r[c + 1] = i >> 16 & 255, r[c + 2] = i >> 8 & 255, r[c + 3] = i & 255;
      }
    }
    i = r[13], r[13] = r[9], r[9] = r[5], r[5] = r[1], r[1] = i, i = r[14], s = r[10], r[14] = r[6], r[10] = r[2], r[6] = i, r[2] = s, i = r[15], s = r[11], a = r[7], r[15] = r[3], r[11] = i, r[7] = s, r[3] = a;
    for (let o = 0; o < 16; ++o)
      r[o] = this._inv_s[r[o]], r[o] ^= n[o];
    return r;
  }
  _encrypt(e, n) {
    const i = this._s;
    let s, a, r;
    const o = new Uint8Array(16);
    o.set(e);
    for (let c = 0; c < 16; ++c)
      o[c] ^= n[c];
    for (let c = 1; c < this._cyclesOfRepetition; c++) {
      for (let l = 0; l < 16; ++l)
        o[l] = i[o[l]];
      r = o[1], o[1] = o[5], o[5] = o[9], o[9] = o[13], o[13] = r, r = o[2], a = o[6], o[2] = o[10], o[6] = o[14], o[10] = r, o[14] = a, r = o[3], a = o[7], s = o[11], o[3] = o[15], o[7] = r, o[11] = a, o[15] = s;
      for (let l = 0; l < 16; l += 4) {
        const h = o[l], f = o[l + 1], u = o[l + 2], d = o[l + 3];
        s = h ^ f ^ u ^ d, o[l] ^= s ^ this._mixCol[h ^ f], o[l + 1] ^= s ^ this._mixCol[f ^ u], o[l + 2] ^= s ^ this._mixCol[u ^ d], o[l + 3] ^= s ^ this._mixCol[d ^ h];
      }
      for (let l = 0, h = c * 16; l < 16; ++l, ++h)
        o[l] ^= n[h];
    }
    for (let c = 0; c < 16; ++c)
      o[c] = i[o[c]];
    r = o[1], o[1] = o[5], o[5] = o[9], o[9] = o[13], o[13] = r, r = o[2], a = o[6], o[2] = o[10], o[6] = o[14], o[10] = r, o[14] = a, r = o[3], a = o[7], s = o[11], o[3] = o[15], o[7] = r, o[11] = a, o[15] = s;
    for (let c = 0, l = this._keySize; c < 16; ++c, ++l)
      o[c] ^= n[l];
    return o;
  }
  _decryptBlock2(e, n) {
    const i = e.length;
    let s = this.buffer, a = this.bufferPosition;
    const r = [];
    let o = this.iv;
    for (let h = 0; h < i; ++h) {
      if (s[a] = e[h], ++a, a < 16)
        continue;
      const f = this._decrypt(s, this._key);
      for (let u = 0; u < 16; ++u)
        f[u] ^= o[u];
      o = s, r.push(f), s = new Uint8Array(16), a = 0;
    }
    if (this.buffer = s, this.bufferLength = a, this.iv = o, r.length === 0)
      return new Uint8Array(0);
    let c = 16 * r.length;
    if (n) {
      const h = r.at(-1);
      let f = h[15];
      if (f <= 16) {
        for (let u = 15, d = 16 - f; u >= d; --u)
          if (h[u] !== f) {
            f = 0;
            break;
          }
        c -= f, r[r.length - 1] = h.subarray(0, 16 - f);
      }
    }
    const l = new Uint8Array(c);
    for (let h = 0, f = 0, u = r.length; h < u; ++h, f += 16)
      l.set(r[h], f);
    return l;
  }
  decryptBlock(e, n, i = null) {
    const s = e.length, a = this.buffer;
    let r = this.bufferPosition;
    if (i)
      this.iv = i;
    else {
      for (let o = 0; r < 16 && o < s; ++o, ++r)
        a[r] = e[o];
      if (r < 16)
        return this.bufferLength = r, new Uint8Array(0);
      this.iv = a, e = e.subarray(16);
    }
    return this.buffer = new Uint8Array(16), this.bufferLength = 0, this.decryptBlock = this._decryptBlock2, this.decryptBlock(e, n);
  }
  encrypt(e, n) {
    const i = e.length;
    let s = this.buffer, a = this.bufferPosition;
    const r = [];
    n || (n = new Uint8Array(16));
    for (let l = 0; l < i; ++l) {
      if (s[a] = e[l], ++a, a < 16)
        continue;
      for (let f = 0; f < 16; ++f)
        s[f] ^= n[f];
      const h = this._encrypt(s, this._key);
      n = h, r.push(h), s = new Uint8Array(16), a = 0;
    }
    if (this.buffer = s, this.bufferLength = a, this.iv = n, r.length === 0)
      return new Uint8Array(0);
    const o = 16 * r.length, c = new Uint8Array(o);
    for (let l = 0, h = 0, f = r.length; l < f; ++l, h += 16)
      c.set(r[l], h);
    return c;
  }
}
class hd extends w1 {
  constructor(n) {
    super();
    Ye(this, "_rcon", new Uint8Array([141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141]));
    this._cyclesOfRepetition = 10, this._keySize = 160, this._key = this._expandKey(n);
  }
  _expandKey(n) {
    const s = this._s, a = this._rcon, r = new Uint8Array(176);
    r.set(n);
    for (let o = 16, c = 1; o < 176; ++c) {
      let l = r[o - 3], h = r[o - 2], f = r[o - 1], u = r[o - 4];
      l = s[l], h = s[h], f = s[f], u = s[u], l ^= a[c];
      for (let d = 0; d < 4; ++d)
        r[o] = l ^= r[o - 16], o++, r[o] = h ^= r[o - 16], o++, r[o] = f ^= r[o - 16], o++, r[o] = u ^= r[o - 16], o++;
    }
    return r;
  }
}
class Bl extends w1 {
  constructor(e) {
    super(), this._cyclesOfRepetition = 14, this._keySize = 224, this._key = this._expandKey(e);
  }
  _expandKey(e) {
    const i = this._s, s = new Uint8Array(240);
    s.set(e);
    let a = 1, r, o, c, l;
    for (let h = 32, f = 1; h < 240; ++f) {
      h % 32 === 16 ? (r = i[r], o = i[o], c = i[c], l = i[l]) : h % 32 === 0 && (r = s[h - 3], o = s[h - 2], c = s[h - 1], l = s[h - 4], r = i[r], o = i[o], c = i[c], l = i[l], r ^= a, (a <<= 1) >= 256 && (a = (a ^ 27) & 255));
      for (let u = 0; u < 4; ++u)
        s[h] = r ^= s[h - 32], h++, s[h] = o ^= s[h - 32], h++, s[h] = c ^= s[h - 32], h++, s[h] = l ^= s[h - 32], h++;
    }
    return s;
  }
}
class fd {
  _hash(e, n, i) {
    Ke("Abstract method `_hash` called");
  }
  checkOwnerPassword(e, n, i, s) {
    const a = new Uint8Array(e.length + 56);
    a.set(e, 0), a.set(n, e.length), a.set(i, e.length + n.length);
    const r = this._hash(e, a, i);
    return S0(r, s);
  }
  checkUserPassword(e, n, i) {
    const s = new Uint8Array(e.length + 8);
    s.set(e, 0), s.set(n, e.length);
    const a = this._hash(e, s, []);
    return S0(a, i);
  }
  getOwnerKey(e, n, i, s) {
    const a = new Uint8Array(e.length + 56);
    a.set(e, 0), a.set(n, e.length), a.set(i, e.length + n.length);
    const r = this._hash(e, a, i);
    return new Bl(r).decryptBlock(s, !1, new Uint8Array(16));
  }
  getUserKey(e, n, i) {
    const s = new Uint8Array(e.length + 8);
    s.set(e, 0), s.set(n, e.length);
    const a = this._hash(e, s, []);
    return new Bl(a).decryptBlock(i, !1, new Uint8Array(16));
  }
}
class N6 extends fd {
  _hash(e, n, i) {
    return Fl(n, 0, n.length);
  }
}
class O6 extends fd {
  _hash(e, n, i) {
    let s = Fl(n, 0, n.length).subarray(0, 32), a = [0], r = 0;
    for (; r < 64 || a.at(-1) > r - 32; ) {
      const o = e.length + s.length + i.length, c = new Uint8Array(o);
      let l = 0;
      c.set(e, l), l += e.length, c.set(s, l), l += s.length, c.set(i, l);
      const h = new Uint8Array(o * 64);
      for (let d = 0, x = 0; d < 64; d++, x += o)
        h.set(c, x);
      a = new hd(s.subarray(0, 16)).encrypt(h, s.subarray(16, 32));
      const u = Math.sumPrecise(a.slice(0, 16)) % 3;
      u === 0 ? s = Fl(a, 0, a.length) : u === 1 ? s = v6(a, 0, a.length) : u === 2 && (s = ld(a, 0, a.length)), r++;
    }
    return s.subarray(0, 32);
  }
}
class Qh {
  constructor(e, n) {
    this.StringCipherConstructor = e, this.StreamCipherConstructor = n;
  }
  createStream(e, n) {
    const i = new this.StreamCipherConstructor();
    return new D6(e, n, function(a, r) {
      return i.decryptBlock(a, r);
    });
  }
  decryptString(e) {
    const n = new this.StringCipherConstructor();
    let i = en(e);
    return i = n.decryptBlock(i, !0), Cn(i);
  }
  encryptString(e) {
    const n = new this.StringCipherConstructor();
    if (n instanceof w1) {
      const a = 16 - e.length % 16;
      e += String.fromCharCode(a).repeat(a);
      const r = new Uint8Array(16);
      crypto.getRandomValues(r);
      let o = en(e);
      o = n.encrypt(o, r);
      const c = new Uint8Array(16 + o.length);
      return c.set(r), c.set(o, 16), Cn(c);
    }
    let i = en(e);
    return i = n.encrypt(i), Cn(i);
  }
}
var cn, ud, Rl, dd, Qr, Ml;
const ca = class ca {
  constructor(e, n, i) {
    Ee(this, cn);
    const s = e.get("Filter");
    if (!Tt(s, "Standard"))
      throw new j("unknown encryption method");
    this.filterName = s.name, this.dict = e;
    const a = e.get("V");
    if (!Number.isInteger(a) || a !== 1 && a !== 2 && a !== 4 && a !== 5)
      throw new j("unsupported encryption algorithm");
    this.algorithm = a;
    let r = e.get("Length");
    if (!r)
      if (a <= 3)
        r = 40;
      else {
        const p = e.get("CF"), b = e.get("StmF");
        if (p instanceof E && b instanceof O) {
          p.suppressEncryption = !0;
          const w = p.get(b.name);
          r = (w == null ? void 0 : w.get("Length")) || 128, r < 40 && (r <<= 3);
        }
      }
    if (!Number.isInteger(r) || r < 40 || r % 8 !== 0)
      throw new j("invalid key length");
    const o = en(e.get("O")), c = en(e.get("U")), l = o.subarray(0, 32), h = c.subarray(0, 32), f = e.get("P"), u = e.get("R"), d = (a === 4 || a === 5) && e.get("EncryptMetadata") !== !1;
    this.encryptMetadata = d;
    const x = en(n);
    let g;
    if (i) {
      if (u === 6)
        try {
          i = Pc(i);
        } catch {
          I("CipherTransformFactory: Unable to convert UTF8 encoded password.");
        }
      g = en(i);
    }
    let m;
    if (a !== 5)
      m = J(this, cn, Rl).call(this, x, g, l, h, f, u, r, d);
    else {
      const p = o.subarray(32, 40), b = o.subarray(40, 48), w = c.subarray(0, 48), y = c.subarray(32, 40), k = c.subarray(40, 48), S = en(e.get("OE")), C = en(e.get("UE")), T = en(e.get("Perms"));
      m = J(this, cn, ud).call(this, u, g, l, p, b, w, h, y, k, S, C, T);
    }
    if (!m) {
      if (!i)
        throw new w0("No password given", v1.NEED_PASSWORD);
      const p = J(this, cn, dd).call(this, g, l, u, r);
      m = J(this, cn, Rl).call(this, x, p, l, h, f, u, r, d);
    }
    if (!m)
      throw new w0("Incorrect Password", v1.INCORRECT_PASSWORD);
    if (a === 4 && m.length < 16 ? (this.encryptionKey = new Uint8Array(16), this.encryptionKey.set(m)) : this.encryptionKey = m, a >= 4) {
      const p = e.get("CF");
      p instanceof E && (p.suppressEncryption = !0), this.cf = p, this.stmf = e.get("StmF") || O.get("Identity"), this.strf = e.get("StrF") || O.get("Identity"), this.eff = e.get("EFF") || this.stmf;
    }
  }
  static get _defaultPasswordBytes() {
    return Q(this, "_defaultPasswordBytes", new Uint8Array([40, 191, 78, 94, 78, 117, 138, 65, 100, 0, 78, 86, 255, 250, 1, 8, 46, 46, 0, 182, 208, 104, 62, 128, 47, 12, 169, 254, 100, 83, 105, 122]));
  }
  createCipherTransform(e, n) {
    if (this.algorithm === 4 || this.algorithm === 5)
      return new Qh(J(this, cn, Ml).call(this, this.cf, this.strf, e, n, this.encryptionKey), J(this, cn, Ml).call(this, this.cf, this.stmf, e, n, this.encryptionKey));
    const i = J(this, cn, Qr).call(this, e, n, this.encryptionKey, !1), s = function() {
      return new xs(i);
    };
    return new Qh(s, s);
  }
};
cn = new WeakSet(), ud = function(e, n, i, s, a, r, o, c, l, h, f, u) {
  if (n) {
    const x = Math.min(127, n.length);
    n = n.subarray(0, x);
  } else
    n = [];
  const d = e === 6 ? new O6() : new N6();
  return d.checkUserPassword(n, c, o) ? d.getUserKey(n, l, f) : n.length && d.checkOwnerPassword(n, s, r, i) ? d.getOwnerKey(n, a, r, h) : null;
}, Rl = function(e, n, i, s, a, r, o, c) {
  const l = 40 + i.length + e.length, h = new Uint8Array(l);
  let f = 0, u, d;
  if (n)
    for (d = Math.min(32, n.length); f < d; ++f)
      h[f] = n[f];
  for (u = 0; f < 32; )
    h[f++] = ca._defaultPasswordBytes[u++];
  h.set(i, f), f += i.length, h[f++] = a & 255, h[f++] = a >> 8 & 255, h[f++] = a >> 16 & 255, h[f++] = a >>> 24 & 255, h.set(e, f), f += e.length, r >= 4 && !c && (h.fill(255, f, f + 4), f += 4);
  let x = Vi(h, 0, f);
  const g = o >> 3;
  if (r >= 3)
    for (u = 0; u < 50; ++u)
      x = Vi(x, 0, g);
  const m = x.subarray(0, g);
  let p, b;
  if (r >= 3) {
    f = 0, h.set(ca._defaultPasswordBytes, f), f += 32, h.set(e, f), f += e.length, p = new xs(m), b = p.encryptBlock(Vi(h, 0, f)), d = m.length;
    const w = new Uint8Array(d);
    for (u = 1; u <= 19; ++u) {
      for (let y = 0; y < d; ++y)
        w[y] = m[y] ^ u;
      p = new xs(w), b = p.encryptBlock(b);
    }
  } else
    p = new xs(m), b = p.encryptBlock(ca._defaultPasswordBytes);
  return b.every((w, y) => s[y] === w) ? m : null;
}, dd = function(e, n, i, s) {
  const a = new Uint8Array(32);
  let r = 0;
  const o = Math.min(32, e.length);
  for (; r < o; ++r)
    a[r] = e[r];
  let c = 0;
  for (; r < 32; )
    a[r++] = ca._defaultPasswordBytes[c++];
  let l = Vi(a, 0, r);
  const h = s >> 3;
  if (i >= 3)
    for (c = 0; c < 50; ++c)
      l = Vi(l, 0, l.length);
  let f, u;
  if (i >= 3) {
    u = n;
    const d = new Uint8Array(h);
    for (c = 19; c >= 0; c--) {
      for (let x = 0; x < h; ++x)
        d[x] = l[x] ^ c;
      f = new xs(d), u = f.encryptBlock(u);
    }
  } else
    f = new xs(l.subarray(0, h)), u = f.encryptBlock(n);
  return u;
}, Qr = function(e, n, i, s = !1) {
  const a = i.length, r = new Uint8Array(a + 9);
  r.set(i);
  let o = a;
  return r[o++] = e & 255, r[o++] = e >> 8 & 255, r[o++] = e >> 16 & 255, r[o++] = n & 255, r[o++] = n >> 8 & 255, s && (r[o++] = 115, r[o++] = 65, r[o++] = 108, r[o++] = 84), Vi(r, 0, o).subarray(0, Math.min(a + 5, 16));
}, Ml = function(e, n, i, s, a) {
  if (!(n instanceof O))
    throw new j("Invalid crypt filter name.");
  const r = this, o = e.get(n.name), c = o == null ? void 0 : o.get("CFM");
  if (!c || c.name === "None")
    return function() {
      return new P6();
    };
  if (c.name === "V2")
    return function() {
      var l;
      return new xs(J(l = r, cn, Qr).call(l, i, s, a, !1));
    };
  if (c.name === "AESV2")
    return function() {
      var l;
      return new hd(J(l = r, cn, Qr).call(l, i, s, a, !0));
    };
  if (c.name === "AESV3")
    return function() {
      return new Bl(a);
    };
  throw new j("Unknown crypto method");
};
let El = ca;
var er;
class L6 {
  constructor(e, n) {
    Ee(this, er, null);
    this.stream = e, this.pdfManager = n, this.entries = [], this._xrefStms = /* @__PURE__ */ new Set(), this._cacheMap = /* @__PURE__ */ new Map(), this._pendingRefs = new Dt(), this._newPersistentRefNum = null, this._newTemporaryRefNum = null, this._persistentRefsCache = null;
  }
  getNewPersistentRef(e) {
    this._newPersistentRefNum === null && (this._newPersistentRefNum = this.entries.length || 1);
    const n = this._newPersistentRefNum++;
    return this._cacheMap.set(n, e), he.get(n, 0);
  }
  getNewTemporaryRef() {
    if (this._newTemporaryRefNum === null && (this._newTemporaryRefNum = this.entries.length || 1, this._newPersistentRefNum)) {
      this._persistentRefsCache = /* @__PURE__ */ new Map();
      for (let e = this._newTemporaryRefNum; e < this._newPersistentRefNum; e++)
        this._persistentRefsCache.set(e, this._cacheMap.get(e)), this._cacheMap.delete(e);
    }
    return he.get(this._newTemporaryRefNum++, 0);
  }
  resetNewTemporaryRef() {
    if (this._newTemporaryRefNum = null, this._persistentRefsCache)
      for (const [e, n] of this._persistentRefsCache)
        this._cacheMap.set(e, n);
    this._persistentRefsCache = null;
  }
  setStartXRef(e) {
    this.startXRefQueue = [e];
  }
  parse(e = !1) {
    let n;
    e ? (I("Indexing all PDF objects"), n = this.indexObjects()) : n = this.readXRef(), n.assignXref(this), this.trailer = n;
    let i;
    try {
      i = n.get("Encrypt");
    } catch (a) {
      if (a instanceof mt)
        throw a;
      I(`XRef.parse - Invalid "Encrypt" reference: "${a}".`);
    }
    if (i instanceof E) {
      const a = n.get("ID"), r = a != null && a.length ? a[0] : "";
      i.suppressEncryption = !0, this.encrypt = new El(i, r, this.pdfManager.password);
    }
    let s;
    try {
      s = n.get("Root");
    } catch (a) {
      if (a instanceof mt)
        throw a;
      I(`XRef.parse - Invalid "Root" reference: "${a}".`);
    }
    if (s instanceof E)
      try {
        if (s.get("Pages") instanceof E) {
          this.root = s;
          return;
        }
      } catch (a) {
        if (a instanceof mt)
          throw a;
        I(`XRef.parse - Invalid "Pages" reference: "${a}".`);
      }
    throw e ? new y0("Invalid Root reference.") : new ha();
  }
  processXRefTable(e) {
    "tableState" in this || (this.tableState = {
      entryNum: 0,
      streamPos: e.lexer.stream.pos,
      parserBuf1: e.buf1,
      parserBuf2: e.buf2
    });
    const n = this.readXRefTable(e);
    if (!Ht(n, "trailer"))
      throw new j("Invalid XRef table: could not find trailer dictionary");
    let i = e.getObj();
    if (!(i instanceof E) && i.dict && (i = i.dict), !(i instanceof E))
      throw new j("Invalid XRef table: could not parse trailer dictionary");
    return delete this.tableState, i;
  }
  readXRefTable(e) {
    const n = e.lexer.stream, i = this.tableState;
    n.pos = i.streamPos, e.buf1 = i.parserBuf1, e.buf2 = i.parserBuf2;
    let s;
    for (; ; ) {
      if (!("firstEntryNum" in i) || !("entryCount" in i)) {
        if (Ht(s = e.getObj(), "trailer"))
          break;
        i.firstEntryNum = s, i.entryCount = e.getObj();
      }
      let a = i.firstEntryNum;
      const r = i.entryCount;
      if (!Number.isInteger(a) || !Number.isInteger(r))
        throw new j("Invalid XRef table: wrong types in subsection header");
      for (let o = i.entryNum; o < r; o++) {
        i.streamPos = n.pos, i.entryNum = o, i.parserBuf1 = e.buf1, i.parserBuf2 = e.buf2;
        const c = {};
        c.offset = e.getObj(), c.gen = e.getObj();
        const l = e.getObj();
        if (l instanceof Mt)
          switch (l.cmd) {
            case "f":
              c.free = !0;
              break;
            case "n":
              c.uncompressed = !0;
              break;
          }
        if (!Number.isInteger(c.offset) || !Number.isInteger(c.gen) || !(c.free || c.uncompressed))
          throw new j(`Invalid entry in XRef subsection: ${a}, ${r}`);
        o === 0 && c.free && a === 1 && (a = 0), this.entries[o + a] || (this.entries[o + a] = c);
      }
      i.entryNum = 0, i.streamPos = n.pos, i.parserBuf1 = e.buf1, i.parserBuf2 = e.buf2, delete i.firstEntryNum, delete i.entryCount;
    }
    if (this.entries[0] && !this.entries[0].free)
      throw new j("Invalid XRef table: unexpected first object");
    return s;
  }
  processXRefStream(e) {
    if (!("streamState" in this)) {
      const {
        dict: n,
        pos: i
      } = e, s = n.get("W"), a = n.get("Index") || [0, n.get("Size")];
      this.streamState = {
        entryRanges: a,
        byteWidths: s,
        entryNum: 0,
        streamPos: i
      };
    }
    return this.readXRefStream(e), delete this.streamState, e.dict;
  }
  readXRefStream(e) {
    const n = this.streamState;
    e.pos = n.streamPos;
    const [i, s, a] = n.byteWidths, r = n.entryRanges;
    for (; r.length > 0; ) {
      const [o, c] = r;
      if (!Number.isInteger(o) || !Number.isInteger(c))
        throw new j(`Invalid XRef range fields: ${o}, ${c}`);
      if (!Number.isInteger(i) || !Number.isInteger(s) || !Number.isInteger(a))
        throw new j(`Invalid XRef entry fields length: ${o}, ${c}`);
      for (let l = n.entryNum; l < c; ++l) {
        n.entryNum = l, n.streamPos = e.pos;
        let h = 0, f = 0, u = 0;
        for (let x = 0; x < i; ++x) {
          const g = e.getByte();
          if (g === -1)
            throw new j("Invalid XRef byteWidths 'type'.");
          h = h << 8 | g;
        }
        i === 0 && (h = 1);
        for (let x = 0; x < s; ++x) {
          const g = e.getByte();
          if (g === -1)
            throw new j("Invalid XRef byteWidths 'offset'.");
          f = f << 8 | g;
        }
        for (let x = 0; x < a; ++x) {
          const g = e.getByte();
          if (g === -1)
            throw new j("Invalid XRef byteWidths 'generation'.");
          u = u << 8 | g;
        }
        const d = {};
        switch (d.offset = f, d.gen = u, h) {
          case 0:
            d.free = !0;
            break;
          case 1:
            d.uncompressed = !0;
            break;
          case 2:
            break;
          default:
            throw new j(`Invalid XRef entry type: ${h}`);
        }
        this.entries[o + l] || (this.entries[o + l] = d);
      }
      n.entryNum = 0, n.streamPos = e.pos, r.splice(0, 2);
    }
  }
  indexObjects() {
    function o(R, D) {
      let M = "", _ = R[D];
      for (; _ !== 10 && _ !== 13 && _ !== 60 && !(++D >= R.length); )
        M += String.fromCharCode(_), _ = R[D];
      return M;
    }
    function c(R, D, M) {
      const _ = M.length, K = R.length;
      let se = 0;
      for (; D < K; ) {
        let H = 0;
        for (; H < _ && R[D + H] === M[H]; )
          ++H;
        if (H >= _)
          break;
        D++, se++;
      }
      return se;
    }
    const l = /\b(endobj|\d+\s+\d+\s+obj|xref|trailer\s*<<)\b/g, h = /\b(startxref|\d+\s+\d+\s+obj)\b/g, f = /^(\d+)\s+(\d+)\s+obj\b/, u = new Uint8Array([116, 114, 97, 105, 108, 101, 114]), d = new Uint8Array([115, 116, 97, 114, 116, 120, 114, 101, 102]), x = new Uint8Array([47, 88, 82, 101, 102]);
    this.entries.length = 0, this._cacheMap.clear();
    const g = this.stream;
    g.pos = 0;
    const m = g.getBytes(), p = Cn(m), b = m.length;
    let w = g.start;
    const y = [], k = [];
    for (; w < b; ) {
      let R = m[w];
      if (R === 9 || R === 10 || R === 13 || R === 32) {
        ++w;
        continue;
      }
      if (R === 37) {
        do {
          if (++w, w >= b)
            break;
          R = m[w];
        } while (R !== 10 && R !== 13);
        continue;
      }
      const D = o(m, w);
      let M;
      if (D.startsWith("xref") && (D.length === 4 || /\s/.test(D[4])))
        w += c(m, w, u), y.push(w), w += c(m, w, d);
      else if (M = f.exec(D)) {
        const _ = M[1] | 0, K = M[2] | 0, se = w + D.length;
        let H, W = !1;
        if (!this.entries[_])
          W = !0;
        else if (this.entries[_].gen === K)
          try {
            new zi({
              lexer: new ti(g.makeSubStream(se))
            }).getObj(), W = !0;
          } catch (Fe) {
            Fe instanceof _c ? I(`indexObjects -- checking object (${D}): "${Fe}".`) : W = !0;
          }
        W && (this.entries[_] = {
          offset: w - g.start,
          gen: K,
          uncompressed: !0
        }), l.lastIndex = se;
        const le = l.exec(p);
        le ? (H = l.lastIndex + 1 - w, le[1] !== "endobj" && (I(`indexObjects: Found "${le[1]}" inside of another "obj", caused by missing "endobj" -- trying to recover.`), H -= le[1].length + 1)) : H = b - w;
        const q = m.subarray(w, w + H), L = c(q, 0, x);
        L < H && q[L + 5] < 64 && (k.push(w - g.start), this._xrefStms.add(w - g.start)), w += H;
      } else if (D.startsWith("trailer") && (D.length === 7 || /\s/.test(D[7]))) {
        y.push(w);
        const _ = w + D.length;
        let K;
        h.lastIndex = _;
        const se = h.exec(p);
        se ? (K = h.lastIndex + 1 - w, se[1] !== "startxref" && (I(`indexObjects: Found "${se[1]}" after "trailer", caused by missing "startxref" -- trying to recover.`), K -= se[1].length + 1)) : K = b - w, w += K;
      } else
        w += D.length + 1;
    }
    for (const R of k)
      this.startXRefQueue.push(R), this.readXRef(!0);
    const S = [];
    let C = !1;
    for (const R of y) {
      g.pos = R;
      const D = new zi({
        lexer: new ti(g),
        xref: this,
        allowStreams: !0,
        recoveryMode: !0
      }), M = D.getObj();
      if (!Ht(M, "trailer"))
        continue;
      const _ = D.getObj();
      _ instanceof E && (S.push(_), _.has("Encrypt") && (C = !0));
    }
    let T, F;
    for (const R of [...S, "genFallback", ...S]) {
      if (R === "genFallback") {
        if (!F)
          break;
        this._generationFallback = !0;
        continue;
      }
      let D = !1;
      try {
        const M = R.get("Root");
        if (!(M instanceof E))
          continue;
        const _ = M.get("Pages");
        if (!(_ instanceof E))
          continue;
        const K = _.get("Count");
        Number.isInteger(K) && (D = !0);
      } catch (M) {
        F = M;
        continue;
      }
      if (D && (!C || R.has("Encrypt")) && R.has("ID"))
        return R;
      T = R;
    }
    if (T)
      return T;
    if (this.topDict)
      return this.topDict;
    if (!S.length)
      for (const [R, D] of this.entries.entries()) {
        if (!D)
          continue;
        const M = he.get(R, D.gen);
        let _;
        try {
          _ = this.fetch(M);
        } catch {
          continue;
        }
        if (_ instanceof je && (_ = _.dict), _ instanceof E && _.has("Root"))
          return _;
      }
    throw new y0("Invalid PDF structure.");
  }
  readXRef(e = !1) {
    const n = this.stream, i = /* @__PURE__ */ new Set();
    for (; this.startXRefQueue.length; ) {
      try {
        const s = this.startXRefQueue[0];
        if (i.has(s)) {
          I("readXRef - skipping XRef table since it was already parsed."), this.startXRefQueue.shift();
          continue;
        }
        i.add(s), n.pos = s + n.start;
        const a = new zi({
          lexer: new ti(n),
          xref: this,
          allowStreams: !0
        });
        let r = a.getObj(), o;
        if (Ht(r, "xref"))
          o = this.processXRefTable(a), this.topDict || (this.topDict = o), r = o.get("XRefStm"), Number.isInteger(r) && !this._xrefStms.has(r) && (this._xrefStms.add(r), this.startXRefQueue.push(r), ce(this, er) ?? ct(this, er, r));
        else if (Number.isInteger(r)) {
          if (!Number.isInteger(a.getObj()) || !Ht(a.getObj(), "obj") || !((r = a.getObj()) instanceof je))
            throw new j("Invalid XRef stream");
          if (o = this.processXRefStream(r), this.topDict || (this.topDict = o), !o)
            throw new j("Failed to read XRef stream");
        } else
          throw new j("Invalid XRef stream header");
        r = o.get("Prev"), Number.isInteger(r) ? this.startXRefQueue.push(r) : r instanceof he && this.startXRefQueue.push(r.num);
      } catch (s) {
        if (s instanceof mt)
          throw s;
        Ge("(while reading XRef): " + s);
      }
      this.startXRefQueue.shift();
    }
    if (this.topDict)
      return this.topDict;
    if (!e)
      throw new ha();
  }
  get lastXRefStreamPos() {
    return ce(this, er) ?? (this._xrefStms.size > 0 ? Math.max(...this._xrefStms) : null);
  }
  getEntry(e) {
    const n = this.entries[e];
    return n && !n.free && n.offset ? n : null;
  }
  fetchIfRef(e, n = !1) {
    return e instanceof he ? this.fetch(e, n) : e;
  }
  fetch(e, n = !1) {
    if (!(e instanceof he))
      throw new Error("ref object is not a reference");
    const i = e.num, s = this._cacheMap.get(i);
    if (s !== void 0)
      return s instanceof E && !s.objId && (s.objId = e.toString()), s;
    let a = this.getEntry(i);
    if (a === null)
      return a;
    if (this._pendingRefs.has(e))
      return this._pendingRefs.remove(e), I(`Ignoring circular reference: ${e}.`), Xd;
    this._pendingRefs.put(e);
    try {
      a = a.uncompressed ? this.fetchUncompressed(e, a, n) : this.fetchCompressed(e, a, n), this._pendingRefs.remove(e);
    } catch (r) {
      throw this._pendingRefs.remove(e), r;
    }
    return a instanceof E ? a.objId = e.toString() : a instanceof je && (a.dict.objId = e.toString()), a;
  }
  fetchUncompressed(e, n, i = !1) {
    const s = e.gen;
    let a = e.num;
    if (n.gen !== s) {
      const f = `Inconsistent generation in XRef: ${e}`;
      if (this._generationFallback && n.gen < s)
        return I(f), this.fetchUncompressed(he.get(a, n.gen), n, i);
      throw new es(f);
    }
    const r = this.stream.makeSubStream(n.offset + this.stream.start), o = new zi({
      lexer: new ti(r),
      xref: this,
      allowStreams: !0
    }), c = o.getObj(), l = o.getObj(), h = o.getObj();
    if (c !== a || l !== s || !(h instanceof Mt))
      throw new es(`Bad (uncompressed) XRef entry: ${e}`);
    if (h.cmd !== "obj") {
      if (h.cmd.startsWith("obj") && (a = parseInt(h.cmd.substring(3), 10), !Number.isNaN(a)))
        return a;
      throw new es(`Bad (uncompressed) XRef entry: ${e}`);
    }
    return n = this.encrypt && !i ? o.getObj(this.encrypt.createCipherTransform(a, s)) : o.getObj(), n instanceof je || this._cacheMap.set(a, n), n;
  }
  fetchCompressed(e, n, i = !1) {
    const s = n.offset, a = this.fetch(he.get(s, 0));
    if (!(a instanceof je))
      throw new j("bad ObjStm stream");
    const r = a.dict.get("First"), o = a.dict.get("N");
    if (!Number.isInteger(r) || !Number.isInteger(o))
      throw new j("invalid first and n parameters for ObjStm stream");
    let c = new zi({
      lexer: new ti(a),
      xref: this,
      allowStreams: !0
    });
    const l = new Array(o), h = new Array(o);
    for (let d = 0; d < o; ++d) {
      const x = c.getObj();
      if (!Number.isInteger(x))
        throw new j(`invalid object number in the ObjStm stream: ${x}`);
      const g = c.getObj();
      if (!Number.isInteger(g))
        throw new j(`invalid object offset in the ObjStm stream: ${g}`);
      l[d] = x, h[d] = g;
    }
    const f = (a.start || 0) + r, u = new Array(o);
    for (let d = 0; d < o; ++d) {
      const x = d < o - 1 ? h[d + 1] - h[d] : void 0;
      if (x < 0)
        throw new j("Invalid offset in the ObjStm stream.");
      c = new zi({
        lexer: new ti(a.makeSubStream(f + h[d], x, a.dict)),
        xref: this,
        allowStreams: !0
      });
      const g = c.getObj();
      if (u[d] = g, g instanceof je)
        continue;
      const m = l[d], p = this.entries[m];
      p && p.offset === s && p.gen === d && this._cacheMap.set(m, g);
    }
    if (n = u[n.gen], n === void 0)
      throw new es(`Bad (compressed) XRef entry: ${e}`);
    return n;
  }
  async fetchIfRefAsync(e, n) {
    return e instanceof he ? this.fetchAsync(e, n) : e;
  }
  async fetchAsync(e, n) {
    try {
      return this.fetch(e, n);
    } catch (i) {
      if (!(i instanceof mt))
        throw i;
      return await this.pdfManager.requestRange(i.begin, i.end), this.fetchAsync(e, n);
    }
  }
  getCatalogObj() {
    return this.root;
  }
}
er = new WeakMap();
const _6 = [0, 0, 612, 792];
var Oo, Ct, na, o0, Dl, xd, Pl, Nl;
class ef {
  constructor({
    pdfManager: e,
    xref: n,
    pageIndex: i,
    pageDict: s,
    ref: a,
    globalIdFactory: r,
    fontCache: o,
    builtInCMapCache: c,
    standardFontDataCache: l,
    globalColorSpaceCache: h,
    globalImageCache: f,
    systemFontCache: u,
    nonBlendModesSet: d,
    xfaFactory: x
  }) {
    Ee(this, Ct);
    Ee(this, Oo, null);
    this.pdfManager = e, this.pageIndex = i, this.pageDict = s, this.xref = n, this.ref = a, this.fontCache = o, this.builtInCMapCache = c, this.standardFontDataCache = l, this.globalColorSpaceCache = h, this.globalImageCache = f, this.systemFontCache = u, this.nonBlendModesSet = d, this.evaluatorOptions = e.evaluatorOptions, this.xfaFactory = x;
    const g = {
      obj: 0
    };
    this._localIdFactory = class extends r {
      static createObjId() {
        return `p${i}_${++g.obj}`;
      }
      static getPageObjId() {
        return `p${a.toString()}`;
      }
    };
  }
  get content() {
    return this.pageDict.getArray("Contents");
  }
  get resources() {
    const e = J(this, Ct, o0).call(this, "Resources");
    return Q(this, "resources", e instanceof E ? e : E.empty);
  }
  get mediaBox() {
    return Q(this, "mediaBox", J(this, Ct, Dl).call(this, "MediaBox") || _6);
  }
  get cropBox() {
    return Q(this, "cropBox", J(this, Ct, Dl).call(this, "CropBox") || this.mediaBox);
  }
  get userUnit() {
    const e = this.pageDict.get("UserUnit");
    return Q(this, "userUnit", typeof e == "number" && e > 0 ? e : 1);
  }
  get view() {
    const {
      cropBox: e,
      mediaBox: n
    } = this;
    if (e !== n && !S0(e, n)) {
      const i = tt.intersect(e, n);
      if (i && i[2] - i[0] > 0 && i[3] - i[1] > 0)
        return Q(this, "view", i);
      I("Empty /CropBox and /MediaBox intersection.");
    }
    return Q(this, "view", n);
  }
  get rotate() {
    let e = J(this, Ct, o0).call(this, "Rotate") || 0;
    return e % 90 !== 0 ? e = 0 : e >= 360 ? e %= 360 : e < 0 && (e = (e % 360 + 360) % 360), Q(this, "rotate", e);
  }
  async getContentStream() {
    const e = await this.pdfManager.ensure(this, "content");
    return e instanceof je ? e : Array.isArray(e) ? new N2(e, J(this, Ct, xd).bind(this)) : new Vc();
  }
  get xfaData() {
    return Q(this, "xfaData", this.xfaFactory ? {
      bbox: this.xfaFactory.getBoundingBox(this.pageIndex)
    } : null);
  }
  async saveNewAnnotations(e, n, i, s, a) {
    if (this.xfaFactory)
      throw new Error("XFA: Cannot save new annotations.");
    const r = J(this, Ct, na).call(this, e), o = new kn(), c = new Dt();
    await J(this, Ct, Pl).call(this, i, o, c);
    const l = this.pageDict, h = this.annotations.filter((d) => !(d instanceof he && o.has(d))), f = await Yi.saveNewAnnotations(r, n, i, s, a);
    for (const {
      ref: d
    } of f.annotations)
      d instanceof he && !c.has(d) && h.push(d);
    const u = l.clone();
    u.set("Annots", h), a.put(this.ref, {
      data: u
    });
    for (const d of o)
      a.put(d, {
        data: null
      });
  }
  async save(e, n, i, s) {
    const a = J(this, Ct, na).call(this, e), r = await this._parsedAnnotations, o = [];
    for (const c of r)
      o.push(c.save(a, n, i, s).catch(function(l) {
        return I(`save - ignoring annotation data during "${n.name}" task: "${l}".`), null;
      }));
    return Promise.all(o);
  }
  async loadResources(e) {
    await (ce(this, Oo) ?? ct(this, Oo, this.pdfManager.ensure(this, "resources"))), await Ea.load(this.resources, e, this.xref);
  }
  async getOperatorList({
    handler: e,
    sink: n,
    task: i,
    intent: s,
    cacheKey: a,
    annotationStorage: r = null,
    modifiedIds: o = null
  }) {
    const c = this.getContentStream(), l = this.loadResources(Oc), h = J(this, Ct, na).call(this, e), f = this.xfaFactory ? null : pf(r), u = f == null ? void 0 : f.get(this.pageIndex);
    let d = Promise.resolve(null), x = null;
    if (u) {
      const M = this.pdfManager.ensureDoc("annotationGlobals");
      let _;
      const K = /* @__PURE__ */ new Set();
      for (const {
        bitmapId: H,
        bitmap: W
      } of u)
        H && !W && !K.has(H) && K.add(H);
      const {
        isOffscreenCanvasSupported: se
      } = this.evaluatorOptions;
      if (K.size > 0) {
        const H = u.slice();
        for (const [W, le] of r)
          W.startsWith(of) && le.bitmap && K.has(le.bitmapId) && H.push(le);
        _ = Yi.generateImages(H, this.xref, se);
      } else
        _ = Yi.generateImages(u, this.xref, se);
      x = new Dt(), d = Promise.all([M, J(this, Ct, Pl).call(this, u, x, null)]).then(([H]) => H ? Yi.printNewAnnotations(H, h, i, u, _) : null);
    }
    const g = Promise.all([c, l]).then(async ([M]) => {
      const _ = await J(this, Ct, Nl).call(this, M.dict, Oc), K = new on(s, n);
      return e.send("StartRenderPage", {
        transparency: h.hasBlendModes(_, this.nonBlendModesSet),
        pageIndex: this.pageIndex,
        cacheKey: a
      }), await h.getOperatorList({
        stream: M,
        task: i,
        resources: _,
        operatorList: K
      }), K;
    });
    let [m, p, b] = await Promise.all([g, this._parsedAnnotations, d]);
    if (b) {
      p = p.filter((M) => !(M.ref && x.has(M.ref)));
      for (let M = 0, _ = b.length; M < _; M++) {
        const K = b[M];
        if (K.refToReplace) {
          const se = p.findIndex((H) => H.ref && io(H.ref, K.refToReplace));
          se >= 0 && (p.splice(se, 1, K), b.splice(M--, 1), _--);
        }
      }
      p = p.concat(b);
    }
    if (p.length === 0 || s & un.ANNOTATIONS_DISABLE)
      return m.flush(!0), {
        length: m.totalLength
      };
    const w = !!(s & un.ANNOTATIONS_FORMS), y = !!(s & un.IS_EDITING), k = !!(s & un.ANY), S = !!(s & un.DISPLAY), C = !!(s & un.PRINT), T = [];
    for (const M of p)
      (k || S && M.mustBeViewed(r, w) && M.mustBeViewedWhenEditing(y, o) || C && M.mustBePrinted(r)) && T.push(M.getOperatorList(h, i, s, r).catch(function(_) {
        return I(`getOperatorList - ignoring annotation data during "${i.name}" task: "${_}".`), {
          opList: null,
          separateForm: !1,
          separateCanvas: !1
        };
      }));
    const F = await Promise.all(T);
    let R = !1, D = !1;
    for (const {
      opList: M,
      separateForm: _,
      separateCanvas: K
    } of F)
      m.addOpList(M), R || (R = _), D || (D = K);
    return m.flush(!0, {
      form: R,
      canvas: D
    }), {
      length: m.totalLength
    };
  }
  async extractTextContent({
    handler: e,
    task: n,
    includeMarkedContent: i,
    disableNormalization: s,
    sink: a
  }) {
    const r = this.getContentStream(), o = this.loadResources(Lc), c = this.pdfManager.ensureCatalog("lang"), [l, , h] = await Promise.all([r, o, c]), f = await J(this, Ct, Nl).call(this, l.dict, Lc);
    return J(this, Ct, na).call(this, e).getTextContent({
      stream: l,
      task: n,
      resources: f,
      includeMarkedContent: i,
      disableNormalization: s,
      sink: a,
      viewBox: this.view,
      lang: h
    });
  }
  async getStructTree() {
    const e = await this.pdfManager.ensureCatalog("structTreeRoot");
    if (!e)
      return null;
    await this._parsedAnnotations;
    try {
      const n = await this.pdfManager.ensure(this, "_parseStructTree", [e]);
      return await this.pdfManager.ensure(n, "serializable");
    } catch (n) {
      return I(`getStructTree: "${n}".`), null;
    }
  }
  _parseStructTree(e) {
    const n = new xu(e, this.pageDict);
    return n.parse(this.ref), n;
  }
  async getAnnotationsData(e, n, i) {
    const s = await this._parsedAnnotations;
    if (s.length === 0)
      return s;
    const a = [], r = [];
    let o;
    const c = !!(i & un.ANY), l = !!(i & un.DISPLAY), h = !!(i & un.PRINT);
    for (const f of s) {
      const u = c || l && f.viewable;
      (u || h && f.printable) && a.push(f.data), f.hasTextContent && u && (o ?? (o = J(this, Ct, na).call(this, e)), r.push(f.extractTextContent(o, n, [-1 / 0, -1 / 0, 1 / 0, 1 / 0]).catch(function(d) {
        I(`getAnnotationsData - ignoring textContent during "${n.name}" task: "${d}".`);
      })));
    }
    return await Promise.all(r), a;
  }
  get annotations() {
    const e = J(this, Ct, o0).call(this, "Annots");
    return Q(this, "annotations", Array.isArray(e) ? e : []);
  }
  get _parsedAnnotations() {
    const e = this.pdfManager.ensure(this, "annotations").then(async (n) => {
      if (n.length === 0)
        return n;
      const [i, s] = await Promise.all([this.pdfManager.ensureDoc("annotationGlobals"), this.pdfManager.ensureDoc("fieldObjects")]);
      if (!i)
        return [];
      const a = s == null ? void 0 : s.orphanFields, r = [];
      for (const h of n)
        r.push(Yi.create(this.xref, h, i, this._localIdFactory, !1, a, this.ref).catch(function(f) {
          return I(`_parsedAnnotations: "${f}".`), null;
        }));
      const o = [];
      let c, l;
      for (const h of await Promise.all(r))
        if (h) {
          if (h instanceof ri) {
            (l || (l = [])).push(h);
            continue;
          }
          if (h instanceof ad) {
            (c || (c = [])).push(h);
            continue;
          }
          o.push(h);
        }
      return l && o.push(...l), c && o.push(...c), o;
    });
    return Q(this, "_parsedAnnotations", e);
  }
  get jsActions() {
    const e = _o(this.xref, this.pageDict, Ld);
    return Q(this, "jsActions", e);
  }
}
Oo = new WeakMap(), Ct = new WeakSet(), na = function(e) {
  return new Fa({
    xref: this.xref,
    handler: e,
    pageIndex: this.pageIndex,
    idFactory: this._localIdFactory,
    fontCache: this.fontCache,
    builtInCMapCache: this.builtInCMapCache,
    standardFontDataCache: this.standardFontDataCache,
    globalColorSpaceCache: this.globalColorSpaceCache,
    globalImageCache: this.globalImageCache,
    systemFontCache: this.systemFontCache,
    options: this.evaluatorOptions
  });
}, o0 = function(e, n = !1) {
  const i = Gn({
    dict: this.pageDict,
    key: e,
    getArray: n,
    stopWhenFound: !1
  });
  return Array.isArray(i) ? i.length === 1 || !(i[0] instanceof E) ? i[0] : E.merge({
    xref: this.xref,
    dictArray: i
  }) : i;
}, Dl = function(e) {
  if (this.xfaData)
    return this.xfaData.bbox;
  const n = qi(J(this, Ct, o0).call(this, e, !0), null);
  if (n) {
    if (n[2] - n[0] > 0 && n[3] - n[1] > 0)
      return n;
    I(`Empty, or invalid, /${e} entry.`);
  }
  return null;
}, xd = function(e, n) {
  if (this.evaluatorOptions.ignoreErrors) {
    I(`getContentStream - ignoring sub-stream (${n}): "${e}".`);
    return;
  }
  throw e;
}, Pl = async function(e, n, i) {
  const s = [];
  for (const a of e)
    if (a.id) {
      const r = he.fromString(a.id);
      if (!r) {
        I(`A non-linked annotation cannot be modified: ${a.id}`);
        continue;
      }
      if (a.deleted) {
        if (n.put(r, r), a.popupRef) {
          const o = he.fromString(a.popupRef);
          o && n.put(o, o);
        }
        continue;
      }
      i == null || i.put(r), a.ref = r, s.push(this.xref.fetchAsync(r).then((o) => {
        o instanceof E && (a.oldAnnotation = o.clone());
      }, () => {
        I(`Cannot fetch \`oldAnnotation\` for: ${r}.`);
      })), delete a.id;
    }
  await Promise.all(s);
}, Nl = async function(e, n) {
  const i = e == null ? void 0 : e.get("Resources");
  return i instanceof E && i.size ? (await Ea.load(i, n, this.xref), E.merge({
    xref: this.xref,
    dictArray: [i, this.resources],
    mergeSubDicts: !0
  })) : this.resources;
};
const tf = new Uint8Array([37, 80, 68, 70, 45]), nf = new Uint8Array([115, 116, 97, 114, 116, 120, 114, 101, 102]), U6 = new Uint8Array([101, 110, 100, 111, 98, 106]);
function Ec(t, e, n = 1024, i = !1) {
  const s = e.length, a = t.peekBytes(n), r = a.length - s;
  if (r <= 0)
    return !1;
  if (i) {
    const o = s - 1;
    let c = a.length - 1;
    for (; c >= o; ) {
      let l = 0;
      for (; l < s && a[c - l] === e[o - l]; )
        l++;
      if (l >= s)
        return t.pos += c - o, !0;
      c--;
    }
  } else {
    let o = 0;
    for (; o <= r; ) {
      let c = 0;
      for (; c < s && a[o + c] === e[c]; )
        c++;
      if (c >= s)
        return t.pos += o, !0;
      o++;
    }
  }
  return !1;
}
var Qi, tr, In, Ol, pd, md, bd, Ll;
class gd {
  constructor(e, n) {
    Ee(this, In);
    Ee(this, Qi, /* @__PURE__ */ new Map());
    Ee(this, tr, null);
    if (n.length <= 0)
      throw new y0("The PDF file is empty, i.e. its size is zero bytes.");
    this.pdfManager = e, this.stream = n, this.xref = new L6(n, e);
    const i = {
      font: 0
    };
    this._globalIdFactory = class {
      static getDocId() {
        return `g_${e.docId}`;
      }
      static createFontId() {
        return `f${++i.font}`;
      }
      static createObjId() {
        Ke("Abstract method `createObjId` called.");
      }
      static getPageObjId() {
        Ke("Abstract method `getPageObjId` called.");
      }
    };
  }
  parse(e) {
    this.xref.parse(e), this.catalog = new M0(this.pdfManager, this.xref);
  }
  get linearization() {
    let e = null;
    try {
      e = I9.create(this.stream);
    } catch (n) {
      if (n instanceof mt)
        throw n;
      Ge(n);
    }
    return Q(this, "linearization", e);
  }
  get startXRef() {
    const e = this.stream;
    let n = 0;
    if (this.linearization) {
      if (e.reset(), Ec(e, U6)) {
        e.skip(6);
        let i = e.peekByte();
        for (; Dn(i); )
          e.pos++, i = e.peekByte();
        n = e.pos - e.start;
      }
    } else {
      const s = nf.length;
      let a = !1, r = e.end;
      for (; !a && r > 0; )
        r -= 1024 - s, r < 0 && (r = 0), e.pos = r, a = Ec(e, nf, 1024, !0);
      if (a) {
        e.skip(9);
        let o;
        do
          o = e.getByte();
        while (Dn(o));
        let c = "";
        for (; o >= 32 && o <= 57; )
          c += String.fromCharCode(o), o = e.getByte();
        n = parseInt(c, 10), isNaN(n) && (n = 0);
      }
    }
    return Q(this, "startXRef", n);
  }
  checkHeader() {
    const e = this.stream;
    if (e.reset(), !Ec(e, tf))
      return;
    e.moveStart(), e.skip(tf.length);
    let n = "", i;
    for (; (i = e.getByte()) > 32 && n.length < 7; )
      n += String.fromCharCode(i);
    uf.test(n) ? ct(this, tr, n) : I(`Invalid PDF header version: ${n}`);
  }
  parseStartXRef() {
    this.xref.setStartXRef(this.startXRef);
  }
  get numPages() {
    let e = 0;
    return this.catalog.hasActualNumPages ? e = this.catalog.numPages : this.xfaFactory ? e = this.xfaFactory.getNumPages() : this.linearization ? e = this.linearization.numPages : e = this.catalog.numPages, Q(this, "numPages", e);
  }
  get _xfaStreams() {
    const {
      acroForm: e
    } = this.catalog;
    if (!e)
      return null;
    const n = e.get("XFA"), i = new Map(["xdp:xdp", "template", "datasets", "config", "connectionSet", "localeSet", "stylesheet", "/xdp:xdp"].map((s) => [s, null]));
    if (n instanceof je && !n.isEmpty)
      return i.set("xdp:xdp", n), i;
    if (!Array.isArray(n) || n.length === 0)
      return null;
    for (let s = 0, a = n.length; s < a; s += 2) {
      let r;
      if (s === 0 ? r = "xdp:xdp" : s === a - 2 ? r = "/xdp:xdp" : r = n[s], !i.has(r))
        continue;
      const o = this.xref.fetchIfRef(n[s + 1]);
      !(o instanceof je) || o.isEmpty || i.set(r, o);
    }
    return i;
  }
  get xfaDatasets() {
    const e = this._xfaStreams;
    if (!e)
      return Q(this, "xfaDatasets", null);
    for (const n of ["datasets", "xdp:xdp"]) {
      const i = e.get(n);
      if (i)
        try {
          const s = k0(i.getString()), a = {
            [n]: s
          };
          return Q(this, "xfaDatasets", new m6(a));
        } catch {
          I("XFA - Invalid utf-8 string.");
          break;
        }
    }
    return Q(this, "xfaDatasets", null);
  }
  get xfaData() {
    const e = this._xfaStreams;
    if (!e)
      return null;
    const n = /* @__PURE__ */ Object.create(null);
    for (const [i, s] of e)
      if (s)
        try {
          n[i] = k0(s.getString());
        } catch {
          return I("XFA - Invalid utf-8 string."), null;
        }
    return n;
  }
  get xfaFactory() {
    let e;
    return this.pdfManager.enableXfa && this.catalog.needsRendering && this.formInfo.hasXfa && !this.formInfo.hasAcroForm && (e = this.xfaData), Q(this, "xfaFactory", e ? new cr(e) : null);
  }
  get isPureXfa() {
    return this.xfaFactory ? this.xfaFactory.isValid() : !1;
  }
  get htmlForXfa() {
    return this.xfaFactory ? this.xfaFactory.getPages() : null;
  }
  loadXfaResources(e, n) {
    return Promise.all([J(this, In, md).call(this, e, n).catch(() => {
    }), J(this, In, pd).call(this)]);
  }
  serializeXfaData(e) {
    return this.xfaFactory ? this.xfaFactory.serializeData(e) : null;
  }
  get version() {
    return this.catalog.version || ce(this, tr);
  }
  get formInfo() {
    const e = {
      hasFields: !1,
      hasAcroForm: !1,
      hasXfa: !1,
      hasSignatures: !1
    }, {
      acroForm: n
    } = this.catalog;
    if (!n)
      return Q(this, "formInfo", e);
    try {
      const i = n.get("Fields"), s = Array.isArray(i) && i.length > 0;
      e.hasFields = s;
      const a = n.get("XFA");
      e.hasXfa = Array.isArray(a) && a.length > 0 || a instanceof je && !a.isEmpty;
      const o = !!(n.get("SigFlags") & 1), c = o && J(this, In, Ol).call(this, i);
      e.hasAcroForm = s && !c, e.hasSignatures = o;
    } catch (i) {
      if (i instanceof mt)
        throw i;
      I(`Cannot fetch form information: "${i}".`);
    }
    return Q(this, "formInfo", e);
  }
  get documentInfo() {
    var r;
    const {
      catalog: e,
      formInfo: n,
      xref: i
    } = this, s = {
      PDFFormatVersion: this.version,
      Language: e.lang,
      EncryptFilterName: ((r = i.encrypt) == null ? void 0 : r.filterName) ?? null,
      IsLinearized: !!this.linearization,
      IsAcroFormPresent: n.hasAcroForm,
      IsXFAPresent: n.hasXfa,
      IsCollectionPresent: !!e.collection,
      IsSignaturesPresent: n.hasSignatures
    };
    let a;
    try {
      a = i.trailer.get("Info");
    } catch (o) {
      if (o instanceof mt)
        throw o;
      Ge("The document information dictionary is invalid.");
    }
    if (!(a instanceof E))
      return Q(this, "documentInfo", s);
    for (const [o, c] of a) {
      switch (o) {
        case "Title":
        case "Author":
        case "Subject":
        case "Keywords":
        case "Creator":
        case "Producer":
        case "CreationDate":
        case "ModDate":
          if (typeof c == "string") {
            s[o] = Ze(c);
            continue;
          }
          break;
        case "Trapped":
          if (c instanceof O) {
            s[o] = c;
            continue;
          }
          break;
        default:
          let l;
          switch (typeof c) {
            case "string":
              l = Ze(c);
              break;
            case "number":
            case "boolean":
              l = c;
              break;
            default:
              c instanceof O && (l = c);
              break;
          }
          if (l === void 0) {
            I(`Bad value, for custom key "${o}", in Info: ${c}.`);
            continue;
          }
          s.Custom ?? (s.Custom = /* @__PURE__ */ Object.create(null)), s.Custom[o] = l;
          continue;
      }
      I(`Bad value, for key "${o}", in Info: ${c}.`);
    }
    return Q(this, "documentInfo", s);
  }
  get fingerprints() {
    const n = "\0".repeat(16);
    function i(o) {
      return typeof o == "string" && o.length === 16 && o !== n;
    }
    const s = this.xref.trailer.get("ID");
    let a, r;
    return Array.isArray(s) && i(s[0]) ? (a = en(s[0]), s[1] !== s[0] && i(s[1]) && (r = en(s[1]))) : a = Vi(this.stream.getByteRange(0, 1024), 0, 1024), Q(this, "fingerprints", [F1(a), r ? F1(r) : null]);
  }
  getPage(e) {
    const n = ce(this, Qi).get(e);
    if (n)
      return n;
    const {
      catalog: i,
      linearization: s,
      xfaFactory: a
    } = this;
    let r;
    return a ? r = Promise.resolve([E.empty, null]) : (s == null ? void 0 : s.pageFirst) === e ? r = J(this, In, bd).call(this, e) : r = i.getPageDict(e), r = r.then(([o, c]) => new ef({
      pdfManager: this.pdfManager,
      xref: this.xref,
      pageIndex: e,
      pageDict: o,
      ref: c,
      globalIdFactory: this._globalIdFactory,
      fontCache: i.fontCache,
      builtInCMapCache: i.builtInCMapCache,
      standardFontDataCache: i.standardFontDataCache,
      globalColorSpaceCache: i.globalColorSpaceCache,
      globalImageCache: i.globalImageCache,
      systemFontCache: i.systemFontCache,
      nonBlendModesSet: i.nonBlendModesSet,
      xfaFactory: a
    })), ce(this, Qi).set(e, r), r;
  }
  async checkFirstPage(e = !1) {
    if (!e)
      try {
        await this.getPage(0);
      } catch (n) {
        if (n instanceof es)
          throw ce(this, Qi).delete(0), await this.cleanup(), new ha();
      }
  }
  async checkLastPage(e = !1) {
    const {
      catalog: n,
      pdfManager: i
    } = this;
    n.setActualNumPages();
    let s;
    try {
      if (await Promise.all([i.ensureDoc("xfaFactory"), i.ensureDoc("linearization"), i.ensureCatalog("numPages")]), this.xfaFactory)
        return;
      if (this.linearization ? s = this.linearization.numPages : s = n.numPages, Number.isInteger(s)) {
        if (s <= 1)
          return;
      } else throw new j("Page count is not an integer.");
      await this.getPage(s - 1);
    } catch (a) {
      if (ce(this, Qi).delete(s - 1), await this.cleanup(), a instanceof es && !e)
        throw new ha();
      I(`checkLastPage - invalid /Pages tree /Count: ${s}.`);
      let r;
      try {
        r = await n.getAllPageDicts(e);
      } catch (o) {
        if (o instanceof es && !e)
          throw new ha();
        n.setActualNumPages(1);
        return;
      }
      for (const [o, [c, l]] of r) {
        let h;
        c instanceof Error ? (h = Promise.reject(c), h.catch(() => {
        })) : h = Promise.resolve(new ef({
          pdfManager: i,
          xref: this.xref,
          pageIndex: o,
          pageDict: c,
          ref: l,
          globalIdFactory: this._globalIdFactory,
          fontCache: n.fontCache,
          builtInCMapCache: n.builtInCMapCache,
          standardFontDataCache: n.standardFontDataCache,
          globalColorSpaceCache: this.globalColorSpaceCache,
          globalImageCache: n.globalImageCache,
          systemFontCache: n.systemFontCache,
          nonBlendModesSet: n.nonBlendModesSet,
          xfaFactory: null
        })), ce(this, Qi).set(o, h);
      }
      n.setActualNumPages(r.size);
    }
  }
  async fontFallback(e, n) {
    const {
      catalog: i,
      pdfManager: s
    } = this;
    for (const a of await Promise.all(i.fontCache))
      if (a.loadedName === e) {
        a.fallback(n, s.evaluatorOptions);
        return;
      }
  }
  async cleanup(e = !1) {
    return this.catalog ? this.catalog.cleanup(e) : i1();
  }
  get fieldObjects() {
    const e = this.pdfManager.ensureDoc("formInfo").then(async (n) => {
      if (!n.hasFields)
        return null;
      const i = await this.annotationGlobals;
      if (!i)
        return null;
      const {
        acroForm: s
      } = i, a = new Dt(), r = /* @__PURE__ */ Object.create(null), o = /* @__PURE__ */ new Map(), c = new kn();
      for (const h of s.get("Fields"))
        await J(this, In, Ll).call(this, "", null, h, o, i, a, c);
      const l = [];
      for (const [h, f] of o)
        l.push(Promise.all(f).then((u) => {
          u = u.filter((d) => !!d), u.length > 0 && (r[h] = u);
        }));
      return await Promise.all(l), {
        allFields: Ul(r) > 0 ? r : null,
        orphanFields: c
      };
    });
    return Q(this, "fieldObjects", e);
  }
  get hasJSActions() {
    const e = this.pdfManager.ensureDoc("_parseHasJSActions");
    return Q(this, "hasJSActions", e);
  }
  async _parseHasJSActions() {
    const [e, n] = await Promise.all([this.pdfManager.ensureCatalog("jsActions"), this.pdfManager.ensureDoc("fieldObjects")]);
    return e ? !0 : n != null && n.allFields ? Object.values(n.allFields).some((i) => i.some((s) => s.actions !== null)) : !1;
  }
  get calculationOrderIds() {
    var i;
    const e = (i = this.catalog.acroForm) == null ? void 0 : i.get("CO");
    if (!Array.isArray(e) || e.length === 0)
      return Q(this, "calculationOrderIds", null);
    const n = [];
    for (const s of e)
      s instanceof he && n.push(s.toString());
    return Q(this, "calculationOrderIds", n.length ? n : null);
  }
  get annotationGlobals() {
    return Q(this, "annotationGlobals", Yi.createGlobals(this.pdfManager));
  }
}
Qi = new WeakMap(), tr = new WeakMap(), In = new WeakSet(), Ol = function(e, n = 0) {
  return Array.isArray(e) ? e.every((s) => {
    if (s = this.xref.fetchIfRef(s), !(s instanceof E))
      return !1;
    if (s.has("Kids"))
      return ++n > 10 ? (I("#hasOnlyDocumentSignatures: maximum recursion depth reached"), !1) : J(this, In, Ol).call(this, s.get("Kids"), n);
    const a = Tt(s.get("FT"), "Sig"), r = s.get("Rect"), o = Array.isArray(r) && r.every((c) => c === 0);
    return a && o;
  }) : !1;
}, pd = async function() {
  const e = await this.pdfManager.ensureCatalog("xfaImages");
  e && this.xfaFactory.setImages(e);
}, md = async function(e, n) {
  const i = await this.pdfManager.ensureCatalog("acroForm");
  if (!i)
    return;
  const s = await i.getAsync("DR");
  if (!(s instanceof E))
    return;
  await Ea.load(s, ["Font"], this.xref);
  const a = s.get("Font");
  if (!(a instanceof E))
    return;
  const r = Object.assign(/* @__PURE__ */ Object.create(null), this.pdfManager.evaluatorOptions, {
    useSystemFonts: !1
  }), {
    builtInCMapCache: o,
    fontCache: c,
    standardFontDataCache: l
  } = this.catalog, h = new Fa({
    xref: this.xref,
    handler: e,
    pageIndex: -1,
    idFactory: this._globalIdFactory,
    fontCache: c,
    builtInCMapCache: o,
    standardFontDataCache: l,
    options: r
  }), f = new on(), u = [], d = {
    get font() {
      return u.at(-1);
    },
    set font(b) {
      u.push(b);
    },
    clone() {
      return this;
    }
  }, x = (b, w, y) => h.handleSetFont(s, [O.get(b), 1], null, f, n, d, w, y).catch((k) => (I(`loadXfaFonts: "${k}".`), null)), g = [];
  for (const [b, w] of a) {
    const y = w.get("FontDescriptor");
    if (!(y instanceof E))
      continue;
    let k = y.get("FontFamily");
    k = k.replaceAll(/[ ]+(\d)/g, "$1");
    const S = y.get("FontWeight"), C = -y.get("ItalicAngle"), T = {
      fontFamily: k,
      fontWeight: S,
      italicAngle: C
    };
    n2(T) && g.push(x(b, null, T));
  }
  await Promise.all(g);
  const m = this.xfaFactory.setFonts(u);
  if (!m)
    return;
  r.ignoreErrors = !0, g.length = 0, u.length = 0;
  const p = /* @__PURE__ */ new Set();
  for (const b of m)
    e1(`${b}-Regular`) || p.add(b);
  p.size && m.push("PdfJS-Fallback");
  for (const b of m)
    if (!p.has(b))
      for (const w of [{
        name: "Regular",
        fontWeight: 400,
        italicAngle: 0
      }, {
        name: "Bold",
        fontWeight: 700,
        italicAngle: 0
      }, {
        name: "Italic",
        fontWeight: 400,
        italicAngle: 12
      }, {
        name: "BoldItalic",
        fontWeight: 700,
        italicAngle: 12
      }]) {
        const y = `${b}-${w.name}`;
        g.push(x(y, eu(y), {
          fontFamily: b,
          fontWeight: w.fontWeight,
          italicAngle: w.italicAngle
        }));
      }
  await Promise.all(g), this.xfaFactory.appendFonts(u, p);
}, bd = async function(e) {
  const {
    catalog: n,
    linearization: i,
    xref: s
  } = this, a = he.get(i.objectNumberFirst, 0);
  try {
    const r = await s.fetchAsync(a);
    if (r instanceof E) {
      let o = r.getRaw("Type");
      if (o instanceof he && (o = await s.fetchAsync(o)), Tt(o, "Page") || !r.has("Type") && !r.has("Kids") && r.has("Contents"))
        return n.pageKidsCountCache.has(a) || n.pageKidsCountCache.put(a, 1), n.pageIndexCache.has(a) || n.pageIndexCache.put(a, 0), [r, a];
    }
    throw new j("The Linearization dictionary doesn't point to a valid Page dictionary.");
  } catch (r) {
    return I(`_getLinearizationPage: "${r.message}".`), n.getPageDict(e);
  }
}, Ll = async function(e, n, i, s, a, r, o) {
  const {
    xref: c
  } = this;
  if (!(i instanceof he) || r.has(i))
    return;
  r.put(i);
  const l = await c.fetchAsync(i);
  if (!(l instanceof E))
    return;
  let h = await l.getAsync("Subtype");
  switch (h = h instanceof O ? h.name : null, h) {
    case "Link":
      return;
  }
  if (l.has("T")) {
    const u = Ze(await l.getAsync("T"));
    e = e === "" ? u : `${e}.${u}`;
  } else {
    let u = l;
    for (; ; ) {
      if (u = u.getRaw("Parent") || n, u instanceof he) {
        if (r.has(u))
          break;
        u = await c.fetchAsync(u);
      }
      if (!(u instanceof E))
        break;
      if (u.has("T")) {
        const d = Ze(await u.getAsync("T"));
        e = e === "" ? d : `${e}.${d}`;
        break;
      }
    }
  }
  if (n && !l.has("Parent") && Tt(l.get("Subtype"), "Widget") && o.put(i, n), s.has(e) || s.set(e, []), s.get(e).push(Yi.create(c, i, a, null, !0, o, null).then((u) => u == null ? void 0 : u.getFieldObject()).catch(function(u) {
    return I(`#collectFieldObjects: "${u}".`), null;
  })), !l.has("Kids"))
    return;
  const f = await l.getAsync("Kids");
  if (Array.isArray(f))
    for (const u of f)
      await J(this, In, Ll).call(this, e, i, u, s, a, r, o);
};
function j6(t) {
  if (t) {
    const e = no(t);
    if (e)
      return e.href;
    I(`Invalid absolute docBaseUrl: "${t}".`);
  }
  return null;
}
class wd {
  constructor({
    docBaseUrl: e,
    docId: n,
    enableXfa: i,
    evaluatorOptions: s,
    handler: a,
    password: r
  }) {
    this._docBaseUrl = j6(e), this._docId = n, this._password = r, this.enableXfa = i, s.isOffscreenCanvasSupported && (s.isOffscreenCanvasSupported = An.isOffscreenCanvasSupported), s.isImageDecoderSupported && (s.isImageDecoderSupported = An.isImageDecoderSupported), this.evaluatorOptions = Object.freeze(s), Zn.setOptions(s), Ia.setOptions(s), on.setOptions(s);
    const o = {
      ...s,
      handler: a
    };
    Jn.setOptions(o), Ns.setOptions(o), C0.setOptions(o);
  }
  get docId() {
    return this._docId;
  }
  get password() {
    return this._password;
  }
  get docBaseUrl() {
    return this._docBaseUrl;
  }
  ensureDoc(e, n) {
    return this.ensure(this.pdfDocument, e, n);
  }
  ensureXRef(e, n) {
    return this.ensure(this.pdfDocument.xref, e, n);
  }
  ensureCatalog(e, n) {
    return this.ensure(this.pdfDocument.catalog, e, n);
  }
  getPage(e) {
    return this.pdfDocument.getPage(e);
  }
  fontFallback(e, n) {
    return this.pdfDocument.fontFallback(e, n);
  }
  cleanup(e = !1) {
    return this.pdfDocument.cleanup(e);
  }
  async ensure(e, n, i) {
    Ke("Abstract method `ensure` called");
  }
  requestRange(e, n) {
    Ke("Abstract method `requestRange` called");
  }
  requestLoadedStream(e = !1) {
    Ke("Abstract method `requestLoadedStream` called");
  }
  sendProgressiveData(e) {
    Ke("Abstract method `sendProgressiveData` called");
  }
  updatePassword(e) {
    this._password = e;
  }
  terminate(e) {
    Ke("Abstract method `terminate` called");
  }
}
class sf extends wd {
  constructor(e) {
    super(e);
    const n = new At(e.source);
    this.pdfDocument = new gd(this, n), this._loadedStreamPromise = Promise.resolve(n);
  }
  async ensure(e, n, i) {
    const s = e[n];
    return typeof s == "function" ? s.apply(e, i) : s;
  }
  requestRange(e, n) {
    return Promise.resolve();
  }
  requestLoadedStream(e = !1) {
    return this._loadedStreamPromise;
  }
  terminate(e) {
  }
}
class q6 extends wd {
  constructor(e) {
    super(e), this.streamManager = new E2(e.source, {
      msgHandler: e.handler,
      length: e.length,
      disableAutoFetch: e.disableAutoFetch,
      rangeChunkSize: e.rangeChunkSize
    }), this.pdfDocument = new gd(this, this.streamManager.getStream());
  }
  async ensure(e, n, i) {
    try {
      const s = e[n];
      return typeof s == "function" ? s.apply(e, i) : s;
    } catch (s) {
      if (!(s instanceof mt))
        throw s;
      return await this.requestRange(s.begin, s.end), this.ensure(e, n, i);
    }
  }
  requestRange(e, n) {
    return this.streamManager.requestRange(e, n);
  }
  requestLoadedStream(e = !1) {
    return this.streamManager.requestAllChunks(e);
  }
  sendProgressiveData(e) {
    this.streamManager.onReceiveData({
      chunk: e
    });
  }
  terminate(e) {
    this.streamManager.abort(e);
  }
}
const _r = {
  DATA: 1,
  ERROR: 2
}, Lt = {
  CANCEL: 1,
  CANCEL_COMPLETE: 2,
  CLOSE: 3,
  ENQUEUE: 4,
  ERROR: 5,
  PULL: 6,
  PULL_COMPLETE: 7,
  START_COMPLETE: 8
};
function af() {
}
function En(t) {
  if (t instanceof Jt || t instanceof y0 || t instanceof w0 || t instanceof I1 || t instanceof sc)
    return t;
  switch (t instanceof Error || typeof t == "object" && t !== null || Ke('wrapReason: Expected "reason" to be a (possibly cloned) Error.'), t.name) {
    case "AbortException":
      return new Jt(t.message);
    case "InvalidPDFException":
      return new y0(t.message);
    case "PasswordException":
      return new w0(t.message, t.code);
    case "ResponseException":
      return new I1(t.message, t.status, t.missing);
    case "UnknownErrorException":
      return new sc(t.message, t.details);
  }
  return new sc(t.message, t.toString());
}
var Aa, Wn, yd, kd, Sd, eo;
class rf {
  constructor(e, n, i) {
    Ee(this, Wn);
    Ee(this, Aa, new AbortController());
    this.sourceName = e, this.targetName = n, this.comObj = i, this.callbackId = 1, this.streamId = 1, this.streamSinks = /* @__PURE__ */ Object.create(null), this.streamControllers = /* @__PURE__ */ Object.create(null), this.callbackCapabilities = /* @__PURE__ */ Object.create(null), this.actionHandler = /* @__PURE__ */ Object.create(null), i.addEventListener("message", J(this, Wn, yd).bind(this), {
      signal: ce(this, Aa).signal
    });
  }
  on(e, n) {
    const i = this.actionHandler;
    if (i[e])
      throw new Error(`There is already an actionName called "${e}"`);
    i[e] = n;
  }
  send(e, n, i) {
    this.comObj.postMessage({
      sourceName: this.sourceName,
      targetName: this.targetName,
      action: e,
      data: n
    }, i);
  }
  sendWithPromise(e, n, i) {
    const s = this.callbackId++, a = Promise.withResolvers();
    this.callbackCapabilities[s] = a;
    try {
      this.comObj.postMessage({
        sourceName: this.sourceName,
        targetName: this.targetName,
        action: e,
        callbackId: s,
        data: n
      }, i);
    } catch (r) {
      a.reject(r);
    }
    return a.promise;
  }
  sendWithStream(e, n, i, s) {
    const a = this.streamId++, r = this.sourceName, o = this.targetName, c = this.comObj;
    return new ReadableStream({
      start: (l) => {
        const h = Promise.withResolvers();
        return this.streamControllers[a] = {
          controller: l,
          startCall: h,
          pullCall: null,
          cancelCall: null,
          isClosed: !1
        }, c.postMessage({
          sourceName: r,
          targetName: o,
          action: e,
          streamId: a,
          data: n,
          desiredSize: l.desiredSize
        }, s), h.promise;
      },
      pull: (l) => {
        const h = Promise.withResolvers();
        return this.streamControllers[a].pullCall = h, c.postMessage({
          sourceName: r,
          targetName: o,
          stream: Lt.PULL,
          streamId: a,
          desiredSize: l.desiredSize
        }), h.promise;
      },
      cancel: (l) => {
        zt(l instanceof Error, "cancel must have a valid reason");
        const h = Promise.withResolvers();
        return this.streamControllers[a].cancelCall = h, this.streamControllers[a].isClosed = !0, c.postMessage({
          sourceName: r,
          targetName: o,
          stream: Lt.CANCEL,
          streamId: a,
          reason: En(l)
        }), h.promise;
      }
    }, i);
  }
  destroy() {
    var e;
    (e = ce(this, Aa)) == null || e.abort(), ct(this, Aa, null);
  }
}
Aa = new WeakMap(), Wn = new WeakSet(), yd = function({
  data: e
}) {
  if (e.targetName !== this.sourceName)
    return;
  if (e.stream) {
    J(this, Wn, Sd).call(this, e);
    return;
  }
  if (e.callback) {
    const i = e.callbackId, s = this.callbackCapabilities[i];
    if (!s)
      throw new Error(`Cannot resolve callback ${i}`);
    if (delete this.callbackCapabilities[i], e.callback === _r.DATA)
      s.resolve(e.data);
    else if (e.callback === _r.ERROR)
      s.reject(En(e.reason));
    else
      throw new Error("Unexpected callback case");
    return;
  }
  const n = this.actionHandler[e.action];
  if (!n)
    throw new Error(`Unknown action from worker: ${e.action}`);
  if (e.callbackId) {
    const i = this.sourceName, s = e.sourceName, a = this.comObj;
    Promise.try(n, e.data).then(function(r) {
      a.postMessage({
        sourceName: i,
        targetName: s,
        callback: _r.DATA,
        callbackId: e.callbackId,
        data: r
      });
    }, function(r) {
      a.postMessage({
        sourceName: i,
        targetName: s,
        callback: _r.ERROR,
        callbackId: e.callbackId,
        reason: En(r)
      });
    });
    return;
  }
  if (e.streamId) {
    J(this, Wn, kd).call(this, e);
    return;
  }
  n(e.data);
}, kd = function(e) {
  const n = e.streamId, i = this.sourceName, s = e.sourceName, a = this.comObj, r = this, o = this.actionHandler[e.action], c = {
    enqueue(l, h = 1, f) {
      if (this.isCancelled)
        return;
      const u = this.desiredSize;
      this.desiredSize -= h, u > 0 && this.desiredSize <= 0 && (this.sinkCapability = Promise.withResolvers(), this.ready = this.sinkCapability.promise), a.postMessage({
        sourceName: i,
        targetName: s,
        stream: Lt.ENQUEUE,
        streamId: n,
        chunk: l
      }, f);
    },
    close() {
      this.isCancelled || (this.isCancelled = !0, a.postMessage({
        sourceName: i,
        targetName: s,
        stream: Lt.CLOSE,
        streamId: n
      }), delete r.streamSinks[n]);
    },
    error(l) {
      zt(l instanceof Error, "error must have a valid reason"), !this.isCancelled && (this.isCancelled = !0, a.postMessage({
        sourceName: i,
        targetName: s,
        stream: Lt.ERROR,
        streamId: n,
        reason: En(l)
      }));
    },
    sinkCapability: Promise.withResolvers(),
    onPull: null,
    onCancel: null,
    isCancelled: !1,
    desiredSize: e.desiredSize,
    ready: null
  };
  c.sinkCapability.resolve(), c.ready = c.sinkCapability.promise, this.streamSinks[n] = c, Promise.try(o, e.data, c).then(function() {
    a.postMessage({
      sourceName: i,
      targetName: s,
      stream: Lt.START_COMPLETE,
      streamId: n,
      success: !0
    });
  }, function(l) {
    a.postMessage({
      sourceName: i,
      targetName: s,
      stream: Lt.START_COMPLETE,
      streamId: n,
      reason: En(l)
    });
  });
}, Sd = function(e) {
  const n = e.streamId, i = this.sourceName, s = e.sourceName, a = this.comObj, r = this.streamControllers[n], o = this.streamSinks[n];
  switch (e.stream) {
    case Lt.START_COMPLETE:
      e.success ? r.startCall.resolve() : r.startCall.reject(En(e.reason));
      break;
    case Lt.PULL_COMPLETE:
      e.success ? r.pullCall.resolve() : r.pullCall.reject(En(e.reason));
      break;
    case Lt.PULL:
      if (!o) {
        a.postMessage({
          sourceName: i,
          targetName: s,
          stream: Lt.PULL_COMPLETE,
          streamId: n,
          success: !0
        });
        break;
      }
      o.desiredSize <= 0 && e.desiredSize > 0 && o.sinkCapability.resolve(), o.desiredSize = e.desiredSize, Promise.try(o.onPull || af).then(function() {
        a.postMessage({
          sourceName: i,
          targetName: s,
          stream: Lt.PULL_COMPLETE,
          streamId: n,
          success: !0
        });
      }, function(l) {
        a.postMessage({
          sourceName: i,
          targetName: s,
          stream: Lt.PULL_COMPLETE,
          streamId: n,
          reason: En(l)
        });
      });
      break;
    case Lt.ENQUEUE:
      if (zt(r, "enqueue should have stream controller"), r.isClosed)
        break;
      r.controller.enqueue(e.chunk);
      break;
    case Lt.CLOSE:
      if (zt(r, "close should have stream controller"), r.isClosed)
        break;
      r.isClosed = !0, r.controller.close(), J(this, Wn, eo).call(this, r, n);
      break;
    case Lt.ERROR:
      zt(r, "error should have stream controller"), r.controller.error(En(e.reason)), J(this, Wn, eo).call(this, r, n);
      break;
    case Lt.CANCEL_COMPLETE:
      e.success ? r.cancelCall.resolve() : r.cancelCall.reject(En(e.reason)), J(this, Wn, eo).call(this, r, n);
      break;
    case Lt.CANCEL:
      if (!o)
        break;
      const c = En(e.reason);
      Promise.try(o.onCancel || af, c).then(function() {
        a.postMessage({
          sourceName: i,
          targetName: s,
          stream: Lt.CANCEL_COMPLETE,
          streamId: n,
          success: !0
        });
      }, function(l) {
        a.postMessage({
          sourceName: i,
          targetName: s,
          stream: Lt.CANCEL_COMPLETE,
          streamId: n,
          reason: En(l)
        });
      }), o.sinkCapability.reject(c), o.isCancelled = !0, delete this.streamSinks[n];
      break;
    default:
      throw new Error("Unexpected stream case");
  }
}, eo = async function(e, n) {
  var i, s, a;
  await Promise.allSettled([(i = e.startCall) == null ? void 0 : i.promise, (s = e.pullCall) == null ? void 0 : s.promise, (a = e.cancelCall) == null ? void 0 : a.promise]), delete this.streamControllers[n];
};
async function Cd(t, e, n, {
  encrypt: i = null
}) {
  const s = i == null ? void 0 : i.createCipherTransform(t.num, t.gen);
  n.push(`${t.num} ${t.gen} obj
`), e instanceof E ? await Qo(e, n, s) : e instanceof je ? await Ad(e, n, s) : (Array.isArray(e) || ArrayBuffer.isView(e)) && await vd(e, n, s), n.push(`
endobj
`);
}
async function Qo(t, e, n) {
  e.push("<<");
  for (const i of t.getKeys())
    e.push(` /${ql(i)} `), await Id(t.getRaw(i), e, n);
  e.push(">>");
}
async function Ad(t, e, n) {
  let i = t.getBytes();
  const {
    dict: s
  } = t, [a, r] = await Promise.all([s.getAsync("Filter"), s.getAsync("DecodeParms")]), o = Array.isArray(a) ? await s.xref.fetchIfRefAsync(a[0]) : a, c = Tt(o, "FlateDecode");
  if (i.length >= 256 || c)
    try {
      const f = new CompressionStream("deflate"), u = f.writable.getWriter();
      await u.ready, u.write(i).then(async () => {
        await u.ready, await u.close();
      }).catch(() => {
      });
      const d = await new Response(f.readable).arrayBuffer();
      i = new Uint8Array(d);
      let x, g;
      a ? c || (x = Array.isArray(a) ? [O.get("FlateDecode"), ...a] : [O.get("FlateDecode"), a], r && (g = Array.isArray(r) ? [null, ...r] : [null, r])) : x = O.get("FlateDecode"), x && s.set("Filter", x), g && s.set("DecodeParms", g);
    } catch (f) {
      Ge(`writeStream - cannot compress data: "${f}".`);
    }
  let h = Cn(i);
  n && (h = n.encryptString(h)), s.set("Length", h.length), await Qo(s, e, n), e.push(` stream
`, h, `
endstream`);
}
async function vd(t, e, n) {
  e.push("[");
  let i = !0;
  for (const s of t)
    i ? i = !1 : e.push(" "), await Id(s, e, n);
  e.push("]");
}
async function Id(t, e, n) {
  t instanceof O ? e.push(`/${ql(t.name)}`) : t instanceof he ? e.push(`${t.num} ${t.gen} R`) : Array.isArray(t) || ArrayBuffer.isView(t) ? await vd(t, e, n) : typeof t == "string" ? (n && (t = n.encryptString(t)), e.push(`(${va(t)})`)) : typeof t == "number" ? e.push(Xe(t)) : typeof t == "boolean" ? e.push(t.toString()) : t instanceof E ? await Qo(t, e, n) : t instanceof je ? await Ad(t, e, n) : t === null ? e.push("null") : I(`Unhandled value in writer: ${typeof t}, please file a bug.`);
}
function Rc(t, e, n, i) {
  for (let s = e + n - 1; s > n - 1; s--)
    i[s] = t & 255, t >>= 8;
  return n + e;
}
function Td(t, e, n) {
  const i = t.length;
  for (let s = 0; s < i; s++)
    n[e + s] = t.charCodeAt(s) & 255;
  return e + i;
}
function H6(t, e) {
  const n = Math.floor(Date.now() / 1e3), i = e.filename || "", s = [n.toString(), i, t.toString(), ...e.infoMap.values()], a = Math.sumPrecise(s.map((c) => c.length)), r = new Uint8Array(a);
  let o = 0;
  for (const c of s)
    o = Td(c, o, r);
  return Cn(Vi(r, 0, r.length));
}
function G6(t, e) {
  const n = new Ho({
    hasAttributes: !0
  }).parseFromString(t);
  for (const {
    xfa: s
  } of e) {
    if (!s)
      continue;
    const {
      path: a,
      value: r
    } = s;
    if (!a)
      continue;
    const o = xf(a);
    let c = n.documentElement.searchNode(o, 0);
    !c && o.length > 1 && (c = n.documentElement.searchNode([o.at(-1)], 0)), c ? c.childNodes = Array.isArray(r) ? r.map((l) => new f0("value", l)) : [new f0("#text", r)] : I(`Node not found for path: ${a}`);
  }
  const i = [];
  return n.documentElement.dump(i), i.join("");
}
async function $6({
  xref: t,
  acroForm: e,
  acroFormRef: n,
  hasXfa: i,
  hasXfaDatasetsEntry: s,
  xfaDatasetsRef: a,
  needAppearances: r,
  changes: o
}) {
  if (i && !s && !a && I("XFA - Cannot save it"), !r && (!i || !a || s))
    return;
  const c = e.clone();
  if (i && !s) {
    const l = e.get("XFA").slice();
    l.splice(2, 0, "datasets"), l.splice(3, 0, a), c.set("XFA", l);
  }
  r && c.set("NeedAppearances", !0), o.put(n, {
    data: c
  });
}
function z6({
  xfaData: t,
  xfaDatasetsRef: e,
  changes: n,
  xref: i
}) {
  if (t === null) {
    const a = i.fetchIfRef(e);
    t = G6(a.getString(), n);
  }
  const s = new pn(t);
  s.dict = new E(i), s.dict.set("Type", O.get("EmbeddedFile")), n.put(e, {
    data: s
  });
}
async function W6(t, e, n, i, s) {
  s.push(`xref
`);
  const a = Fd(n);
  let r = 0;
  for (const {
    ref: o,
    data: c
  } of n)
    o.num === a[r] && (s.push(`${a[r]} ${a[r + 1]}
`), r += 2), c !== null ? (s.push(`${e.toString().padStart(10, "0")} ${Math.min(o.gen, 65535).toString().padStart(5, "0")} n\r
`), e += c.length) : s.push(`0000000000 ${Math.min(o.gen + 1, 65535).toString().padStart(5, "0")} f\r
`);
  Bd(e, t, i), s.push(`trailer
`), await Qo(i, s), s.push(`
startxref
`, e.toString(), `
%%EOF
`);
}
function Fd(t) {
  const e = [];
  for (const {
    ref: n
  } of t)
    n.num === e.at(-2) + e.at(-1) ? e[e.length - 1] += 1 : e.push(n.num, 1);
  return e;
}
async function V6(t, e, n, i, s) {
  const a = [];
  let r = 0, o = 0;
  for (const {
    ref: g,
    data: m
  } of n) {
    let p;
    r = Math.max(r, e), m !== null ? (p = Math.min(g.gen, 65535), a.push([1, e, p]), e += m.length) : (p = Math.min(g.gen + 1, 65535), a.push([0, 0, p])), o = Math.max(o, p);
  }
  i.set("Index", Fd(n));
  const c = B1(r), l = B1(o), h = [1, c, l];
  i.set("W", h), Bd(e, t, i);
  const f = Math.sumPrecise(h), u = new Uint8Array(f * a.length), d = new At(u);
  d.dict = i;
  let x = 0;
  for (const [g, m, p] of a)
    x = Rc(g, h[0], x, u), x = Rc(m, h[1], x, u), x = Rc(p, h[2], x, u);
  await Cd(t.newRef, d, s, {}), s.push(`startxref
`, e.toString(), `
%%EOF
`);
}
function Bd(t, e, n) {
  if (Array.isArray(e.fileIds) && e.fileIds.length > 0) {
    const i = H6(t, e);
    n.set("ID", [e.fileIds[0], i]);
  }
}
function X6(t, e, n) {
  const i = new E(null);
  i.set("Prev", t.startXRef);
  const s = t.newRef;
  return n ? (e.put(s, {
    data: ""
  }), i.set("Size", s.num + 1), i.set("Type", O.get("XRef"))) : i.set("Size", s.num), t.rootRef !== null && i.set("Root", t.rootRef), t.infoRef !== null && i.set("Info", t.infoRef), t.encryptRef !== null && i.set("Encrypt", t.encryptRef), i;
}
async function K6(t, e, n = []) {
  const i = [];
  for (const [s, {
    data: a
  }] of t.items()) {
    if (a === null || typeof a == "string") {
      i.push({
        ref: s,
        data: a
      });
      continue;
    }
    await Cd(s, a, n, e), i.push({
      ref: s,
      data: n.join("")
    }), n.length = 0;
  }
  return i.sort((s, a) => s.ref.num - a.ref.num);
}
async function Y6({
  originalData: t,
  xrefInfo: e,
  changes: n,
  xref: i = null,
  hasXfa: s = !1,
  xfaDatasetsRef: a = null,
  hasXfaDatasetsEntry: r = !1,
  needAppearances: o,
  acroFormRef: c = null,
  acroForm: l = null,
  xfaData: h = null,
  useXrefStream: f = !1
}) {
  await $6({
    xref: i,
    acroForm: l,
    acroFormRef: c,
    hasXfa: s,
    hasXfaDatasetsEntry: r,
    xfaDatasetsRef: a,
    needAppearances: o,
    changes: n
  }), s && z6({
    xfaData: h,
    xfaDatasetsRef: a,
    changes: n,
    xref: i
  });
  const u = X6(e, n, f), d = [], x = await K6(n, i, d);
  let g = t.length;
  const m = t.at(-1);
  m !== 10 && m !== 13 && (d.push(`
`), g += 1);
  for (const {
    data: y
  } of x)
    y !== null && d.push(y);
  await (f ? V6(e, g, x, u, d) : W6(e, g, x, u, d));
  const p = t.length + Math.sumPrecise(d.map((y) => y.length)), b = new Uint8Array(p);
  b.set(t);
  let w = t.length;
  for (const y of d)
    w = Td(y, w, b);
  return b;
}
class Z6 {
  constructor(e) {
    this._msgHandler = e, this._contentLength = null, this._fullRequestReader = null, this._rangeRequestReaders = [];
  }
  getFullReader() {
    return zt(!this._fullRequestReader, "PDFWorkerStream.getFullReader can only be called once."), this._fullRequestReader = new J6(this._msgHandler), this._fullRequestReader;
  }
  getRangeReader(e, n) {
    const i = new Q6(e, n, this._msgHandler);
    return this._rangeRequestReaders.push(i), i;
  }
  cancelAllRequests(e) {
    var n;
    (n = this._fullRequestReader) == null || n.cancel(e);
    for (const i of this._rangeRequestReaders.slice(0))
      i.cancel(e);
  }
}
class J6 {
  constructor(e) {
    this._msgHandler = e, this.onProgress = null, this._contentLength = null, this._isRangeSupported = !1, this._isStreamingSupported = !1;
    const n = this._msgHandler.sendWithStream("GetReader");
    this._reader = n.getReader(), this._headersReady = this._msgHandler.sendWithPromise("ReaderHeadersReady").then((i) => {
      this._isStreamingSupported = i.isStreamingSupported, this._isRangeSupported = i.isRangeSupported, this._contentLength = i.contentLength;
    });
  }
  get headersReady() {
    return this._headersReady;
  }
  get contentLength() {
    return this._contentLength;
  }
  get isStreamingSupported() {
    return this._isStreamingSupported;
  }
  get isRangeSupported() {
    return this._isRangeSupported;
  }
  async read() {
    const {
      value: e,
      done: n
    } = await this._reader.read();
    return n ? {
      value: void 0,
      done: !0
    } : {
      value: e.buffer,
      done: !1
    };
  }
  cancel(e) {
    this._reader.cancel(e);
  }
}
class Q6 {
  constructor(e, n, i) {
    this._msgHandler = i, this.onProgress = null;
    const s = this._msgHandler.sendWithStream("GetRangeReader", {
      begin: e,
      end: n
    });
    this._reader = s.getReader();
  }
  get isStreamingSupported() {
    return !1;
  }
  async read() {
    const {
      value: e,
      done: n
    } = await this._reader.read();
    return n ? {
      value: void 0,
      done: !0
    } : {
      value: e.buffer,
      done: !1
    };
  }
  cancel(e) {
    this._reader.cancel(e);
  }
}
class gs {
  constructor(e) {
    this.name = e, this.terminated = !1, this._capability = Promise.withResolvers();
  }
  get finished() {
    return this._capability.promise;
  }
  finish() {
    this._capability.resolve();
  }
  terminate() {
    this.terminated = !0;
  }
  ensureNotTerminated() {
    if (this.terminated)
      throw new Error("Worker task was terminated");
  }
}
const k1 = class k1 {
  static setup(e, n) {
    let i = !1;
    e.on("test", (s) => {
      i || (i = !0, e.send("test", s instanceof Uint8Array));
    }), e.on("configure", (s) => {
      _d(s.verbosity);
    }), e.on("GetDocRequest", (s) => this.createDocumentHandler(s, n));
  }
  static createDocumentHandler(e, n) {
    let i, s = !1, a = null;
    const r = /* @__PURE__ */ new Set(), o = Ud(), {
      docId: c,
      apiVersion: l
    } = e, h = "5.3.31";
    if (l !== h)
      throw new Error(`The API version "${l}" does not match the Worker version "${h}".`);
    const f = (y, k) => `The \`${y}.prototype\` contains unexpected enumerable property "${k}", thus breaking e.g. \`for...in\` iteration of ${y}s.`;
    for (const y in {})
      throw new Error(f("Object", y));
    for (const y in [])
      throw new Error(f("Array", y));
    const u = c + "_worker";
    let d = new rf(u, c, n);
    function x() {
      if (s)
        throw new Error("Worker was terminated");
    }
    function g(y) {
      r.add(y);
    }
    function m(y) {
      y.finish(), r.delete(y);
    }
    async function p(y) {
      await i.ensureDoc("checkHeader"), await i.ensureDoc("parseStartXRef"), await i.ensureDoc("parse", [y]), await i.ensureDoc("checkFirstPage", [y]), await i.ensureDoc("checkLastPage", [y]);
      const k = await i.ensureDoc("isPureXfa");
      if (k) {
        const F = new gs("loadXfaResources");
        g(F), await i.ensureDoc("loadXfaResources", [d, F]), m(F);
      }
      const [S, C] = await Promise.all([i.ensureDoc("numPages"), i.ensureDoc("fingerprints")]), T = k ? await i.ensureDoc("htmlForXfa") : null;
      return {
        numPages: S,
        fingerprints: C,
        htmlForXfa: T
      };
    }
    async function b({
      data: y,
      password: k,
      disableAutoFetch: S,
      rangeChunkSize: C,
      length: T,
      docBaseUrl: F,
      enableXfa: R,
      evaluatorOptions: D
    }) {
      const M = {
        source: null,
        disableAutoFetch: S,
        docBaseUrl: F,
        docId: c,
        enableXfa: R,
        evaluatorOptions: D,
        handler: d,
        length: T,
        password: k,
        rangeChunkSize: C
      };
      if (y)
        return M.source = y, new sf(M);
      const _ = new Z6(d), K = _.getFullReader(), se = Promise.withResolvers();
      let H, W = [], le = 0;
      return K.headersReady.then(function() {
        if (K.isRangeSupported) {
          M.source = _, M.length = K.contentLength, M.disableAutoFetch || (M.disableAutoFetch = K.isStreamingSupported), H = new q6(M);
          for (const q of W)
            H.sendProgressiveData(q);
          W = [], se.resolve(H), a = null;
        }
      }).catch(function(q) {
        se.reject(q), a = null;
      }), new Promise(function(q, L) {
        const Fe = function({
          value: ve,
          done: Be
        }) {
          try {
            if (x(), Be) {
              if (!H) {
                const Ae = df(W);
                W = [], T && Ae.length !== T && I("reported HTTP length is different from actual"), M.source = Ae, H = new sf(M), se.resolve(H);
              }
              a = null;
              return;
            }
            le += ve.byteLength, K.isStreamingSupported || d.send("DocProgress", {
              loaded: le,
              total: Math.max(le, K.contentLength || 0)
            }), H ? H.sendProgressiveData(ve) : W.push(ve), K.read().then(Fe, L);
          } catch (Ae) {
            L(Ae);
          }
        };
        K.read().then(Fe, L);
      }).catch(function(q) {
        se.reject(q), a = null;
      }), a = (q) => {
        _.cancelAllRequests(q);
      }, se.promise;
    }
    function w(y) {
      function k(T) {
        x(), d.send("GetDoc", {
          pdfInfo: T
        });
      }
      function S(T) {
        if (x(), T instanceof w0) {
          const F = new gs(`PasswordException: response ${T.code}`);
          g(F), d.sendWithPromise("PasswordRequest", T).then(function({
            password: R
          }) {
            m(F), i.updatePassword(R), C();
          }).catch(function() {
            m(F), d.send("DocException", T);
          });
        } else
          d.send("DocException", En(T));
      }
      function C() {
        x(), p(!1).then(k, function(T) {
          if (x(), !(T instanceof ha)) {
            S(T);
            return;
          }
          i.requestLoadedStream().then(function() {
            x(), p(!0).then(k, S);
          });
        });
      }
      x(), b(y).then(function(T) {
        if (s)
          throw T.terminate(new Jt("Worker was terminated.")), new Error("Worker was terminated");
        i = T, i.requestLoadedStream(!0).then((F) => {
          d.send("DataLoaded", {
            length: F.bytes.byteLength
          });
        });
      }).then(C, S);
    }
    return d.on("GetPage", function(y) {
      return i.getPage(y.pageIndex).then(function(k) {
        return Promise.all([i.ensure(k, "rotate"), i.ensure(k, "ref"), i.ensure(k, "userUnit"), i.ensure(k, "view")]).then(function([S, C, T, F]) {
          return {
            rotate: S,
            ref: C,
            refStr: (C == null ? void 0 : C.toString()) ?? null,
            userUnit: T,
            view: F
          };
        });
      });
    }), d.on("GetPageIndex", function(y) {
      const k = he.get(y.num, y.gen);
      return i.ensureCatalog("getPageIndex", [k]);
    }), d.on("GetDestinations", function(y) {
      return i.ensureCatalog("destinations");
    }), d.on("GetDestination", function(y) {
      return i.ensureCatalog("getDestination", [y.id]);
    }), d.on("GetPageLabels", function(y) {
      return i.ensureCatalog("pageLabels");
    }), d.on("GetPageLayout", function(y) {
      return i.ensureCatalog("pageLayout");
    }), d.on("GetPageMode", function(y) {
      return i.ensureCatalog("pageMode");
    }), d.on("GetViewerPreferences", function(y) {
      return i.ensureCatalog("viewerPreferences");
    }), d.on("GetOpenAction", function(y) {
      return i.ensureCatalog("openAction");
    }), d.on("GetAttachments", function(y) {
      return i.ensureCatalog("attachments");
    }), d.on("GetDocJSActions", function(y) {
      return i.ensureCatalog("jsActions");
    }), d.on("GetPageJSActions", function({
      pageIndex: y
    }) {
      return i.getPage(y).then((k) => i.ensure(k, "jsActions"));
    }), d.on("GetOutline", function(y) {
      return i.ensureCatalog("documentOutline");
    }), d.on("GetOptionalContentConfig", function(y) {
      return i.ensureCatalog("optionalContentConfig");
    }), d.on("GetPermissions", function(y) {
      return i.ensureCatalog("permissions");
    }), d.on("GetMetadata", function(y) {
      return Promise.all([i.ensureDoc("documentInfo"), i.ensureCatalog("metadata")]);
    }), d.on("GetMarkInfo", function(y) {
      return i.ensureCatalog("markInfo");
    }), d.on("GetData", function(y) {
      return i.requestLoadedStream().then((k) => k.bytes);
    }), d.on("GetAnnotations", function({
      pageIndex: y,
      intent: k
    }) {
      return i.getPage(y).then(function(S) {
        const C = new gs(`GetAnnotations: page ${y}`);
        return g(C), S.getAnnotationsData(d, C, k).then((T) => (m(C), T), (T) => {
          throw m(C), T;
        });
      });
    }), d.on("GetFieldObjects", function(y) {
      return i.ensureDoc("fieldObjects").then((k) => (k == null ? void 0 : k.allFields) || null);
    }), d.on("HasJSActions", function(y) {
      return i.ensureDoc("hasJSActions");
    }), d.on("GetCalculationOrderIds", function(y) {
      return i.ensureDoc("calculationOrderIds");
    }), d.on("SaveDocument", async function({
      isPureXfa: y,
      numPages: k,
      annotationStorage: S,
      filename: C
    }) {
      const T = [i.requestLoadedStream(), i.ensureCatalog("acroForm"), i.ensureCatalog("acroFormRef"), i.ensureDoc("startXRef"), i.ensureDoc("xref"), i.ensureDoc("linearization"), i.ensureCatalog("structTreeRoot")], F = new kn(), R = [], D = y ? null : pf(S), [M, _, K, se, H, W, le] = await Promise.all(T), q = H.trailer.getRaw("Root") || null;
      let L;
      if (D) {
        le ? await le.canUpdateStructTree({
          pdfManager: i,
          newAnnotationsByPage: D
        }) && (L = le) : await R0.canCreateStructureTree({
          catalogRef: q,
          pdfManager: i,
          newAnnotationsByPage: D
        }) && (L = null);
        const P = Yi.generateImages(S.values(), H, i.evaluatorOptions.isOffscreenCanvasSupported), G = L === void 0 ? R : [];
        for (const [z, ae] of D)
          G.push(i.getPage(z).then((ue) => {
            const oe = new gs(`Save (editor): page ${z}`);
            return g(oe), ue.saveNewAnnotations(d, oe, ae, P, F).finally(function() {
              m(oe);
            });
          }));
        L === null ? R.push(Promise.all(G).then(async () => {
          await R0.createStructureTree({
            newAnnotationsByPage: D,
            xref: H,
            catalogRef: q,
            pdfManager: i,
            changes: F
          });
        })) : L && R.push(Promise.all(G).then(async () => {
          await L.updateStructureTree({
            newAnnotationsByPage: D,
            pdfManager: i,
            changes: F
          });
        }));
      }
      if (y)
        R.push(i.ensureDoc("serializeXfaData", [S]));
      else
        for (let P = 0; P < k; P++)
          R.push(i.getPage(P).then(function(G) {
            const z = new gs(`Save: page ${P}`);
            return g(z), G.save(d, z, S, F).finally(function() {
              m(z);
            });
          }));
      const Fe = await Promise.all(R);
      let ve = null;
      if (y) {
        if (ve = Fe[0], !ve)
          return M.bytes;
      } else if (F.size === 0)
        return M.bytes;
      const Be = K && _ instanceof E && F.values().some((P) => P.needAppearances), Ae = _ instanceof E && _.get("XFA") || null;
      let Ve = null, pe = !1;
      if (Array.isArray(Ae)) {
        for (let P = 0, G = Ae.length; P < G; P += 2)
          Ae[P] === "datasets" && (Ve = Ae[P + 1], pe = !0);
        Ve === null && (Ve = H.getNewTemporaryRef());
      } else Ae && I("Unsupported XFA type.");
      let B = /* @__PURE__ */ Object.create(null);
      if (H.trailer) {
        const P = /* @__PURE__ */ new Map(), G = H.trailer.get("Info") || null;
        if (G instanceof E)
          for (const [z, ae] of G)
            typeof ae == "string" && P.set(z, Ze(ae));
        B = {
          rootRef: q,
          encryptRef: H.trailer.getRaw("Encrypt") || null,
          newRef: H.getNewTemporaryRef(),
          infoRef: H.trailer.getRaw("Info") || null,
          infoMap: P,
          fileIds: H.trailer.get("ID") || null,
          startXRef: W ? se : H.lastXRefStreamPos ?? se,
          filename: C
        };
      }
      return Y6({
        originalData: M.bytes,
        xrefInfo: B,
        changes: F,
        xref: H,
        hasXfa: !!Ae,
        xfaDatasetsRef: Ve,
        hasXfaDatasetsEntry: pe,
        needAppearances: Be,
        acroFormRef: K,
        acroForm: _,
        xfaData: ve,
        useXrefStream: ff(H.topDict, "XRef")
      }).finally(() => {
        H.resetNewTemporaryRef();
      });
    }), d.on("GetOperatorList", function(y, k) {
      const S = y.pageIndex;
      i.getPage(S).then(function(C) {
        const T = new gs(`GetOperatorList: page ${S}`);
        g(T);
        const F = o >= b0.INFOS ? Date.now() : 0;
        C.getOperatorList({
          handler: d,
          sink: k,
          task: T,
          intent: y.intent,
          cacheKey: y.cacheKey,
          annotationStorage: y.annotationStorage,
          modifiedIds: y.modifiedIds
        }).then(function(R) {
          m(T), F && Ge(`page=${S + 1} - getOperatorList: time=${Date.now() - F}ms, len=${R.length}`), k.close();
        }, function(R) {
          m(T), !T.terminated && k.error(R);
        });
      });
    }), d.on("GetTextContent", function(y, k) {
      const {
        pageIndex: S,
        includeMarkedContent: C,
        disableNormalization: T
      } = y;
      i.getPage(S).then(function(F) {
        const R = new gs("GetTextContent: page " + S);
        g(R);
        const D = o >= b0.INFOS ? Date.now() : 0;
        F.extractTextContent({
          handler: d,
          task: R,
          sink: k,
          includeMarkedContent: C,
          disableNormalization: T
        }).then(function() {
          m(R), D && Ge(`page=${S + 1} - getTextContent: time=${Date.now() - D}ms`), k.close();
        }, function(M) {
          m(R), !R.terminated && k.error(M);
        });
      });
    }), d.on("GetStructTree", function(y) {
      return i.getPage(y.pageIndex).then((k) => i.ensure(k, "getStructTree"));
    }), d.on("FontFallback", function(y) {
      return i.fontFallback(y.id, d);
    }), d.on("Cleanup", function(y) {
      return i.cleanup(!0);
    }), d.on("Terminate", function(y) {
      s = !0;
      const k = [];
      if (i) {
        i.terminate(new Jt("Worker was terminated."));
        const S = i.cleanup();
        k.push(S), i = null;
      } else
        i1();
      a == null || a(new Jt("Worker was terminated."));
      for (const S of r)
        k.push(S.finished), S.terminate();
      return Promise.all(k).then(function() {
        d.destroy(), d = null;
      });
    }), d.on("Ready", function(y) {
      w(e), e = null;
    }), u;
  }
  static initializeFromPort(e) {
    const n = new rf("worker", "main", e);
    this.setup(n, e), n.send("ready", null);
  }
};
typeof window > "u" && !Nd && typeof self < "u" && typeof self.postMessage == "function" && "onmessage" in self && k1.initializeFromPort(self);
let _l = k1;
globalThis.pdfjsWorker = {
  WorkerMessageHandler: _l
};
Promise.withResolvers ?? (Promise.withResolvers = function() {
  let t, e;
  return { promise: new Promise((i, s) => {
    t = i, e = s;
  }), resolve: t, reject: e };
});
export {
  _l as WorkerMessageHandler
};
